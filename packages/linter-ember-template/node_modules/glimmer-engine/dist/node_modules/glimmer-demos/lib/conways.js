"use strict";
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
// // Bare version
// const app = `{{#each world.cells key="key" as |cell|}}<organism-cell class="{{if cell.isAlive "alive" ""}}" style="top: {{cell.y}}0px; left: {{cell.x}}0px"/>{{/each}}`;
// Component version
var app = "<div class=\"world\">{{#each world.cells key=\"key\" as |cell|}}<organism-cell-component cell={{cell}} />{{/each}}</div>";
var env = new test_helpers_1.TestEnvironment();
env.registerEmberishGlimmerComponent('organism-cell-component', null, "<organism-cell class=\"{{if @cell.isAlive \"alive\" \"\"}}\" style=\"top: {{@cell.y}}px; left: {{@cell.x}}px\" />");
function getWorld() {
    /* tslint:disable: no-require-imports */
    return require("worlds/one").default;
    /* tslint:enable: no-require-imports */
}
var res;
var self;
function startGlimmer() {
    var world = getWorld();
    env.begin();
    self = new object_reference_1.UpdatableReference({ world: world });
    res = env.compile(app).render(self, document.body, new test_helpers_1.TestDynamicScope());
    env.commit();
    requestAnimationFrame(rerenderGlimmer);
}
exports.startGlimmer = startGlimmer;
function rerenderGlimmer() {
    var world = getWorld();
    world.advance();
    self.update({ world: world });
    res.rerender();
    requestAnimationFrame(rerenderGlimmer);
}
function startDOM() {
    var world = getWorld();
    var state = {
        isAlive: [],
        elements: []
    };
    var body = document.body;
    var div = document.createElement("div");
    div.classList.add("world");
    world.forEach(function (cell, i) {
        state.isAlive[i] = cell.isAlive;
        var el = state.elements[i] = document.createElement("organism-cell");
        el.style.top = cell.y + "px";
        el.style.left = cell.x + "px";
        if (cell.isAlive) {
            el.classList.add("alive");
        }
        div.appendChild(el);
    });
    body.appendChild(div);
    function updateCell(cell, i) {
        var oldAlive = state.isAlive[i];
        var newAlive = cell.isAlive;
        var el = state.elements[i];
        if (oldAlive !== newAlive) {
            state.isAlive[i] = newAlive;
            newAlive ? el.classList.add("alive") : el.classList.remove("alive");
        }
    }
    function rerenderDOM() {
        world.advance();
        world.forEach(updateCell);
        requestAnimationFrame(rerenderDOM);
    }
    requestAnimationFrame(rerenderDOM);
}
exports.startDOM = startDOM;
window['startDOM'] = startDOM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ud2F5cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItZGVtb3MvbGliL2NvbndheXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNEQUEwRTtBQUMxRSw4REFBK0Q7QUFFL0Qsa0JBQWtCO0FBQ2xCLDJLQUEySztBQUUzSyxvQkFBb0I7QUFDcEIsSUFBTSxHQUFHLEdBQUcsMEhBQXNILENBQUM7QUFFbkksSUFBSSxHQUFHLEdBQUcsSUFBSSw4QkFBZSxFQUFFLENBQUM7QUFFaEMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLHlCQUF5QixFQUFFLElBQUksRUFDbEUsbUhBQTJHLENBQUMsQ0FBQztBQUUvRztJQUNFLHdDQUF3QztJQUN4QyxNQUFNLENBQVEsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUM1Qyx1Q0FBdUM7QUFDekMsQ0FBQztBQUVELElBQUksR0FBRyxDQUFDO0FBQ1IsSUFBSSxJQUFJLENBQUM7QUFDVDtJQUNFLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFDO0lBQ3ZCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNaLElBQUksR0FBRyxJQUFJLHFDQUFrQixDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLCtCQUFnQixFQUFFLENBQUMsQ0FBQztJQUMzRSxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFYixxQkFBcUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBUkQsb0NBUUM7QUFFRDtJQUNFLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFDO0lBQ3ZCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUMsS0FBSyxPQUFBLEVBQUMsQ0FBQyxDQUFDO0lBQ3JCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNmLHFCQUFxQixDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFjRDtJQUNFLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFDO0lBQ3ZCLElBQUksS0FBSyxHQUdMO1FBQ0YsT0FBTyxFQUFFLEVBQUU7UUFDWCxRQUFRLEVBQUUsRUFBRTtLQUNiLENBQUM7SUFDRixJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ3pCLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNoQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckUsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDN0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDOUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDakIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztRQUN6QixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDNUIsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMxQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQztZQUM1QixRQUFRLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEUsQ0FBQztJQUNILENBQUM7SUFDRDtRQUNFLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFCLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBdENELDRCQXNDQztBQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0RW52aXJvbm1lbnQsIFRlc3REeW5hbWljU2NvcGUgfSBmcm9tICdAZ2xpbW1lci90ZXN0LWhlbHBlcnMnO1xuaW1wb3J0IHsgVXBkYXRhYmxlUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvb2JqZWN0LXJlZmVyZW5jZSc7XG5cbi8vIC8vIEJhcmUgdmVyc2lvblxuLy8gY29uc3QgYXBwID0gYHt7I2VhY2ggd29ybGQuY2VsbHMga2V5PVwia2V5XCIgYXMgfGNlbGx8fX08b3JnYW5pc20tY2VsbCBjbGFzcz1cInt7aWYgY2VsbC5pc0FsaXZlIFwiYWxpdmVcIiBcIlwifX1cIiBzdHlsZT1cInRvcDoge3tjZWxsLnl9fTBweDsgbGVmdDoge3tjZWxsLnh9fTBweFwiLz57ey9lYWNofX1gO1xuXG4vLyBDb21wb25lbnQgdmVyc2lvblxuY29uc3QgYXBwID0gYDxkaXYgY2xhc3M9XCJ3b3JsZFwiPnt7I2VhY2ggd29ybGQuY2VsbHMga2V5PVwia2V5XCIgYXMgfGNlbGx8fX08b3JnYW5pc20tY2VsbC1jb21wb25lbnQgY2VsbD17e2NlbGx9fSAvPnt7L2VhY2h9fTwvZGl2PmA7XG5cbmxldCBlbnYgPSBuZXcgVGVzdEVudmlyb25tZW50KCk7XG5cbmVudi5yZWdpc3RlckVtYmVyaXNoR2xpbW1lckNvbXBvbmVudCgnb3JnYW5pc20tY2VsbC1jb21wb25lbnQnLCBudWxsLFxuICBgPG9yZ2FuaXNtLWNlbGwgY2xhc3M9XCJ7e2lmIEBjZWxsLmlzQWxpdmUgXCJhbGl2ZVwiIFwiXCJ9fVwiIHN0eWxlPVwidG9wOiB7e0BjZWxsLnl9fXB4OyBsZWZ0OiB7e0BjZWxsLnh9fXB4XCIgLz5gKTtcblxuZnVuY3Rpb24gZ2V0V29ybGQoKTogV29ybGQge1xuICAvKiB0c2xpbnQ6ZGlzYWJsZTogbm8tcmVxdWlyZS1pbXBvcnRzICovXG4gIHJldHVybiA8V29ybGQ+cmVxdWlyZShcIndvcmxkcy9vbmVcIikuZGVmYXVsdDtcbiAgLyogdHNsaW50OmVuYWJsZTogbm8tcmVxdWlyZS1pbXBvcnRzICovXG59XG5cbmxldCByZXM7XG5sZXQgc2VsZjtcbmV4cG9ydCBmdW5jdGlvbiBzdGFydEdsaW1tZXIoKSB7XG4gIGxldCB3b3JsZCA9IGdldFdvcmxkKCk7XG4gIGVudi5iZWdpbigpO1xuICBzZWxmID0gbmV3IFVwZGF0YWJsZVJlZmVyZW5jZSh7IHdvcmxkIH0pO1xuICByZXMgPSBlbnYuY29tcGlsZShhcHApLnJlbmRlcihzZWxmLCBkb2N1bWVudC5ib2R5LCBuZXcgVGVzdER5bmFtaWNTY29wZSgpKTtcbiAgZW52LmNvbW1pdCgpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXJlbmRlckdsaW1tZXIpO1xufVxuXG5mdW5jdGlvbiByZXJlbmRlckdsaW1tZXIoKSB7XG4gIGxldCB3b3JsZCA9IGdldFdvcmxkKCk7XG4gIHdvcmxkLmFkdmFuY2UoKTtcbiAgc2VsZi51cGRhdGUoe3dvcmxkfSk7XG4gIHJlcy5yZXJlbmRlcigpO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVyZW5kZXJHbGltbWVyKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDZWxsIHtcbiAgaXNBbGl2ZTogYm9vbGVhbjtcbiAgeDogbnVtYmVyO1xuICB5OiBudW1iZXI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFdvcmxkIHtcbiAgYWR2YW5jZSgpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoY2VsbDogQ2VsbCwgaTogbnVtYmVyKSA9PiB2b2lkKTogdm9pZDtcbn1cblxuZGVjbGFyZSBmdW5jdGlvbiByZXF1aXJlKGlkOiBzdHJpbmcpOiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydERPTSgpIHtcbiAgbGV0IHdvcmxkID0gZ2V0V29ybGQoKTtcbiAgbGV0IHN0YXRlOiB7XG4gICAgaXNBbGl2ZTogYm9vbGVhbltdO1xuICAgIGVsZW1lbnRzOiBIVE1MRWxlbWVudFtdO1xuICB9ID0ge1xuICAgIGlzQWxpdmU6IFtdLFxuICAgIGVsZW1lbnRzOiBbXVxuICB9O1xuICBsZXQgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBkaXYuY2xhc3NMaXN0LmFkZChcIndvcmxkXCIpO1xuICB3b3JsZC5mb3JFYWNoKChjZWxsLCBpKSA9PiB7XG4gICAgc3RhdGUuaXNBbGl2ZVtpXSA9IGNlbGwuaXNBbGl2ZTtcbiAgICBsZXQgZWwgPSBzdGF0ZS5lbGVtZW50c1tpXSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcmdhbmlzbS1jZWxsXCIpO1xuICAgIGVsLnN0eWxlLnRvcCA9IGNlbGwueSArIFwicHhcIjtcbiAgICBlbC5zdHlsZS5sZWZ0ID0gY2VsbC54ICsgXCJweFwiO1xuICAgIGlmIChjZWxsLmlzQWxpdmUpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoXCJhbGl2ZVwiKTtcbiAgICB9XG4gICAgZGl2LmFwcGVuZENoaWxkKGVsKTtcbiAgfSk7XG4gIGJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgZnVuY3Rpb24gdXBkYXRlQ2VsbChjZWxsLCBpKSB7XG4gICAgbGV0IG9sZEFsaXZlID0gc3RhdGUuaXNBbGl2ZVtpXTtcbiAgICBsZXQgbmV3QWxpdmUgPSBjZWxsLmlzQWxpdmU7XG4gICAgbGV0IGVsID0gc3RhdGUuZWxlbWVudHNbaV07XG4gICAgaWYgKG9sZEFsaXZlICE9PSBuZXdBbGl2ZSkge1xuICAgICAgc3RhdGUuaXNBbGl2ZVtpXSA9IG5ld0FsaXZlO1xuICAgICAgbmV3QWxpdmUgPyBlbC5jbGFzc0xpc3QuYWRkKFwiYWxpdmVcIikgOiBlbC5jbGFzc0xpc3QucmVtb3ZlKFwiYWxpdmVcIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlcmVuZGVyRE9NKCkge1xuICAgIHdvcmxkLmFkdmFuY2UoKTtcbiAgICB3b3JsZC5mb3JFYWNoKHVwZGF0ZUNlbGwpO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZXJlbmRlckRPTSk7XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlcmVuZGVyRE9NKTtcbn1cblxud2luZG93WydzdGFydERPTSddID0gc3RhcnRET007XG4iXX0=