"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var object_reference_1 = require("@glimmer/object-reference");
var test_helpers_1 = require("@glimmer/test-helpers");
var ema_1 = require("./ema");
var Component = (function () {
    function Component(attrs) {
        this.element = null;
        this.attrs = attrs;
    }
    Component.create = function (_a) {
        var attrs = _a.attrs;
        return new this(attrs);
    };
    Component.prototype.set = function (key, value) {
        this[key] = value;
    };
    Component.prototype.didInitAttrs = function () { };
    Component.prototype.didUpdateAttrs = function () { };
    Component.prototype.didReceiveAttrs = function () { };
    Component.prototype.willInsertElement = function () { };
    Component.prototype.willUpdate = function () { };
    Component.prototype.willRender = function () { };
    Component.prototype.didInsertElement = function () { };
    Component.prototype.didUpdate = function () { };
    Component.prototype.didRender = function () { };
    return Component;
}());
var ServerUptime = (function (_super) {
    __extends(ServerUptime, _super);
    function ServerUptime() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ServerUptime.prototype, "upDays", {
        get: function () {
            return this.attrs.days.reduce(function (upDays, day) {
                return upDays += (day.up ? 1 : 0);
            }, 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServerUptime.prototype, "streak", {
        get: function () {
            var max = this.attrs.days.reduce(function (_a, day) {
                var max = _a[0], streak = _a[1];
                if (day.up && streak + 1 > max) {
                    return [streak + 1, streak + 1];
                }
                else if (day.up) {
                    return [max, streak + 1];
                }
                else {
                    return [max, 0];
                }
            }, [0, 0])[0];
            return max;
        },
        enumerable: true,
        configurable: true
    });
    return ServerUptime;
}(Component));
var UptimeDay = (function (_super) {
    __extends(UptimeDay, _super);
    function UptimeDay() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UptimeDay.prototype, "color", {
        get: function () {
            return this.attrs.day.up ? '#8cc665' : '#ccc';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UptimeDay.prototype, "memo", {
        get: function () {
            return this.attrs.day.up ? 'Servers operational!' : 'Red alert!';
        },
        enumerable: true,
        configurable: true
    });
    return UptimeDay;
}(Component));
var env = new test_helpers_1.TestEnvironment();
env.registerEmberishGlimmerComponent('uptime-day', UptimeDay, "\n  <div class=\"uptime-day\">\n    <span class=\"uptime-day-status\" style=\"background-color: {{color}}\" />\n    <span class=\"hover\">{{@day.number}}: {{memo}}</span>\n  </div>\n");
env.registerEmberishGlimmerComponent('server-uptime', ServerUptime, "\n  <div class=\"server-uptime\">\n    <h1>{{@name}}</h1>\n    <h2>{{upDays}} Days Up</h2>\n    <h2>Biggest Streak: {{streak}}</h2>\n\n    <div class=\"days\">\n      {{#each @days key=\"number\" as |day|}}\n        <uptime-day @day={{day}} />\n      {{/each}}\n    </div>\n  </div>\n");
var app = env.compile("\n  {{#if fps}}<div id=\"fps\">{{fps}} FPS</div>{{/if}}\n\n  {{#each servers key=\"name\" as |server|}}\n    <server-uptime @name={{server.name}} @days={{server.days}} />\n  {{/each}}\n");
var serversRef;
var result;
var clear;
var fps;
var playing = false;
function init() {
    var output = document.getElementById('output');
    console.time('initial render');
    env.begin();
    serversRef = new object_reference_1.UpdatableReference({ servers: generateServers(), fps: null });
    result = app.render(serversRef, output, new test_helpers_1.TestDynamicScope());
    console.log(env['createdComponents'].length);
    env.commit();
    console.timeEnd('initial render');
}
exports.init = init;
function toggle() {
    if (playing) {
        window['playpause'].innerHTML = "Play";
        cancelAnimationFrame(clear);
        clear = null;
        fps = null;
        playing = false;
    }
    else {
        window['playpause'].innerHTML = "Pause";
        start();
        playing = true;
    }
}
exports.toggle = toggle;
function start() {
    playing = true;
    var lastFrame = null;
    var fpsMeter = new ema_1.default(2 / 121);
    var callback = function () {
        var thisFrame = window.performance.now();
        if (lastFrame) {
            fps = Math.round(fpsMeter.push(1000 / (thisFrame - lastFrame)));
        }
        onFrame();
        result.rerender();
        clear = requestAnimationFrame(callback);
        lastFrame = thisFrame;
    };
    callback();
    lastFrame = null;
}
function onFrame() {
    serversRef.update({ servers: generateServers(), fps: fps });
}
function generateServer(name) {
    var days = [];
    for (var i = 0; i <= 364; i++) {
        var up = Math.random() > 0.2;
        days.push({ number: i, up: up });
    }
    return { name: name, days: days };
}
function generateServers() {
    return [
        generateServer("Stefan's Server"),
        generateServer("Godfrey's Server"),
        generateServer("Yehuda's Server")
    ];
}
//# sourceMappingURL=data:application/json;base64,