"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var object_reference_1 = require("@glimmer/object-reference");
var test_helpers_1 = require("@glimmer/test-helpers");
var ema_1 = require("./ema");
var Component = (function () {
    function Component(attrs) {
        this.element = null;
        this.attrs = attrs;
    }
    Component.create = function (_a) {
        var attrs = _a.attrs;
        return new this(attrs);
    };
    Component.prototype.set = function (key, value) {
        this[key] = value;
    };
    Component.prototype.didInitAttrs = function () { };
    Component.prototype.didUpdateAttrs = function () { };
    Component.prototype.didReceiveAttrs = function () { };
    Component.prototype.willInsertElement = function () { };
    Component.prototype.willUpdate = function () { };
    Component.prototype.willRender = function () { };
    Component.prototype.didInsertElement = function () { };
    Component.prototype.didUpdate = function () { };
    Component.prototype.didRender = function () { };
    return Component;
}());
var DbmonDatabase = (function (_super) {
    __extends(DbmonDatabase, _super);
    function DbmonDatabase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DbmonDatabase.prototype, "queries", {
        get: function () {
            var samples = this.attrs.db.samples;
            return samples[samples.length - 1].queries;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DbmonDatabase.prototype, "topFiveQueries", {
        get: function () {
            var queries = this.queries;
            var topFiveQueries = queries.slice(0, 5);
            while (topFiveQueries.length < 5) {
                topFiveQueries.push({ query: "" });
            }
            return topFiveQueries.map(function (query, index) {
                return {
                    key: index + '',
                    query: query.query,
                    elapsed: query.elapsed ? formatElapsed(query.elapsed) : '',
                    className: elapsedClass(query.elapsed)
                };
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DbmonDatabase.prototype, "countClassName", {
        get: function () {
            var queries = this.queries;
            var countClassName = "label";
            if (queries.length >= 20) {
                countClassName += " label-important";
            }
            else if (queries.length >= 10) {
                countClassName += " label-warning";
            }
            else {
                countClassName += " label-success";
            }
            return countClassName;
        },
        enumerable: true,
        configurable: true
    });
    return DbmonDatabase;
}(Component));
var env = new test_helpers_1.TestEnvironment();
env.registerEmberishGlimmerComponent('dbmon-database', DbmonDatabase, "\n <tr>\n  <td class=\"dbname\">\n  {{db.name}}\n  </td>\n  <td class=\"query-count\">\n    <span class=\"{{countClassName}}\">\n      {{queries.length}}\n    </span>\n  </td>\n  {{#each topFiveQueries key=\"key\" as |query|}}\n    <td class=\"Query {{query.className}}\">\n      {{query.elapsed}}\n      <div class=\"popover left\">\n        <div class=\"popover-content\">{{query.query}}</div>\n        <div class=\"arrow\"></div>\n      </div>\n    </td>\n  {{/each}}\n </tr>\n");
var app = env.compile("\n{{#if fps}}<div id=\"fps\">{{fps}} FPS</div>{{/if}}\n\n<table class=\"table table-striped latest-data\">\n  <tbody>\n    {{#each model.databaseArray key='name' as |db|}}\n      {{dbmon-database db=db}}\n    {{/each}}\n  </tbody>\n</table>\n");
var serversRef;
var result;
var clear;
var fps;
var playing = false;
function init() {
    var output = document.getElementById('output');
    var model = generateData();
    console.time('initial render');
    env.begin();
    serversRef = new object_reference_1.UpdatableReference({ model: model });
    result = app.render(serversRef, output, new test_helpers_1.TestDynamicScope());
    console.log(env['createdComponents'].length);
    env.commit();
    console.timeEnd('initial render');
}
exports.init = init;
function toggle() {
    if (playing) {
        window['playpause'].innerHTML = "Play";
        cancelAnimationFrame(clear);
        clear = null;
        fps = null;
        playing = false;
    }
    else {
        window['playpause'].innerHTML = "Pause";
        start();
        playing = true;
    }
}
exports.toggle = toggle;
function start() {
    playing = true;
    env.begin();
    var lastFrame = null;
    var fpsMeter = new ema_1.default(2 / 121);
    var callback = function () {
        var thisFrame = window.performance.now();
        onFrame();
        if (lastFrame) {
            fps = Math.round(fpsMeter.push(1000 / (thisFrame - lastFrame)));
        }
        result.rerender();
        clear = requestAnimationFrame(callback);
        lastFrame = thisFrame;
    };
    callback();
    lastFrame = null;
}
function onFrame() {
    var model = generateData(serversRef.databaseArray);
    serversRef.update({ model: model, fps: fps });
}
var ROWS = 100;
function getData() {
    // generate some dummy data
    var data = {
        start_at: new Date().getTime() / 1000,
        databases: {}
    };
    for (var i = 1; i <= ROWS; i++) {
        data.databases["cluster" + i] = {
            queries: []
        };
        data.databases["cluster" + i + "slave"] = {
            queries: []
        };
    }
    Object.keys(data.databases).forEach(function (dbname) {
        var info = data.databases[dbname];
        var r = Math.floor((Math.random() * 10) + 1);
        for (var i = 0; i < r; i++) {
            var q = {
                canvas_action: null,
                canvas_context_id: null,
                canvas_controller: null,
                canvas_hostname: null,
                canvas_job_tag: null,
                canvas_pid: null,
                elapsed: Math.random() * 15,
                query: "SELECT blah FROM something",
                waiting: Math.random() < 0.5
            };
            if (Math.random() < 0.2) {
                q.query = "<IDLE> in transaction";
            }
            if (Math.random() < 0.1) {
                q.query = "vacuum";
            }
            info.queries.push(q);
        }
        info.queries = info.queries.sort(function (a, b) {
            return b.elapsed - a.elapsed;
        });
    });
    return data;
}
function generateData(oldData) {
    if (oldData === void 0) { oldData = {}; }
    var rawData = getData();
    var databases = (oldData && oldData.databases) || {};
    var databaseArray = [];
    var data = { databases: databases, databaseArray: databaseArray };
    Object.keys(rawData.databases).forEach(function (dbname) {
        var sampleInfo = rawData.databases[dbname];
        if (!databases[dbname]) {
            databases[dbname] = {
                name: dbname,
                samples: []
            };
        }
        var samples = databases[dbname].samples;
        samples.push({
            time: rawData.start_at,
            queries: sampleInfo.queries
        });
        if (samples.length > 5) {
            samples.splice(0, samples.length - 5);
        }
        databaseArray.push(databases[dbname]);
    });
    return data;
}
// utils
function elapsedClass(elapsed) {
    if (elapsed >= 10.0) {
        return "elapsed warn_long";
    }
    else if (elapsed >= 1.0) {
        return "elapsed warn";
    }
    else {
        return "elapsed short";
    }
}
function lpad(str, padding, toLength) {
    return padding.repeat((toLength - str.length) / padding.length).concat(str);
}
function formatElapsed(value) {
    var str = parseFloat(value).toFixed(2);
    if (value > 60) {
        var minutes = Math.floor(value / 60);
        var comps = (value % 60).toFixed(2).split('.');
        var seconds = lpad(comps[0], '0', 2);
        var ms = comps[1];
        str = minutes + ":" + seconds + "." + ms;
    }
    return str;
}
//# sourceMappingURL=data:application/json;base64,