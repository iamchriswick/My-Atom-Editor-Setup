"use strict";
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
var compiler_1 = require("@glimmer/compiler");
var runtime_1 = require("@glimmer/runtime");
var DEFAULT_DATA = "{\n  \"contacts\": [\n    {\n      \"id\": 1,\n      \"name\": {\n        \"first\": \"John\",\n        \"last\": \"Appleseed\"\n      },\n      \"org\": \"Apple Inc.\",\n      \"email\": \"appleseed@apple.com\",\n      \"address\": {\n        \"street\": \"1 Infinite Loop\",\n        \"city\": \"Cupertino\",\n        \"state\": \"CA\",\n        \"zip\": 95014,\n        \"country\": \"USA\"\n      },\n      \"phones\": [\n        {\n          \"type\": \"Office\",\n          \"number\": \"1 (800) MYAPPLE\"\n        },\n        {\n          \"type\": \"Home\",\n          \"number\": \"(555) 123 4567\"\n        },\n        {\n          \"type\": \"Mobile\",\n          \"number\": \"(555) 555 5555\"\n        }\n      ]\n    }\n  ]\n}";
var DEFAULT_TEMPLATE = "<div class=\"contacts\">\n  {{#each contacts key=\"id\" as |contact|}}\n    <h-card @person={{contact}} />\n    <hr />\n  {{/each}}\n</div>";
var DEFAULT_LAYOUT = "<div class=\"vcard\">\n  {{#if @person.url}}\n    <div>\n      <a class=\"url fn n\" href=\"{{@person.url}}\">\n      {{#with @person.name as |name|}}\n        <span class=\"given-name\">{{name.first}}</span>\n        {{#if name.middle}}\n        <span class=\"additional-name\">{{name.middle}}</span>\n        {{/if}}\n        <span class=\"family-name\">{{name.last}}</span>\n      {{/with}}\n      </a>\n    </div>\n  {{else}}\n    <div>\n      {{#with @person.name as |name|}}\n        <span class=\"given-name\">{{name.first}}</span>\n        {{#if name.additional}}\n        <span class=\"additional-name\">{{name.middle}}</span>\n        {{/if}}\n        <span class=\"family-name\">{{name.last}}</span>\n      {{/with}}\n    </div>\n  {{/if}}\n  {{#if @person.org}}\n    <div class=\"org\">{{@person.org}}</div>\n  {{/if}}\n  {{#if @person.email}}\n    <div>\n      <a class=\"email\" href=\"mailto:{{@person.email}}\">\n        {{@person.email}}\n      </a>\n    </div>\n  {{/if}}\n  {{#with @person.address as |address|}}\n    <div class=\"adr\">\n      <span class=\"street-address\">{{address.street}}</span>\n      <br>\n      <span class=\"locality\">{{address.city}}</span>,\n      <span class=\"region\">{{address.state}}</span>\n      <span class=\"postal-code\">{{address.zip}}</span>\n      <br>\n      <span class=\"country-name\">{{address.country}}</span>\n    </div>\n  {{/with}}\n  {{#each @person.phones key=\"type\" as |phone|}}\n    <div class=\"tel\">\n      <span class=\"type\">{{phone.type}}</span>:\n      <span class=\"value\">{{phone.number}}</span>\n    </div>\n  {{/each}}\n</div>";
var UI = "<div id=\"inputs\" class=\"{{if rendered '' 'full-width'}}\">\n  <h1>\n    <span style=\"font-size: 48px; color: rgb(238, 89, 57);\">Glimmer</span>\n    <span style=\"font-size: 40px; color: rgb(161, 63, 43);\">Visualizer</span>\n  </h1>\n\n  <div class=\"input-group\">\n    <label for=\"data\">Data</label>\n    <textarea id=\"data\" wrap=\"off\">{{data}}</textarea>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"top-level-template\">Top-Level Template</label>\n    <textarea id=\"top-level-template\" wrap=\"off\" readOnly={{if rendered true false}}>{{template.source}}</textarea>\n  </div>\n\n  <div class=\"input-group\">\n    <label for=\"component-layout\">&lt;h-card&gt; Layout</label>\n    <textarea id=\"component-layout\" wrap=\"off\" readOnly={{if rendered true false}}>{{layout.source}}</textarea>\n  </div>\n\n  <button id=\"btn-render\" class=\"primary\" style=\"display: {{if rendered 'none' 'block'}}\">Render</button>\n  <button id=\"btn-update\" class=\"primary\" style=\"display: {{if rendered 'block' 'none'}}\">Update</button>\n  <button id=\"btn-edit\" style=\"display: {{if rendered 'block' 'none'}}\">Edit</button>\n  <button id=\"btn-reset\">Reset</button>\n</div>\n{{#if rendered}}\n  <div id=\"output\">\n    <div id=\"wire-format\">\n      <div class=\"header\">Wire Format (Top-Level)</div>\n      <wire-format-inspector class=\"content\" @spec={{template.wireFormat}} />\n      <div class=\"header secondary\">Wire Format (&lt;h-card&gt;)</div>\n      <wire-format-inspector class=\"content\" @spec={{layout.wireFormat}} />\n    </div>\n    <div id=\"initial\">\n      <div class=\"header\">Opcodes (Top-Level)</div>\n      <div class=\"content\">\n        <h3>Opcodes</h3>\n        <ol>\n          {{#each template.opcodes key=\"guid\" as |opcode|}}\n            <opcode-inspector @opcode={{opcode}} />\n          {{/each}}\n        </ol>\n      </div>\n      <div class=\"header secondary\">Opcodes (&lt;h-card&gt;)</div>\n      <div class=\"content\">\n        <h3>Opcodes</h3>\n        <ol>\n          {{#each layout.opcodes key=\"guid\" as |opcode|}}\n            <opcode-inspector @opcode={{opcode}} />\n          {{/each}}\n        </ol>\n      </div>\n    </div>\n    <div id=\"updating\">\n      <div class=\"header\">Updating Opcodes</div>\n      <div class=\"content full-height\">\n        <h3>Opcodes</h3>\n        <ol>\n          {{#each updatingOpcodes key=\"guid\" as |opcode|}}\n            <opcode-inspector @opcode={{opcode}} />\n          {{/each}}\n        </ol>\n      </div>\n    </div>\n    <div id=\"dom\">\n      <div class=\"header\">DOM</div>\n      <div class=\"content rendered\">{{{html}}}</div>\n      <div class=\"header secondary\">HTML</div>\n      <pre class=\"content secondary source\">{{html}}</pre>\n    </div>\n  </div>\n{{/if}}";
function compile(str, env) {
    var spec = JSON.parse(compiler_1.precompile(str, {}));
    var factory = runtime_1.templateFactory(spec);
    return factory.create(env);
}
var $inputs, $data, $template, $layout, $render, $update, $edit, $reset;
var ui = {
    rendered: false,
    data: DEFAULT_DATA,
    template: {
        source: DEFAULT_TEMPLATE,
        wireFormat: null,
        opcodes: null
    },
    layout: {
        source: DEFAULT_LAYOUT,
        wireFormat: null,
        opcodes: null
    },
    updatingOpcodes: null,
    html: ""
};
function init() {
    renderUI();
    bindUI();
    wireUI();
}
exports.init = init;
var rerenderUI;
function renderUI() {
    var env = new test_helpers_1.TestEnvironment();
    env.registerHelper("json", function (_a) {
        var value = _a[0];
        return JSON.stringify(value);
    });
    env.registerEmberishGlimmerComponent("wire-format-inspector", null, "<div>\n  <h3>Statements</h3>\n  <ol>\n    {{#each @spec.statements key=\"@index\" as |statement|}}\n      <li><span class=\"pre\">{{json statement}}</span></li>\n    {{/each}}\n  </ol>\n  <hr />\n  {{#if @spec.locals}}\n    <h3>Locals</h3>\n    <ol>\n      {{#each @spec.locals key=\"@index\" as |local|}}\n        <li><span class=\"pre\">{{json local}}</span></li>\n      {{/each}}\n    </ol>\n    <hr />\n  {{/if}}\n  {{#if @spec.named}}\n    <h3>Named</h3>\n    <ol>\n      {{#each @spec.named key=\"@index\" as |name|}}\n        <li><span class=\"pre\">{{json name}}</span></li>\n      {{/each}}\n    </ol>\n    <hr />\n  {{/if}}\n  {{#if @spec.yields}}\n    <h3>Yields</h3>\n    <ol>\n      {{#each @spec.yields key=\"@index\" as |yield|}}\n        <li><span class=\"pre\">{{json yield}}</span></li>\n      {{/each}}\n    </ol>\n    <hr />\n  {{/if}}\n  {{#if @spec.blocks}}\n    <h3>Blocks</h3>\n    <ol>\n      {{#each @spec.blocks key=\"@index\" as |block|}}\n        <li>\n          <h3>Block</h3>\n          <wire-format-inspector @spec={{block}} />\n        </li>\n      {{/each}}\n    </ol>\n  {{/if}}\n</div>");
    env.registerHelper("pp-opcode", function (_a) {
        var opcode = _a[0];
        var output = opcode.type.toUpperCase();
        if (opcode.args || opcode.details) {
            output += "(";
            if (opcode.args && opcode.args.length) {
                output += opcode.args.join(", ");
            }
            if (opcode.details) {
                var keys = Object.keys(opcode.details);
                if (keys.length) {
                    if (opcode.args && opcode.args.length) {
                        output += ", ";
                    }
                    output += keys.map(function (key) { return key + "=" + opcode.details[key]; }).join(", ");
                    ;
                }
            }
            output += ")";
        }
        return output;
    });
    env.registerEmberishGlimmerComponent("opcode-inspector", null, "<li>\n  <span class=\"pre\">{{#if @opcode.deopted}}[DEOPT] <del>{{pp-opcode @opcode}}</del>{{else}}{{pp-opcode @opcode}}{{/if}}</span>\n  {{#if @opcode.children}}\n    <ol>\n      {{#each @opcode.children key=\"guid\" as |opcode|}}\n        <opcode-inspector @opcode={{opcode}} />\n      {{/each}}\n    </ol>\n  {{/if}}\n</li>");
    env.begin();
    var self = new object_reference_1.UpdatableReference(ui);
    var res = env.compile(UI).render(self, document.body, new test_helpers_1.TestDynamicScope());
    env.commit();
    rerenderUI = function () {
        self.update(ui);
        env.begin();
        res.rerender();
        env.commit();
    };
}
function bindUI() {
    $inputs = document.querySelectorAll("#inputs")[0];
    $data = document.querySelectorAll("#data")[0];
    $template = document.querySelectorAll("#top-level-template")[0];
    $layout = document.querySelectorAll("#component-layout")[0];
    $render = document.querySelectorAll("#btn-render")[0];
    $update = document.querySelectorAll("#btn-update")[0];
    $edit = document.querySelectorAll("#btn-edit")[0];
    $reset = document.querySelectorAll("#btn-reset")[0];
}
function wireUI() {
    $render.addEventListener("click", renderContent, false);
    $update.addEventListener("click", updateContent, false);
    $edit.addEventListener("click", editContent, false);
    $reset.addEventListener("click", resetContent, false);
    $data.addEventListener("input", storeContent);
    $template.addEventListener("input", storeContent);
    $layout.addEventListener("input", storeContent);
    initContent();
}
function initContent() {
    var _a = getInitialContent(), data = _a.data, template = _a.template, layout = _a.layout;
    $data.value = data;
    $template.value = template;
    $layout.value = layout;
}
var _updateContent = null;
function renderContent() {
    var data = JSON.parse($data.value);
    var env = new test_helpers_1.TestEnvironment();
    env.registerHelper('foo-bar', function () {
        return 'FOO BAR!!!';
    });
    env.registerEmberishGlimmerComponent("h-card", null, $layout.value);
    var app = env.compile($template.value);
    function compileLayout(component) {
        var definition = env.getComponentDefinition([component]);
        var manager = definition.manager;
        var instance = manager.create(env, definition, runtime_1.EvaluatedArgs.empty(), new test_helpers_1.TestDynamicScope(), null, false);
        var compiled = manager.layoutFor(definition, instance, env);
        return compiled.ops;
    }
    function eagerCompile(ops) {
        ops.toArray().forEach(function (op) {
            if (op.block) {
                eagerCompile(op.block.compile(env).ops);
            }
        });
        return ops;
    }
    function toJSON(ops) {
        return ops.toArray().map(function (op) { return op.toJSON(); });
    }
    var div = document.createElement('div');
    env.begin();
    var self = new object_reference_1.UpdatableReference(data);
    var res = app.render(self, div, new test_helpers_1.TestDynamicScope());
    env.commit();
    var entryPoint = app.asEntryPoint();
    var templateOps = entryPoint.compile(env).ops;
    var layoutOps = compileLayout("h-card");
    ui.rendered = true;
    ui.template.source = $template.value;
    ui.template.wireFormat = compile($template.value, env)._block;
    ui.template.opcodes = toJSON(eagerCompile(templateOps));
    ui.layout.source = $layout.value;
    ui.layout.wireFormat = compile($layout.value, env)._block;
    ui.layout.opcodes = toJSON(eagerCompile(layoutOps));
    ui.updatingOpcodes = toJSON(res['updating']);
    ui.html = div.innerHTML;
    window['$UI'] = ui;
    window['$DIV'] = div;
    _updateContent = function () {
        self.update(JSON.parse($data.value));
        env.begin();
        res.rerender();
        env.commit();
        ui.template.opcodes = toJSON(eagerCompile(templateOps));
        ui.layout.opcodes = toJSON(eagerCompile(layoutOps));
        ui.updatingOpcodes = toJSON(res['updating']);
        ui.html = div.innerHTML;
        rerenderUI();
    };
    rerenderUI();
}
function updateContent() {
    _updateContent();
}
function editContent() {
    _updateContent = null;
    ui.rendered = false;
    rerenderUI();
}
function getInitialContent() {
    return getStoredContent() || {
        data: DEFAULT_DATA,
        template: DEFAULT_TEMPLATE,
        layout: DEFAULT_LAYOUT
    };
}
function getStoredContent() {
    var content = localStorage.getItem('glimmer-visualizer:content');
    if (content) {
        return JSON.parse(content);
    }
}
function storeContent() {
    localStorage.setItem('glimmer-visualizer:content', JSON.stringify({
        data: $data.value,
        template: $template.value,
        layout: $layout.value
    }));
}
function resetContent() {
    $data.value = DEFAULT_DATA;
    $template.value = DEFAULT_TEMPLATE;
    $layout.value = DEFAULT_LAYOUT;
    storeContent();
    editContent();
}
//# sourceMappingURL=data:application/json;base64,