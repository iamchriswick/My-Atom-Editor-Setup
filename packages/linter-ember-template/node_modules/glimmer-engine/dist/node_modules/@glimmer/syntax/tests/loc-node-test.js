"use strict";
var syntax_1 = require("@glimmer/syntax");
QUnit.module("[glimmer-syntax] Parser - Location Info");
function locEqual(node, startLine, startColumn, endLine, endColumn, message) {
    if (message === void 0) { message = JSON.stringify(node); }
    var expected = {
        source: null,
        start: { line: startLine, column: startColumn },
        end: { line: endLine, column: endColumn }
    };
    deepEqual(node.loc, expected, message);
}
test("programs", function () {
    var ast = syntax_1.preprocess("\n  {{#if foo}}\n    {{bar}}\n       {{/if}}\n    ");
    locEqual(ast, 1, 0, 5, 4, 'outer program');
    // startColumn should be 13 not 2.
    // This should be fixed upstream in Handlebars.
    locEqual(ast.body[1].program, 2, 2, 4, 7, 'nested program');
});
test("blocks", function () {
    var ast = syntax_1.preprocess("\n  {{#if foo}}\n    {{#if bar}}\n        test\n        {{else}}\n      test\n  {{/if    }}\n       {{/if\n      }}\n    ");
    var _a = ast.body, block = _a[1];
    var nestedBlock = block.program.body[0];
    var nestedBlockText = nestedBlock.program.body[0];
    var nestedInverse = nestedBlock.inverse;
    locEqual(block, 2, 2, 9, 8, 'outer block');
    locEqual(nestedBlock, 3, 4, 7, 13, 'nested block');
    locEqual(nestedBlockText, 4, 0, 5, 0);
    locEqual(nestedInverse, 5, 8, 7, 2);
});
test("mustache", function () {
    var ast = syntax_1.preprocess("\n    {{foo}}\n    {{#if foo}}\n      bar: {{bar\n        }}\n    {{/if}}\n  ");
    var _a = ast.body, foo = _a[1], innerBlock = _a[3];
    var _b = innerBlock.program.body, barText = _b[0], bar = _b[1];
    locEqual(foo, 2, 4, 2, 11, 'outer mustache');
    locEqual(barText, 4, 0, 4, 11);
    locEqual(bar, 4, 11, 5, 10, 'inner mustache');
});
test("element modifier", function () {
    var ast = syntax_1.preprocess("\n    <div {{bind-attr\n      foo\n      bar=wat}}></div>\n  ");
    locEqual(ast.body[1].modifiers[0], 2, 9, 4, 15, 'element modifier');
});
test("html elements", function () {
    var ast = syntax_1.preprocess("\n    <section>\n      <br>\n      <div>\n        <hr />\n      </div>\n    </section>\n  ");
    var _a = ast.body, section = _a[1];
    var _b = section.children, br = _b[1], div = _b[3];
    var _c = div.children, hr = _c[1];
    locEqual(section, 2, 4, 7, 14, 'section element');
    locEqual(br, 3, 6, 3, 10, 'br element');
    locEqual(div, 4, 6, 6, 12, 'div element');
    locEqual(hr, 5, 8, 5, 14, 'hr element');
});
test("html elements with nested blocks", function () {
    var ast = syntax_1.preprocess("\n    <div>\n      {{#if isSingleError}}\n        Single error here!\n      {{else if errors}}\n        Multiple errors here!\n      {{else}}\n        No errors found!\n      {{/if}} <p>Hi there!</p>\n    </div>\n  ");
    var _a = ast.body, div = _a[1];
    var _b = div.children, ifBlock = _b[1], p = _b[3];
    var inverseBlock = ifBlock.inverse;
    var nestedIfBlock = inverseBlock.body[0];
    var nestedIfInverseBlock = nestedIfBlock.inverse;
    locEqual(div, 2, 4, 10, 10, 'div element');
    locEqual(ifBlock, 3, 6, 9, 13, 'outer if block');
    locEqual(inverseBlock, 5, 6, 9, 6, 'inverse block');
    locEqual(nestedIfBlock, 5, 6, 9, 6, 'nested if block');
    locEqual(nestedIfInverseBlock, 7, 6, 9, 6, 'nested inverse block');
    locEqual(p, 9, 14, 9, 30, 'p');
});
test("block + newline + element ", function () {
    var ast = syntax_1.preprocess("\n    {{#if stuff}}\n    {{/if}}\n    <p>Hi!</p>\n  ");
    var _a = ast.body, ifBlock = _a[1], p = _a[3];
    locEqual(ifBlock, 2, 4, 3, 11, 'if block');
    locEqual(p, 4, 4, 4, 14, 'p element');
});
test("mustache + newline + element ", function () {
    var ast = syntax_1.preprocess("\n    {{foo}}\n    <p>Hi!</p>\n  ");
    var _a = ast.body, fooMustache = _a[1], p = _a[3];
    locEqual(fooMustache, 2, 4, 2, 11, 'if block');
    locEqual(p, 3, 4, 3, 14, 'p element');
});
test("blocks with nested html elements", function () {
    var ast = syntax_1.preprocess("\n    {{#foo-bar}}<div>Foo</div>{{/foo-bar}} <p>Hi!</p>\n  ");
    var block = ast.body[1].program;
    var div = block.body[0];
    var p = ast.body[3];
    locEqual(p, 2, 43, 2, 53, 'p element');
    locEqual(div, 2, 16, 2, 30, 'div element');
});
test("html elements after mustache", function () {
    var ast = syntax_1.preprocess("\n    {{foo-bar}} <p>Hi!</p>\n  ");
    var _a = ast.body, mustache = _a[1], p = _a[3];
    locEqual(mustache, 2, 4, 2, 15, '{{foo-bar}}');
    locEqual(p, 2, 16, 2, 26, 'div element');
});
test("text", function () {
    var ast = syntax_1.preprocess("\n    foo!\n    <div>blah</div>\n  ");
    var _a = ast.body, fooText = _a[0], div = _a[1];
    var blahText = div.children[0];
    locEqual(fooText, 1, 0, 3, 4);
    locEqual(blahText, 3, 9, 3, 13);
});
test("comment", function () {
    var ast = syntax_1.preprocess("\n    <div><!-- blah blah blah blah -->\n      <!-- derp herky --><div></div>\n    </div>\n  ");
    var _a = ast.body, div = _a[1];
    var _b = div.children, comment1 = _b[0], comment2 = _b[2], trailingDiv = _b[3];
    locEqual(comment1, 2, 9, 2, 37);
    locEqual(comment2, 3, 6, 3, 25);
    locEqual(trailingDiv, 3, 25, 3, 36);
});
test("handlebars comment", function () {
    var ast = syntax_1.preprocess("\n    <div>{{!-- blah blah blah blah --}}\n      {{!-- derp herky --}}<div></div>\n    </div>\n    <span {{! derpy }}></span>\n  ");
    var _a = ast.body, div = _a[1], span = _a[3];
    var _b = div.children, comment1 = _b[0], comment2 = _b[2], trailingDiv = _b[3];
    var comment3 = span.comments[0];
    locEqual(comment1, 2, 9, 2, 39);
    locEqual(comment2, 3, 6, 3, 27);
    locEqual(trailingDiv, 3, 27, 3, 38);
    locEqual(span, 5, 4, 5, 30);
    locEqual(comment3, 5, 10, 5, 22);
});
test("element attribute", function () {
    var ast = syntax_1.preprocess("\n    <div data-foo=\"blah\"\n      data-derp=\"lolol\"\ndata-barf=\"herpy\"\n  data-qux=lolnoquotes\n    data-hurky=\"some {{thing}} here\">\n      Hi, fivetanley!\n    </div>\n  ");
    var _a = ast.body, div = _a[1];
    var _b = div.attributes, dataFoo = _b[0], dataDerp = _b[1], dataBarf = _b[2], dataQux = _b[3], dataHurky = _b[4];
    locEqual(dataFoo, 2, 9, 2, 24);
    locEqual(dataDerp, 3, 6, 3, 23);
    locEqual(dataBarf, 4, 0, 4, 17);
    locEqual(dataQux, 5, 2, 5, 22);
    locEqual(dataFoo.value, 2, 18, 2, 24);
    locEqual(dataDerp.value, 3, 16, 3, 23);
    locEqual(dataBarf.value, 4, 10, 4, 17);
    locEqual(dataQux.value, 5, 11, 5, 22);
    locEqual(dataHurky.value, 6, 15, 6, 36);
});
test("char references", function () {
    var ast = syntax_1.preprocess("\n    &gt;<div>&lt;<p>\n      Hi, danmcclain &excl;</p>\n    </div>\n  ");
    var _a = ast.body, div = _a[1];
    var _b = div.children, text1 = _b[0], p = _b[1];
    var text2 = p.children[0];
    locEqual(div, 2, 8, 4, 10);
    locEqual(text1, 2, 13, 2, 17);
    locEqual(p, 2, 17, 3, 31);
    locEqual(text2, 2, 20, 3, 27);
});
test("whitespace control - trailing", function () {
    var ast = syntax_1.preprocess("\n  {{#if foo~}}\n    <div></div>\n  {{else~}}\n    {{bar}}\n  {{/if}}");
    var _a = ast.body, ifBlock = _a[1];
    var div = ifBlock.program.body[0];
    locEqual(ifBlock, 2, 2, 6, 9, 'if block');
    locEqual(div, 3, 4, 3, 15, 'div inside truthy if block');
});
test("whitespace control - 'else if' trailing", function () {
    var ast = syntax_1.preprocess("\n  {{#if foo}}\n    {{bar}}\n  {{else if baz~}}\n    <div></div>\n  {{/if}}");
    var _a = ast.body, ifBlock = _a[1];
    var nestedIfBlock = ifBlock.inverse.body[0];
    var div = nestedIfBlock.program.body[0];
    locEqual(ifBlock, 2, 2, 6, 9, 'if block');
    locEqual(div, 5, 4, 5, 15, 'div inside truthy else if block');
});
test("whitespace control - leading", function () {
    var ast = syntax_1.preprocess("\n  {{~#if foo}}\n    <div></div>\n  {{~else}}\n    {{bar}}\n  {{~/if}}");
    var ifBlock = ast.body[0];
    var _a = ifBlock.program.body, div = _a[1];
    locEqual(ifBlock, 2, 2, 6, 10, 'if block');
    locEqual(div, 3, 4, 3, 15, 'div inside truthy if block');
});
//# sourceMappingURL=data:application/json;base64,