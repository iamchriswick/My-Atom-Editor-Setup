"use strict";
var base_1 = require("handlebars/compiler/base");
var syntax_1 = require("@glimmer/syntax");
var support_1 = require("./support");
QUnit.module("[glimmer-syntax] Parser - AST");
test("a simple piece of content", function () {
    var t = 'some content';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text('some content')
    ]));
});
test("allow simple AST to be passed", function () {
    var ast = syntax_1.preprocess(base_1.parse("simple"));
    support_1.astEqual(ast, syntax_1.builders.program([
        syntax_1.builders.text("simple")
    ]));
});
test("allow an AST with mustaches to be passed", function () {
    var ast = syntax_1.preprocess(base_1.parse("<h1>some</h1> ast {{foo}}"));
    support_1.astEqual(ast, syntax_1.builders.program([
        syntax_1.builders.element("h1", [], [], [
            syntax_1.builders.text("some")
        ]),
        syntax_1.builders.text(" ast "),
        syntax_1.builders.mustache(syntax_1.builders.path('foo'))
    ]));
});
test("self-closed element", function () {
    var t = '<g />';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element("g")
    ]));
});
test("elements can have empty attributes", function () {
    var t = '<img id="">';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element("img", [
            syntax_1.builders.attr("id", syntax_1.builders.text(""))
        ])
    ]));
});
test("disallowed quote in element space is rejected", function (assert) {
    var t = '<img foo="bar"" >';
    assert.throws(function () {
        syntax_1.preprocess(t);
    }, /Syntax error at line 1 col 14: " is not a valid character within attribute names/);
});
test("disallowed equals sign in element space is rejected", function (assert) {
    var t = '<img =foo >';
    assert.throws(function () {
        syntax_1.preprocess(t);
    }, /Syntax error at line 1 col 5: attribute name cannot start with equals sign/);
});
test("svg content", function () {
    var t = "<svg></svg>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element("svg")
    ]));
});
test("html content with html content inline", function () {
    var t = '<div><p></p></div>';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element("div", [], [], [
            syntax_1.builders.element("p")
        ])
    ]));
});
test("html content with svg content inline", function () {
    var t = '<div><svg></svg></div>';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element("div", [], [], [
            syntax_1.builders.element("svg")
        ])
    ]));
});
var integrationPoints = ['foreignObject', 'desc', 'title'];
function buildIntegrationPointTest(integrationPoint) {
    return function integrationPointTest() {
        var t = '<svg><' + integrationPoint + '><div></div></' + integrationPoint + '></svg>';
        support_1.astEqual(t, syntax_1.builders.program([
            syntax_1.builders.element("svg", [], [], [
                syntax_1.builders.element(integrationPoint, [], [], [
                    syntax_1.builders.element("div")
                ])
            ])
        ]));
    };
}
for (var i = 0, length = integrationPoints.length; i < length; i++) {
    test("svg content with html content inline for " + integrationPoints[i], buildIntegrationPointTest(integrationPoints[i]));
}
test("a piece of content with HTML", function () {
    var t = 'some <div>content</div> done';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("some "),
        syntax_1.builders.element("div", [], [], [
            syntax_1.builders.text("content")
        ]),
        syntax_1.builders.text(" done")
    ]));
});
test("a piece of Handlebars with HTML", function () {
    var t = 'some <div>{{content}}</div> done';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("some "),
        syntax_1.builders.element("div", [], [], [
            syntax_1.builders.mustache(syntax_1.builders.path('content'))
        ]),
        syntax_1.builders.text(" done")
    ]));
});
test("Handlebars embedded in an attribute (quoted)", function () {
    var t = 'some <div class="{{foo}}">content</div> done';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("some "),
        syntax_1.builders.element("div", [syntax_1.builders.attr("class", syntax_1.builders.concat([syntax_1.builders.mustache('foo')]))], [], [
            syntax_1.builders.text("content")
        ]),
        syntax_1.builders.text(" done")
    ]));
});
test("Handlebars embedded in an attribute (unquoted)", function () {
    var t = 'some <div class={{foo}}>content</div> done';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("some "),
        syntax_1.builders.element("div", [syntax_1.builders.attr("class", syntax_1.builders.mustache(syntax_1.builders.path('foo')))], [], [
            syntax_1.builders.text("content")
        ]),
        syntax_1.builders.text(" done")
    ]));
});
test("Handlebars embedded in an attribute of a self-closing tag (unqouted)", function () {
    var t = '<input value={{foo}}/>';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element("input", [syntax_1.builders.attr("value", syntax_1.builders.mustache(syntax_1.builders.path('foo')))], [], []),
    ]));
});
test("Handlebars embedded in an attribute (sexprs)", function () {
    var t = 'some <div class="{{foo (foo "abc")}}">content</div> done';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("some "),
        syntax_1.builders.element("div", [
            syntax_1.builders.attr("class", syntax_1.builders.concat([syntax_1.builders.mustache(syntax_1.builders.path('foo'), [syntax_1.builders.sexpr(syntax_1.builders.path('foo'), [syntax_1.builders.string('abc')])])]))
        ], [], [
            syntax_1.builders.text("content")
        ]),
        syntax_1.builders.text(" done")
    ]));
});
test("Handlebars embedded in an attribute with other content surrounding it", function () {
    var t = 'some <a href="http://{{link}}/">content</a> done';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("some "),
        syntax_1.builders.element("a", [
            syntax_1.builders.attr("href", syntax_1.builders.concat([
                syntax_1.builders.text("http://"),
                syntax_1.builders.mustache('link'),
                syntax_1.builders.text("/")
            ]))
        ], [], [
            syntax_1.builders.text("content")
        ]),
        syntax_1.builders.text(" done")
    ]));
});
test("A more complete embedding example", function () {
    var t = "{{embed}} {{some 'content'}} " +
        "<div class='{{foo}} {{bind-class isEnabled truthy='enabled'}}'>{{ content }}</div>" +
        " {{more 'embed'}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.mustache(syntax_1.builders.path('embed')),
        syntax_1.builders.text(' '),
        syntax_1.builders.mustache(syntax_1.builders.path('some'), [syntax_1.builders.string('content')]),
        syntax_1.builders.text(' '),
        syntax_1.builders.element("div", [
            syntax_1.builders.attr("class", syntax_1.builders.concat([
                syntax_1.builders.mustache('foo'),
                syntax_1.builders.text(' '),
                syntax_1.builders.mustache('bind-class', [syntax_1.builders.path('isEnabled')], syntax_1.builders.hash([syntax_1.builders.pair('truthy', syntax_1.builders.string('enabled'))]))
            ]))
        ], [], [
            syntax_1.builders.mustache(syntax_1.builders.path('content'))
        ]),
        syntax_1.builders.text(' '),
        syntax_1.builders.mustache(syntax_1.builders.path('more'), [syntax_1.builders.string('embed')])
    ]));
});
test("Simple embedded block helpers", function () {
    var t = "{{#if foo}}<div>{{content}}</div>{{/if}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.block(syntax_1.builders.path('if'), [syntax_1.builders.path('foo')], syntax_1.builders.hash(), syntax_1.builders.program([
            syntax_1.builders.element('div', [], [], [
                syntax_1.builders.mustache(syntax_1.builders.path('content'))
            ])
        ]))
    ]));
});
test("Involved block helper", function () {
    var t = '<p>hi</p> content {{#testing shouldRender}}<p>Appears!</p>{{/testing}} more <em>content</em> here';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('p', [], [], [
            syntax_1.builders.text('hi')
        ]),
        syntax_1.builders.text(' content '),
        syntax_1.builders.block(syntax_1.builders.path('testing'), [syntax_1.builders.path('shouldRender')], syntax_1.builders.hash(), syntax_1.builders.program([
            syntax_1.builders.element('p', [], [], [
                syntax_1.builders.text('Appears!')
            ])
        ])),
        syntax_1.builders.text(' more '),
        syntax_1.builders.element('em', [], [], [
            syntax_1.builders.text('content')
        ]),
        syntax_1.builders.text(' here')
    ]));
});
test("Element modifiers", function () {
    var t = "<p {{action 'boom'}} class='bar'>Some content</p>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('p', [syntax_1.builders.attr('class', syntax_1.builders.text('bar'))], [
            syntax_1.builders.elementModifier(syntax_1.builders.path('action'), [syntax_1.builders.string('boom')])
        ], [
            syntax_1.builders.text('Some content')
        ])
    ]));
});
test("Tokenizer: MustacheStatement encountered in tagName state", function () {
    var t = "<input{{bar}}>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('input', [], [syntax_1.builders.elementModifier(syntax_1.builders.path('bar'))])
    ]));
});
test("Tokenizer: MustacheStatement encountered in beforeAttributeName state", function () {
    var t = "<input {{bar}}>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('input', [], [syntax_1.builders.elementModifier(syntax_1.builders.path('bar'))])
    ]));
});
test("Tokenizer: MustacheStatement encountered in attributeName state", function () {
    var t = "<input foo{{bar}}>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('input', [syntax_1.builders.attr('foo', syntax_1.builders.text(''))], [syntax_1.builders.elementModifier(syntax_1.builders.path('bar'))])
    ]));
});
test("Tokenizer: MustacheStatement encountered in afterAttributeName state", function () {
    var t = "<input foo {{bar}}>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('input', [syntax_1.builders.attr('foo', syntax_1.builders.text(''))], [syntax_1.builders.elementModifier(syntax_1.builders.path('bar'))])
    ]));
});
test("Tokenizer: MustacheStatement encountered in afterAttributeValue state", function () {
    var t = "<input foo=1 {{bar}}>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('input', [syntax_1.builders.attr('foo', syntax_1.builders.text('1'))], [syntax_1.builders.elementModifier(syntax_1.builders.path('bar'))])
    ]));
});
test("Tokenizer: MustacheStatement encountered in afterAttributeValueQuoted state", function () {
    var t = "<input foo='1'{{bar}}>";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.element('input', [syntax_1.builders.attr('foo', syntax_1.builders.text('1'))], [syntax_1.builders.elementModifier(syntax_1.builders.path('bar'))])
    ]));
});
test("Stripping - mustaches", function () {
    var t = "foo {{~content}} bar";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text('foo'),
        syntax_1.builders.mustache(syntax_1.builders.path('content')),
        syntax_1.builders.text(' bar')
    ]));
    t = "foo {{content~}} bar";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text('foo '),
        syntax_1.builders.mustache(syntax_1.builders.path('content')),
        syntax_1.builders.text('bar')
    ]));
});
test("Stripping - blocks", function () {
    var t = "foo {{~#wat}}{{/wat}} bar";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text('foo'),
        syntax_1.builders.block(syntax_1.builders.path('wat'), [], syntax_1.builders.hash(), syntax_1.builders.program()),
        syntax_1.builders.text(' bar')
    ]));
    t = "foo {{#wat}}{{/wat~}} bar";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text('foo '),
        syntax_1.builders.block(syntax_1.builders.path('wat'), [], syntax_1.builders.hash(), syntax_1.builders.program()),
        syntax_1.builders.text('bar')
    ]));
});
test("Stripping - programs", function () {
    var t = "{{#wat~}} foo {{else}}{{/wat}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.block(syntax_1.builders.path('wat'), [], syntax_1.builders.hash(), syntax_1.builders.program([
            syntax_1.builders.text('foo ')
        ]), syntax_1.builders.program())
    ]));
    t = "{{#wat}} foo {{~else}}{{/wat}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.block(syntax_1.builders.path('wat'), [], syntax_1.builders.hash(), syntax_1.builders.program([
            syntax_1.builders.text(' foo')
        ]), syntax_1.builders.program())
    ]));
    t = "{{#wat}}{{else~}} foo {{/wat}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.block(syntax_1.builders.path('wat'), [], syntax_1.builders.hash(), syntax_1.builders.program(), syntax_1.builders.program([
            syntax_1.builders.text('foo ')
        ]))
    ]));
    t = "{{#wat}}{{else}} foo {{~/wat}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.block(syntax_1.builders.path('wat'), [], syntax_1.builders.hash(), syntax_1.builders.program(), syntax_1.builders.program([
            syntax_1.builders.text(' foo')
        ]))
    ]));
});
test("Stripping - removes unnecessary text nodes", function () {
    var t = "{{#each~}}\n  <li> foo </li>\n{{~/each}}";
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.block(syntax_1.builders.path('each'), [], syntax_1.builders.hash(), syntax_1.builders.program([
            syntax_1.builders.element('li', [], [], [syntax_1.builders.text(' foo ')])
        ]))
    ]));
});
// TODO: Make these throw an error.
//test("Awkward mustache in unquoted attribute value", function() {
//  let t = "<div class=a{{foo}}></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')])])) ])
//  ]));
//
//  t = "<div class=a{{foo}}b></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')]), b.string("b")])) ])
//  ]));
//
//  t = "<div class={{foo}}b></div>";
//  astEqual(t, b.program([
//    b.element('div', [ b.attr('class', concat([b.sexpr([b.path('foo')]), b.string("b")])) ])
//  ]));
//});
test("an HTML comment", function () {
    var t = 'before <!-- some comment --> after';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("before "),
        syntax_1.builders.comment(" some comment "),
        syntax_1.builders.text(" after")
    ]));
});
test("a Handlebars comment inside an HTML comment", function () {
    var t = 'before <!-- some {{! nested thing }} comment --> after';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("before "),
        syntax_1.builders.comment(" some {{! nested thing }} comment "),
        syntax_1.builders.text(" after")
    ]));
});
test("a Handlebars comment", function () {
    var t = 'before {{! some comment }} after';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("before "),
        syntax_1.builders.mustacheComment(" some comment "),
        syntax_1.builders.text(" after")
    ]));
});
test("a Handlebars comment in proper element space", function () {
    var t = 'before <div {{! some comment }} data-foo="bar" {{! other comment }}></div> after';
    support_1.astEqual(t, syntax_1.builders.program([
        syntax_1.builders.text("before "),
        syntax_1.builders.element('div', [
            syntax_1.builders.attr('data-foo', syntax_1.builders.text('bar'))
        ], [], [], [
            syntax_1.builders.mustacheComment(" some comment "),
            syntax_1.builders.mustacheComment(" other comment "),
        ]),
        syntax_1.builders.text(" after")
    ]));
});
test("a Handlebars comment in invalid element space", function (assert) {
    assert.throws(function () {
        syntax_1.preprocess('\nbefore <div \n  a{{! some comment }} data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `attributeName` state is not supported: " some comment " on line 3:3/);
    assert.throws(function () {
        syntax_1.preprocess('\nbefore <div \n  a={{! some comment }} data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `beforeAttributeValue` state is not supported: " some comment " on line 3:4/);
    assert.throws(function () {
        syntax_1.preprocess('\nbefore <div \n  a="{{! some comment }}" data-foo="bar"></div> after');
    }, /Using a Handlebars comment when in the `attributeValueDoubleQuoted` state is not supported: " some comment " on line 3:5/);
});
test("allow {{null}} to be passed as helper name", function () {
    var ast = syntax_1.preprocess("{{null}}");
    support_1.astEqual(ast, syntax_1.builders.program([
        syntax_1.builders.mustache(syntax_1.builders.null())
    ]));
});
test("allow {{null}} to be passed as a param", function () {
    var ast = syntax_1.preprocess("{{foo null}}");
    support_1.astEqual(ast, syntax_1.builders.program([
        syntax_1.builders.mustache(syntax_1.builders.path('foo'), [syntax_1.builders.null()])
    ]));
});
test("allow {{undefined}} to be passed as helper name", function () {
    var ast = syntax_1.preprocess("{{undefined}}");
    support_1.astEqual(ast, syntax_1.builders.program([
        syntax_1.builders.mustache(syntax_1.builders.undefined())
    ]));
});
test("allow {{undefined}} to be passed as a param", function () {
    var ast = syntax_1.preprocess("{{foo undefined}}");
    support_1.astEqual(ast, syntax_1.builders.program([
        syntax_1.builders.mustache(syntax_1.builders.path('foo'), [syntax_1.builders.undefined()])
    ]));
});
//# sourceMappingURL=data:application/json;base64,