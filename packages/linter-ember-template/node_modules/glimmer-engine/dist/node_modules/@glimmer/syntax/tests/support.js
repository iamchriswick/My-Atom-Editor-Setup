"use strict";
var syntax_1 = require("@glimmer/syntax");
function normalizeNode(obj) {
    if (obj && typeof obj === 'object') {
        var newObj = void 0;
        if (obj.splice) {
            newObj = new Array(obj.length);
            for (var i = 0; i < obj.length; i++) {
                newObj[i] = normalizeNode(obj[i]);
            }
        }
        else {
            newObj = {};
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    newObj[key] = normalizeNode(obj[key]);
                }
            }
            if (newObj.type) {
                newObj._type = newObj.type;
                delete newObj.type;
            }
            delete newObj.loc;
        }
        return newObj;
    }
    else {
        return obj;
    }
}
function astEqual(actual, expected, message) {
    if (typeof actual === 'string') {
        actual = syntax_1.preprocess(actual);
    }
    if (typeof expected === 'string') {
        expected = syntax_1.preprocess(expected);
    }
    actual = normalizeNode(actual);
    expected = normalizeNode(expected);
    deepEqual(actual, expected, message);
}
exports.astEqual = astEqual;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3N5bnRheC90ZXN0cy9zdXBwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQ0FBc0Q7QUFFdEQsdUJBQXVCLEdBQUc7SUFDeEIsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxNQUFNLFNBQUEsQ0FBQztRQUNYLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUvQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxDQUFDO1FBQ0gsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxHQUFHLEVBQUUsQ0FBQztZQUVaLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUN4QyxDQUFDO1lBQ0gsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQzNCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQztZQUNyQixDQUFDO1lBRUQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3BCLENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNOLE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0FBQ0gsQ0FBQztBQUVELGtCQUF5QixNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQVE7SUFDakQsRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLEdBQUcsbUJBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsT0FBTyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNqQyxRQUFRLEdBQUcsbUJBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsTUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMvQixRQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRW5DLFNBQVMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFaRCw0QkFZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXByb2Nlc3MgYXMgcGFyc2UgfSBmcm9tICdAZ2xpbW1lci9zeW50YXgnO1xuXG5mdW5jdGlvbiBub3JtYWxpemVOb2RlKG9iaikge1xuICBpZiAob2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnKSB7XG4gICAgbGV0IG5ld09iajtcbiAgICBpZiAob2JqLnNwbGljZSkge1xuICAgICAgbmV3T2JqID0gbmV3IEFycmF5KG9iai5sZW5ndGgpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdPYmpbaV0gPSBub3JtYWxpemVOb2RlKG9ialtpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld09iaiA9IHt9O1xuXG4gICAgICBmb3IgKGxldCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIG5ld09ialtrZXldID0gbm9ybWFsaXplTm9kZShvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5ld09iai50eXBlKSB7XG4gICAgICAgIG5ld09iai5fdHlwZSA9IG5ld09iai50eXBlO1xuICAgICAgICBkZWxldGUgbmV3T2JqLnR5cGU7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBuZXdPYmoubG9jO1xuICAgIH1cbiAgICByZXR1cm4gbmV3T2JqO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBvYmo7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2U/KSB7XG4gIGlmICh0eXBlb2YgYWN0dWFsID09PSAnc3RyaW5nJykge1xuICAgIGFjdHVhbCA9IHBhcnNlKGFjdHVhbCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBleHBlY3RlZCA9IHBhcnNlKGV4cGVjdGVkKTtcbiAgfVxuXG4gIGFjdHVhbCA9IG5vcm1hbGl6ZU5vZGUoYWN0dWFsKTtcbiAgZXhwZWN0ZWQgPSBub3JtYWxpemVOb2RlKGV4cGVjdGVkKTtcblxuICBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7XG59XG4iXX0=