"use strict";
var syntax_1 = require("@glimmer/syntax");
QUnit.module('[glimmer-syntax] Plugins - AST Transforms');
test('AST plugins can be provided to the compiler', function () {
    expect(1);
    function Plugin() { }
    Plugin.prototype.transform = function () {
        ok(true, 'transform was called!');
    };
    syntax_1.preprocess('<div></div>', {
        plugins: {
            ast: [Plugin]
        }
    });
});
test('provides syntax package as `syntax` prop if value is null', function () {
    expect(1);
    function Plugin() { }
    Plugin.prototype.transform = function () {
        equal(this.syntax.Walker, syntax_1.Walker);
    };
    syntax_1.preprocess('<div></div>', {
        plugins: {
            ast: [Plugin]
        }
    });
});
test('AST plugins can modify the AST', function () {
    expect(1);
    var expected = "OOOPS, MESSED THAT UP!";
    function Plugin() { }
    Plugin.prototype.transform = function () {
        return expected;
    };
    var ast = syntax_1.preprocess('<div></div>', {
        plugins: {
            ast: [Plugin]
        }
    });
    equal(ast, expected, 'return value from AST transform is used');
});
test('AST plugins can be chained', function () {
    expect(2);
    var expected = "OOOPS, MESSED THAT UP!";
    function Plugin() { }
    Plugin.prototype.transform = function () {
        return expected;
    };
    function SecondaryPlugin() { }
    SecondaryPlugin.prototype.transform = function (ast) {
        equal(ast, expected, 'return value from AST transform is used');
        return 'BOOM!';
    };
    var ast = syntax_1.preprocess('<div></div>', {
        plugins: {
            ast: [
                Plugin,
                SecondaryPlugin
            ]
        }
    });
    equal(ast, 'BOOM!', 'return value from last AST transform is used');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW5vZGUtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3N5bnRheC90ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQ0FBOEQ7QUFFOUQsS0FBSyxDQUFDLE1BQU0sQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBRTFELElBQUksQ0FBQyw2Q0FBNkMsRUFBRTtJQUNsRCxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFVixvQkFBb0IsQ0FBQztJQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRztRQUMzQixFQUFFLENBQUMsSUFBSSxFQUFFLHVCQUF1QixDQUFDLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0lBRUYsbUJBQUssQ0FBQyxhQUFhLEVBQUU7UUFDbkIsT0FBTyxFQUFFO1lBQ1AsR0FBRyxFQUFFLENBQUUsTUFBTSxDQUFFO1NBQ2hCO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsMkRBQTJELEVBQUU7SUFDaEUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRVYsb0JBQW9CLENBQUM7SUFDckIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUc7UUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGVBQU0sQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQztJQUVGLG1CQUFLLENBQUMsYUFBYSxFQUFFO1FBQ25CLE9BQU8sRUFBRTtZQUNQLEdBQUcsRUFBRSxDQUFFLE1BQU0sQ0FBRTtTQUNoQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVWLElBQUksUUFBUSxHQUFHLHdCQUF3QixDQUFDO0lBRXhDLG9CQUFvQixDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHO1FBQzNCLE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxHQUFHLEdBQUcsbUJBQUssQ0FBQyxhQUFhLEVBQUU7UUFDN0IsT0FBTyxFQUFFO1lBQ1AsR0FBRyxFQUFFLENBQUUsTUFBTSxDQUFFO1NBQ2hCO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUseUNBQXlDLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyw0QkFBNEIsRUFBRTtJQUNqQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFVixJQUFJLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQztJQUV4QyxvQkFBb0IsQ0FBQztJQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRztRQUMzQixNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGLDZCQUE2QixDQUFDO0lBQzlCLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVMsR0FBRztRQUNoRCxLQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDO1FBRWhFLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDakIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxHQUFHLEdBQUcsbUJBQUssQ0FBQyxhQUFhLEVBQUU7UUFDN0IsT0FBTyxFQUFFO1lBQ1AsR0FBRyxFQUFFO2dCQUNILE1BQU07Z0JBQ04sZUFBZTthQUNoQjtTQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsOENBQThDLENBQUMsQ0FBQztBQUN0RSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXByb2Nlc3MgYXMgcGFyc2UsIFdhbGtlciB9IGZyb20gJ0BnbGltbWVyL3N5bnRheCc7XG5cblFVbml0Lm1vZHVsZSgnW2dsaW1tZXItc3ludGF4XSBQbHVnaW5zIC0gQVNUIFRyYW5zZm9ybXMnKTtcblxudGVzdCgnQVNUIHBsdWdpbnMgY2FuIGJlIHByb3ZpZGVkIHRvIHRoZSBjb21waWxlcicsIGZ1bmN0aW9uKCkge1xuICBleHBlY3QoMSk7XG5cbiAgZnVuY3Rpb24gUGx1Z2luKCkgeyB9XG4gIFBsdWdpbi5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG4gICAgb2sodHJ1ZSwgJ3RyYW5zZm9ybSB3YXMgY2FsbGVkIScpO1xuICB9O1xuXG4gIHBhcnNlKCc8ZGl2PjwvZGl2PicsIHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBhc3Q6IFsgUGx1Z2luIF1cbiAgICB9XG4gIH0pO1xufSk7XG5cbnRlc3QoJ3Byb3ZpZGVzIHN5bnRheCBwYWNrYWdlIGFzIGBzeW50YXhgIHByb3AgaWYgdmFsdWUgaXMgbnVsbCcsIGZ1bmN0aW9uKCkge1xuICBleHBlY3QoMSk7XG5cbiAgZnVuY3Rpb24gUGx1Z2luKCkgeyB9XG4gIFBsdWdpbi5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG4gICAgZXF1YWwodGhpcy5zeW50YXguV2Fsa2VyLCBXYWxrZXIpO1xuICB9O1xuXG4gIHBhcnNlKCc8ZGl2PjwvZGl2PicsIHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBhc3Q6IFsgUGx1Z2luIF1cbiAgICB9XG4gIH0pO1xufSk7XG5cbnRlc3QoJ0FTVCBwbHVnaW5zIGNhbiBtb2RpZnkgdGhlIEFTVCcsIGZ1bmN0aW9uKCkge1xuICBleHBlY3QoMSk7XG5cbiAgbGV0IGV4cGVjdGVkID0gXCJPT09QUywgTUVTU0VEIFRIQVQgVVAhXCI7XG5cbiAgZnVuY3Rpb24gUGx1Z2luKCkgeyB9XG4gIFBsdWdpbi5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGV4cGVjdGVkO1xuICB9O1xuXG4gIGxldCBhc3QgPSBwYXJzZSgnPGRpdj48L2Rpdj4nLCB7XG4gICAgcGx1Z2luczoge1xuICAgICAgYXN0OiBbIFBsdWdpbiBdXG4gICAgfVxuICB9KTtcblxuICBlcXVhbChhc3QsIGV4cGVjdGVkLCAncmV0dXJuIHZhbHVlIGZyb20gQVNUIHRyYW5zZm9ybSBpcyB1c2VkJyk7XG59KTtcblxudGVzdCgnQVNUIHBsdWdpbnMgY2FuIGJlIGNoYWluZWQnLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDIpO1xuXG4gIGxldCBleHBlY3RlZCA9IFwiT09PUFMsIE1FU1NFRCBUSEFUIFVQIVwiO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBleHBlY3RlZDtcbiAgfTtcblxuICBmdW5jdGlvbiBTZWNvbmRhcnlQbHVnaW4oKSB7IH1cbiAgU2Vjb25kYXJ5UGx1Z2luLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbihhc3QpIHtcbiAgICBlcXVhbChhc3QsIGV4cGVjdGVkLCAncmV0dXJuIHZhbHVlIGZyb20gQVNUIHRyYW5zZm9ybSBpcyB1c2VkJyk7XG5cbiAgICByZXR1cm4gJ0JPT00hJztcbiAgfTtcblxuICBsZXQgYXN0ID0gcGFyc2UoJzxkaXY+PC9kaXY+Jywge1xuICAgIHBsdWdpbnM6IHtcbiAgICAgIGFzdDogW1xuICAgICAgICBQbHVnaW4sXG4gICAgICAgIFNlY29uZGFyeVBsdWdpblxuICAgICAgXVxuICAgIH1cbiAgfSk7XG5cbiAgZXF1YWwoYXN0LCAnQk9PTSEnLCAncmV0dXJuIHZhbHVlIGZyb20gbGFzdCBBU1QgdHJhbnNmb3JtIGlzIHVzZWQnKTtcbn0pO1xuIl19