"use strict";
var syntax_1 = require("@glimmer/syntax");
function printTransform(template) {
    return syntax_1.print(syntax_1.preprocess(template));
}
function printEqual(template) {
    equal(printTransform(template), template);
}
QUnit.module('[glimmer-syntax] Code generation');
test('ElementNode: tag', function () {
    printEqual('<h1></h1>');
});
test('ElementNode: nested tags with indent', function () {
    printEqual('<div>\n  <p>Test</p>\n</div>');
});
test('ElementNode: attributes', function () {
    printEqual('<h1 class="foo" id="title"></h1>');
});
test('TextNode: chars', function () {
    printEqual('<h1>Test</h1>');
});
test('MustacheStatement: slash in path', function () {
    printEqual('{{namespace/foo "bar" baz="qux"}}');
});
test('MustacheStatement: path', function () {
    printEqual('<h1>{{model.title}}</h1>');
});
test('MustacheStatement: StringLiteral param', function () {
    printEqual('<h1>{{link-to "Foo"}}</h1>');
});
test('MustacheStatement: hash', function () {
    printEqual('<h1>{{link-to "Foo" class="bar"}}</h1>');
});
test('MustacheStatement: as element attribute', function () {
    printEqual('<h1 class={{if foo "foo" "bar"}}>Test</h1>');
});
test('MustacheStatement: as element attribute with path', function () {
    printEqual('<h1 class={{color}}>Test</h1>');
});
test('ConcatStatement: in element attribute string', function () {
    printEqual('<h1 class="{{if active "active" "inactive"}} foo">Test</h1>');
});
test('ElementModifierStatement', function () {
    printEqual('<p {{action "activate"}} {{someting foo="bar"}}>Test</p>');
});
test('PartialStatement', function () {
    printEqual('<p>{{>something "param"}}</p>');
});
test('SubExpression', function () {
    printEqual('<p>{{my-component submit=(action (mut model.name) (full-name model.firstName "Smith"))}}</p>');
});
test('BlockStatement: multiline', function () {
    printEqual('<ul>{{#each foos as |foo index|}}\n  <li>{{foo}}: {{index}}</li>\n{{/each}}</ul>');
});
test('BlockStatement: inline', function () {
    printEqual('{{#if foo}}<p>{{foo}}</p>{{/if}}');
});
test('UndefinedLiteral', function () {
    var ast = syntax_1.builders.program([syntax_1.builders.mustache(syntax_1.builders.undefined())]);
    equal(syntax_1.print(ast), '{{undefined}}');
});
test('NumberLiteral', function () {
    var ast = syntax_1.builders.program([
        syntax_1.builders.mustache('foo', null, syntax_1.builders.hash([syntax_1.builders.pair('bar', syntax_1.builders.number(5))]))
    ]);
    equal(syntax_1.print(ast), '{{foo bar=5}}');
});
test('BooleanLiteral', function () {
    var ast = syntax_1.builders.program([
        syntax_1.builders.mustache('foo', null, syntax_1.builders.hash([syntax_1.builders.pair('bar', syntax_1.builders.boolean(true))]))
    ]);
    equal(syntax_1.print(ast), '{{foo bar=true}}');
});
test('HTML comment', function () {
    printEqual('<!-- foo -->');
});
test('Handlebars comment', function () {
    equal(printTransform('{{! foo }}'), '{{!-- foo --}}');
});
test('Handlebars comment: in ElementNode', function () {
    printEqual('<div {{!-- foo --}}></div>');
});
test('Handlebars comment: in ElementNode children', function () {
    printEqual('<div>{{!-- foo bar --}}<b></b></div>');
});
test('Handlebars in handlebar comment', function () {
    printEqual('{{!-- {{foo-bar}} --}}');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbnQtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3N5bnRheC90ZXN0cy9nZW5lcmF0aW9uL3ByaW50LXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUE0RTtBQUU1RSx3QkFBd0IsUUFBUTtJQUM5QixNQUFNLENBQUMsY0FBSyxDQUFDLG1CQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBRUQsb0JBQW9CLFFBQVE7SUFDMUIsS0FBSyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBRWpELElBQUksQ0FBQyxrQkFBa0IsRUFBRTtJQUN2QixVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUU7SUFDM0MsVUFBVSxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMseUJBQXlCLEVBQUU7SUFDOUIsVUFBVSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsaUJBQWlCLEVBQUU7SUFDdEIsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGtDQUFrQyxFQUFFO0lBQ3ZDLFVBQVUsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlCQUF5QixFQUFFO0lBQzlCLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHdDQUF3QyxFQUFFO0lBQzdDLFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxD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QW9DLEVBQUU7SUFDekMsVUFBVSxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsNkNBQTZDLEVBQUU7SUFDbEQsVUFBVSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsaUNBQWlDLEVBQUU7SUFDdEMsVUFBVSxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmVwcm9jZXNzIGFzIHBhcnNlLCBwcmludCwgYnVpbGRlcnMgYXMgYiB9IGZyb20gXCJAZ2xpbW1lci9zeW50YXhcIjtcblxuZnVuY3Rpb24gcHJpbnRUcmFuc2Zvcm0odGVtcGxhdGUpIHtcbiAgcmV0dXJuIHByaW50KHBhcnNlKHRlbXBsYXRlKSk7XG59XG5cbmZ1bmN0aW9uIHByaW50RXF1YWwodGVtcGxhdGUpIHtcbiAgZXF1YWwocHJpbnRUcmFuc2Zvcm0odGVtcGxhdGUpLCB0ZW1wbGF0ZSk7XG59XG5cblFVbml0Lm1vZHVsZSgnW2dsaW1tZXItc3ludGF4XSBDb2RlIGdlbmVyYXRpb24nKTtcblxudGVzdCgnRWxlbWVudE5vZGU6IHRhZycsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8aDE+PC9oMT4nKTtcbn0pO1xuXG50ZXN0KCdFbGVtZW50Tm9kZTogbmVzdGVkIHRhZ3Mgd2l0aCBpbmRlbnQnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGRpdj5cXG4gIDxwPlRlc3Q8L3A+XFxuPC9kaXY+Jyk7XG59KTtcblxudGVzdCgnRWxlbWVudE5vZGU6IGF0dHJpYnV0ZXMnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGgxIGNsYXNzPVwiZm9vXCIgaWQ9XCJ0aXRsZVwiPjwvaDE+Jyk7XG59KTtcblxudGVzdCgnVGV4dE5vZGU6IGNoYXJzJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxoMT5UZXN0PC9oMT4nKTtcbn0pO1xuXG50ZXN0KCdNdXN0YWNoZVN0YXRlbWVudDogc2xhc2ggaW4gcGF0aCcsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCd7e25hbWVzcGFjZS9mb28gXCJiYXJcIiBiYXo9XCJxdXhcIn19Jyk7XG59KTtcblxudGVzdCgnTXVzdGFjaGVTdGF0ZW1lbnQ6IHBhdGgnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGgxPnt7bW9kZWwudGl0bGV9fTwvaDE+Jyk7XG59KTtcblxudGVzdCgnTXVzdGFjaGVTdGF0ZW1lbnQ6IFN0cmluZ0xpdGVyYWwgcGFyYW0nLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGgxPnt7bGluay10byBcIkZvb1wifX08L2gxPicpO1xufSk7XG5cbnRlc3QoJ011c3RhY2hlU3RhdGVtZW50OiBoYXNoJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxoMT57e2xpbmstdG8gXCJGb29cIiBjbGFzcz1cImJhclwifX08L2gxPicpO1xufSk7XG5cbnRlc3QoJ011c3RhY2hlU3RhdGVtZW50OiBhcyBlbGVtZW50IGF0dHJpYnV0ZScsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8aDEgY2xhc3M9e3tpZiBmb28gXCJmb29cIiBcImJhclwifX0+VGVzdDwvaDE+Jyk7XG59KTtcblxudGVzdCgnTXVzdGFjaGVTdGF0ZW1lbnQ6IGFzIGVsZW1lbnQgYXR0cmlidXRlIHdpdGggcGF0aCcsIGZ1bmN0aW9uKCkge1xuICBwcmludEVxdWFsKCc8aDEgY2xhc3M9e3tjb2xvcn19PlRlc3Q8L2gxPicpO1xufSk7XG5cbnRlc3QoJ0NvbmNhdFN0YXRlbWVudDogaW4gZWxlbWVudCBhdHRyaWJ1dGUgc3RyaW5nJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxoMSBjbGFzcz1cInt7aWYgYWN0aXZlIFwiYWN0aXZlXCIgXCJpbmFjdGl2ZVwifX0gZm9vXCI+VGVzdDwvaDE+Jyk7XG59KTtcblxudGVzdCgnRWxlbWVudE1vZGlmaWVyU3RhdGVtZW50JywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxwIHt7YWN0aW9uIFwiYWN0aXZhdGVcIn19IHt7c29tZXRpbmcgZm9vPVwiYmFyXCJ9fT5UZXN0PC9wPicpO1xufSk7XG5cbnRlc3QoJ1BhcnRpYWxTdGF0ZW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPHA+e3s+c29tZXRoaW5nIFwicGFyYW1cIn19PC9wPicpO1xufSk7XG5cbnRlc3QoJ1N1YkV4cHJlc3Npb24nLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPHA+e3tteS1jb21wb25lbnQgc3VibWl0PShhY3Rpb24gKG11dCBtb2RlbC5uYW1lKSAoZnVsbC1uYW1lIG1vZGVsLmZpcnN0TmFtZSBcIlNtaXRoXCIpKX19PC9wPicpO1xufSk7XG5cbnRlc3QoJ0Jsb2NrU3RhdGVtZW50OiBtdWx0aWxpbmUnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPHVsPnt7I2VhY2ggZm9vcyBhcyB8Zm9vIGluZGV4fH19XFxuICA8bGk+e3tmb299fToge3tpbmRleH19PC9saT5cXG57ey9lYWNofX08L3VsPicpO1xufSk7XG5cbnRlc3QoJ0Jsb2NrU3RhdGVtZW50OiBpbmxpbmUnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgne3sjaWYgZm9vfX08cD57e2Zvb319PC9wPnt7L2lmfX0nKTtcbn0pO1xuXG50ZXN0KCdVbmRlZmluZWRMaXRlcmFsJywgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IGFzdCA9IGIucHJvZ3JhbShbYi5tdXN0YWNoZShiLnVuZGVmaW5lZCgpKV0pO1xuICBlcXVhbChwcmludChhc3QpLCAne3t1bmRlZmluZWR9fScpO1xufSk7XG5cbnRlc3QoJ051bWJlckxpdGVyYWwnLCBmdW5jdGlvbigpIHtcbiAgY29uc3QgYXN0ID0gYi5wcm9ncmFtKFtcbiAgICBiLm11c3RhY2hlKCdmb28nLCBudWxsLFxuICAgICAgYi5oYXNoKFtiLnBhaXIoJ2JhcicsIGIubnVtYmVyKDUpKV0pXG4gICAgKVxuICBdKTtcbiAgZXF1YWwocHJpbnQoYXN0KSwgJ3t7Zm9vIGJhcj01fX0nKTtcbn0pO1xuXG50ZXN0KCdCb29sZWFuTGl0ZXJhbCcsIGZ1bmN0aW9uKCkge1xuICBjb25zdCBhc3QgPSBiLnByb2dyYW0oW1xuICAgIGIubXVzdGFjaGUoJ2ZvbycsIG51bGwsXG4gICAgICBiLmhhc2goW2IucGFpcignYmFyJywgYi5ib29sZWFuKHRydWUpKV0pXG4gICAgKVxuICBdKTtcbiAgZXF1YWwocHJpbnQoYXN0KSwgJ3t7Zm9vIGJhcj10cnVlfX0nKTtcbn0pO1xuXG50ZXN0KCdIVE1MIGNvbW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPCEtLSBmb28gLS0+Jyk7XG59KTtcblxudGVzdCgnSGFuZGxlYmFycyBjb21tZW50JywgZnVuY3Rpb24oKSB7XG4gIGVxdWFsKHByaW50VHJhbnNmb3JtKCd7eyEgZm9vIH19JyksICd7eyEtLSBmb28gLS19fScpO1xufSk7XG5cbnRlc3QoJ0hhbmRsZWJhcnMgY29tbWVudDogaW4gRWxlbWVudE5vZGUnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgnPGRpdiB7eyEtLSBmb28gLS19fT48L2Rpdj4nKTtcbn0pO1xuXG50ZXN0KCdIYW5kbGViYXJzIGNvbW1lbnQ6IGluIEVsZW1lbnROb2RlIGNoaWxkcmVuJywgZnVuY3Rpb24oKSB7XG4gIHByaW50RXF1YWwoJzxkaXY+e3shLS0gZm9vIGJhciAtLX19PGI+PC9iPjwvZGl2PicpO1xufSk7XG5cbnRlc3QoJ0hhbmRsZWJhcnMgaW4gaGFuZGxlYmFyIGNvbW1lbnQnLCBmdW5jdGlvbigpIHtcbiAgcHJpbnRFcXVhbCgne3shLS0ge3tmb28tYmFyfX0gLS19fScpO1xufSk7XG4iXX0=