"use strict";
var builders_1 = require("../builders");
var utils_1 = require("../utils");
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    Program: function (program) {
        var body = [];
        var node = builders_1.default.program(body, program.blockParams, program.loc);
        var i, l = program.body.length;
        this.elementStack.push(node);
        if (l === 0) {
            return this.elementStack.pop();
        }
        for (i = 0; i < l; i++) {
            this.acceptNode(program.body[i]);
        }
        // Ensure that that the element stack is balanced properly.
        var poppedNode = this.elementStack.pop();
        if (poppedNode !== node) {
            throw new Error("Unclosed element `" + poppedNode.tag + "` (on line " + poppedNode.loc.start.line + ").");
        }
        return node;
    },
    BlockStatement: function (block) {
        delete block.inverseStrip;
        delete block.openString;
        delete block.closeStrip;
        if (this.tokenizer.state === 'comment') {
            this.appendToCommentData('{{' + this.sourceForMustache(block) + '}}');
            return;
        }
        if (this.tokenizer.state !== 'comment' && this.tokenizer.state !== 'data' && this.tokenizer.state !== 'beforeData') {
            throw new Error("A block may only be used inside an HTML element or another block.");
        }
        block = acceptCommonNodes(this, block);
        var program = block.program ? this.acceptNode(block.program) : null;
        var inverse = block.inverse ? this.acceptNode(block.inverse) : null;
        var node = builders_1.default.block(block.path, block.params, block.hash, program, inverse, block.loc);
        var parentProgram = this.currentElement();
        utils_1.appendChild(parentProgram, node);
    },
    MustacheStatement: function (rawMustache) {
        var tokenizer = this.tokenizer;
        var path = rawMustache.path, params = rawMustache.params, hash = rawMustache.hash, escaped = rawMustache.escaped, loc = rawMustache.loc;
        var mustache = builders_1.default.mustache(path, params, hash, !escaped, loc);
        if (tokenizer.state === 'comment') {
            this.appendToCommentData('{{' + this.sourceForMustache(mustache) + '}}');
            return;
        }
        acceptCommonNodes(this, mustache);
        switch (tokenizer.state) {
            // Tag helpers
            case "tagName":
                addElementModifier(this.currentNode, mustache);
                tokenizer.state = "beforeAttributeName";
                break;
            case "beforeAttributeName":
                addElementModifier(this.currentNode, mustache);
                break;
            case "attributeName":
            case "afterAttributeName":
                this.beginAttributeValue(false);
                this.finishAttributeValue();
                addElementModifier(this.currentNode, mustache);
                tokenizer.state = "beforeAttributeName";
                break;
            case "afterAttributeValueQuoted":
                addElementModifier(this.currentNode, mustache);
                tokenizer.state = "beforeAttributeName";
                break;
            // Attribute values
            case "beforeAttributeValue":
                appendDynamicAttributeValuePart(this.currentAttribute, mustache);
                tokenizer.state = 'attributeValueUnquoted';
                break;
            case "attributeValueDoubleQuoted":
            case "attributeValueSingleQuoted":
            case "attributeValueUnquoted":
                appendDynamicAttributeValuePart(this.currentAttribute, mustache);
                break;
            // TODO: Only append child when the tokenizer state makes
            // sense to do so, otherwise throw an error.
            default:
                utils_1.appendChild(this.currentElement(), mustache);
        }
        return mustache;
    },
    ContentStatement: function (content) {
        updateTokenizerLocation(this.tokenizer, content);
        this.tokenizer.tokenizePart(content.value);
        this.tokenizer.flushData();
    },
    CommentStatement: function (rawComment) {
        var tokenizer = this.tokenizer;
        var value = rawComment.value, loc = rawComment.loc;
        var comment = builders_1.default.mustacheComment(value, loc);
        if (tokenizer.state === 'comment') {
            this.appendToCommentData('{{' + this.sourceForMustache(comment) + '}}');
            return;
        }
        switch (tokenizer.state) {
            case "beforeAttributeName":
                this.currentNode.comments.push(comment);
                break;
            case 'beforeData':
            case 'data':
                utils_1.appendChild(this.currentElement(), comment);
                break;
            default:
                throw new Error("Using a Handlebars comment when in the `" + tokenizer.state + "` state is not supported: \"" + comment.value + "\" on line " + loc.start.line + ":" + loc.start.column);
        }
        return comment;
    },
    PartialStatement: function (partial) {
        utils_1.appendChild(this.currentElement(), partial);
        return partial;
    },
    SubExpression: function (sexpr) {
        return acceptCommonNodes(this, sexpr);
    },
    PathExpression: function (path) {
        var original = path.original, loc = path.loc;
        if (original.indexOf('/') !== -1) {
            // TODO add a SyntaxError with loc info
            if (original.slice(0, 2) === './') {
                throw new Error("Using \"./\" is not supported in Glimmer and unnecessary: \"" + path.original + "\" on line " + loc.start.line + ".");
            }
            if (original.slice(0, 3) === '../') {
                throw new Error("Changing context using \"../\" is not supported in Glimmer: \"" + path.original + "\" on line " + loc.start.line + ".");
            }
            if (original.indexOf('.') !== -1) {
                throw new Error("Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths: \"" + path.original + "\" on line " + loc.start.line + ".");
            }
            path.parts = [path.parts.join('/')];
        }
        delete path.depth;
        // This is to fix a bug in the Handlebars AST where the path expressions in
        // `{{this.foo}}` (and similarly `{{foo-bar this.foo named=this.foo}}` etc)
        // are simply turned into `{{foo}}`. The fix is to push it back onto the
        // parts array and let the runtime see the difference. However, we cannot
        // simply use the string `this` as it means literally the property called
        // "this" in the current context (it can be expressed in the syntax as
        // `{{[this]}}`, where the square bracket are generally for this kind of
        // escaping â€“ such as `{{foo.["bar.baz"]}}` would mean lookup a property
        // named literally "bar.baz" on `this.foo`). By convention, we use `null`
        // for this purpose.
        if (original.match(/^this(\..+)?$/)) {
            path.parts.unshift(null);
        }
        return path;
    },
    Hash: function (hash) {
        for (var i = 0; i < hash.pairs.length; i++) {
            this.acceptNode(hash.pairs[i].value);
        }
        return hash;
    },
    StringLiteral: function () { },
    BooleanLiteral: function () { },
    NumberLiteral: function () { },
    UndefinedLiteral: function () { },
    NullLiteral: function () { }
};
function calculateRightStrippedOffsets(original, value) {
    if (value === '') {
        // if it is empty, just return the count of newlines
        // in original
        return {
            lines: original.split("\n").length - 1,
            columns: 0
        };
    }
    // otherwise, return the number of newlines prior to
    // `value`
    var difference = original.split(value)[0];
    var lines = difference.split(/\n/);
    var lineCount = lines.length - 1;
    return {
        lines: lineCount,
        columns: lines[lineCount].length
    };
}
function updateTokenizerLocation(tokenizer, content) {
    var line = content.loc.start.line;
    var column = content.loc.start.column;
    var offsets = calculateRightStrippedOffsets(content.original, content.value);
    line = line + offsets.lines;
    if (offsets.lines) {
        column = offsets.columns;
    }
    else {
        column = column + offsets.columns;
    }
    tokenizer.line = line;
    tokenizer.column = column;
}
function acceptCommonNodes(compiler, node) {
    compiler.acceptNode(node.path);
    if (node.params) {
        for (var i = 0; i < node.params.length; i++) {
            compiler.acceptNode(node.params[i]);
        }
    }
    else {
        node.params = [];
    }
    if (node.hash) {
        compiler.acceptNode(node.hash);
    }
    else {
        node.hash = builders_1.default.hash();
    }
    return node;
}
function addElementModifier(element, mustache) {
    var path = mustache.path, params = mustache.params, hash = mustache.hash, loc = mustache.loc;
    var modifier = builders_1.default.elementModifier(path, params, hash, loc);
    element.modifiers.push(modifier);
}
function appendDynamicAttributeValuePart(attribute, part) {
    attribute.isDynamic = true;
    attribute.parts.push(part);
}
//# sourceMappingURL=data:application/json;base64,