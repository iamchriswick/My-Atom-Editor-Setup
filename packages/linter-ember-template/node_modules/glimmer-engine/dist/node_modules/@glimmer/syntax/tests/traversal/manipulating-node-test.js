"use strict";
var support_1 = require("../support");
var syntax_1 = require("@glimmer/syntax");
var errors_1 = require("@glimmer/syntax/lib/traversal/errors");
QUnit.module('[glimmer-syntax] Traversal - manipulating');
['enter', 'exit'].forEach(function (eventName) {
    QUnit.test("[" + eventName + "] Replacing self in a key (returning null)", function (assert) {
        var ast = syntax_1.preprocess("<x y={{z}} />");
        var attr = ast.body[0].attributes[0];
        assert.throws(function () {
            syntax_1.traverse(ast, {
                MustacheStatement: (_a = {},
                    _a[eventName] = function (node) {
                        if (node.path.parts[0] === 'z') {
                            return null;
                        }
                    },
                    _a)
            });
            var _a;
        }, errors_1.cannotRemoveNode(attr.value, attr, 'value'));
    });
    QUnit.test("[" + eventName + "] Replacing self in a key (returning an empty array)", function (assert) {
        var ast = syntax_1.preprocess("<x y={{z}} />");
        var attr = ast.body[0].attributes[0];
        assert.throws(function () {
            syntax_1.traverse(ast, {
                MustacheStatement: (_a = {},
                    _a[eventName] = function (node) {
                        if (node.path.parts[0] === 'z') {
                            return [];
                        }
                    },
                    _a)
            });
            var _a;
        }, errors_1.cannotRemoveNode(attr.value, attr, 'value'));
    });
    QUnit.test("[" + eventName + "] Replacing self in a key (returning a node)", function () {
        var ast = syntax_1.preprocess("<x y={{z}} />");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'z') {
                        return syntax_1.builders.mustache('a');
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "<x y={{a}} />");
        var _a;
    });
    QUnit.test("[" + eventName + "] Replacing self in a key (returning an array with a single node)", function () {
        var ast = syntax_1.preprocess("<x y={{z}} />");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'z') {
                        return [syntax_1.builders.mustache('a')];
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "<x y={{a}} />");
        var _a;
    });
    QUnit.test("[" + eventName + "] Replacing self in a key (returning an array with multiple nodes)", function (assert) {
        var ast = syntax_1.preprocess("<x y={{z}} />");
        var attr = ast.body[0].attributes[0];
        assert.throws(function () {
            syntax_1.traverse(ast, {
                MustacheStatement: (_a = {},
                    _a[eventName] = function (node) {
                        if (node.path.parts[0] === 'z') {
                            return [
                                syntax_1.builders.mustache('a'),
                                syntax_1.builders.mustache('b'),
                                syntax_1.builders.mustache('c')
                            ];
                        }
                    },
                    _a)
            });
            var _a;
        }, errors_1.cannotReplaceNode(attr.value, attr, 'value'));
    });
    QUnit.test("[" + eventName + "] Replacing self in an array (returning null)", function () {
        var ast = syntax_1.preprocess("{{x}}{{y}}{{z}}");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'y') {
                        return null;
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "{{x}}{{z}}");
        var _a;
    });
    QUnit.test("[" + eventName + "] Replacing self in an array (returning an empty array)", function () {
        var ast = syntax_1.preprocess("{{x}}{{y}}{{z}}");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'y') {
                        return [];
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "{{x}}{{z}}");
        var _a;
    });
    QUnit.test("[" + eventName + "] Replacing self in an array (returning a node)", function () {
        var ast = syntax_1.preprocess("{{x}}{{y}}{{z}}");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'y') {
                        return syntax_1.builders.mustache('a');
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "{{x}}{{a}}{{z}}");
        var _a;
    });
    QUnit.test("[" + eventName + "] Replacing self in an array (returning an array with a single node)", function () {
        var ast = syntax_1.preprocess("{{x}}{{y}}{{z}}");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'y') {
                        return [syntax_1.builders.mustache('a')];
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "{{x}}{{a}}{{z}}");
        var _a;
    });
    QUnit.test("[" + eventName + "] Replacing self in an array (returning an array with multiple nodes)", function () {
        var ast = syntax_1.preprocess("{{x}}{{y}}{{z}}");
        syntax_1.traverse(ast, {
            MustacheStatement: (_a = {},
                _a[eventName] = function (node) {
                    if (node.path.parts[0] === 'y') {
                        return [
                            syntax_1.builders.mustache('a'),
                            syntax_1.builders.mustache('b'),
                            syntax_1.builders.mustache('c')
                        ];
                    }
                },
                _a)
        });
        support_1.astEqual(ast, "{{x}}{{a}}{{b}}{{c}}{{z}}");
        var _a;
    });
});
QUnit.module('[glimmer-syntax] Traversal - manipulating (edge cases)');
QUnit.test('Inside of a block', function () {
    var ast = syntax_1.preprocess("{{y}}{{#w}}{{x}}{{y}}{{z}}{{/w}}");
    syntax_1.traverse(ast, {
        MustacheStatement: function (node) {
            if (node.path.parts[0] === 'y') {
                return [
                    syntax_1.builders.mustache('a'),
                    syntax_1.builders.mustache('b'),
                    syntax_1.builders.mustache('c')
                ];
            }
        }
    });
    support_1.astEqual(ast, "{{a}}{{b}}{{c}}{{#w}}{{x}}{{a}}{{b}}{{c}}{{z}}{{/w}}");
});
QUnit.test('Should recurrsively walk the transformed node', function (assert) {
    var ast = syntax_1.preprocess("{{x}}{{y}}{{z}}");
    syntax_1.traverse(ast, {
        MustacheStatement: function (node) {
            if (node.path.original === 'x') {
                return syntax_1.builders.mustache('y');
            }
            else if (node.path.original === 'y') {
                return syntax_1.builders.mustache('z');
            }
        }
    });
    support_1.astEqual(ast, "{{z}}{{z}}{{z}}");
});
QUnit.test('Should recurrsively walk the keys in the transformed node', function (assert) {
    var ast = syntax_1.preprocess("{{#foo}}{{#bar}}{{baz}}{{/bar}}{{else}}{{#bar}}{{bat}}{{/bar}}{{/foo}}");
    syntax_1.traverse(ast, {
        BlockStatement: function (node) {
            if (node.path.original === 'foo') {
                return syntax_1.builders.block(syntax_1.builders.path('x-foo'), node.params, node.hash, node.program, node.inverse, node.loc);
            }
            else if (node.path.original === 'bar') {
                return syntax_1.builders.block(syntax_1.builders.path('x-bar'), node.params, node.hash, node.program, node.inverse, node.loc);
            }
        },
        MustacheStatement: function (node) {
            if (node.path.original === 'baz') {
                return syntax_1.builders.mustache('x-baz');
            }
            else if (node.path.original === 'bat') {
                return syntax_1.builders.mustache('x-bat');
            }
        }
    });
    support_1.astEqual(ast, "{{#x-foo}}{{#x-bar}}{{x-baz}}{{/x-bar}}{{else}}{{#x-bar}}{{x-bat}}{{/x-bar}}{{/x-foo}}");
});
QUnit.test('Exit event is not triggered if the node is replaced during the enter event', function (assert) {
    var ast = syntax_1.preprocess("{{x}}");
    var entered = [];
    var exited = [];
    syntax_1.traverse(ast, {
        MustacheStatement: {
            enter: function (node) {
                entered.push(node.path.original);
                return syntax_1.builders.mustache('y');
            },
            exit: function (node) {
                exited.push(node.path.original);
            }
        }
    });
    assert.deepEqual(entered, ['x', 'y']);
    assert.deepEqual(exited, ['y']);
});
//# sourceMappingURL=data:application/json;base64,