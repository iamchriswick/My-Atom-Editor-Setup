"use strict";
var handlebars_1 = require("handlebars");
var builders_1 = require("./builders");
var print_1 = require("./generation/print");
var traverse_1 = require("./traversal/traverse");
var walker_1 = require("./traversal/walker");
var simple_html_tokenizer_1 = require("simple-html-tokenizer");
var handlebars_node_visitors_1 = require("./parser/handlebars-node-visitors");
var tokenizer_event_handlers_1 = require("./parser/tokenizer-event-handlers");
exports.syntax = {
    parse: preprocess,
    builders: builders_1.default,
    print: print_1.default,
    traverse: traverse_1.default,
    Walker: walker_1.default
};
function preprocess(html, options) {
    var ast = (typeof html === 'object') ? html : handlebars_1.parse(html);
    var combined = new Parser(html, options).acceptNode(ast);
    if (options && options.plugins && options.plugins.ast) {
        for (var i = 0, l = options.plugins.ast.length; i < l; i++) {
            var plugin = new options.plugins.ast[i](options);
            plugin.syntax = exports.syntax;
            combined = plugin.transform(combined);
        }
    }
    return combined;
}
exports.preprocess = preprocess;
var entityParser = new simple_html_tokenizer_1.EntityParser(simple_html_tokenizer_1.HTML5NamedCharRefs);
var Parser = (function () {
    function Parser(source, options) {
        if (options === void 0) { options = {}; }
        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.tokenizer = new simple_html_tokenizer_1.EventedTokenizer(this, entityParser);
        this.options = options;
        if (typeof source === 'string') {
            this.source = source.split(/(?:\r\n?|\n)/g);
        }
    }
    Parser.prototype.acceptNode = function (node) {
        return this[node.type](node);
    };
    Parser.prototype.currentElement = function () {
        return this.elementStack[this.elementStack.length - 1];
    };
    Parser.prototype.sourceForMustache = function (mustache) {
        var firstLine = mustache.loc.start.line - 1;
        var lastLine = mustache.loc.end.line - 1;
        var currentLine = firstLine - 1;
        var firstColumn = mustache.loc.start.column + 2;
        var lastColumn = mustache.loc.end.column - 2;
        var string = [];
        var line;
        if (!this.source) {
            return '{{' + mustache.path.id.original + '}}';
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                }
                else {
                    string.push(line.slice(firstColumn));
                }
            }
            else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            }
            else {
                string.push(line);
            }
        }
        return string.join('\n');
    };
    return Parser;
}());
exports.Parser = Parser;
for (var key in handlebars_node_visitors_1.default) {
    Parser.prototype[key] = handlebars_node_visitors_1.default[key];
}
for (var key in tokenizer_event_handlers_1.default) {
    Parser.prototype[key] = tokenizer_event_handlers_1.default[key];
}
//# sourceMappingURL=data:application/json;base64,