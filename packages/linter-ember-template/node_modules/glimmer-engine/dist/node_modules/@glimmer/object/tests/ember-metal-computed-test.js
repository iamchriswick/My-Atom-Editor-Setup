"use strict";
var support_1 = require("./support");
var object_1 = require("@glimmer/object");
function K() { return this; }
QUnit.module('Mixin.create - Computed Properties');
QUnit.test('overriding computed properties', function () {
    var MixinA, MixinB, MixinC, MixinD;
    var obj;
    MixinA = support_1.Mixin.create({
        aProp: object_1.computed(function () {
            return 'A';
        })
    });
    MixinB = support_1.Mixin.create({
        aProp: object_1.computed(function () {
            return this._super.apply(this, arguments) + 'B';
        })
    });
    MixinC = support_1.Mixin.create({
        aProp: object_1.computed(function () {
            return this._super.apply(this, arguments) + 'C';
        })
    });
    MixinD = support_1.Mixin.create({
        aProp: object_1.computed(function () {
            return this._super.apply(this, arguments) + 'D';
        })
    });
    obj = {};
    MixinA.apply(obj);
    MixinB.apply(obj);
    equal(support_1.get(obj, 'aProp'), 'AB', 'should expose super for B');
    obj = {};
    MixinA.apply(obj);
    MixinC.apply(obj);
    equal(support_1.get(obj, 'aProp'), 'AC', 'should expose super for C');
    obj = {};
    MixinA.apply(obj);
    MixinD.apply(obj);
    equal(support_1.get(obj, 'aProp'), 'AD', 'should define super for D');
    obj = {};
    support_1.mixin(obj, {
        aProp: object_1.computed(function (key) {
            return 'obj';
        })
    });
    MixinD.apply(obj);
    equal(support_1.get(obj, 'aProp'), 'objD', 'should preserve original computed property');
});
QUnit.test('calling set on overridden computed properties', function () {
    var SuperMixin, SubMixin;
    var obj;
    var superGetOccurred = false;
    var superSetOccurred = false;
    SuperMixin = support_1.Mixin.create({
        aProp: object_1.computed({
            get: function (key) { superGetOccurred = true; },
            set: function (key, value) { superSetOccurred = true; }
        })
    });
    SubMixin = support_1.Mixin.create(SuperMixin, {
        aProp: object_1.computed({
            get: function (key) { return this._super.apply(this, arguments); },
            set: function (key, value) { return this._super.apply(this, arguments); }
        })
    });
    obj = {};
    SubMixin.apply(obj);
    support_1.set(obj, 'aProp', 'set thyself');
    ok(superSetOccurred, 'should pass set to _super');
    superSetOccurred = false; // reset the set assertion
    obj = {};
    SubMixin.apply(obj);
    support_1.get(obj, 'aProp');
    ok(superGetOccurred, 'should pass get to _super');
    support_1.set(obj, 'aProp', 'set thyself');
    ok(superSetOccurred, 'should pass set to _super after getting');
});
QUnit.test('setter behavior works properly when overriding computed properties', function () {
    var obj = {};
    var MixinA = support_1.Mixin.create({
        cpWithSetter2: object_1.computed(K),
        cpWithSetter3: object_1.computed(K),
        cpWithoutSetter: object_1.computed(K)
    });
    var cpWasCalled = false;
    var MixinB = support_1.Mixin.create({
        cpWithSetter2: object_1.computed({
            get: K,
            set: function (k, v) { cpWasCalled = true; }
        }),
        cpWithSetter3: object_1.computed({
            get: K,
            set: function (k, v) { cpWasCalled = true; }
        }),
        cpWithoutSetter: object_1.computed(function (k) {
            cpWasCalled = true;
        })
    });
    MixinA.apply(obj);
    MixinB.apply(obj);
    support_1.set(obj, 'cpWithSetter2', 'test');
    ok(cpWasCalled, 'The computed property setter was called when defined with two args');
    cpWasCalled = false;
    support_1.set(obj, 'cpWithSetter3', 'test');
    ok(cpWasCalled, 'The computed property setter was called when defined with three args');
    cpWasCalled = false;
    support_1.set(obj, 'cpWithoutSetter', 'test');
    equal(support_1.get(obj, 'cpWithoutSetter'), 'test', 'The default setter was called, the value is correct');
    ok(!cpWasCalled, 'The default setter was called, not the CP itself');
});
//# sourceMappingURL=data:application/json;base64,