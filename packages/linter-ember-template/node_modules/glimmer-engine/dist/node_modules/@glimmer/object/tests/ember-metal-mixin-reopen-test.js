"use strict";
var object_1 = require("@glimmer/object");
var support_1 = require("./support");
QUnit.module('Mixin#reopen');
QUnit.test('using reopen() to add more properties to a simple', function () {
    var MixinA = object_1.Mixin.create({ foo: 'FOO', baz: 'BAZ' });
    MixinA.reopen({ bar: 'BAR', foo: 'FOO2' });
    var obj = {};
    MixinA.apply(obj);
    equal(support_1.get(obj, 'foo'), 'FOO2', 'mixin() should override');
    equal(support_1.get(obj, 'baz'), 'BAZ', 'preserve MixinA props');
    equal(support_1.get(obj, 'bar'), 'BAR', 'include MixinB props');
});
QUnit.test('using reopen() and calling _super where there is not a super function does not cause infinite recursion', function () {
    var Taco = object_1.default.extend({
        createBreakfast: function () {
            // There is no original createBreakfast function.
            // Calling the wrapped _super function here
            // used to end in an infinite call loop
            this._super.apply(this, arguments);
            return 'Breakfast!';
        }
    });
    Taco.reopen({
        createBreakfast: function () {
            return this._super.apply(this, arguments);
        }
    });
    var taco = Taco.create();
    var result;
    try {
        result = taco.createBreakfast();
    }
    catch (e) {
        result = 'Your breakfast was interrupted by an infinite stack error.';
        throw e;
    }
    equal(result, 'Breakfast!');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXItbWV0YWwtbWl4aW4tcmVvcGVuLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QvdGVzdHMvZW1iZXItbWV0YWwtbWl4aW4tcmVvcGVuLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUFxRDtBQUNyRCxxQ0FBZ0M7QUFFaEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUU3QixLQUFLLENBQUMsSUFBSSxDQUFDLG1EQUFtRCxFQUFFO0lBQzlELElBQUksTUFBTSxHQUFHLGNBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQzNDLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNiLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEIsS0FBSyxDQUFDLGFBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDMUQsS0FBSyxDQUFDLGFBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixDQUFDLENBQUM7SUFDdkQsS0FBSyxDQUFDLGFBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLHlHQUF5RyxFQUFFO0lBQ3BILElBQUksSUFBSSxHQUFHLGdCQUFXLENBQUMsTUFBTSxDQUFDO1FBQzVCLGVBQWU7WUFDYixpREFBaUQ7WUFDakQsMkNBQTJDO1lBQzNDLHVDQUF1QztZQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDbkMsTUFBTSxDQUFDLFlBQVksQ0FBQztRQUN0QixDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNWLGVBQWU7WUFDYixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLENBQUM7S0FDRixDQUFDLENBQUM7SUFFSCxJQUFJLElBQUksR0FBUSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFOUIsSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJLENBQUM7UUFDSCxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFBQyxLQUFLLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1YsTUFBTSxHQUFHLDREQUE0RCxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVELEtBQUssQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRW1iZXJPYmplY3QsIHsgTWl4aW4gfSBmcm9tICdAZ2xpbW1lci9vYmplY3QnO1xuaW1wb3J0IHsgZ2V0IH0gZnJvbSAnLi9zdXBwb3J0JztcblxuUVVuaXQubW9kdWxlKCdNaXhpbiNyZW9wZW4nKTtcblxuUVVuaXQudGVzdCgndXNpbmcgcmVvcGVuKCkgdG8gYWRkIG1vcmUgcHJvcGVydGllcyB0byBhIHNpbXBsZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgTWl4aW5BID0gTWl4aW4uY3JlYXRlKHsgZm9vOiAnRk9PJywgYmF6OiAnQkFaJyB9KTtcbiAgTWl4aW5BLnJlb3Blbih7IGJhcjogJ0JBUicsIGZvbzogJ0ZPTzInIH0pO1xuICBsZXQgb2JqID0ge307XG4gIE1peGluQS5hcHBseShvYmopO1xuXG4gIGVxdWFsKGdldChvYmosICdmb28nKSwgJ0ZPTzInLCAnbWl4aW4oKSBzaG91bGQgb3ZlcnJpZGUnKTtcbiAgZXF1YWwoZ2V0KG9iaiwgJ2JheicpLCAnQkFaJywgJ3ByZXNlcnZlIE1peGluQSBwcm9wcycpO1xuICBlcXVhbChnZXQob2JqLCAnYmFyJyksICdCQVInLCAnaW5jbHVkZSBNaXhpbkIgcHJvcHMnKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCd1c2luZyByZW9wZW4oKSBhbmQgY2FsbGluZyBfc3VwZXIgd2hlcmUgdGhlcmUgaXMgbm90IGEgc3VwZXIgZnVuY3Rpb24gZG9lcyBub3QgY2F1c2UgaW5maW5pdGUgcmVjdXJzaW9uJywgZnVuY3Rpb24oKSB7XG4gIGxldCBUYWNvID0gRW1iZXJPYmplY3QuZXh0ZW5kKHtcbiAgICBjcmVhdGVCcmVha2Zhc3QoKSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBvcmlnaW5hbCBjcmVhdGVCcmVha2Zhc3QgZnVuY3Rpb24uXG4gICAgICAvLyBDYWxsaW5nIHRoZSB3cmFwcGVkIF9zdXBlciBmdW5jdGlvbiBoZXJlXG4gICAgICAvLyB1c2VkIHRvIGVuZCBpbiBhbiBpbmZpbml0ZSBjYWxsIGxvb3BcbiAgICAgIHRoaXMuX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gJ0JyZWFrZmFzdCEnO1xuICAgIH1cbiAgfSk7XG5cbiAgVGFjby5yZW9wZW4oe1xuICAgIGNyZWF0ZUJyZWFrZmFzdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSk7XG5cbiAgbGV0IHRhY286IGFueSA9IFRhY28uY3JlYXRlKCk7XG5cbiAgbGV0IHJlc3VsdDtcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSB0YWNvLmNyZWF0ZUJyZWFrZmFzdCgpO1xuICB9IGNhdGNoKGUpIHtcbiAgICByZXN1bHQgPSAnWW91ciBicmVha2Zhc3Qgd2FzIGludGVycnVwdGVkIGJ5IGFuIGluZmluaXRlIHN0YWNrIGVycm9yLic7XG4gICAgdGhyb3cgZTtcbiAgfVxuXG4gIGVxdWFsKHJlc3VsdCwgJ0JyZWFrZmFzdCEnKTtcbn0pO1xuIl19