"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var object_reference_1 = require("@glimmer/object-reference");
var util_1 = require("@glimmer/util");
var object_1 = require("./object");
var utils_1 = require("./utils");
var isArray = Array.isArray;
exports.DESCRIPTOR = "5d90f84f-908e-4a42-9749-3d0f523c262c";
exports.BLUEPRINT = "8d97cf5f-db9e-48d8-a6b2-7a75b7170805";
var Descriptor = (function () {
    function Descriptor() {
        this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
    }
    return Descriptor;
}());
exports.Descriptor = Descriptor;
var Blueprint = (function () {
    function Blueprint() {
        this["8d97cf5f-db9e-48d8-a6b2-7a75b7170805"] = true;
    }
    return Blueprint;
}());
exports.Blueprint = Blueprint;
var Mixin = (function () {
    function Mixin(extensions, mixins) {
        this.extensions = null;
        this.concatenatedProperties = [];
        this.mergedProperties = [];
        this.dependencies = [];
        this.reopen(extensions);
        (_a = this.dependencies).push.apply(_a, mixins);
        var _a;
    }
    Mixin.create = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var extensions = args[args.length - 1];
        if (args.length === 0) {
            return new this({}, []);
        }
        else if (extensions instanceof Mixin) {
            return new this({}, args);
        }
        else {
            var deps = args.slice(0, -1).map(toMixin);
            return new this(extensions, deps);
        }
    };
    Mixin.mixins = function (obj) {
        if (typeof obj !== 'object' || obj === null)
            return [];
        var meta = object_1.ClassMeta.for(obj);
        if (!meta)
            return [];
        return meta.getAppliedMixins();
    };
    Mixin.prototype.detect = function (obj) {
        if (typeof obj !== 'object' || obj === null)
            return false;
        if (obj instanceof Mixin) {
            return obj.dependencies.indexOf(this) !== -1;
        }
        var meta = object_1.ClassMeta.for(obj);
        return !!meta && meta.hasAppliedMixin(this);
    };
    Mixin.prototype.reopen = function (extensions) {
        if (this.extensions) {
            this.dependencies.push(toMixin(this.extensions));
        }
        if (typeof extensions === 'object' && 'concatenatedProperties' in extensions) {
            var concat = void 0;
            var rawConcat = extensions.concatenatedProperties;
            if (isArray(rawConcat)) {
                concat = rawConcat.slice();
            }
            else if (rawConcat === null || rawConcat === undefined) {
                concat = [];
            }
            else {
                concat = [rawConcat];
            }
            delete extensions.concatenatedProperties;
            this.concatenatedProperties = concat;
        }
        if (typeof extensions === 'object' && 'mergedProperties' in extensions) {
            var merged = void 0;
            var rawMerged = extensions.mergedProperties;
            if (isArray(rawMerged)) {
                merged = rawMerged.slice();
            }
            else if (rawMerged === null || rawMerged === undefined) {
                merged = [];
            }
            else {
                merged = [rawMerged];
            }
            delete extensions.mergedProperties;
            this.mergedProperties = merged;
        }
        var normalized = Object.keys(extensions).reduce(function (obj, key) {
            var value = extensions[key];
            switch (typeof value) {
                case 'function':
                    obj[key] = new MethodBlueprint({ value: value });
                    break;
                case 'object':
                    if (value && exports.BLUEPRINT in value) {
                        obj[key] = value;
                        break;
                    }
                /* falls through */
                default:
                    obj[key] = new DataBlueprint({ value: value });
            }
            return obj;
        }, util_1.dict());
        this.extensions = util_1.dict();
        util_1.assign(this.extensions, object_1.turbocharge(normalized));
    };
    Mixin.prototype.apply = function (target) {
        var meta = target[object_reference_1.CLASS_META] = target[object_reference_1.CLASS_META] || new object_1.ClassMeta();
        this.dependencies.forEach(function (m) { return m.apply(target); });
        this.mergeProperties(target, target, meta);
        meta.addMixin(this);
        meta.seal();
        meta.reseal(target);
        return target;
    };
    Mixin.prototype.extendPrototype = function (Original) {
        Original.prototype = Object.create(Original.prototype);
        this.dependencies.forEach(function (m) { return m.extendPrototype(Original); });
        this.extendPrototypeOnto(Original, Original);
    };
    Mixin.prototype.extendPrototypeOnto = function (Subclass, Parent) {
        this.dependencies.forEach(function (m) { return m.extendPrototypeOnto(Subclass, Parent); });
        this.mergeProperties(Subclass.prototype, Parent.prototype, Subclass[object_reference_1.CLASS_META]);
        Subclass[object_reference_1.CLASS_META].addMixin(this);
    };
    Mixin.prototype.extendStatic = function (Target) {
        this.dependencies.forEach(function (m) { return m.extendStatic(Target); });
        this.mergeProperties(Target, Object.getPrototypeOf(Target), Target[object_reference_1.CLASS_META][object_reference_1.CLASS_META]);
        Target[object_reference_1.CLASS_META].addStaticMixin(this);
    };
    Mixin.prototype.mergeProperties = function (target, parent, meta) {
        var _this = this;
        if (meta.hasAppliedMixin(this))
            return;
        meta.addAppliedMixin(this);
        this.mergedProperties.forEach(function (k) { return meta.addMergedProperty(k, parent[k]); });
        this.concatenatedProperties.forEach(function (k) { return meta.addConcatenatedProperty(k, []); });
        new ValueDescriptor({ value: meta.getConcatenatedProperties() }).define(target, 'concatenatedProperties', null);
        new ValueDescriptor({ value: meta.getMergedProperties() }).define(target, 'mergedProperties', null);
        Object.keys(this.extensions).forEach(function (key) {
            var extension = _this.extensions[key];
            var desc = extension.descriptor(target, key, meta);
            desc.define(target, key, parent);
        });
        new ValueDescriptor({ value: utils_1.ROOT }).define(target, '_super', null);
    };
    return Mixin;
}());
exports.Mixin = Mixin;
function extend(Parent) {
    var extensions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        extensions[_i - 1] = arguments[_i];
    }
    var Super = Parent;
    var Subclass = (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return class_1;
    }(Super));
    Subclass[object_reference_1.CLASS_META] = object_1.InstanceMeta.fromParent(Parent[object_reference_1.CLASS_META]);
    var mixins = extensions.map(toMixin);
    Parent[object_reference_1.CLASS_META].addSubclass(Subclass);
    mixins.forEach(function (m) { return Subclass[object_reference_1.CLASS_META].addMixin(m); });
    object_1.ClassMeta.applyAllMixins(Subclass, Parent);
    return Subclass;
}
exports.extend = extend;
function relinkSubclasses(Parent) {
    Parent[object_reference_1.CLASS_META].getSubclasses().forEach(function (Subclass) {
        Subclass[object_reference_1.CLASS_META].reset(Parent[object_reference_1.CLASS_META]);
        Subclass.prototype = Object.create(Parent.prototype);
        object_1.ClassMeta.applyAllMixins(Subclass, Parent);
        // recurse into sub-subclasses
        relinkSubclasses(Subclass);
    });
}
exports.relinkSubclasses = relinkSubclasses;
function toMixin(extension) {
    if (extension instanceof Mixin)
        return extension;
    else
        return new Mixin(extension, []);
}
exports.toMixin = toMixin;
var ValueDescriptor = (function (_super) {
    __extends(ValueDescriptor, _super);
    function ValueDescriptor(_a) {
        var _b = _a.enumerable, enumerable = _b === void 0 ? true : _b, _c = _a.configurable, configurable = _c === void 0 ? true : _c, _d = _a.writable, writable = _d === void 0 ? true : _d, value = _a.value;
        var _this = _super.call(this) || this;
        _this.enumerable = enumerable;
        _this.configurable = configurable;
        _this.writable = writable;
        _this.value = value;
        return _this;
    }
    ValueDescriptor.prototype.define = function (target, key, home) {
        Object.defineProperty(target, key, {
            enumerable: this.enumerable,
            configurable: this.configurable,
            writable: this.writable,
            value: this.value
        });
    };
    return ValueDescriptor;
}(Descriptor));
var AccessorDescriptor = (function (_super) {
    __extends(AccessorDescriptor, _super);
    function AccessorDescriptor(_a) {
        var enumerable = _a.enumerable, configurable = _a.configurable, get = _a.get, set = _a.set;
        var _this = _super.call(this) || this;
        _this.enumerable = enumerable;
        _this.configurable = configurable;
        _this.get = get;
        _this.set = set;
        return _this;
    }
    AccessorDescriptor.prototype.define = function (target, key) {
        Object.defineProperty(target, key, {
            enumerable: this.enumerable,
            configurable: this.configurable,
            get: this.get,
            set: this.set
        });
    };
    return AccessorDescriptor;
}(Descriptor));
var DataBlueprint = (function (_super) {
    __extends(DataBlueprint, _super);
    function DataBlueprint(_a) {
        var _b = _a.enumerable, enumerable = _b === void 0 ? true : _b, _c = _a.configurable, configurable = _c === void 0 ? true : _c, _d = _a.writable, writable = _d === void 0 ? true : _d, value = _a.value;
        var _this = _super.call(this) || this;
        _this.enumerable = enumerable;
        _this.configurable = configurable;
        _this.value = value;
        _this.writable = writable;
        return _this;
    }
    DataBlueprint.prototype.descriptor = function (target, key, classMeta) {
        var _a = this, enumerable = _a.enumerable, configurable = _a.configurable, writable = _a.writable, value = _a.value;
        if (classMeta.hasConcatenatedProperty(key)) {
            classMeta.addConcatenatedProperty(key, value);
            value = classMeta.getConcatenatedProperty(key);
        }
        else if (classMeta.hasMergedProperty(key)) {
            classMeta.addMergedProperty(key, value);
            value = classMeta.getMergedProperty(key);
        }
        return new ValueDescriptor({ enumerable: enumerable, configurable: configurable, writable: writable, value: value });
    };
    return DataBlueprint;
}(Blueprint));
exports.DataBlueprint = DataBlueprint;
var AccessorBlueprint = (function (_super) {
    __extends(AccessorBlueprint, _super);
    function AccessorBlueprint(_a) {
        var _b = _a.enumerable, enumerable = _b === void 0 ? true : _b, _c = _a.configurable, configurable = _c === void 0 ? true : _c, get = _a.get, set = _a.set;
        var _this = _super.call(this) || this;
        _this.enumerable = enumerable;
        _this.configurable = configurable;
        _this.get = get;
        _this.set = set;
        return _this;
    }
    AccessorBlueprint.prototype.descriptor = function (target, key, classMeta) {
        return new ValueDescriptor({
            enumerable: this.enumerable,
            configurable: this.configurable,
            get: this.get,
            set: this.set
        });
    };
    return AccessorBlueprint;
}(Blueprint));
exports.AccessorBlueprint = AccessorBlueprint;
var MethodDescriptor = (function (_super) {
    __extends(MethodDescriptor, _super);
    function MethodDescriptor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MethodDescriptor.prototype.define = function (target, key, home) {
        this.value = wrapMethod(home, key, this.value);
        _super.prototype.define.call(this, target, key, home);
    };
    return MethodDescriptor;
}(ValueDescriptor));
var MethodBlueprint = (function (_super) {
    __extends(MethodBlueprint, _super);
    function MethodBlueprint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MethodBlueprint.prototype.descriptor = function (target, key, classMeta) {
        var desc = _super.prototype.descriptor.call(this, target, key, classMeta);
        return new MethodDescriptor(desc);
    };
    return MethodBlueprint;
}(DataBlueprint));
function wrapMethod(home, methodName, original) {
    if (!(methodName in home))
        return maybeWrap(original);
    var superMethod = home[methodName];
    var func = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this)
            return original.apply(this, args);
        var lastSuper = this._super;
        this._super = superMethod;
        try {
            return original.apply(this, args);
        }
        finally {
            this._super = lastSuper;
        }
    };
    func.__wrapped = true;
    return func;
}
exports.wrapMethod = wrapMethod;
function maybeWrap(original) {
    if ('__wrapped' in original)
        return original;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this)
            return original.apply(this, args);
        var lastSuper = this._super;
        this._super = utils_1.ROOT;
        try {
            return original.apply(this, args);
        }
        finally {
            this._super = lastSuper;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,