"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var object_reference_1 = require("@glimmer/object-reference");
var util_1 = require("@glimmer/util");
var mixin_1 = require("./mixin");
var isArray = Array.isArray;
var utils_1 = require("./utils");
exports.EMPTY_CACHE = function EMPTY_CACHE() { };
var CLASS_META = "df8be4c8-4e89-44e2-a8f9-550c8dacdca7";
function turbocharge(obj) {
    // function Dummy() {}
    // Dummy.prototype = obj;
    return obj;
}
exports.turbocharge = turbocharge;
var SealedMeta = (function (_super) {
    __extends(SealedMeta, _super);
    function SealedMeta() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SealedMeta.prototype.addReferenceTypeFor = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        throw new Error("Cannot modify reference types on a sealed meta");
    };
    return SealedMeta;
}(object_reference_1.Meta));
var ClassMeta = (function () {
    function ClassMeta() {
        this.referenceTypes = util_1.dict();
        this.propertyMetadata = util_1.dict();
        this.concatenatedProperties = util_1.dict();
        this.hasConcatenatedProperties = false;
        this.mergedProperties = util_1.dict();
        this.hasMergedProperties = false;
        this.mixins = [];
        this.appliedMixins = [];
        this.staticMixins = [];
        this.subclasses = [];
        this.slots = [];
        this.InstanceMetaConstructor = null;
    }
    ClassMeta.fromParent = function (parent) {
        var meta = new this();
        meta.reset(parent);
        return meta;
    };
    ClassMeta.for = function (object) {
        if (CLASS_META in object)
            return object[CLASS_META];
        else if (object.constructor)
            return object.constructor[CLASS_META] || null;
        else
            return null;
    };
    ClassMeta.prototype.init = function (object, attrs) {
        if (typeof attrs !== 'object' || attrs === null)
            return;
        if (this.hasConcatenatedProperties) {
            var concatProps = this.concatenatedProperties;
            for (var prop in concatProps) {
                if (prop in attrs) {
                    var concat = concatProps[prop].slice();
                    object[prop] = concat.concat(attrs[prop]);
                }
            }
        }
        if (this.hasMergedProperties) {
            var mergedProps = this.mergedProperties;
            for (var prop in mergedProps) {
                if (prop in attrs) {
                    var merged = util_1.assign({}, mergedProps[prop]);
                    object[prop] = util_1.assign(merged, attrs[prop]);
                }
            }
        }
    };
    ClassMeta.prototype.addStaticMixin = function (mixin) {
        this.staticMixins.push(mixin);
    };
    ClassMeta.prototype.addMixin = function (mixin) {
        this.mixins.push(mixin);
    };
    ClassMeta.prototype.getStaticMixins = function () {
        return this.staticMixins;
    };
    ClassMeta.prototype.getMixins = function () {
        return this.mixins;
    };
    ClassMeta.prototype.addAppliedMixin = function (mixin) {
        this.appliedMixins.push(mixin);
    };
    ClassMeta.prototype.hasAppliedMixin = function (mixin) {
        return this.appliedMixins.indexOf(mixin) !== -1;
    };
    ClassMeta.prototype.getAppliedMixins = function () {
        return this.appliedMixins;
    };
    ClassMeta.prototype.hasStaticMixin = function (mixin) {
        return this.staticMixins.indexOf(mixin) !== -1;
    };
    ClassMeta.applyAllMixins = function (Subclass, Parent) {
        Subclass[CLASS_META].getMixins().forEach(function (m) { return m.extendPrototypeOnto(Subclass, Parent); });
        Subclass[CLASS_META].getStaticMixins().forEach(function (m) { return m.extendStatic(Subclass); });
        Subclass[CLASS_META].seal();
    };
    ClassMeta.prototype.addSubclass = function (constructor) {
        this.subclasses.push(constructor);
    };
    ClassMeta.prototype.getSubclasses = function () {
        return this.subclasses;
    };
    ClassMeta.prototype.addPropertyMetadata = function (property, value) {
        this.propertyMetadata[property] = value;
    };
    ClassMeta.prototype.metadataForProperty = function (property) {
        return this.propertyMetadata[property];
    };
    ClassMeta.prototype.addReferenceTypeFor = function (property, type) {
        this.referenceTypes[property] = type;
    };
    ClassMeta.prototype.addSlotFor = function (property) {
        this.slots.push(property);
    };
    ClassMeta.prototype.hasConcatenatedProperty = function (property) {
        if (!this.hasConcatenatedProperties)
            return false;
        return property in this.concatenatedProperties;
    };
    ClassMeta.prototype.getConcatenatedProperty = function (property) {
        return this.concatenatedProperties[property];
    };
    ClassMeta.prototype.getConcatenatedProperties = function () {
        return Object.keys(this.concatenatedProperties);
    };
    ClassMeta.prototype.addConcatenatedProperty = function (property, value) {
        this.hasConcatenatedProperties = true;
        if (property in this.concatenatedProperties) {
            var val = this.concatenatedProperties[property].concat(value);
            this.concatenatedProperties[property] = val;
        }
        else {
            this.concatenatedProperties[property] = value;
        }
    };
    ClassMeta.prototype.hasMergedProperty = function (property) {
        if (!this.hasMergedProperties)
            return false;
        return property in this.mergedProperties;
    };
    ClassMeta.prototype.getMergedProperty = function (property) {
        return this.mergedProperties[property];
    };
    ClassMeta.prototype.getMergedProperties = function () {
        return Object.keys(this.mergedProperties);
    };
    ClassMeta.prototype.addMergedProperty = function (property, value) {
        this.hasMergedProperties = true;
        if (isArray(value)) {
            throw new Error("You passed in `" + JSON.stringify(value) + "` as the value for `foo` but `foo` cannot be an Array");
        }
        if (property in this.mergedProperties && this.mergedProperties[property] && value) {
            this.mergedProperties[property] = mergeMergedProperties(value, this.mergedProperties[property]);
        }
        else {
            value = value === null ? value : value || {};
            this.mergedProperties[property] = value;
        }
    };
    ClassMeta.prototype.getReferenceTypes = function () {
        return this.referenceTypes;
    };
    ClassMeta.prototype.getPropertyMetadata = function () {
        return this.propertyMetadata;
    };
    ClassMeta.prototype.reset = function (parent) {
        this.referenceTypes = util_1.dict();
        this.propertyMetadata = util_1.dict();
        this.concatenatedProperties = util_1.dict();
        this.mergedProperties = util_1.dict();
        if (parent) {
            this.hasConcatenatedProperties = parent.hasConcatenatedProperties;
            for (var prop in parent.concatenatedProperties) {
                this.concatenatedProperties[prop] = parent.concatenatedProperties[prop].slice();
            }
            this.hasMergedProperties = parent.hasMergedProperties;
            for (var prop in parent.mergedProperties) {
                this.mergedProperties[prop] = util_1.assign({}, parent.mergedProperties[prop]);
            }
            util_1.assign(this.referenceTypes, parent.referenceTypes);
            util_1.assign(this.propertyMetadata, parent.propertyMetadata);
        }
    };
    ClassMeta.prototype.reseal = function (obj) {
        var meta = object_reference_1.Meta.for(obj);
        var fresh = new this.InstanceMetaConstructor(obj, {});
        var referenceTypes = meta.getReferenceTypes();
        var slots = meta.getSlots();
        turbocharge(util_1.assign(referenceTypes, this.referenceTypes));
        turbocharge(util_1.assign(slots, fresh.getSlots()));
    };
    ClassMeta.prototype.seal = function () {
        var referenceTypes = turbocharge(util_1.assign({}, this.referenceTypes));
        turbocharge(this.concatenatedProperties);
        turbocharge(this.mergedProperties);
        if (!this.hasMergedProperties && !this.hasConcatenatedProperties) {
            this.init = function () { };
        }
        var slots = this.slots;
        var Slots = (function () {
            function Slots() {
                var _this = this;
                slots.forEach(function (name) {
                    _this[name] = exports.EMPTY_CACHE;
                });
            }
            return Slots;
        }());
        this.InstanceMetaConstructor = (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.slots = new Slots();
                _this.referenceTypes = referenceTypes;
                return _this;
            }
            class_1.prototype.getReferenceTypes = function () {
                return this.referenceTypes;
            };
            class_1.prototype.referenceTypeFor = function (property) {
                return this.referenceTypes[property] || object_reference_1.PropertyReference;
            };
            class_1.prototype.getSlots = function () {
                return this.slots;
            };
            return class_1;
        }(SealedMeta));
        turbocharge(this);
    };
    return ClassMeta;
}());
exports.ClassMeta = ClassMeta;
function mergeMergedProperties(attrs, parent) {
    var merged = util_1.assign({}, parent);
    for (var prop in attrs) {
        if (prop in parent && typeof parent[prop] === 'function' && typeof attrs[prop] === 'function') {
            var wrapped = mixin_1.wrapMethod(parent, prop, attrs[prop]);
            merged[prop] = wrapped;
        }
        else {
            merged[prop] = attrs[prop];
        }
    }
    return merged;
}
var InstanceMeta = (function (_super) {
    __extends(InstanceMeta, _super);
    function InstanceMeta() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this["df8be4c8-4e89-44e2-a8f9-550c8dacdca7"] = ClassMeta.fromParent(null);
        return _this;
    }
    InstanceMeta.fromParent = function (parent) {
        return _super.fromParent.call(this, parent);
    };
    InstanceMeta.prototype.reset = function (parent) {
        _super.prototype.reset.call(this, parent);
        if (parent)
            this[CLASS_META].reset(parent[CLASS_META]);
    };
    InstanceMeta.prototype.seal = function () {
        _super.prototype.seal.call(this);
        this[CLASS_META].seal();
    };
    return InstanceMeta;
}(ClassMeta));
exports.InstanceMeta = InstanceMeta;
var GlimmerObject = (function () {
    function GlimmerObject(attrs) {
        this._super = utils_1.ROOT;
        this._meta = null;
        if (attrs)
            util_1.assign(this, attrs);
        this.constructor[CLASS_META].init(this, attrs);
        this._super = utils_1.ROOT;
        util_1.initializeGuid(this);
        this.init();
    }
    GlimmerObject.extend = function () {
        var extensions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensions[_i] = arguments[_i];
        }
        return mixin_1.extend.apply(void 0, [this].concat(extensions));
    };
    GlimmerObject.create = function (attrs) {
        return new this(attrs);
    };
    GlimmerObject.reopen = function (extensions) {
        mixin_1.toMixin(extensions).extendPrototype(this);
        this[CLASS_META].seal();
        mixin_1.relinkSubclasses(this);
    };
    GlimmerObject.reopenClass = function (extensions) {
        mixin_1.toMixin(extensions).extendStatic(this);
        this[CLASS_META].seal();
    };
    GlimmerObject.metaForProperty = function (property) {
        var value = this[CLASS_META].metadataForProperty(property);
        if (!value)
            throw new Error("metaForProperty() could not find a computed property with key '" + property + "'.");
        return value;
    };
    GlimmerObject.eachComputedProperty = function (callback) {
        var metadata = this[CLASS_META].getPropertyMetadata();
        if (!metadata)
            return;
        for (var prop in metadata) {
            callback(prop, metadata[prop]);
        }
    };
    GlimmerObject.prototype.init = function () { };
    GlimmerObject.prototype.get = function (key) {
        return this[key];
    };
    GlimmerObject.prototype.set = function (key, value) {
        this[key] = value;
    };
    GlimmerObject.prototype.setProperties = function (attrs) {
        util_1.assign(this, attrs);
    };
    GlimmerObject.prototype.destroy = function () { };
    return GlimmerObject;
}());
GlimmerObject["df8be4c8-4e89-44e2-a8f9-550c8dacdca7"] = InstanceMeta.fromParent(null);
GlimmerObject.isClass = true;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = GlimmerObject;
//# sourceMappingURL=data:application/json;base64,