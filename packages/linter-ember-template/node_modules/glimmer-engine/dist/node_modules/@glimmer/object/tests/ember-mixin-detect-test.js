"use strict";
var object_1 = require("@glimmer/object");
QUnit.module('Mixin.detect');
QUnit.test('detect() finds a directly applied mixin', function () {
    var MixinA = object_1.Mixin.create();
    var obj = {};
    equal(MixinA.detect(obj), false, 'MixinA.detect(obj) before apply()');
    MixinA.apply(obj);
    equal(MixinA.detect(obj), true, 'MixinA.detect(obj) after apply()');
});
QUnit.test('detect() finds nested mixins', function () {
    var MixinA = object_1.Mixin.create({});
    var MixinB = object_1.Mixin.create(MixinA);
    var obj = {};
    equal(MixinA.detect(obj), false, 'MixinA.detect(obj) before apply()');
    MixinB.apply(obj);
    equal(MixinA.detect(obj), true, 'MixinA.detect(obj) after apply()');
});
QUnit.test('detect() finds mixins on other mixins', function () {
    var MixinA = object_1.Mixin.create({});
    var MixinB = object_1.Mixin.create(MixinA);
    equal(MixinA.detect(MixinB), true, 'MixinA is part of MixinB');
    equal(MixinB.detect(MixinA), false, 'MixinB is not part of MixinA');
});
QUnit.test('detect handles null values', function () {
    var MixinA = object_1.Mixin.create();
    equal(MixinA.detect(null), false);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXItbWl4aW4tZGV0ZWN0LXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QvdGVzdHMvZW1iZXItbWl4aW4tZGV0ZWN0LXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUF3QztBQUV4QyxLQUFLLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTdCLEtBQUssQ0FBQyxJQUFJLENBQUMseUNBQXlDLEVBQUU7SUFDcEQsSUFBSSxNQUFNLEdBQUcsY0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzVCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUViLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0lBRXRFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGtDQUFrQyxDQUFDLENBQUM7QUFDdEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDhCQUE4QixFQUFFO0lBQ3pDLElBQUksTUFBTSxHQUFHLGNBQUssQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsSUFBSSxNQUFNLEdBQUcsY0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFFYixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztJQUV0RSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDO0FBQ3RFLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsRUFBRTtJQUNsRCxJQUFJLE1BQU0sR0FBRyxjQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLElBQUksTUFBTSxHQUFHLGNBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUEwQixDQUFDLENBQUM7SUFDL0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLDhCQUE4QixDQUFDLENBQUM7QUFDdEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFO0lBQ3ZDLElBQUksTUFBTSxHQUFHLGNBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM1QixLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1peGluIH0gZnJvbSAnQGdsaW1tZXIvb2JqZWN0JztcblxuUVVuaXQubW9kdWxlKCdNaXhpbi5kZXRlY3QnKTtcblxuUVVuaXQudGVzdCgnZGV0ZWN0KCkgZmluZHMgYSBkaXJlY3RseSBhcHBsaWVkIG1peGluJywgZnVuY3Rpb24oKSB7XG4gIGxldCBNaXhpbkEgPSBNaXhpbi5jcmVhdGUoKTtcbiAgbGV0IG9iaiA9IHt9O1xuXG4gIGVxdWFsKE1peGluQS5kZXRlY3Qob2JqKSwgZmFsc2UsICdNaXhpbkEuZGV0ZWN0KG9iaikgYmVmb3JlIGFwcGx5KCknKTtcblxuICBNaXhpbkEuYXBwbHkob2JqKTtcbiAgZXF1YWwoTWl4aW5BLmRldGVjdChvYmopLCB0cnVlLCAnTWl4aW5BLmRldGVjdChvYmopIGFmdGVyIGFwcGx5KCknKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCdkZXRlY3QoKSBmaW5kcyBuZXN0ZWQgbWl4aW5zJywgZnVuY3Rpb24oKSB7XG4gIGxldCBNaXhpbkEgPSBNaXhpbi5jcmVhdGUoe30pO1xuICBsZXQgTWl4aW5CID0gTWl4aW4uY3JlYXRlKE1peGluQSk7XG4gIGxldCBvYmogPSB7fTtcblxuICBlcXVhbChNaXhpbkEuZGV0ZWN0KG9iaiksIGZhbHNlLCAnTWl4aW5BLmRldGVjdChvYmopIGJlZm9yZSBhcHBseSgpJyk7XG5cbiAgTWl4aW5CLmFwcGx5KG9iaik7XG4gIGVxdWFsKE1peGluQS5kZXRlY3Qob2JqKSwgdHJ1ZSwgJ01peGluQS5kZXRlY3Qob2JqKSBhZnRlciBhcHBseSgpJyk7XG59KTtcblxuUVVuaXQudGVzdCgnZGV0ZWN0KCkgZmluZHMgbWl4aW5zIG9uIG90aGVyIG1peGlucycsIGZ1bmN0aW9uKCkge1xuICBsZXQgTWl4aW5BID0gTWl4aW4uY3JlYXRlKHt9KTtcbiAgbGV0IE1peGluQiA9IE1peGluLmNyZWF0ZShNaXhpbkEpO1xuICBlcXVhbChNaXhpbkEuZGV0ZWN0KE1peGluQiksIHRydWUsICdNaXhpbkEgaXMgcGFydCBvZiBNaXhpbkInKTtcbiAgZXF1YWwoTWl4aW5CLmRldGVjdChNaXhpbkEpLCBmYWxzZSwgJ01peGluQiBpcyBub3QgcGFydCBvZiBNaXhpbkEnKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCdkZXRlY3QgaGFuZGxlcyBudWxsIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgTWl4aW5BID0gTWl4aW4uY3JlYXRlKCk7XG4gIGVxdWFsKE1peGluQS5kZXRlY3QobnVsbCksIGZhbHNlKTtcbn0pO1xuIl19