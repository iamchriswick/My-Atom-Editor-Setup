"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var object_reference_1 = require("@glimmer/object-reference");
var object_1 = require("./object");
var mixin_1 = require("./mixin");
var ComputedBlueprint = (function (_super) {
    __extends(ComputedBlueprint, _super);
    function ComputedBlueprint(accessor, deps) {
        if (deps === void 0) { deps = []; }
        var _this = _super.call(this) || this;
        _this.metadata = {};
        _this.accessor = accessor;
        _this.deps = deps;
        return _this;
    }
    ComputedBlueprint.prototype.descriptor = function (target, key, classMeta) {
        classMeta.addReferenceTypeFor(key, object_reference_1.ComputedReferenceBlueprint(key, this.deps));
        classMeta.addPropertyMetadata(key, this.metadata);
        classMeta.addSlotFor(key);
        return new Computed(this.accessor);
    };
    ComputedBlueprint.prototype.property = function () {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        this.deps = paths.map(function (d) { return d.split('.'); });
        return this;
    };
    ComputedBlueprint.prototype.meta = function (object) {
        this.metadata = object;
        return this;
    };
    ComputedBlueprint.prototype.volatile = function () {
        return this;
    };
    return ComputedBlueprint;
}(mixin_1.Blueprint));
exports.ComputedBlueprint = ComputedBlueprint;
var Computed = (function () {
    function Computed(accessor) {
        this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
        this.accessor = accessor;
    }
    Computed.prototype.define = function (prototype, key, home) {
        Object.defineProperty(prototype, key, wrapAccessor(home, key, this.accessor));
    };
    return Computed;
}());
function wrapAccessor(home, accessorName, _desc) {
    var superDesc = getPropertyDescriptor(home, accessorName);
    var originalGet;
    var originalSet;
    var desc = {
        enumerable: true,
        configurable: true,
    };
    if (_desc.get && _desc.get.length > 0) {
        originalGet = function () { return _desc.get.call(this, accessorName); };
    }
    else {
        originalGet = _desc.get;
    }
    if (_desc.set && _desc.set.length > 1) {
        originalSet = function (value) {
            return _desc.set.call(this, accessorName, value);
        };
    }
    else {
        originalSet = _desc.set;
    }
    var cacheGet = function () {
        if (object_reference_1.Meta.exists(this)) {
            var slot = object_reference_1.Meta.for(this).getSlots()[accessorName];
            if (slot !== object_1.EMPTY_CACHE)
                return slot;
        }
        return originalGet.call(this);
    };
    var cacheSet;
    if (originalSet) {
        cacheSet = function (value) {
            var meta = object_reference_1.Meta.for(this);
            var slots = meta.getSlots();
            var ret = originalSet.call(this, value);
            if (ret !== undefined) {
                slots[accessorName] = ret;
            }
        };
    }
    else {
        cacheSet = function (value) {
            var meta = object_reference_1.Meta.for(this);
            var slots = meta.getSlots();
            if (value !== undefined)
                slots[accessorName] = value;
        };
    }
    if (!superDesc || 'value' in superDesc) {
        desc.get = cacheGet;
        desc.set = cacheSet;
        return desc;
    }
    desc.get = function () {
        var lastSuper = this._super;
        this._super = function () {
            return superDesc.get.call(this);
        };
        try {
            return cacheGet.call(this);
        }
        finally {
            this._super = lastSuper;
        }
    };
    desc.set = function (val) {
        var lastSuper = this._super;
        this._super = function () {
            return superDesc.set.call(this, val);
        };
        try {
            return cacheSet.call(this, val);
        }
        finally {
            this._super = lastSuper;
        }
    };
    return desc;
}
function getPropertyDescriptor(subject, name) {
    var pd = Object.getOwnPropertyDescriptor(subject, name);
    var proto = Object.getPrototypeOf(subject);
    while (typeof pd === 'undefined' && proto !== null) {
        pd = Object.getOwnPropertyDescriptor(proto, name);
        proto = Object.getPrototypeOf(proto);
    }
    return pd;
}
function computed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var last = args.pop();
    var deps = args;
    if (typeof last === 'function') {
        return (_a = new ComputedBlueprint({
            get: last
        })).property.apply(_a, deps);
    }
    else if (typeof last === 'object') {
        return (_b = new ComputedBlueprint(last)).property.apply(_b, deps);
    }
    else {
        throw new TypeError("computed expects a function or an object as last argument");
    }
    var _a, _b;
}
exports.computed = computed;
function observer() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
}
exports.observer = observer;
//# sourceMappingURL=data:application/json;base64,