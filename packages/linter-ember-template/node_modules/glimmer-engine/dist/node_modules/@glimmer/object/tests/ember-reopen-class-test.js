"use strict";
var object_1 = require("@glimmer/object");
function get(obj, key) {
    return obj[key];
}
QUnit.module('GlimmerObject.reopenClass');
QUnit.test('adds new properties to subclass', function () {
    var Subclass = object_1.default.extend();
    Subclass.reopenClass({
        foo: function () { return 'FOO'; },
        bar: 'BAR'
    });
    equal(Subclass.foo(), 'FOO', 'Adds method');
    equal(get(Subclass, 'bar'), 'BAR', 'Adds property');
});
QUnit.test('class properties inherited by subclasses', function () {
    var Subclass = object_1.default.extend();
    Subclass.reopenClass({
        foo: function () { return 'FOO'; },
        bar: 'BAR'
    });
    var SubSub = Subclass.extend();
    equal(SubSub['foo'](), 'FOO', 'Adds method');
    equal(get(SubSub, 'bar'), 'BAR', 'Adds property');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXItcmVvcGVuLWNsYXNzLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QvdGVzdHMvZW1iZXItcmVvcGVuLWNsYXNzLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUEwQztBQUUxQyxhQUFhLEdBQUcsRUFBRSxHQUFHO0lBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEIsQ0FBQztBQUVELEtBQUssQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUUxQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFO0lBQzVDLElBQUksUUFBUSxHQUFRLGdCQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDekMsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUNuQixHQUFHLGdCQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLEdBQUcsRUFBRSxLQUFLO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQywwQ0FBMEMsRUFBRTtJQUNyRCxJQUFJLFFBQVEsR0FBRyxnQkFBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3BDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDbkIsR0FBRyxnQkFBSyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN2QixHQUFHLEVBQUUsS0FBSztLQUNYLENBQUMsQ0FBQztJQUVILElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUUvQixLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzdDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztBQUNwRCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFbWJlck9iamVjdCBmcm9tICdAZ2xpbW1lci9vYmplY3QnO1xuXG5mdW5jdGlvbiBnZXQob2JqLCBrZXkpIHtcbiAgcmV0dXJuIG9ialtrZXldO1xufVxuXG5RVW5pdC5tb2R1bGUoJ0dsaW1tZXJPYmplY3QucmVvcGVuQ2xhc3MnKTtcblxuUVVuaXQudGVzdCgnYWRkcyBuZXcgcHJvcGVydGllcyB0byBzdWJjbGFzcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgU3ViY2xhc3M6IGFueSA9IEVtYmVyT2JqZWN0LmV4dGVuZCgpO1xuICBTdWJjbGFzcy5yZW9wZW5DbGFzcyh7XG4gICAgZm9vKCkgeyByZXR1cm4gJ0ZPTyc7IH0sXG4gICAgYmFyOiAnQkFSJ1xuICB9KTtcblxuICBlcXVhbChTdWJjbGFzcy5mb28oKSwgJ0ZPTycsICdBZGRzIG1ldGhvZCcpO1xuICBlcXVhbChnZXQoU3ViY2xhc3MsICdiYXInKSwgJ0JBUicsICdBZGRzIHByb3BlcnR5Jyk7XG59KTtcblxuUVVuaXQudGVzdCgnY2xhc3MgcHJvcGVydGllcyBpbmhlcml0ZWQgYnkgc3ViY2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgU3ViY2xhc3MgPSBFbWJlck9iamVjdC5leHRlbmQoKTtcbiAgU3ViY2xhc3MucmVvcGVuQ2xhc3Moe1xuICAgIGZvbygpIHsgcmV0dXJuICdGT08nOyB9LFxuICAgIGJhcjogJ0JBUidcbiAgfSk7XG5cbiAgbGV0IFN1YlN1YiA9IFN1YmNsYXNzLmV4dGVuZCgpO1xuXG4gIGVxdWFsKFN1YlN1YlsnZm9vJ10oKSwgJ0ZPTycsICdBZGRzIG1ldGhvZCcpO1xuICBlcXVhbChnZXQoU3ViU3ViLCAnYmFyJyksICdCQVInLCAnQWRkcyBwcm9wZXJ0eScpO1xufSk7XG4iXX0=