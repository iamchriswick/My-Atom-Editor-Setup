// NOTE: A previous iteration differentiated between public and private props
// as well as methods vs props.  We are just keeping these for testing; the
// current impl doesn't care about the differences as much...
"use strict";
var support_1 = require("./support");
var object_1 = require("@glimmer/object");
var PrivateProperty = object_1.Mixin.create({
    _foo: '_FOO'
});
var PublicProperty = object_1.Mixin.create({
    foo: 'FOO'
});
var PrivateMethod = object_1.Mixin.create({
    _fooMethod: function () { }
});
var PublicMethod = object_1.Mixin.create({
    fooMethod: function () { }
});
var BarProperties = object_1.Mixin.create({
    _bar: '_BAR',
    bar: 'bar'
});
var BarMethods = object_1.Mixin.create({
    _barMethod: function () { },
    barMethod: function () { }
});
var Combined = object_1.Mixin.create(BarProperties, BarMethods);
var obj;
QUnit.module('Mixin.mixins (introspection)', {
    setup: function () {
        obj = {};
        support_1.mixin(obj, PrivateProperty, PublicProperty, PrivateMethod, PublicMethod, Combined);
    }
});
QUnit.test('Ember.mixins()', function () {
    deepEqual(object_1.Mixin.mixins(obj), [PrivateProperty, PublicProperty, PrivateMethod, PublicMethod, BarProperties, BarMethods, Combined], 'should return included mixins');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXItbWV0YWwtbWl4aW4taW50cm9zcGVjdGlvbi10ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvb2JqZWN0L3Rlc3RzL2VtYmVyLW1ldGFsLW1peGluLWludHJvc3BlY3Rpb24tdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2RUFBNkU7QUFDN0UsMkVBQTJFO0FBQzNFLDZEQUE2RDs7QUFFN0QscUNBQWtDO0FBQ2xDLDBDQUF3QztBQUV4QyxJQUFJLGVBQWUsR0FBRyxjQUFLLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksRUFBRSxNQUFNO0NBQ2IsQ0FBQyxDQUFDO0FBRUgsSUFBSSxjQUFjLEdBQUcsY0FBSyxDQUFDLE1BQU0sQ0FBQztJQUNoQyxHQUFHLEVBQUUsS0FBSztDQUNYLENBQUMsQ0FBQztBQUVILElBQUksYUFBYSxHQUFHLGNBQUssQ0FBQyxNQUFNLENBQUM7SUFDL0IsVUFBVSxnQkFBSSxDQUFDO0NBQ2hCLENBQUMsQ0FBQztBQUVILElBQUksWUFBWSxHQUFHLGNBQUssQ0FBQyxNQUFNLENBQUM7SUFDOUIsU0FBUyxnQkFBSSxDQUFDO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsSUFBSSxhQUFhLEdBQUcsY0FBSyxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFJLEVBQUUsTUFBTTtJQUNaLEdBQUcsRUFBRSxLQUFLO0NBQ1gsQ0FBQyxDQUFDO0FBRUgsSUFBSSxVQUFVLEdBQUcsY0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM1QixVQUFVLGdCQUFJLENBQUM7SUFDZixTQUFTLGdCQUFJLENBQUM7Q0FDZixDQUFDLENBQUM7QUFFSCxJQUFJLFFBQVEsR0FBRyxjQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUV2RCxJQUFJLEdBQUcsQ0FBQztBQUVSLEtBQUssQ0FBQyxNQUFNLENBQUMsOEJBQThCLEVBQUU7SUFDM0MsS0FBSztRQUNILEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDVCxlQUFLLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRixDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtJQUMzQixTQUFTLENBQUMsY0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFDekIsQ0FBQyxlQUFlLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsRUFDbkcsK0JBQStCLENBQ2hDLENBQUM7QUFDSixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIE5PVEU6IEEgcHJldmlvdXMgaXRlcmF0aW9uIGRpZmZlcmVudGlhdGVkIGJldHdlZW4gcHVibGljIGFuZCBwcml2YXRlIHByb3BzXG4vLyBhcyB3ZWxsIGFzIG1ldGhvZHMgdnMgcHJvcHMuICBXZSBhcmUganVzdCBrZWVwaW5nIHRoZXNlIGZvciB0ZXN0aW5nOyB0aGVcbi8vIGN1cnJlbnQgaW1wbCBkb2Vzbid0IGNhcmUgYWJvdXQgdGhlIGRpZmZlcmVuY2VzIGFzIG11Y2guLi5cblxuaW1wb3J0IHsgbWl4aW4gfSBmcm9tICcuL3N1cHBvcnQnO1xuaW1wb3J0IHsgTWl4aW4gfSBmcm9tICdAZ2xpbW1lci9vYmplY3QnO1xuXG5sZXQgUHJpdmF0ZVByb3BlcnR5ID0gTWl4aW4uY3JlYXRlKHtcbiAgX2ZvbzogJ19GT08nXG59KTtcblxubGV0IFB1YmxpY1Byb3BlcnR5ID0gTWl4aW4uY3JlYXRlKHtcbiAgZm9vOiAnRk9PJ1xufSk7XG5cbmxldCBQcml2YXRlTWV0aG9kID0gTWl4aW4uY3JlYXRlKHtcbiAgX2Zvb01ldGhvZCgpIHt9XG59KTtcblxubGV0IFB1YmxpY01ldGhvZCA9IE1peGluLmNyZWF0ZSh7XG4gIGZvb01ldGhvZCgpIHt9XG59KTtcblxubGV0IEJhclByb3BlcnRpZXMgPSBNaXhpbi5jcmVhdGUoe1xuICBfYmFyOiAnX0JBUicsXG4gIGJhcjogJ2Jhcidcbn0pO1xuXG5sZXQgQmFyTWV0aG9kcyA9IE1peGluLmNyZWF0ZSh7XG4gIF9iYXJNZXRob2QoKSB7fSxcbiAgYmFyTWV0aG9kKCkge31cbn0pO1xuXG5sZXQgQ29tYmluZWQgPSBNaXhpbi5jcmVhdGUoQmFyUHJvcGVydGllcywgQmFyTWV0aG9kcyk7XG5cbmxldCBvYmo7XG5cblFVbml0Lm1vZHVsZSgnTWl4aW4ubWl4aW5zIChpbnRyb3NwZWN0aW9uKScsIHtcbiAgc2V0dXAoKSB7XG4gICAgb2JqID0ge307XG4gICAgbWl4aW4ob2JqLCBQcml2YXRlUHJvcGVydHksIFB1YmxpY1Byb3BlcnR5LCBQcml2YXRlTWV0aG9kLCBQdWJsaWNNZXRob2QsIENvbWJpbmVkKTtcbiAgfVxufSk7XG5cblFVbml0LnRlc3QoJ0VtYmVyLm1peGlucygpJywgZnVuY3Rpb24oKSB7XG4gIGRlZXBFcXVhbChNaXhpbi5taXhpbnMob2JqKSxcbiAgICBbUHJpdmF0ZVByb3BlcnR5LCBQdWJsaWNQcm9wZXJ0eSwgUHJpdmF0ZU1ldGhvZCwgUHVibGljTWV0aG9kLCBCYXJQcm9wZXJ0aWVzLCBCYXJNZXRob2RzLCBDb21iaW5lZF0sXG4gICAgJ3Nob3VsZCByZXR1cm4gaW5jbHVkZWQgbWl4aW5zJ1xuICApO1xufSk7XG4iXX0=