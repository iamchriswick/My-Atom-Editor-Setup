"use strict";
var support_1 = require("./support");
var object_1 = require("@glimmer/object");
QUnit.module('Mixin.aliasMethod');
function validateAliasMethod(obj) {
    equal(obj.fooMethod(), 'FOO', 'obj.fooMethod()');
    equal(obj.barMethod(), 'FOO', 'obj.barMethod should be a copy of foo');
}
QUnit.test('methods of another name are aliased when the mixin is applied', function () {
    var MyMixin = support_1.Mixin.create({
        fooMethod: function () { return 'FOO'; },
        barMethod: object_1.aliasMethod('fooMethod')
    });
    var obj = MyMixin.apply({});
    validateAliasMethod(obj);
});
QUnit.test('should follow aliasMethods all the way down', function () {
    var MyMixin = support_1.Mixin.create({
        bar: object_1.aliasMethod('foo'),
        baz: function () { return 'baz'; },
        foo: object_1.aliasMethod('baz')
    });
    var obj = MyMixin.apply({});
    equal(support_1.get(obj, 'bar')(), 'baz', 'should have followed aliasMethods');
});
QUnit.skip('should alias methods from other dependent mixins', function () {
    var BaseMixin = support_1.Mixin.create({
        fooMethod: function () { return 'FOO'; }
    });
    var MyMixin = support_1.Mixin.create(BaseMixin, {
        barMethod: object_1.aliasMethod('fooMethod')
    });
    var obj = MyMixin.apply({});
    validateAliasMethod(obj);
});
QUnit.test('should alias methods from other mixins applied at same time', function () {
    var BaseMixin = support_1.Mixin.create({
        fooMethod: function () { return 'FOO'; }
    });
    var MyMixin = support_1.Mixin.create({
        barMethod: object_1.aliasMethod('fooMethod')
    });
    var obj = support_1.mixin({}, BaseMixin, MyMixin);
    validateAliasMethod(obj);
});
QUnit.test('should alias methods from mixins already applied on object', function () {
    var BaseMixin = support_1.Mixin.create({
        quxMethod: function () { return 'qux'; }
    });
    var MyMixin = support_1.Mixin.create({
        bar: object_1.aliasMethod('foo'),
        barMethod: object_1.aliasMethod('fooMethod')
    });
    var obj = {
        fooMethod: function () { return 'FOO'; }
    };
    BaseMixin.apply(obj);
    MyMixin.apply(obj);
    validateAliasMethod(obj);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXItbWV0YWwtYWxpYXMtbWV0aG9kLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QvdGVzdHMvZW1iZXItbWV0YWwtYWxpYXMtbWV0aG9kLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFDQUE4QztBQUM5QywwQ0FBOEM7QUFFOUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBRWxDLDZCQUE2QixHQUFHO0lBQzlCLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDakQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxLQUFLLEVBQUUsdUNBQXVDLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQywrREFBK0QsRUFBRTtJQUMxRSxJQUFJLE9BQU8sR0FBVSxlQUFLLENBQUMsTUFBTSxDQUFDO1FBQ2hDLFNBQVMsZ0JBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDN0IsU0FBUyxFQUFFLG9CQUFXLENBQUMsV0FBVyxDQUFDO0tBQ3BDLENBQUMsQ0FBQztJQUVILElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxFQUFFO0lBQ3hELElBQUksT0FBTyxHQUFVLGVBQUssQ0FBQyxNQUFNLENBQUM7UUFDaEMsR0FBRyxFQUFFLG9CQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3ZCLEdBQUcsZ0JBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDdkIsR0FBRyxFQUFFLG9CQUFXLENBQUMsS0FBSyxDQUFDO0tBQ3hCLENBQUMsQ0FBQztJQUVILElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsS0FBSyxDQUFDLGFBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsbUNBQW1DLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsa0RBQWtELEVBQUU7SUFDN0QsSUFBSSxTQUFTLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixTQUFTLGdCQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQzlCLENBQUMsQ0FBQztJQUVILElBQUksT0FBTyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1FBQ3BDLFNBQVMsRUFBRSxvQkFBVyxDQUFDLFdBQVcsQ0FBQztLQUNwQyxDQUFDLENBQUM7SUFFSCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyw2REFBNkQsRUFBRTtJQUN4RSxJQUFJLFNBQVMsR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLFNBQVMsZ0JBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7S0FDOUIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxPQUFPLEdBQUcsZUFBSyxDQUFDLE1BQU0sQ0FBQztRQUN6QixTQUFTLEVBQUUsb0JBQVcsQ0FBQyxXQUFXLENBQUM7S0FDcEMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxHQUFHLEdBQUcsZUFBSyxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDREQUE0RCxFQUFFO0lBQ3ZFLElBQUksU0FBUyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUM7UUFDM0IsU0FBUyxnQkFBSyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUM5QixDQUFDLENBQUM7SUFFSCxJQUFJLE9BQU8sR0FBRyxlQUFLLENBQUMsTUFBTSxDQUFDO1FBQ3pCLEdBQUcsRUFBRSxvQkFBVyxDQUFDLEtBQUssQ0FBQztRQUN2QixTQUFTLEVBQUUsb0JBQVcsQ0FBQyxXQUFXLENBQUM7S0FDcEMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxHQUFHLEdBQUc7UUFDUixTQUFTLGdCQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQzlCLENBQUM7SUFFRixTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbkIsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNaXhpbiwgZ2V0LCBtaXhpbiB9IGZyb20gJy4vc3VwcG9ydCc7XG5pbXBvcnQgeyBhbGlhc01ldGhvZCB9IGZyb20gJ0BnbGltbWVyL29iamVjdCc7XG5cblFVbml0Lm1vZHVsZSgnTWl4aW4uYWxpYXNNZXRob2QnKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVBbGlhc01ldGhvZChvYmopIHtcbiAgZXF1YWwob2JqLmZvb01ldGhvZCgpLCAnRk9PJywgJ29iai5mb29NZXRob2QoKScpO1xuICBlcXVhbChvYmouYmFyTWV0aG9kKCksICdGT08nLCAnb2JqLmJhck1ldGhvZCBzaG91bGQgYmUgYSBjb3B5IG9mIGZvbycpO1xufVxuXG5RVW5pdC50ZXN0KCdtZXRob2RzIG9mIGFub3RoZXIgbmFtZSBhcmUgYWxpYXNlZCB3aGVuIHRoZSBtaXhpbiBpcyBhcHBsaWVkJywgZnVuY3Rpb24oKSB7XG4gIGxldCBNeU1peGluID0gPE1peGluPk1peGluLmNyZWF0ZSh7XG4gICAgZm9vTWV0aG9kKCkgeyByZXR1cm4gJ0ZPTyc7IH0sXG4gICAgYmFyTWV0aG9kOiBhbGlhc01ldGhvZCgnZm9vTWV0aG9kJylcbiAgfSk7XG5cbiAgbGV0IG9iaiA9IE15TWl4aW4uYXBwbHkoe30pO1xuICB2YWxpZGF0ZUFsaWFzTWV0aG9kKG9iaik7XG59KTtcblxuUVVuaXQudGVzdCgnc2hvdWxkIGZvbGxvdyBhbGlhc01ldGhvZHMgYWxsIHRoZSB3YXkgZG93bicsIGZ1bmN0aW9uKCkge1xuICBsZXQgTXlNaXhpbiA9IDxNaXhpbj5NaXhpbi5jcmVhdGUoe1xuICAgIGJhcjogYWxpYXNNZXRob2QoJ2ZvbycpLCAvLyBwdXQgZmlyc3QgdG8gYnJlYWsgb3JkZXJlZCBpdGVyYXRpb25cbiAgICBiYXooKSB7IHJldHVybiAnYmF6JzsgfSxcbiAgICBmb286IGFsaWFzTWV0aG9kKCdiYXonKVxuICB9KTtcblxuICBsZXQgb2JqID0gTXlNaXhpbi5hcHBseSh7fSk7XG4gIGVxdWFsKGdldChvYmosICdiYXInKSgpLCAnYmF6JywgJ3Nob3VsZCBoYXZlIGZvbGxvd2VkIGFsaWFzTWV0aG9kcycpO1xufSk7XG5cblFVbml0LnNraXAoJ3Nob3VsZCBhbGlhcyBtZXRob2RzIGZyb20gb3RoZXIgZGVwZW5kZW50IG1peGlucycsIGZ1bmN0aW9uKCkge1xuICBsZXQgQmFzZU1peGluID0gTWl4aW4uY3JlYXRlKHtcbiAgICBmb29NZXRob2QoKSB7IHJldHVybiAnRk9PJzsgfVxuICB9KTtcblxuICBsZXQgTXlNaXhpbiA9IE1peGluLmNyZWF0ZShCYXNlTWl4aW4sIHtcbiAgICBiYXJNZXRob2Q6IGFsaWFzTWV0aG9kKCdmb29NZXRob2QnKVxuICB9KTtcblxuICBsZXQgb2JqID0gTXlNaXhpbi5hcHBseSh7fSk7XG4gIHZhbGlkYXRlQWxpYXNNZXRob2Qob2JqKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCdzaG91bGQgYWxpYXMgbWV0aG9kcyBmcm9tIG90aGVyIG1peGlucyBhcHBsaWVkIGF0IHNhbWUgdGltZScsIGZ1bmN0aW9uKCkge1xuICBsZXQgQmFzZU1peGluID0gTWl4aW4uY3JlYXRlKHtcbiAgICBmb29NZXRob2QoKSB7IHJldHVybiAnRk9PJzsgfVxuICB9KTtcblxuICBsZXQgTXlNaXhpbiA9IE1peGluLmNyZWF0ZSh7XG4gICAgYmFyTWV0aG9kOiBhbGlhc01ldGhvZCgnZm9vTWV0aG9kJylcbiAgfSk7XG5cbiAgbGV0IG9iaiA9IG1peGluKHt9LCBCYXNlTWl4aW4sIE15TWl4aW4pO1xuICB2YWxpZGF0ZUFsaWFzTWV0aG9kKG9iaik7XG59KTtcblxuUVVuaXQudGVzdCgnc2hvdWxkIGFsaWFzIG1ldGhvZHMgZnJvbSBtaXhpbnMgYWxyZWFkeSBhcHBsaWVkIG9uIG9iamVjdCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgQmFzZU1peGluID0gTWl4aW4uY3JlYXRlKHtcbiAgICBxdXhNZXRob2QoKSB7IHJldHVybiAncXV4JzsgfVxuICB9KTtcblxuICBsZXQgTXlNaXhpbiA9IE1peGluLmNyZWF0ZSh7XG4gICAgYmFyOiBhbGlhc01ldGhvZCgnZm9vJyksXG4gICAgYmFyTWV0aG9kOiBhbGlhc01ldGhvZCgnZm9vTWV0aG9kJylcbiAgfSk7XG5cbiAgbGV0IG9iaiA9IHtcbiAgICBmb29NZXRob2QoKSB7IHJldHVybiAnRk9PJzsgfVxuICB9O1xuXG4gIEJhc2VNaXhpbi5hcHBseShvYmopO1xuICBNeU1peGluLmFwcGx5KG9iaik7XG5cbiAgdmFsaWRhdGVBbGlhc01ldGhvZChvYmopO1xufSk7XG4iXX0=