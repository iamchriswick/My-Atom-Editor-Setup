"use strict";
var object_1 = require("@glimmer/object");
exports.Mixin = object_1.Mixin;
var object_reference_1 = require("@glimmer/object-reference");
function get(obj, key) {
    if (key.indexOf('.') !== -1) {
        var path = key.split('.');
        return path.reduce(function (obj, key) { return obj[key]; }, obj);
    }
    return obj[key];
}
exports.get = get;
function set(obj, key, value) {
    if (key.indexOf('.') !== -1) {
        var path = key.split('.');
        var parent = path.slice(0, -1).reduce(function (obj, key) { return obj[key]; }, obj);
        object_reference_1.setProperty(parent, path[path.length - 1], value);
    }
    else {
        object_reference_1.setProperty(obj, key, value);
    }
}
exports.set = set;
function mixin(obj) {
    var extensions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        extensions[_i - 1] = arguments[_i];
    }
    // if (obj._meta) throw new Error("Can't reopen a POJO after mixins were already applied to it");
    extensions.forEach(function (e) { return object_1.toMixin(e).apply(obj); });
    return obj;
}
exports.mixin = mixin;
function defineProperty(obj, key, desc) {
    var extensions = {};
    extensions[key] = desc;
    mixin(obj, extensions);
}
exports.defineProperty = defineProperty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VwcG9ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC90ZXN0cy9zdXBwb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQ0FBNEQ7QUFFbkQsK0JBQUs7QUFEZCw4REFBd0Q7QUFHeEQsYUFBb0IsR0FBRyxFQUFFLEdBQUc7SUFDMUIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxHQUFHLElBQUssT0FBQSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQVIsQ0FBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFDRCxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLENBQUM7QUFORCxrQkFNQztBQUVELGFBQW9CLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSztJQUNqQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBUixDQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkUsOEJBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sOEJBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLENBQUM7QUFDSCxDQUFDO0FBUkQsa0JBUUM7QUFFRCxlQUFzQixHQUFHO0lBQUUsb0JBQWE7U0FBYixVQUFhLEVBQWIscUJBQWEsRUFBYixJQUFhO1FBQWIsbUNBQWE7O0lBQ3RDLGlHQUFpRztJQUNqRyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsZ0JBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQXJCLENBQXFCLENBQUMsQ0FBQztJQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUpELHNCQUlDO0FBRUQsd0JBQStCLEdBQVEsRUFBRSxHQUFXLEVBQUUsSUFBZTtJQUNuRSxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDcEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUV2QixLQUFLLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFMRCx3Q0FLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1peGluLCBCbHVlcHJpbnQsIHRvTWl4aW4gfSBmcm9tICdAZ2xpbW1lci9vYmplY3QnO1xuaW1wb3J0IHsgc2V0UHJvcGVydHkgfSBmcm9tICdAZ2xpbW1lci9vYmplY3QtcmVmZXJlbmNlJztcbmV4cG9ydCB7IE1peGluIH07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQob2JqLCBrZXkpIHtcbiAgaWYgKGtleS5pbmRleE9mKCcuJykgIT09IC0xKSB7XG4gICAgbGV0IHBhdGggPSBrZXkuc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gcGF0aC5yZWR1Y2UoKG9iaiwga2V5KSA9PiBvYmpba2V5XSwgb2JqKTtcbiAgfVxuICByZXR1cm4gb2JqW2tleV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkuaW5kZXhPZignLicpICE9PSAtMSkge1xuICAgIGxldCBwYXRoID0ga2V5LnNwbGl0KCcuJyk7XG4gICAgbGV0IHBhcmVudCA9IHBhdGguc2xpY2UoMCwgLTEpLnJlZHVjZSgob2JqLCBrZXkpID0+IG9ialtrZXldLCBvYmopO1xuICAgIHNldFByb3BlcnR5KHBhcmVudCwgcGF0aFtwYXRoLmxlbmd0aCAtIDFdLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0UHJvcGVydHkob2JqLCBrZXksIHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWl4aW4ob2JqLCAuLi5leHRlbnNpb25zKSB7XG4gIC8vIGlmIChvYmouX21ldGEpIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlb3BlbiBhIFBPSk8gYWZ0ZXIgbWl4aW5zIHdlcmUgYWxyZWFkeSBhcHBsaWVkIHRvIGl0XCIpO1xuICBleHRlbnNpb25zLmZvckVhY2goZSA9PiB0b01peGluKGUpLmFwcGx5KG9iaikpO1xuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkob2JqOiBhbnksIGtleTogc3RyaW5nLCBkZXNjOiBCbHVlcHJpbnQpIHtcbiAgbGV0IGV4dGVuc2lvbnMgPSB7fTtcbiAgZXh0ZW5zaW9uc1trZXldID0gZGVzYztcblxuICBtaXhpbihvYmosIGV4dGVuc2lvbnMpO1xufVxuIl19