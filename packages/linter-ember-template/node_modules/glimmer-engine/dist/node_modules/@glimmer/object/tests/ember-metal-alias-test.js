"use strict";
var object_1 = require("@glimmer/object");
var object_reference_1 = require("@glimmer/object-reference");
var support_1 = require("./support");
var obj, count;
QUnit.module('defineProperty - alias', {
    setup: function () {
        obj = { foo: { faz: 'FOO' } };
        count = 0;
    },
    teardown: function () {
        obj = null;
    }
});
function shouldBeClean(reference, msg) {
    // a "clean" reference is allowed to report dirty
}
function shouldBeDirty(reference, msg) {
    // equal(reference.isDirty(), true, msg || `${reference} should be dirty`);
}
QUnit.test('should proxy get to alt key', function () {
    support_1.defineProperty(obj, 'bar', object_1.alias('foo.faz'));
    equal(support_1.get(obj, 'bar'), 'FOO');
});
QUnit.test('should proxy set to alt key', function () {
    support_1.defineProperty(obj, 'bar', object_1.alias('foo.faz'));
    support_1.set(obj, 'bar', 'BAR');
    equal(support_1.get(obj, 'foo.faz'), 'BAR');
});
QUnit.test('should observe the alias', function () {
    support_1.defineProperty(obj, 'bar', object_1.alias('foo.faz'));
    var ref = object_reference_1.Meta.for(obj).root().get('bar');
    var val = ref.value();
    equal(val, 'FOO');
    shouldBeClean(ref);
    support_1.set(obj.foo, 'faz', 'FAZ');
    shouldBeDirty(ref, "after setting the property the alias is for");
    equal(ref.value(), 'FAZ');
});
function observe(obj, key) {
    var ref = object_reference_1.Meta.for(obj).root().get(key);
    // ref.value();
    return ref;
}
QUnit.test('old dependent keys should not trigger property changes', function () {
    var obj1 = Object.create(null);
    support_1.defineProperty(obj1, 'foo', null);
    support_1.defineProperty(obj1, 'bar', object_1.alias('foo'));
    support_1.defineProperty(obj1, 'baz', object_1.alias('foo'));
    support_1.defineProperty(obj1, 'baz', object_1.alias('bar')); // redefine baz
    var ref = observe(obj1, 'baz');
    equal(ref.value(), null, "The value starts out null");
    support_1.set(obj1, 'foo', 'FOO');
    equal(ref.value(), 'FOO', "And it sees the new value");
    support_1.set(obj1, 'foo', 'OOF');
});
QUnit.test('overridden dependent keys should not trigger property changes', function () {
    var obj1 = Object.create(null);
    support_1.defineProperty(obj1, 'foo', null);
    support_1.defineProperty(obj1, 'bar', object_1.alias('foo'));
    support_1.defineProperty(obj1, 'baz', object_1.alias('foo'));
    var ref = observe(obj1, 'baz');
    equal(ref.value(), null);
    var obj2 = Object.create(obj1);
    support_1.defineProperty(obj2, 'baz', object_1.alias('bar')); // override baz
    support_1.set(obj2, 'foo', 'FOO');
    support_1.set(obj2, 'foo', 'OOF');
});
QUnit.test('begins watching alt key as soon as alias is watched', function () {
    support_1.defineProperty(obj, 'bar', object_1.alias('foo.faz'));
    var ref = observe(obj, 'bar');
    equal(ref.value(), 'FOO');
    support_1.set(obj, 'foo.faz', 'BAR');
    equal(ref.value(), 'BAR');
});
QUnit.test('immediately sets up dependencies if already being watched', function () {
    var ref = observe(obj, 'bar');
    support_1.defineProperty(obj, 'bar', object_1.alias('foo.faz'));
    support_1.set(obj, 'foo.faz', 'BAR');
    equal(ref.value(), 'BAR');
    // equal(count, 1);
});
QUnit.test('setting alias on self should fail assertion', function (assert) {
    assert.throws(function () {
        support_1.defineProperty(obj, 'bar', object_1.alias('bar'));
    }, /Setting alias \'bar\' on self/);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1iZXItbWV0YWwtYWxpYXMtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC90ZXN0cy9lbWJlci1tZXRhbC1hbGlhcy10ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQ0FBd0M7QUFFeEMsOERBQWdEO0FBQ2hELHFDQUFxRDtBQUVyRCxJQUFJLEdBQUcsRUFBRSxLQUFLLENBQUM7QUFFZixLQUFLLENBQUMsTUFBTSxDQUFDLHdCQUF3QixFQUFFO0lBQ3JDLEtBQUs7UUFDSCxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUM5QixLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUNELFFBQVE7UUFDTixHQUFHLEdBQUcsSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILHVCQUF1QixTQUF5QixFQUFFLEdBQVk7SUFDNUQsaURBQWlEO0FBQ25ELENBQUM7QUFFRCx1QkFBdUIsU0FBeUIsRUFBRSxHQUFZO0lBQzVELDJFQUEyRTtBQUM3RSxDQUFDO0FBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsRUFBRTtJQUN4Qyx3QkFBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsY0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsS0FBSyxDQUFDLGFBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDZCQUE2QixFQUFFO0lBQ3hDLHdCQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxjQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM3QyxhQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2QixLQUFLLENBQUMsYUFBRyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUU7SUFDckMsd0JBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLGNBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzdDLElBQUksR0FBRyxHQUFHLHVCQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbkIsYUFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNCLGFBQWEsQ0FBQyxHQUFHLEVBQUUsNkNBQTZDLENBQUMsQ0FBQztJQUNsRSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQyxDQUFDO0FBRUgsaUJBQWlCLEdBQUcsRUFBRSxHQUFHO0lBQ3ZCLElBQUksR0FBRyxHQUFHLHVCQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN4QyxlQUFlO0lBQ2YsTUFBTSxDQUFDLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLHdEQUF3RCxFQUFFO0lBQ25FLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0Isd0JBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLHdCQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMxQyx3QkFBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsY0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUMsd0JBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGNBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZTtJQUUxRCxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLDJCQUEyQixDQUFDLENBQUM7SUFFdEQsYUFBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztJQUV2RCxhQUFHLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsK0RBQStELEVBQUU7SUFDMUUsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQix3QkFBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEMsd0JBQWMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLGNBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFDLHdCQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUUxQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQy9CLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFekIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQix3QkFBYyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsY0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlO0lBRTFELGFBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXhCLGFBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxxREFBcUQsRUFBRTtJQUNoRSx3QkFBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsY0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFFN0MsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5QixLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTFCLGFBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTNCLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDJEQUEyRCxFQUFFO0lBQ3RFLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUIsd0JBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLGNBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBRTdDLGFBQUcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNCLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUIsbUJBQW1CO0FBQ3JCLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyw2Q0FBNkMsRUFBRSxVQUFBLE1BQU07SUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNaLHdCQUFjLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxjQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDLEVBQUUsK0JBQStCLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFsaWFzIH0gZnJvbSAnQGdsaW1tZXIvb2JqZWN0JztcbmltcG9ydCB7IFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnR7IE1ldGEgfSBmcm9tICdAZ2xpbW1lci9vYmplY3QtcmVmZXJlbmNlJztcbmltcG9ydCB7IGdldCwgc2V0LCBkZWZpbmVQcm9wZXJ0eSB9IGZyb20gJy4vc3VwcG9ydCc7XG5cbmxldCBvYmosIGNvdW50O1xuXG5RVW5pdC5tb2R1bGUoJ2RlZmluZVByb3BlcnR5IC0gYWxpYXMnLCB7XG4gIHNldHVwKCkge1xuICAgIG9iaiA9IHsgZm9vOiB7IGZhejogJ0ZPTycgfSB9O1xuICAgIGNvdW50ID0gMDtcbiAgfSxcbiAgdGVhcmRvd24oKSB7XG4gICAgb2JqID0gbnVsbDtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHNob3VsZEJlQ2xlYW4ocmVmZXJlbmNlOiBSZWZlcmVuY2U8YW55PiwgbXNnPzogc3RyaW5nKSB7XG4gIC8vIGEgXCJjbGVhblwiIHJlZmVyZW5jZSBpcyBhbGxvd2VkIHRvIHJlcG9ydCBkaXJ0eVxufVxuXG5mdW5jdGlvbiBzaG91bGRCZURpcnR5KHJlZmVyZW5jZTogUmVmZXJlbmNlPGFueT4sIG1zZz86IHN0cmluZykge1xuICAvLyBlcXVhbChyZWZlcmVuY2UuaXNEaXJ0eSgpLCB0cnVlLCBtc2cgfHwgYCR7cmVmZXJlbmNlfSBzaG91bGQgYmUgZGlydHlgKTtcbn1cblxuUVVuaXQudGVzdCgnc2hvdWxkIHByb3h5IGdldCB0byBhbHQga2V5JywgZnVuY3Rpb24oKSB7XG4gIGRlZmluZVByb3BlcnR5KG9iaiwgJ2JhcicsIGFsaWFzKCdmb28uZmF6JykpO1xuICBlcXVhbChnZXQob2JqLCAnYmFyJyksICdGT08nKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCdzaG91bGQgcHJveHkgc2V0IHRvIGFsdCBrZXknLCBmdW5jdGlvbigpIHtcbiAgZGVmaW5lUHJvcGVydHkob2JqLCAnYmFyJywgYWxpYXMoJ2Zvby5mYXonKSk7XG4gIHNldChvYmosICdiYXInLCAnQkFSJyk7XG4gIGVxdWFsKGdldChvYmosICdmb28uZmF6JyksICdCQVInKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCdzaG91bGQgb2JzZXJ2ZSB0aGUgYWxpYXMnLCBmdW5jdGlvbigpIHtcbiAgZGVmaW5lUHJvcGVydHkob2JqLCAnYmFyJywgYWxpYXMoJ2Zvby5mYXonKSk7XG4gIGxldCByZWYgPSBNZXRhLmZvcihvYmopLnJvb3QoKS5nZXQoJ2JhcicpO1xuICBsZXQgdmFsID0gcmVmLnZhbHVlKCk7XG4gIGVxdWFsKHZhbCwgJ0ZPTycpO1xuICBzaG91bGRCZUNsZWFuKHJlZik7XG5cbiAgc2V0KG9iai5mb28sICdmYXonLCAnRkFaJyk7XG4gIHNob3VsZEJlRGlydHkocmVmLCBcImFmdGVyIHNldHRpbmcgdGhlIHByb3BlcnR5IHRoZSBhbGlhcyBpcyBmb3JcIik7XG4gIGVxdWFsKHJlZi52YWx1ZSgpLCAnRkFaJyk7XG59KTtcblxuZnVuY3Rpb24gb2JzZXJ2ZShvYmosIGtleSkge1xuICBsZXQgcmVmID0gTWV0YS5mb3Iob2JqKS5yb290KCkuZ2V0KGtleSk7XG4gIC8vIHJlZi52YWx1ZSgpO1xuICByZXR1cm4gcmVmO1xufVxuXG5RVW5pdC50ZXN0KCdvbGQgZGVwZW5kZW50IGtleXMgc2hvdWxkIG5vdCB0cmlnZ2VyIHByb3BlcnR5IGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAgbGV0IG9iajEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBkZWZpbmVQcm9wZXJ0eShvYmoxLCAnZm9vJywgbnVsbCk7XG4gIGRlZmluZVByb3BlcnR5KG9iajEsICdiYXInLCBhbGlhcygnZm9vJykpO1xuICBkZWZpbmVQcm9wZXJ0eShvYmoxLCAnYmF6JywgYWxpYXMoJ2ZvbycpKTtcbiAgZGVmaW5lUHJvcGVydHkob2JqMSwgJ2JheicsIGFsaWFzKCdiYXInKSk7IC8vIHJlZGVmaW5lIGJhelxuXG4gIGxldCByZWYgPSBvYnNlcnZlKG9iajEsICdiYXonKTtcbiAgZXF1YWwocmVmLnZhbHVlKCksIG51bGwsIFwiVGhlIHZhbHVlIHN0YXJ0cyBvdXQgbnVsbFwiKTtcblxuICBzZXQob2JqMSwgJ2ZvbycsICdGT08nKTtcbiAgZXF1YWwocmVmLnZhbHVlKCksICdGT08nLCBcIkFuZCBpdCBzZWVzIHRoZSBuZXcgdmFsdWVcIik7XG5cbiAgc2V0KG9iajEsICdmb28nLCAnT09GJyk7XG59KTtcblxuUVVuaXQudGVzdCgnb3ZlcnJpZGRlbiBkZXBlbmRlbnQga2V5cyBzaG91bGQgbm90IHRyaWdnZXIgcHJvcGVydHkgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgb2JqMSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGRlZmluZVByb3BlcnR5KG9iajEsICdmb28nLCBudWxsKTtcbiAgZGVmaW5lUHJvcGVydHkob2JqMSwgJ2JhcicsIGFsaWFzKCdmb28nKSk7XG4gIGRlZmluZVByb3BlcnR5KG9iajEsICdiYXonLCBhbGlhcygnZm9vJykpO1xuXG4gIGxldCByZWYgPSBvYnNlcnZlKG9iajEsICdiYXonKTtcbiAgZXF1YWwocmVmLnZhbHVlKCksIG51bGwpO1xuXG4gIGxldCBvYmoyID0gT2JqZWN0LmNyZWF0ZShvYmoxKTtcbiAgZGVmaW5lUHJvcGVydHkob2JqMiwgJ2JheicsIGFsaWFzKCdiYXInKSk7IC8vIG92ZXJyaWRlIGJhelxuXG4gIHNldChvYmoyLCAnZm9vJywgJ0ZPTycpO1xuXG4gIHNldChvYmoyLCAnZm9vJywgJ09PRicpO1xufSk7XG5cblFVbml0LnRlc3QoJ2JlZ2lucyB3YXRjaGluZyBhbHQga2V5IGFzIHNvb24gYXMgYWxpYXMgaXMgd2F0Y2hlZCcsIGZ1bmN0aW9uKCkge1xuICBkZWZpbmVQcm9wZXJ0eShvYmosICdiYXInLCBhbGlhcygnZm9vLmZheicpKTtcblxuICBsZXQgcmVmID0gb2JzZXJ2ZShvYmosICdiYXInKTtcbiAgZXF1YWwocmVmLnZhbHVlKCksICdGT08nKTtcblxuICBzZXQob2JqLCAnZm9vLmZheicsICdCQVInKTtcblxuICBlcXVhbChyZWYudmFsdWUoKSwgJ0JBUicpO1xufSk7XG5cblFVbml0LnRlc3QoJ2ltbWVkaWF0ZWx5IHNldHMgdXAgZGVwZW5kZW5jaWVzIGlmIGFscmVhZHkgYmVpbmcgd2F0Y2hlZCcsIGZ1bmN0aW9uKCkge1xuICBsZXQgcmVmID0gb2JzZXJ2ZShvYmosICdiYXInKTtcbiAgZGVmaW5lUHJvcGVydHkob2JqLCAnYmFyJywgYWxpYXMoJ2Zvby5mYXonKSk7XG5cbiAgc2V0KG9iaiwgJ2Zvby5mYXonLCAnQkFSJyk7XG4gIGVxdWFsKHJlZi52YWx1ZSgpLCAnQkFSJyk7XG4gIC8vIGVxdWFsKGNvdW50LCAxKTtcbn0pO1xuXG5RVW5pdC50ZXN0KCdzZXR0aW5nIGFsaWFzIG9uIHNlbGYgc2hvdWxkIGZhaWwgYXNzZXJ0aW9uJywgYXNzZXJ0ID0+IHtcbiAgYXNzZXJ0LnRocm93cyhmdW5jdGlvbigpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmosICdiYXInLCBhbGlhcygnYmFyJykpO1xuICB9LCAvU2V0dGluZyBhbGlhcyBcXCdiYXJcXCcgb24gc2VsZi8pO1xufSk7XG4iXX0=