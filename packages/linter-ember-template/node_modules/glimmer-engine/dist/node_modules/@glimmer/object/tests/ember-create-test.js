"use strict";
var object_1 = require("@glimmer/object");
var test_helpers_1 = require("@glimmer/test-helpers");
var moduleOptions;
QUnit.module('GlimmerObject.create', moduleOptions);
QUnit.test('simple properties are set', function () {
    var o = object_1.default.create({ ohai: 'there' });
    equal(o.get('ohai'), 'there');
});
QUnit.test('reopening a parent flushes the child', function (assert) {
    var MyClass = object_1.default.extend();
    var SubClass = MyClass.extend();
    MyClass.reopen({
        hello: function () {
            return "hello";
        }
    });
    var sub = SubClass.create();
    assert.equal(sub.hello(), "hello");
});
QUnit.test('reopening a parent flushes the child', function (assert) {
    var MyClass = object_1.default.extend({
        hello: function () {
            return "original hello";
        }
    });
    var SubClass = MyClass.extend({
        hello: function () {
            return this._super();
        }
    });
    var GrandChild = SubClass.extend({
        hello: function () {
            return this._super();
        }
    });
    MyClass.reopen({
        hello: function () {
            return this._super() + " new hello";
        }
    });
    var sub = GrandChild.create();
    assert.equal(sub.hello(), "original hello new hello");
});
QUnit.test('reopening a parent with a computed property flushes the child', function (assert) {
    var MyClass = object_1.default.extend({
        hello: object_1.computed(function () {
            return "original hello";
        })
    });
    var SubClass = MyClass.extend({
        hello: object_1.computed(function () {
            return this._super();
        })
    });
    var GrandChild = SubClass.extend({
        hello: object_1.computed(function () {
            return this._super();
        })
    });
    MyClass.reopen({
        hello: object_1.computed(function () {
            return this._super() + " new hello";
        })
    });
    var sub = GrandChild.create();
    assert.equal(sub.hello, "original hello new hello");
});
QUnit.test('calls computed property setters', function (assert) {
    var MyClass = object_1.default.extend({
        foo: object_1.computed({
            get: function () {
                return 'this is not the value you\'re looking for';
            },
            set: function (key, value) {
                return value;
            }
        })
    });
    var o = MyClass.create({ foo: 'bar' });
    assert.equal(o.get('foo'), 'bar');
});
QUnit.skip('allows bindings to be defined', function () {
    var obj = object_1.default.create({
        foo: 'foo',
        barBinding: 'foo'
    });
    equal(obj.get('bar'), 'foo', 'The binding value is correct');
});
QUnit.skip('calls setUnknownProperty if defined', function () {
    var setUnknownPropertyCalled = false;
    var MyClass = object_1.default.extend({
        setUnknownProperty: function (key, value) {
            setUnknownPropertyCalled = true;
        }
    });
    MyClass.create({ foo: 'bar' });
    ok(setUnknownPropertyCalled, 'setUnknownProperty was called');
});
QUnit.skip('throws if you try to define a computed property', function (assert) {
    assert.throws(function () {
        object_1.default.create({
            foo: object_1.computed(function () { })
        });
    }, (_a = ["Ember.Object.create no longer supports defining computed properties.\n           Define computed properties using extend() or reopen() before calling create()."], _a.raw = ["Ember.Object.create no longer supports defining computed properties.\n           Define computed properties using extend() or reopen() before calling create()."], test_helpers_1.strip(_a)));
    var _a;
});
QUnit.skip('throws if you try to call _super in a method', function (assert) {
    assert.throws(function () {
        object_1.default.create({
            foo: function () {
                this._super.apply(this, arguments);
            }
        });
    }, 'Ember.Object.create no longer supports defining methods that call _super.');
});
QUnit.skip('throws if you try to \'mixin\' a definition', function (assert) {
    var myMixin = object_1.Mixin.create({
        adder: function (arg1, arg2) {
            return arg1 + arg2;
        }
    });
    assert.throws(function () {
        object_1.default.create(myMixin);
    }, 'Ember.Object.create no longer supports mixing in other definitions, use .extend & .create seperately instead.');
});
// This test is for IE8.
QUnit.test('property name is the same as own prototype property', function () {
    var MyClass = object_1.default.extend({
        toString: function () { return 'MyClass'; }
    });
    equal(MyClass.create().toString(), 'MyClass', 'should inherit property from the arguments of `EmberObject.create`');
});
QUnit.test('inherits properties from passed in EmberObject', function () {
    var baseObj = object_1.default.create({ foo: 'bar' });
    var secondaryObj = object_1.default.create(baseObj);
    equal(secondaryObj['foo'], baseObj['foo'], 'Em.O.create inherits properties from EmberObject parameter');
});
QUnit.skip('throws if you try to pass anything a string as a parameter', function () {
    var expected = 'EmberObject.create only accepts an objects.';
    throws(function () {
        object_1.default.create('some-string');
    }, expected);
});
QUnit.skip('EmberObject.create can take undefined as a parameter', function () {
    var o = object_1.default.create(undefined);
    deepEqual(object_1.default.create(), o);
});
QUnit.skip('EmberObject.create can take null as a parameter', function () {
    var o = object_1.default.create(null);
    deepEqual(object_1.default.create(), o);
});
//# sourceMappingURL=data:application/json;base64,