"use strict";
var support_1 = require("./support");
var object_1 = require("@glimmer/object");
QUnit.module('Mixin.concatenatedProperties');
QUnit.test('defining concatenated properties should concat future version', function () {
    var MixinA = object_1.Mixin.create({
        concatenatedProperties: ['foo'],
        foo: ['a', 'b', 'c']
    });
    var MixinB = object_1.Mixin.create({
        foo: ['d', 'e', 'f']
    });
    var obj = support_1.mixin({}, MixinA, MixinB);
    deepEqual(support_1.get(obj, 'foo'), ['a', 'b', 'c', 'd', 'e', 'f']);
});
QUnit.test('defining concatenated properties should concat future version', function () {
    var MixinA = object_1.Mixin.create({
        concatenatedProperties: null
    });
    var MixinB = object_1.Mixin.create({
        concatenatedProperties: null
    });
    var obj = support_1.mixin({}, MixinA, MixinB);
    deepEqual(obj.concatenatedProperties, []);
});
QUnit.test('concatenatedProperties should be concatenated', function () {
    var MixinA = object_1.Mixin.create({
        concatenatedProperties: ['foo'],
        foo: ['a', 'b', 'c']
    });
    var MixinB = object_1.Mixin.create({
        concatenatedProperties: 'bar',
        foo: ['d', 'e', 'f'],
        bar: [1, 2, 3]
    });
    var MixinC = object_1.Mixin.create({
        bar: [4, 5, 6]
    });
    var obj = support_1.mixin({}, MixinA, MixinB, MixinC);
    deepEqual(support_1.get(obj, 'concatenatedProperties'), ['foo', 'bar'], 'get concatenatedProperties');
    deepEqual(support_1.get(obj, 'foo'), ['a', 'b', 'c', 'd', 'e', 'f'], 'get foo');
    deepEqual(support_1.get(obj, 'bar'), [1, 2, 3, 4, 5, 6], 'get bar');
});
QUnit.test('adding a prop that is not an array should make array', function () {
    var MixinA = object_1.Mixin.create({
        concatenatedProperties: ['foo'],
        foo: [1, 2, 3]
    });
    var MixinB = object_1.Mixin.create({
        foo: 4
    });
    var obj = support_1.mixin({}, MixinA, MixinB);
    deepEqual(support_1.get(obj, 'foo'), [1, 2, 3, 4]);
});
QUnit.test('adding a prop that is not an array should make array', function () {
    var MixinA = object_1.Mixin.create({
        concatenatedProperties: ['foo'],
        foo: 'bar'
    });
    var obj = support_1.mixin({}, MixinA);
    deepEqual(support_1.get(obj, 'foo'), ['bar']);
});
QUnit.skip('adding a non-concatenable property that already has a defined value should result in an array with both values', function () {
    var mixinA = object_1.Mixin.create({
        foo: 1
    });
    var mixinB = object_1.Mixin.create({
        concatenatedProperties: ['foo'],
        foo: 2
    });
    var obj = support_1.mixin({}, mixinA, mixinB);
    deepEqual(support_1.get(obj, 'foo'), [1, 2]);
});
QUnit.skip('adding a concatenable property that already has a defined value should result in a concatenated value', function () {
    var mixinA = object_1.Mixin.create({
        foobar: 'foo'
    });
    var mixinB = object_1.Mixin.create({
        concatenatedProperties: ['foobar'],
        foobar: 'bar'
    });
    var obj = support_1.mixin({}, mixinA, mixinB);
    equal(support_1.get(obj, 'foobar'), 'foobar');
});
//# sourceMappingURL=data:application/json;base64,