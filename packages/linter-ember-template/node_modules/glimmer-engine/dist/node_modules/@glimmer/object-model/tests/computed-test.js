"use strict";
var index_1 = require("../index");
QUnit.module('[glimmer-object-model] - computed properties');
QUnit.test('basic computed properties', function (assert) {
    var Person = index_1.default.extend({
        first: 'Dan',
        last: 'Gebhardt',
        full: index_1.computed('first', 'last', {
            get: function () {
                return this.first + " " + this.last;
            },
            set: function (value) {
                var _a = value.split(' '), first = _a[0], last = _a[1];
                this.first = first;
                this.last = last;
            }
        })
    });
    var FancyPerson = Person.extend({
        sal: 'Mr.'
    });
    var obj = FancyPerson.create();
    assert.equal(obj.full, 'Dan Gebhardt');
    assert.equal(obj.sal, 'Mr.');
});
QUnit.test('references for computed properties', function (assert) {
    var Person = index_1.default.extend({
        first: 'Dan',
        last: 'Gebhardt',
        full: index_1.computed('first', 'last', {
            get: function () {
                return this.first + " " + this.last;
            },
            set: function (value) {
                var _a = value.split(' '), first = _a[0], last = _a[1];
                this.first = first;
                this.last = last;
            }
        })
    });
    var obj = Person.create();
    var ref = index_1.root(obj).get('full');
    var name = ref.value();
    var snapshot = ref.tag.value();
    assert.strictEqual(obj.full, 'Dan Gebhardt');
    index_1.set(obj, 'first', 'Daniel');
    assert.strictEqual(obj.full, 'Daniel Gebhardt');
    assert.strictEqual(ref.tag.validate(snapshot), false);
    assert.strictEqual(ref.value(), 'Daniel Gebhardt');
});
QUnit.test('references for multiple subclasses of computed properties', function (assert) {
    var Person = index_1.default.extend({
        first: 'Dan',
        last: 'Gebhardt',
        full: index_1.computed('first', 'last', {
            get: function () {
                return this.first + " " + this.last;
            },
            set: function (value) {
                var _a = value.split(' '), first = _a[0], last = _a[1];
                this.first = first;
                this.last = last;
            }
        })
    });
    var FancyPerson = Person.extend({
        sal: 'Mr.',
        name: index_1.computed('sal', 'full', {
            get: function () {
                return this.sal + " " + this.full;
            },
            set: function (value) {
                var _a = value.match(/([^ ]+) (.*)/), sal = _a[1], full = _a[2];
                this.sal = sal;
                this.full = full;
            }
        })
    });
    var obj = FancyPerson.create();
    var ref = index_1.root(obj).get('name');
    var name = ref.value();
    var snapshot = ref.tag.value();
    assert.strictEqual(obj.full, 'Dan Gebhardt');
    assert.strictEqual(obj.name, 'Mr. Dan Gebhardt');
    index_1.set(obj, 'first', 'Daniel');
    assert.strictEqual(obj.full, 'Daniel Gebhardt');
    assert.strictEqual(obj.name, 'Mr. Daniel Gebhardt');
    assert.strictEqual(ref.tag.validate(snapshot), false);
    assert.strictEqual(ref.value(), 'Mr. Daniel Gebhardt');
});
//# sourceMappingURL=data:application/json;base64,