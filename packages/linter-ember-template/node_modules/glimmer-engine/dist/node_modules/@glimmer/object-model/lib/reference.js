"use strict";
var meta_1 = require("./meta");
var reference_1 = require("@glimmer/reference");
var util_1 = require("@glimmer/util");
if (util_1.HAS_NATIVE_WEAKMAP) {
    var META_1 = new WeakMap();
    var CLASS_META_1 = new WeakMap();
    exports.classMeta = function _classMetaNative(object) {
        var m = CLASS_META_1.get(object);
        if (m === undefined) {
            m = new meta_1.ClassMeta();
            CLASS_META_1.set(object, m);
        }
        return m;
    };
    exports.meta = function _metaNative(object) {
        var m = META_1.get(object);
        if (m === undefined) {
            m = new meta_1.default();
            META_1.set(object, m);
        }
        return m;
    };
}
else {
    var GLIMMER_META_1 = 'META__glimmer__1484170086860394543206811';
    var GLIMMER_CLASS_META_1 = 'CLASS_META__glimmer__14841708559821468834708062';
    exports.classMeta = function _classMetaFaux(object) {
        var m = object[GLIMMER_CLASS_META_1];
        if (m === undefined) {
            m = new meta_1.ClassMeta();
            object[GLIMMER_CLASS_META_1] = m;
        }
        return m;
    };
    exports.meta = function _metaFaux(object) {
        var m = object[GLIMMER_META_1];
        if (m === undefined) {
            m = new meta_1.default();
            object[GLIMMER_META_1] = m;
        }
        return m;
    };
}
function set(object, key, value) {
    object[key] = value;
    exports.meta(object).dirty(key);
}
exports.set = set;
function root(object) {
    return new VersionedRootReference(object);
}
exports.root = root;
var VersionedRootReference = (function () {
    function VersionedRootReference(inner) {
        this.inner = inner;
        this.tag = reference_1.CONSTANT_TAG;
    }
    VersionedRootReference.prototype.value = function () {
        return this.inner;
    };
    VersionedRootReference.prototype.get = function (key) {
        return new VersionedObjectReference(this, key);
    };
    return VersionedRootReference;
}());
exports.VersionedRootReference = VersionedRootReference;
var VersionedObjectReference = (function () {
    function VersionedObjectReference(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = reference_1.CURRENT_TAG;
    }
    VersionedObjectReference.prototype.value = function () {
        var _this = this;
        var _a = this, parent = _a.parent, key = _a.key;
        var parentObject = this.parent.value();
        var computed = exports.classMeta(Object.getPrototypeOf(parentObject)).getComputed(key);
        var tags = [exports.meta(parentObject).tag(key)];
        if (computed) {
            tags.push.apply(tags, computed.dependentKeys.map(function (key) { return path(_this, key).tag; }));
        }
        this.tag = reference_1.combine(tags);
        return parentObject[key];
    };
    VersionedObjectReference.prototype.get = function (key) {
        return new VersionedObjectReference(this, key);
    };
    return VersionedObjectReference;
}());
exports.VersionedObjectReference = VersionedObjectReference;
function path(parent, key) {
    return key.split('.').reduce(function (ref, part) { return ref.get(part); }, parent);
}
//# sourceMappingURL=data:application/json;base64,