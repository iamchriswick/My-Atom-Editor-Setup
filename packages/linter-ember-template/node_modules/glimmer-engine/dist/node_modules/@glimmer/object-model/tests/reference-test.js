"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var index_1 = require("../index");
QUnit.module('[glimmer-object-model] reference');
function MakeSub() {
    var Sub = index_1.classof(index_1.default.extend({
        name: 'Dan'
    }));
    var SubSub = index_1.classof(Sub.extend({
        sal: 'Mr.'
    }));
    var obj = Sub.create();
    var root = index_1.root(obj);
    var name = root.get('name');
    return { Sub: Sub, SubSub: SubSub, root: root, obj: obj, name: name };
}
QUnit.test('getting a reference', function (assert) {
    var _a = MakeSub(), root = _a.root, obj = _a.obj, name = _a.name;
    assert.strictEqual(root.value(), obj);
    assert.strictEqual(name.value(), 'Dan');
});
QUnit.test('unchanged references are valid', function (assert) {
    var _a = MakeSub(), root = _a.root, obj = _a.obj, name = _a.name;
    var dan = name.value();
    var nameTag = name.tag;
    var initialSnapshot = nameTag.value();
    assert.strictEqual(name.value(), dan);
    assert.strictEqual(nameTag.validate(initialSnapshot), true);
});
QUnit.test('changed references are invalid', function (assert) {
    var _a = MakeSub(), root = _a.root, obj = _a.obj, name = _a.name;
    var nameTag = name.tag;
    var initialSnapshot = nameTag.value();
    index_1.set(obj, 'name', 'Daniel');
    assert.strictEqual(nameTag.validate(initialSnapshot), false);
    assert.strictEqual(name.value(), 'Daniel');
});
var Bucket = (function () {
    function Bucket(name, sal, loud) {
        this.name = name;
        this.sal = sal;
        this.loud = loud;
    }
    return Bucket;
}());
var State = (function () {
    function State(root) {
        this.references = {
            name: root.get('name'),
            sal: root.get('sal'),
            loud: root.get('loud')
        };
        this.update();
    }
    State.prototype.updateValues = function () {
        this.values = {
            name: this.references.name.value(),
            sal: this.references.sal.value(),
            loud: this.references.loud.value()
        };
    };
    State.prototype.updateTags = function () {
        this.tags = {
            name: this.references.name.tag,
            sal: this.references.sal.tag,
            loud: this.references.loud.tag
        };
    };
    State.prototype.updateSnapshot = function () {
        this.snapshot = {
            name: this.tags.name.value(),
            sal: this.tags.sal.value(),
            loud: this.tags.loud.value()
        };
    };
    State.prototype.update = function () {
        this.updateValues();
        this.updateTags();
        this.updateSnapshot();
    };
    State.prototype.validateTags = function (_a) {
        var _b = _a.name, name = _b === void 0 ? true : _b, _c = _a.sal, sal = _c === void 0 ? true : _c, _d = _a.loud, loud = _d === void 0 ? true : _d;
        QUnit.assert.strictEqual(this.tags.name.validate(this.snapshot.name), name, "valid(name) != " + name);
        QUnit.assert.strictEqual(this.tags.sal.validate(this.snapshot.sal), sal, "valid(sal) != " + sal);
        QUnit.assert.strictEqual(this.tags.loud.validate(this.snapshot.loud), loud, "valid(loud) != " + loud);
        this.updateTags();
    };
    State.prototype.validateValues = function (_a) {
        var _b = _a.name, name = _b === void 0 ? this.values.name : _b, _c = _a.sal, sal = _c === void 0 ? this.values.sal : _c, _d = _a.loud, loud = _d === void 0 ? this.values.loud : _d;
        QUnit.assert.strictEqual(this.references.name.value(), name, "name != " + name);
        QUnit.assert.strictEqual(this.references.sal.value(), sal, "sal != " + sal);
        QUnit.assert.strictEqual(this.references.loud.value(), loud, "loud != " + loud);
        this.updateValues();
    };
    return State;
}());
QUnit.test('references are granular', function (assert) {
    var SubSub = MakeSub().SubSub;
    var obj = SubSub.create({ loud: true });
    var root = index_1.root(obj);
    var state = new State(root);
    index_1.set(obj, 'name', 'Daniel');
    step('Update name');
    state.validateTags({ name: false });
    state.validateValues({ name: 'Daniel' });
    state.update();
    index_1.set(obj, 'loud', false);
    step('Update loud');
    state.validateTags({ loud: false });
    state.validateValues({ loud: false });
    state.update();
});
QUnit.test('works with ES6 subclassing', function (assert) {
    var Sub = MakeSub().Sub;
    var SubSub = (function (_super) {
        __extends(SubSub, _super);
        function SubSub() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SubSub;
    }(Sub));
    var obj = SubSub.create({ loud: true, sal: 'Mr.' });
    var root = index_1.root(obj);
    var state = new State(root);
    index_1.set(obj, 'name', 'Daniel');
    step('Update name');
    state.validateTags({ name: false });
    state.validateValues({ name: 'Daniel' });
    state.update();
    index_1.set(obj, 'loud', false);
    step('Update loud');
    state.validateTags({ loud: false });
    state.validateValues({ loud: false });
    state.update();
});
function step(desc) {
    QUnit.assert.ok(true, desc);
}
//# sourceMappingURL=data:application/json;base64,