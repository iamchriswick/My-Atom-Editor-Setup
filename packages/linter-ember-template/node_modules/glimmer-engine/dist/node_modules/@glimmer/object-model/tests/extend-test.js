"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var index_1 = require("../index");
QUnit.module("[glimmer-object-model] extend");
// NOTE: The fact that the following code passes the type checker
// is a part of the tested functionality of this test suite.
QUnit.test('basic create works', function (assert) {
    var obj = index_1.default.create({ name: 'hello' });
    assert.equal(obj.name, 'hello');
});
QUnit.test('basic extend works', function (assert) {
    var Sub = index_1.default.extend();
    var obj = Sub.create({ name: 'hello' });
    assert.equal(obj.name, 'hello');
});
QUnit.test('repeating extend works', function (assert) {
    var Sub = index_1.default.extend().extend();
    var obj = Sub.create({ name: 'hello' });
    assert.equal(obj.name, 'hello');
});
QUnit.test('extending with new properties works', function (assert) {
    var Sub = index_1.default.extend({
        parentName: 'hi'
    });
    var obj = Sub.create({ name: 'hello' });
    assert.equal(obj.name, 'hello');
    assert.equal(obj.parentName, 'hi');
});
QUnit.test('extending with methods works', function (assert) {
    var Sub = index_1.default.extend({
        hi: function () {
            return this.name;
        }
    });
    var obj = Sub.create({ name: 'Dan' });
    assert.equal(obj.hi(), 'Dan');
});
QUnit.test('extending multiple times with new functionality each time works', function (assert) {
    var First = index_1.default.extend({
        name: 'Dan'
    });
    var Second = First.extend({
        hi: function () {
            return "Hi " + this.salutation + " " + this.name;
        }
    });
    var Sub = Second.extend({
        greet: function () {
            return this.hi().toUpperCase();
        }
    });
    var obj = Sub.create({ salutation: 'Mr.' });
    assert.equal(obj.greet(), 'HI MR. DAN');
});
QUnit.test('mixing ES6 subclassing with ES5 subclassing', function (assert) {
    var First = index_1.default.extend({
        named: 'Dan'
    });
    /// TS GUNK: START
    var FirstClass = index_1.classof(First);
    /// TS GUNK: END
    var Second = (function (_super) {
        __extends(Second, _super);
        function Second() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Second.prototype.hi = function () {
            return "Hi " + this.salutation + " " + this.named;
        };
        return Second;
    }(FirstClass));
    var Sub = (function (_super) {
        __extends(Sub, _super);
        function Sub() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Sub.prototype.greet = function () {
            return this.hi().toUpperCase();
        };
        return Sub;
    }(Second));
    var obj = Sub.create({ salutation: 'Mr.' });
    assert.equal(obj.greet(), 'HI MR. DAN');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0ZW5kLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QtbW9kZWwvdGVzdHMvZXh0ZW5kLXRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0NBQWtEO0FBRWxELEtBQUssQ0FBQyxNQUFNLENBQUMsK0JBQStCLENBQUMsQ0FBQztBQUU5QyxpRUFBaUU7QUFDakUsNERBQTREO0FBRTVELEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsVUFBQSxNQUFNO0lBQ3JDLElBQUksR0FBRyxHQUFHLGVBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNsRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLFVBQUEsTUFBTTtJQUNyQyxJQUFJLEdBQUcsR0FBRyxlQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDakMsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsVUFBQSxNQUFNO0lBQ3pDLElBQUksR0FBRyxHQUFHLGVBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRSxVQUFBLE1BQU07SUFDdEQsSUFBSSxHQUFHLEdBQUcsZUFBYSxDQUFDLE1BQU0sQ0FBQztRQUM3QixVQUFVLEVBQUUsSUFBSTtLQUNqQixDQUFDLENBQUM7SUFFSCxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDeEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsOEJBQThCLEVBQUUsVUFBQSxNQUFNO0lBQy9DLElBQUksR0FBRyxHQUFHLGVBQWEsQ0FBQyxNQUFNLENBQUM7UUFDN0IsRUFBRSxFQUFGO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkIsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUlILElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0QyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNoQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsaUVBQWlFLEVBQUUsVUFBQSxNQUFNO0lBQ2xGLElBQUksS0FBSyxHQUFHLGVBQWEsQ0FBQyxNQUFNLENBQUM7UUFDL0IsSUFBSSxFQUFFLEtBQUs7S0FDWixDQUFDLENBQUM7SUFJSCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQ3hCLEVBQUUsRUFBRjtZQUNFLE1BQU0sQ0FBQyxRQUFNLElBQUksQ0FBQyxVQUFVLFNBQUksSUFBSSxDQUFDLElBQU0sQ0FBQztRQUM5QyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0lBSUgsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUN0QixLQUFLLEVBQUw7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLENBQUM7S0FDRixDQUFDLENBQUM7SUFJSCxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFFNUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsSUFBSSxDQUFDLDZDQUE2QyxFQUFFLFVBQUEsTUFBTTtJQUM5RCxJQUFJLEtBQUssR0FBRyxlQUFhLENBQUMsTUFBTSxDQUFDO1FBQy9CLEtBQUssRUFBRSxLQUFLO0tBQ2IsQ0FBQyxDQUFDO0lBRUgsa0JBQWtCO0lBRWxCLElBQUksVUFBVSxHQUFHLGVBQU8sQ0FBZ0IsS0FBSyxDQUFDLENBQUM7SUFNL0MsZ0JBQWdCO0lBRWhCO1FBQXFCLDBCQUFVO1FBQS9COztRQU1BLENBQUM7UUFIQyxtQkFBRSxHQUFGO1lBQ0UsTUFBTSxDQUFDLFFBQU0sSUFBSSxDQUFDLFVBQVUsU0FBSSxJQUFJLENBQUMsS0FBTyxDQUFDO1FBQy9DLENBQUM7UUFDSCxhQUFDO0lBQUQsQ0FBQyxBQU5ELENBQXFCLFVBQVUsR0FNOUI7SUFFRDtRQUFrQix1QkFBTTtRQUF4Qjs7UUFJQSxDQUFDO1FBSEMsbUJBQUssR0FBTDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakMsQ0FBQztRQUNILFVBQUM7SUFBRCxDQUFDLEFBSkQsQ0FBa0IsTUFBTSxHQUl2QjtJQUVELElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUU1QyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHbGltbWVyT2JqZWN0LCB7IGNsYXNzb2YgfSBmcm9tICcuLi9pbmRleCc7XHJcblxyXG5RVW5pdC5tb2R1bGUoXCJbZ2xpbW1lci1vYmplY3QtbW9kZWxdIGV4dGVuZFwiKTtcclxuXHJcbi8vIE5PVEU6IFRoZSBmYWN0IHRoYXQgdGhlIGZvbGxvd2luZyBjb2RlIHBhc3NlcyB0aGUgdHlwZSBjaGVja2VyXHJcbi8vIGlzIGEgcGFydCBvZiB0aGUgdGVzdGVkIGZ1bmN0aW9uYWxpdHkgb2YgdGhpcyB0ZXN0IHN1aXRlLlxyXG5cclxuUVVuaXQudGVzdCgnYmFzaWMgY3JlYXRlIHdvcmtzJywgYXNzZXJ0ID0+IHtcclxuICBsZXQgb2JqID0gR2xpbW1lck9iamVjdC5jcmVhdGUoeyBuYW1lOiAnaGVsbG8nIH0pO1xyXG4gIGFzc2VydC5lcXVhbChvYmoubmFtZSwgJ2hlbGxvJyk7XHJcbn0pO1xyXG5cclxuUVVuaXQudGVzdCgnYmFzaWMgZXh0ZW5kIHdvcmtzJywgYXNzZXJ0ID0+IHtcclxuICBsZXQgU3ViID0gR2xpbW1lck9iamVjdC5leHRlbmQoKTtcclxuICBsZXQgb2JqID0gU3ViLmNyZWF0ZSh7IG5hbWU6ICdoZWxsbycgfSk7XHJcbiAgYXNzZXJ0LmVxdWFsKG9iai5uYW1lLCAnaGVsbG8nKTtcclxufSk7XHJcblxyXG5RVW5pdC50ZXN0KCdyZXBlYXRpbmcgZXh0ZW5kIHdvcmtzJywgYXNzZXJ0ID0+IHtcclxuICBsZXQgU3ViID0gR2xpbW1lck9iamVjdC5leHRlbmQoKS5leHRlbmQoKTtcclxuICBsZXQgb2JqID0gU3ViLmNyZWF0ZSh7IG5hbWU6ICdoZWxsbycgfSk7XHJcbiAgYXNzZXJ0LmVxdWFsKG9iai5uYW1lLCAnaGVsbG8nKTtcclxufSk7XHJcblxyXG5RVW5pdC50ZXN0KCdleHRlbmRpbmcgd2l0aCBuZXcgcHJvcGVydGllcyB3b3JrcycsIGFzc2VydCA9PiB7XHJcbiAgbGV0IFN1YiA9IEdsaW1tZXJPYmplY3QuZXh0ZW5kKHtcclxuICAgIHBhcmVudE5hbWU6ICdoaSdcclxuICB9KTtcclxuXHJcbiAgbGV0IG9iaiA9IFN1Yi5jcmVhdGUoeyBuYW1lOiAnaGVsbG8nIH0pO1xyXG4gIGFzc2VydC5lcXVhbChvYmoubmFtZSwgJ2hlbGxvJyk7XHJcbiAgYXNzZXJ0LmVxdWFsKG9iai5wYXJlbnROYW1lLCAnaGknKTtcclxufSk7XHJcblxyXG5RVW5pdC50ZXN0KCdleHRlbmRpbmcgd2l0aCBtZXRob2RzIHdvcmtzJywgYXNzZXJ0ID0+IHtcclxuICBsZXQgU3ViID0gR2xpbW1lck9iamVjdC5leHRlbmQoe1xyXG4gICAgaGkodGhpczogU3ViKTogc3RyaW5nIHtcclxuICAgICAgcmV0dXJuIHRoaXMubmFtZTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdHlwZSBTdWIgPSB7IG5hbWU6IHN0cmluZywgaGkoKTogc3RyaW5nIH07XHJcblxyXG4gIGxldCBvYmogPSBTdWIuY3JlYXRlKHsgbmFtZTogJ0RhbicgfSk7XHJcbiAgYXNzZXJ0LmVxdWFsKG9iai5oaSgpLCAnRGFuJyk7XHJcbn0pO1xyXG5cclxuUVVuaXQudGVzdCgnZXh0ZW5kaW5nIG11bHRpcGxlIHRpbWVzIHdpdGggbmV3IGZ1bmN0aW9uYWxpdHkgZWFjaCB0aW1lIHdvcmtzJywgYXNzZXJ0ID0+IHtcclxuICBsZXQgRmlyc3QgPSBHbGltbWVyT2JqZWN0LmV4dGVuZCh7XHJcbiAgICBuYW1lOiAnRGFuJ1xyXG4gIH0pO1xyXG5cclxuICB0eXBlIEZpcnN0ID0geyBuYW1lOiBzdHJpbmcgfTtcclxuXHJcbiAgbGV0IFNlY29uZCA9IEZpcnN0LmV4dGVuZCh7XHJcbiAgICBoaSh0aGlzOiBTZWNvbmQpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gYEhpICR7dGhpcy5zYWx1dGF0aW9ufSAke3RoaXMubmFtZX1gO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB0eXBlIFNlY29uZCA9IEZpcnN0ICYgeyBzYWx1dGF0aW9uOiBzdHJpbmcsIGhpKCk6IHN0cmluZyB9O1xyXG5cclxuICBsZXQgU3ViID0gU2Vjb25kLmV4dGVuZCh7XHJcbiAgICBncmVldCh0aGlzOiBTdWIpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy5oaSgpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHR5cGUgU3ViID0gU2Vjb25kICYgeyBncmVldCgpOiBzdHJpbmcgfTtcclxuXHJcbiAgbGV0IG9iaiA9IFN1Yi5jcmVhdGUoeyBzYWx1dGF0aW9uOiAnTXIuJyB9KTtcclxuXHJcbiAgYXNzZXJ0LmVxdWFsKG9iai5ncmVldCgpLCAnSEkgTVIuIERBTicpO1xyXG59KTtcclxuXHJcblFVbml0LnRlc3QoJ21peGluZyBFUzYgc3ViY2xhc3Npbmcgd2l0aCBFUzUgc3ViY2xhc3NpbmcnLCBhc3NlcnQgPT4ge1xyXG4gIGxldCBGaXJzdCA9IEdsaW1tZXJPYmplY3QuZXh0ZW5kKHtcclxuICAgIG5hbWVkOiAnRGFuJ1xyXG4gIH0pO1xyXG5cclxuICAvLy8gVFMgR1VOSzogU1RBUlRcclxuXHJcbiAgbGV0IEZpcnN0Q2xhc3MgPSBjbGFzc29mPEZpcnN0SW5zdGFuY2U+KEZpcnN0KTtcclxuXHJcbiAgaW50ZXJmYWNlIEZpcnN0SW5zdGFuY2Uge1xyXG4gICAgbmFtZWQ6IHN0cmluZztcclxuICB9XHJcblxyXG4gIC8vLyBUUyBHVU5LOiBFTkRcclxuXHJcbiAgY2xhc3MgU2Vjb25kIGV4dGVuZHMgRmlyc3RDbGFzcyB7XHJcbiAgICBwdWJsaWMgc2FsdXRhdGlvbjogc3RyaW5nO1xyXG5cclxuICAgIGhpKCk6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiBgSGkgJHt0aGlzLnNhbHV0YXRpb259ICR7dGhpcy5uYW1lZH1gO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY2xhc3MgU3ViIGV4dGVuZHMgU2Vjb25kIHtcclxuICAgIGdyZWV0KCk6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiB0aGlzLmhpKCkudG9VcHBlckNhc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGxldCBvYmogPSBTdWIuY3JlYXRlKHsgc2FsdXRhdGlvbjogJ01yLicgfSk7XHJcblxyXG4gIGFzc2VydC5lcXVhbChvYmouZ3JlZXQoKSwgJ0hJIE1SLiBEQU4nKTtcclxufSk7XHJcbiJdfQ==