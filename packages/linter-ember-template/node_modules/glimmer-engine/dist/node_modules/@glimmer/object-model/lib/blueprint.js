"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reference_1 = require("./reference");
var Blueprint = (function () {
    function Blueprint(key) {
        this.key = key;
    }
    return Blueprint;
}());
exports.Blueprint = Blueprint;
var VALUE_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
};
var ACCESSOR_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    get: undefined,
    set: undefined
};
var ValueBlueprint = (function (_super) {
    __extends(ValueBlueprint, _super);
    function ValueBlueprint(key, value) {
        var _this = _super.call(this, key) || this;
        _this.value = value;
        return _this;
    }
    ValueBlueprint.prototype.define = function (home) {
        VALUE_DESCRIPTOR.value = this.value;
        Object.defineProperty(home, this.key, VALUE_DESCRIPTOR);
    };
    return ValueBlueprint;
}(Blueprint));
exports.ValueBlueprint = ValueBlueprint;
var GlimmerDescriptor = (function () {
    function GlimmerDescriptor() {
    }
    return GlimmerDescriptor;
}());
exports.GlimmerDescriptor = GlimmerDescriptor;
var Computed = (function (_super) {
    __extends(Computed, _super);
    function Computed(dependentKeys, accessor) {
        var _this = _super.call(this) || this;
        _this.dependentKeys = dependentKeys;
        _this.accessor = accessor;
        return _this;
    }
    Computed.prototype.blueprint = function (key) {
        return new ComputedBlueprint(key, this);
    };
    Computed.prototype.reference = function (root, key) {
    };
    Computed.prototype.define = function (home, key) {
        reference_1.classMeta(home).defineComputed(key, this);
        ACCESSOR_DESCRIPTOR.get = this.accessor.get;
        ACCESSOR_DESCRIPTOR.set = this.accessor.set;
        Object.defineProperty(home, key, ACCESSOR_DESCRIPTOR);
    };
    return Computed;
}(GlimmerDescriptor));
exports.Computed = Computed;
function computed() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var depKeys = args.slice(0, -1);
    var accessor = args[args.length - 1];
    return new Computed(depKeys, accessor);
}
exports.computed = computed;
var ComputedBlueprint = (function (_super) {
    __extends(ComputedBlueprint, _super);
    function ComputedBlueprint(key, computed) {
        var _this = _super.call(this, key) || this;
        _this.computed = computed;
        return _this;
    }
    ComputedBlueprint.prototype.define = function (home) {
        this.computed.define(home, this.key);
    };
    return ComputedBlueprint;
}(Blueprint));
exports.ComputedBlueprint = ComputedBlueprint;
var DescriptorBlueprint = (function (_super) {
    __extends(DescriptorBlueprint, _super);
    function DescriptorBlueprint(key, descriptor) {
        var _this = _super.call(this, key) || this;
        _this.descriptor = descriptor;
        return _this;
    }
    DescriptorBlueprint.prototype.define = function (home) {
        Object.defineProperty(home, this.key, this.descriptor);
    };
    return DescriptorBlueprint;
}(Blueprint));
exports.DescriptorBlueprint = DescriptorBlueprint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXByaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvb2JqZWN0LW1vZGVsL2xpYi9ibHVlcHJpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EseUNBQXdDO0FBR3hDO0lBQ0UsbUJBQXNCLEdBQWdCO1FBQWhCLFFBQUcsR0FBSCxHQUFHLENBQWE7SUFBRyxDQUFDO0lBRTVDLGdCQUFDO0FBQUQsQ0FBQyxBQUhELElBR0M7QUFIcUIsOEJBQVM7QUFLL0IsSUFBTSxnQkFBZ0IsR0FBdUI7SUFDM0MsVUFBVSxFQUFFLElBQUk7SUFDaEIsWUFBWSxFQUFFLElBQUk7SUFDbEIsUUFBUSxFQUFFLElBQUk7SUFDZCxLQUFLLEVBQUUsU0FBUztDQUNqQixDQUFDO0FBRUYsSUFBTSxtQkFBbUIsR0FBdUI7SUFDOUMsVUFBVSxFQUFFLElBQUk7SUFDaEIsWUFBWSxFQUFFLElBQUk7SUFDbEIsR0FBRyxFQUFFLFNBQVM7SUFDZCxHQUFHLEVBQUUsU0FBUztDQUNmLENBQUM7QUFFRjtJQUFvQyxrQ0FBUztJQUMzQyx3QkFBWSxHQUFnQixFQUFVLEtBQWE7UUFBbkQsWUFDRSxrQkFBTSxHQUFHLENBQUMsU0FDWDtRQUZxQyxXQUFLLEdBQUwsS0FBSyxDQUFROztJQUVuRCxDQUFDO0lBRUQsK0JBQU0sR0FBTixVQUFPLElBQVk7UUFDakIsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUFURCxDQUFvQyxTQUFTLEdBUzVDO0FBVFksd0NBQWM7QUFnQjNCO0lBQUE7SUFHQSxDQUFDO0lBQUQsd0JBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQztBQUhxQiw4Q0FBaUI7QUFLdkM7SUFBaUMsNEJBQWlCO0lBQ2hELGtCQUFtQixhQUF1QixFQUFVLFFBQXFCO1FBQXpFLFlBQ0UsaUJBQU8sU0FDUjtRQUZrQixtQkFBYSxHQUFiLGFBQWEsQ0FBVTtRQUFVLGNBQVEsR0FBUixRQUFRLENBQWE7O0lBRXpFLENBQUM7SUFFRCw0QkFBUyxHQUFULFVBQVUsR0FBZ0I7UUFDeEIsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCw0QkFBUyxHQUFULFVBQVUsSUFBbUIsRUFBRSxHQUFnQjtJQUUvQyxDQUFDO0lBRUQseUJBQU0sR0FBTixVQUFPLElBQVksRUFBRSxHQUFnQjtRQUNuQyxxQkFBUyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFMUMsbUJBQW1CLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQzVDLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUM1QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0gsZUFBQztBQUFELENBQUMsQUFwQkQsQ0FBaUMsaUJBQWlCLEdBb0JqRDtBQXBCWSw0QkFBUTtBQTJCckI7SUFBeUIsY0FBYztTQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7UUFBZCx5QkFBYzs7SUFDckMsSUFBSSxPQUFPLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFJLFFBQVEsR0FBcUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFdkQsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBTEQsNEJBS0M7QUFFRDtJQUF1QyxxQ0FBUztJQUM5QywyQkFBWSxHQUFnQixFQUFVLFFBQTBCO1FBQWhFLFlBQ0Usa0JBQU0sR0FBRyxDQUFDLFNBQ1g7UUFGcUMsY0FBUSxHQUFSLFFBQVEsQ0FBa0I7O0lBRWhFLENBQUM7SUFFRCxrQ0FBTSxHQUFOLFVBQU8sSUFBWTtRQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFSRCxDQUF1QyxTQUFTLEdBUS9DO0FBUlksOENBQWlCO0FBVTlCO0lBQXlDLHVDQUFTO0lBQ2hELDZCQUFZLEdBQWdCLEVBQVUsVUFBOEI7UUFBcEUsWUFDRSxrQkFBTSxHQUFHLENBQUMsU0FDWDtRQUZxQyxnQkFBVSxHQUFWLFVBQVUsQ0FBb0I7O0lBRXBFLENBQUM7SUFFRCxvQ0FBTSxHQUFOLFVBQU8sSUFBWTtRQUNqQixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQUFDLEFBUkQsQ0FBeUMsU0FBUyxHQVFqRDtBQVJZLGtEQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wYXF1ZSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xyXG5pbXBvcnQgeyBjbGFzc01ldGEgfSBmcm9tICcuL3JlZmVyZW5jZSc7XHJcbmltcG9ydCBHbGltbWVyT2JqZWN0IGZyb20gJy4vb2JqZWN0JztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBrZXk6IFByb3BlcnR5S2V5KSB7fVxyXG4gIGFic3RyYWN0IGRlZmluZShob21lOiBPYmplY3QpO1xyXG59XHJcblxyXG5jb25zdCBWQUxVRV9ERVNDUklQVE9SOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgd3JpdGFibGU6IHRydWUsXHJcbiAgdmFsdWU6IHVuZGVmaW5lZFxyXG59O1xyXG5cclxuY29uc3QgQUNDRVNTT1JfREVTQ1JJUFRPUjogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gIGdldDogdW5kZWZpbmVkLFxyXG4gIHNldDogdW5kZWZpbmVkXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVmFsdWVCbHVlcHJpbnQgZXh0ZW5kcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKGtleTogUHJvcGVydHlLZXksIHByaXZhdGUgdmFsdWU6IE9wYXF1ZSkge1xyXG4gICAgc3VwZXIoa2V5KTtcclxuICB9XHJcblxyXG4gIGRlZmluZShob21lOiBPYmplY3QpIHtcclxuICAgIFZBTFVFX0RFU0NSSVBUT1IudmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGhvbWUsIHRoaXMua2V5LCBWQUxVRV9ERVNDUklQVE9SKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzb3I8VD4ge1xyXG4gIGdldCgpOiBUO1xyXG4gIHNldCh2YWw6IFQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2xpbW1lckRlc2NyaXB0b3Ige1xyXG4gIGFic3RyYWN0IGJsdWVwcmludChrZXk6IFByb3BlcnR5S2V5KTogQmx1ZXByaW50O1xyXG4gIGFic3RyYWN0IGRlZmluZShob21lOiBPYmplY3QsIGtleTogUHJvcGVydHlLZXkpO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcHV0ZWQ8VD4gZXh0ZW5kcyBHbGltbWVyRGVzY3JpcHRvciB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIGRlcGVuZGVudEtleXM6IHN0cmluZ1tdLCBwcml2YXRlIGFjY2Vzc29yOiBBY2Nlc3NvcjxUPikge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIGJsdWVwcmludChrZXk6IFByb3BlcnR5S2V5KTogQ29tcHV0ZWRCbHVlcHJpbnQge1xyXG4gICAgcmV0dXJuIG5ldyBDb21wdXRlZEJsdWVwcmludChrZXksIHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcmVmZXJlbmNlKHJvb3Q6IEdsaW1tZXJPYmplY3QsIGtleTogUHJvcGVydHlLZXkpIHtcclxuXHJcbiAgfVxyXG5cclxuICBkZWZpbmUoaG9tZTogT2JqZWN0LCBrZXk6IFByb3BlcnR5S2V5KSB7XHJcbiAgICBjbGFzc01ldGEoaG9tZSkuZGVmaW5lQ29tcHV0ZWQoa2V5LCB0aGlzKTtcclxuXHJcbiAgICBBQ0NFU1NPUl9ERVNDUklQVE9SLmdldCA9IHRoaXMuYWNjZXNzb3IuZ2V0O1xyXG4gICAgQUNDRVNTT1JfREVTQ1JJUFRPUi5zZXQgPSB0aGlzLmFjY2Vzc29yLnNldDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShob21lLCBrZXksIEFDQ0VTU09SX0RFU0NSSVBUT1IpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkPFQ+KGRlcDE6IHN0cmluZywgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KTogVDtcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkPFQ+KGRlcDE6IHN0cmluZywgZGVwMjogc3RyaW5nLCBhY2Nlc3NvcjogQWNjZXNzb3I8VD4pOiBUO1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQ8VD4oZGVwMTogc3RyaW5nLCBkZXAyOiBzdHJpbmcsIGRlcDM6IHN0cmluZywgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KTogVDtcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkPFQ+KGRlcDE6IHN0cmluZywgZGVwMjogc3RyaW5nLCBkZXAzOiBzdHJpbmcsIGRlcDQ6IHN0cmluZywgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KTogVDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZCguLi5hcmdzOiBhbnlbXSk6IE9wYXF1ZSB7XHJcbiAgbGV0IGRlcEtleXM6IHN0cmluZ1tdID0gYXJncy5zbGljZSgwLCAtMSk7XHJcbiAgbGV0IGFjY2Vzc29yOiBBY2Nlc3NvcjxPcGFxdWU+ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xyXG5cclxuICByZXR1cm4gbmV3IENvbXB1dGVkKGRlcEtleXMsIGFjY2Vzc29yKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbXB1dGVkQmx1ZXByaW50IGV4dGVuZHMgQmx1ZXByaW50IHtcclxuICBjb25zdHJ1Y3RvcihrZXk6IFByb3BlcnR5S2V5LCBwcml2YXRlIGNvbXB1dGVkOiBDb21wdXRlZDxPcGFxdWU+KSB7XHJcbiAgICBzdXBlcihrZXkpO1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKGhvbWU6IE9iamVjdCkge1xyXG4gICAgdGhpcy5jb21wdXRlZC5kZWZpbmUoaG9tZSwgdGhpcy5rZXkpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlc2NyaXB0b3JCbHVlcHJpbnQgZXh0ZW5kcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKGtleTogUHJvcGVydHlLZXksIHByaXZhdGUgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICBzdXBlcihrZXkpO1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKGhvbWU6IE9iamVjdCkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGhvbWUsIHRoaXMua2V5LCB0aGlzLmRlc2NyaXB0b3IpO1xyXG4gIH1cclxufVxyXG4iXX0=