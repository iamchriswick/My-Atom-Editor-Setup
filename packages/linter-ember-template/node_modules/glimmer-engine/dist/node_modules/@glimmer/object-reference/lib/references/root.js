"use strict";
var util_1 = require("@glimmer/util");
var path_1 = require("./path");
var reference_1 = require("@glimmer/reference");
var RootReference = (function () {
    function RootReference(object) {
        this.chains = util_1.dict();
        this.tag = reference_1.VOLATILE_TAG;
        this.object = object;
    }
    RootReference.prototype.value = function () { return this.object; };
    RootReference.prototype.update = function (object) {
        this.object = object;
        // this.notify();
    };
    RootReference.prototype.get = function (prop) {
        var chains = this.chains;
        if (prop in chains)
            return chains[prop];
        return (chains[prop] = new path_1.PathReference(this, prop));
    };
    RootReference.prototype.chainFor = function (prop) {
        var chains = this.chains;
        if (prop in chains)
            return chains[prop];
        return null;
    };
    RootReference.prototype.path = function (string) {
        return string.split('.').reduce(function (ref, part) { return ref.get(part); }, this);
    };
    RootReference.prototype.referenceFromParts = function (parts) {
        return parts.reduce(function (ref, part) { return ref.get(part); }, this);
    };
    RootReference.prototype.label = function () {
        return '[reference Root]';
    };
    return RootReference;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = RootReference;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1yZWZlcmVuY2UvbGliL3JlZmVyZW5jZXMvcm9vdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0NBQTZDO0FBQzdDLCtCQUF1QztBQUV2QyxnREFBZ0c7QUFFaEc7SUFLRSx1QkFBWSxNQUFTO1FBSGIsV0FBTSxHQUFHLFdBQUksRUFBc0IsQ0FBQztRQUNyQyxRQUFHLEdBQWdCLHdCQUFZLENBQUM7UUFHckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELDZCQUFLLEdBQUwsY0FBYSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFbEMsOEJBQU0sR0FBTixVQUFPLE1BQVM7UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixpQkFBaUI7SUFDbkIsQ0FBQztJQUVELDJCQUFHLEdBQUgsVUFBTyxJQUFZO1FBQ2pCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQVMsSUFBSSxJQUFJLE1BQU0sQ0FBQztZQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksb0JBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsZ0NBQVEsR0FBUixVQUFZLElBQVk7UUFDdEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN6QixFQUFFLENBQUMsQ0FBUyxJQUFJLElBQUksTUFBTSxDQUFDO1lBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDRCQUFJLEdBQUosVUFBSyxNQUFNO1FBQ1QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUksSUFBSyxPQUFBLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQWIsQ0FBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCwwQ0FBa0IsR0FBbEIsVUFBbUIsS0FBZTtRQUNoQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxJQUFJLElBQUssT0FBQSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBMkIsRUFBdkMsQ0FBdUMsRUFBRSxJQUE4QixDQUFDLENBQUM7SUFDOUcsQ0FBQztJQUVELDZCQUFLLEdBQUw7UUFDRSxNQUFNLENBQUMsa0JBQWtCLENBQUM7SUFDNUIsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXZDRCxJQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wYXF1ZSwgZGljdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSB9IGZyb20gJy4vcGF0aCc7XG5pbXBvcnQgeyBSb290UmVmZXJlbmNlIGFzIElSb290UmVmZXJlbmNlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVk9MQVRJTEVfVEFHLCBQYXRoUmVmZXJlbmNlIGFzIElQYXRoUmVmZXJlbmNlLCBSZXZpc2lvblRhZyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb3RSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBJUm9vdFJlZmVyZW5jZTxUPiwgSVBhdGhSZWZlcmVuY2U8VD4ge1xuICBwcml2YXRlIG9iamVjdDogVDtcbiAgcHJpdmF0ZSBjaGFpbnMgPSBkaWN0PFBhdGhSZWZlcmVuY2U8YW55Pj4oKTtcbiAgcHVibGljIHRhZzogUmV2aXNpb25UYWcgPSBWT0xBVElMRV9UQUc7XG5cbiAgY29uc3RydWN0b3Iob2JqZWN0OiBUKSB7XG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gIH1cblxuICB2YWx1ZSgpOiBUIHsgcmV0dXJuIHRoaXMub2JqZWN0OyB9XG5cbiAgdXBkYXRlKG9iamVjdDogVCkge1xuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgIC8vIHRoaXMubm90aWZ5KCk7XG4gIH1cblxuICBnZXQ8VT4ocHJvcDogc3RyaW5nKTogSVBhdGhSZWZlcmVuY2U8VT4ge1xuICAgIGxldCBjaGFpbnMgPSB0aGlzLmNoYWlucztcbiAgICBpZiAoPHN0cmluZz5wcm9wIGluIGNoYWlucykgcmV0dXJuIGNoYWluc1twcm9wXTtcbiAgICByZXR1cm4gKGNoYWluc1twcm9wXSA9IG5ldyBQYXRoUmVmZXJlbmNlKHRoaXMsIHByb3ApKTtcbiAgfVxuXG4gIGNoYWluRm9yPFU+KHByb3A6IHN0cmluZyk6IElQYXRoUmVmZXJlbmNlPFU+IHtcbiAgICBsZXQgY2hhaW5zID0gdGhpcy5jaGFpbnM7XG4gICAgaWYgKDxzdHJpbmc+cHJvcCBpbiBjaGFpbnMpIHJldHVybiBjaGFpbnNbcHJvcF07XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwYXRoKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJy4nKS5yZWR1Y2UoKHJlZiwgcGFydCkgPT4gcmVmLmdldChwYXJ0KSwgdGhpcyk7XG4gIH1cblxuICByZWZlcmVuY2VGcm9tUGFydHMocGFydHM6IHN0cmluZ1tdKTogSVBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgcmV0dXJuIHBhcnRzLnJlZHVjZSgocmVmLCBwYXJ0KSA9PiByZWYuZ2V0KHBhcnQpIGFzIElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4sIHRoaXMgYXMgSVBhdGhSZWZlcmVuY2U8T3BhcXVlPik7XG4gIH1cblxuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ1tyZWZlcmVuY2UgUm9vdF0nO1xuICB9XG59XG4iXX0=