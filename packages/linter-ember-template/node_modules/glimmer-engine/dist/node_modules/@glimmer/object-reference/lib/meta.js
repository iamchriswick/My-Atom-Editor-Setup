"use strict";
var descriptors_1 = require("./references/descriptors");
var root_1 = require("./references/root");
var util_1 = require("@glimmer/util");
var reference_1 = require("@glimmer/reference");
var NOOP_DESTROY = { destroy: function () { } };
var ConstPath = (function () {
    function ConstPath(parent, property) {
        this.tag = reference_1.VOLATILE_TAG;
        this.parent = parent;
    }
    ConstPath.prototype.chain = function () { return NOOP_DESTROY; };
    ConstPath.prototype.notify = function () { };
    ConstPath.prototype.value = function () {
        return this.parent[this.property];
    };
    ConstPath.prototype.get = function (prop) {
        return new ConstPath(this.parent[this.property], prop);
    };
    return ConstPath;
}());
var ConstRoot = (function () {
    function ConstRoot(value) {
        this.tag = reference_1.VOLATILE_TAG;
        this.inner = value;
    }
    ConstRoot.prototype.update = function (inner) {
        this.inner = inner;
    };
    ConstRoot.prototype.chain = function () { return NOOP_DESTROY; };
    ConstRoot.prototype.notify = function () { };
    ConstRoot.prototype.value = function () {
        return this.inner;
    };
    ConstRoot.prototype.referenceFromParts = function (parts) {
        throw new Error("Not implemented");
    };
    ConstRoot.prototype.chainFor = function (prop) {
        throw new Error("Not implemented");
    };
    ConstRoot.prototype.get = function (prop) {
        return new ConstPath(this.inner, prop);
    };
    return ConstRoot;
}());
var ConstMeta /*implements IMeta*/ = (function () {
    function ConstMeta(object) {
        this.object = object;
    }
    ConstMeta.prototype.root = function () {
        return new ConstRoot(this.object);
    };
    return ConstMeta;
}());
exports.CLASS_META = "df8be4c8-4e89-44e2-a8f9-550c8dacdca7";
var hasOwnProperty = Object.hasOwnProperty;
var Meta = (function () {
    function Meta(object, _a) {
        var RootReferenceFactory = _a.RootReferenceFactory, DefaultPathReferenceFactory = _a.DefaultPathReferenceFactory;
        this.references = null;
        this.slots = null;
        this.referenceTypes = null;
        this.propertyMetadata = null;
        this.object = object;
        this.RootReferenceFactory = RootReferenceFactory || root_1.default;
        this.DefaultPathReferenceFactory = DefaultPathReferenceFactory || descriptors_1.PropertyReference;
    }
    Meta.for = function (obj) {
        if (obj === null || obj === undefined)
            return new Meta(obj, {});
        if (hasOwnProperty.call(obj, '_meta') && obj._meta)
            return obj._meta;
        if (!Object.isExtensible(obj))
            return new ConstMeta(obj);
        var MetaToUse = Meta;
        if (obj.constructor && obj.constructor[exports.CLASS_META]) {
            var classMeta = obj.constructor[exports.CLASS_META];
            MetaToUse = classMeta.InstanceMetaConstructor;
        }
        else if (obj[exports.CLASS_META]) {
            MetaToUse = obj[exports.CLASS_META].InstanceMetaConstructor;
        }
        return (obj._meta = new MetaToUse(obj, {}));
    };
    Meta.exists = function (obj) {
        return typeof obj === 'object' && obj._meta;
    };
    Meta.metadataForProperty = function (key) {
        return null;
    };
    Meta.prototype.addReference = function (property, reference) {
        var refs = this.references = this.references || util_1.dict();
        var set = refs[property] = refs[property] || new util_1.DictSet();
        set.add(reference);
    };
    Meta.prototype.addReferenceTypeFor = function (property, type) {
        this.referenceTypes = this.referenceTypes || util_1.dict();
        this.referenceTypes[property] = type;
    };
    Meta.prototype.referenceTypeFor = function (property) {
        if (!this.referenceTypes)
            return descriptors_1.PropertyReference;
        return this.referenceTypes[property] || descriptors_1.PropertyReference;
    };
    Meta.prototype.removeReference = function (property, reference) {
        if (!this.references)
            return;
        var set = this.references[property];
        set.delete(reference);
    };
    Meta.prototype.getReferenceTypes = function () {
        this.referenceTypes = this.referenceTypes || util_1.dict();
        return this.referenceTypes;
    };
    Meta.prototype.referencesFor = function (property) {
        if (!this.references)
            return;
        return this.references[property];
    };
    Meta.prototype.getSlots = function () {
        return (this.slots = this.slots || util_1.dict());
    };
    Meta.prototype.root = function () {
        return (this.rootCache = this.rootCache || new this.RootReferenceFactory(this.object));
    };
    return Meta;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Meta;
function metaFor(obj) {
    return Meta.for(obj);
}
exports.metaFor = metaFor;
//# sourceMappingURL=data:application/json;base64,