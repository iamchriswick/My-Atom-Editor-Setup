"use strict";
var meta_1 = require("../meta");
var reference_1 = require("@glimmer/reference");
var PropertyReference = (function () {
    function PropertyReference(object, property, outer) {
        this.tag = reference_1.VOLATILE_TAG;
        this.object = object;
        this.property = property;
    }
    PropertyReference.prototype.value = function () { return this.object[this.property]; };
    PropertyReference.prototype.label = function () {
        return '[reference Property]';
    };
    return PropertyReference;
}());
exports.PropertyReference = PropertyReference;
function ComputedReferenceBlueprint(property, dependencies) {
    return (function () {
        function ComputedReference(object, property, outer) {
            this.installed = false;
            this.tag = reference_1.VOLATILE_TAG;
            this.object = object;
            this.property = property;
            this.dependencies = dependencies;
            this.outer = outer;
        }
        ComputedReference.prototype.value = function () {
            if (!this.installed) {
                var root_1 = meta_1.default.for(this.object).root();
                this.dependencies.forEach(function (dep) {
                    var ref = root_1.referenceFromParts(dep);
                    ref.value();
                });
                this.installed = true;
            }
            return this.object[this.property];
        };
        ComputedReference.prototype.label = function () {
            return '[reference Computed]';
        };
        return ComputedReference;
    }());
}
exports.ComputedReferenceBlueprint = ComputedReferenceBlueprint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpcHRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QtcmVmZXJlbmNlL2xpYi9yZWZlcmVuY2VzL2Rlc2NyaXB0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxnQ0FBMkI7QUFDM0IsZ0RBQTBFO0FBTzFFO0lBS0UsMkJBQVksTUFBVyxFQUFFLFFBQWdCLEVBQUUsS0FBNkI7UUFGakUsUUFBRyxHQUFnQix3QkFBWSxDQUFDO1FBR3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFRCxpQ0FBSyxHQUFMLGNBQVUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUU5QyxpQ0FBSyxHQUFMO1FBQ0UsTUFBTSxDQUFDLHNCQUFzQixDQUFDO0lBQ2hDLENBQUM7SUFDSCx3QkFBQztBQUFELENBQUMsQUFmRCxJQWVDO0FBZlksOENBQWlCO0FBaUI5QixvQ0FBOEMsUUFBUSxFQUFFLFlBQVk7SUFDbEUsTUFBTTtRQVFKLDJCQUFZLE1BQVcsRUFBRSxRQUFnQixFQUFFLEtBQTZCO1lBSGhFLGNBQVMsR0FBRyxLQUFLLENBQUM7WUFDbkIsUUFBRyxHQUFnQix3QkFBWSxDQUFDO1lBR3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLENBQUM7UUFFRCxpQ0FBSyxHQUFMO1lBQ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxNQUFJLEdBQUcsY0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRXhDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRztvQkFDM0IsSUFBSSxHQUFHLEdBQUcsTUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUN2QyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBQ2QsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7WUFDeEIsQ0FBQztZQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBRUQsaUNBQUssR0FBTDtZQUNFLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQztRQUNoQyxDQUFDO1FBQ0gsd0JBQUM7SUFBRCxDQUFDLEFBakNNLElBaUNMO0FBQ0osQ0FBQztBQW5DRCxnRUFtQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWV0YSBmcm9tICcuLi9tZXRhJztcbmltcG9ydCB7IFJlZmVyZW5jZSwgVk9MQVRJTEVfVEFHLCBSZXZpc2lvblRhZyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBOb3RpZmlhYmxlUmVmZXJlbmNlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElubmVyUmVmZXJlbmNlRmFjdG9yeTxUPiB7XG4gIG5ldyAob2JqZWN0OiBhbnksIHByb3BlcnR5OiBzdHJpbmcsIG91dGVyOiBOb3RpZmlhYmxlUmVmZXJlbmNlPGFueT4pOiBSZWZlcmVuY2U8VD47XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFJlZmVyZW5jZTxUPiB7XG4gIHByaXZhdGUgb2JqZWN0OiBhbnk7XG4gIHByaXZhdGUgcHJvcGVydHk6IHN0cmluZztcbiAgcHVibGljIHRhZzogUmV2aXNpb25UYWcgPSBWT0xBVElMRV9UQUc7XG5cbiAgY29uc3RydWN0b3Iob2JqZWN0OiBhbnksIHByb3BlcnR5OiBzdHJpbmcsIG91dGVyOiBOb3RpZmlhYmxlUmVmZXJlbmNlPFQ+KSB7XG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICB9XG5cbiAgdmFsdWUoKSB7IHJldHVybiB0aGlzLm9iamVjdFt0aGlzLnByb3BlcnR5XTsgfVxuXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiAnW3JlZmVyZW5jZSBQcm9wZXJ0eV0nO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb21wdXRlZFJlZmVyZW5jZUJsdWVwcmludDxUPihwcm9wZXJ0eSwgZGVwZW5kZW5jaWVzKTogSW5uZXJSZWZlcmVuY2VGYWN0b3J5PFQ+IHtcbiAgcmV0dXJuIGNsYXNzIENvbXB1dGVkUmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgUmVmZXJlbmNlPFQ+IHtcbiAgICBwcml2YXRlIG9iamVjdDogYW55O1xuICAgIHByaXZhdGUgcHJvcGVydHk6IHN0cmluZztcbiAgICBwcml2YXRlIGRlcGVuZGVuY2llczogc3RyaW5nW11bXTtcbiAgICBwcml2YXRlIG91dGVyOiBOb3RpZmlhYmxlUmVmZXJlbmNlPFQ+O1xuICAgIHByaXZhdGUgaW5zdGFsbGVkID0gZmFsc2U7XG4gICAgcHVibGljIHRhZzogUmV2aXNpb25UYWcgPSBWT0xBVElMRV9UQUc7XG5cbiAgICBjb25zdHJ1Y3RvcihvYmplY3Q6IGFueSwgcHJvcGVydHk6IHN0cmluZywgb3V0ZXI6IE5vdGlmaWFibGVSZWZlcmVuY2U8VD4pIHtcbiAgICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgdGhpcy5kZXBlbmRlbmNpZXMgPSBkZXBlbmRlbmNpZXM7XG4gICAgICB0aGlzLm91dGVyID0gb3V0ZXI7XG4gICAgfVxuXG4gICAgdmFsdWUoKTogVCB7XG4gICAgICBpZiAoIXRoaXMuaW5zdGFsbGVkKSB7XG4gICAgICAgIGxldCByb290ID0gTWV0YS5mb3IodGhpcy5vYmplY3QpLnJvb3QoKTtcblxuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcy5mb3JFYWNoKGRlcCA9PiB7XG4gICAgICAgICAgbGV0IHJlZiA9IHJvb3QucmVmZXJlbmNlRnJvbVBhcnRzKGRlcCk7XG4gICAgICAgICAgcmVmLnZhbHVlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5zdGFsbGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMub2JqZWN0W3RoaXMucHJvcGVydHldO1xuICAgIH1cblxuICAgIGxhYmVsKCkge1xuICAgICAgcmV0dXJuICdbcmVmZXJlbmNlIENvbXB1dGVkXSc7XG4gICAgfVxuICB9O1xufVxuIl19