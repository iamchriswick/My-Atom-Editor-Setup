"use strict";
function is(variant) {
    return function (value) {
        return value[0] === variant;
    };
}
exports.is = is;
var Expressions;
(function (Expressions) {
    Expressions.isUnknown = is('unknown');
    Expressions.isArg = is('arg');
    Expressions.isGet = is('get');
    Expressions.isConcat = is('concat');
    Expressions.isHelper = is('helper');
    Expressions.isHasBlock = is('has-block');
    Expressions.isHasBlockParams = is('has-block-params');
    Expressions.isUndefined = is('undefined');
    function isPrimitiveValue(value) {
        if (value === null) {
            return true;
        }
        return typeof value !== 'object';
    }
    Expressions.isPrimitiveValue = isPrimitiveValue;
})(Expressions = exports.Expressions || (exports.Expressions = {}));
var Statements;
(function (Statements) {
    Statements.isText = is('text');
    Statements.isAppend = is('append');
    Statements.isComment = is('comment');
    Statements.isModifier = is('modifier');
    Statements.isBlock = is('block');
    Statements.isComponent = is('component');
    Statements.isOpenElement = is('open-element');
    Statements.isFlushElement = is('flush-element');
    Statements.isCloseElement = is('close-element');
    Statements.isStaticAttr = is('static-attr');
    Statements.isDynamicAttr = is('dynamic-attr');
    Statements.isYield = is('yield');
    Statements.isPartial = is('partial');
    Statements.isDynamicArg = is('dynamic-arg');
    Statements.isStaticArg = is('static-arg');
    Statements.isTrustingAttr = is('trusting-attr');
    Statements.isDebugger = is('debugger');
    function isAttribute(val) {
        return val[0] === 'static-attr' || val[0] === 'dynamic-attr';
    }
    Statements.isAttribute = isAttribute;
    function isArgument(val) {
        return val[0] === 'static-arg' || val[0] === 'dynamic-arg';
    }
    Statements.isArgument = isArgument;
    function isParameter(val) {
        return isAttribute(val) || isArgument(val);
    }
    Statements.isParameter = isParameter;
    function getParameterName(s) {
        return s[1];
    }
    Statements.getParameterName = getParameterName;
})(Statements = exports.Statements || (exports.Statements = {}));
//# sourceMappingURL=data:application/json;base64,