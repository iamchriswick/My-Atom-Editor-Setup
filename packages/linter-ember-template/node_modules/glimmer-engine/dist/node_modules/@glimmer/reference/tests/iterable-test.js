"use strict";
var reference_1 = require("@glimmer/reference");
var object_reference_1 = require("@glimmer/object-reference");
var util_1 = require("@glimmer/util");
QUnit.module("Reference iterables");
var Target = (function () {
    function Target() {
        this.map = util_1.dict();
        this.list = new util_1.LinkedList();
        this.tag = reference_1.VOLATILE_TAG;
    }
    Target.prototype.retain = function (key, item, memo) {
        if (item !== this.map[key].value) {
            throw new Error("unstable reference");
        }
    };
    Target.prototype.done = function () { };
    Target.prototype.append = function (key, item, memo) {
        var node = this.map[key] = new util_1.ListNode(item);
        this.list.append(node);
    };
    Target.prototype.insert = function (key, item, memo, before) {
        var referenceNode = before ? this.map[before] : null;
        var node = this.map[key] = new util_1.ListNode(item);
        this.list.insertBefore(node, referenceNode);
    };
    Target.prototype.move = function (key, item, memo, before) {
        var referenceNode = before ? this.map[before] : null;
        var node = this.map[key];
        if (item !== node.value) {
            throw new Error("unstable reference");
        }
        this.list.remove(node);
        this.list.insertBefore(node, referenceNode);
    };
    Target.prototype.delete = function (key) {
        var node = this.map[key];
        delete this.map[key];
        this.list.remove(node);
    };
    Target.prototype.toArray = function () {
        return this.list.toArray().map(function (node) { return node.value; });
    };
    Target.prototype.toValues = function () {
        return this.toArray().map(function (ref) { return ref.value(); });
    };
    return Target;
}());
var TestIterationItem = (function () {
    function TestIterationItem(key, value, memo) {
        this.key = key;
        this.value = value;
        this.memo = memo;
    }
    return TestIterationItem;
}());
var TestIterator = (function () {
    function TestIterator(array) {
        this.position = 0;
        this.array = array;
    }
    TestIterator.prototype.isEmpty = function () {
        return this.array.length === 0;
    };
    TestIterator.prototype.next = function () {
        var _a = this, position = _a.position, array = _a.array;
        if (position >= array.length)
            return null;
        var value = array[position];
        this.position++;
        return new TestIterationItem(value.key, value, position);
    };
    return TestIterator;
}());
var TestIterable = (function () {
    function TestIterable(arrayRef) {
        this.tag = arrayRef.tag;
        this.arrayRef = arrayRef;
    }
    TestIterable.prototype.iterate = function () {
        return new TestIterator(this.arrayRef.value());
    };
    TestIterable.prototype.valueReferenceFor = function (item) {
        return new object_reference_1.UpdatableReference(item.value);
    };
    TestIterable.prototype.updateValueReference = function (reference, item) {
        reference.update(item.value);
    };
    TestIterable.prototype.memoReferenceFor = function (item) {
        return new object_reference_1.UpdatableReference(item.memo);
    };
    TestIterable.prototype.updateMemoReference = function (reference, item) {
        reference.update(item.memo);
    };
    return TestIterable;
}());
function initialize(arr) {
    var target = new Target();
    var reference = new object_reference_1.UpdatableReference(arr);
    var iterator = new reference_1.ReferenceIterator(new TestIterable(reference));
    var item;
    while (item = iterator.next()) {
        target.append(item.key, item.value, item.memo);
    }
    return { reference: reference, target: target, artifacts: iterator.artifacts };
}
function sync(target, artifacts) {
    var synchronizer = new reference_1.IteratorSynchronizer({ target: target, artifacts: artifacts });
    synchronizer.sync();
}
QUnit.test("They provide a sequence of references with keys", function (assert) {
    var arr = [{ key: "a", name: "Yehuda" }, { key: "b", name: "Godfrey" }];
    var target = initialize(arr).target;
    assert.deepEqual(target.toValues(), arr);
});
QUnit.test("When re-iterated via mutation, the original references are updated", function (assert) {
    var arr = [{ key: "a", name: "Yehuda" }, { key: "b", name: "Godfrey" }];
    var _a = initialize(arr), target = _a.target, artifacts = _a.artifacts;
    assert.deepEqual(target.toValues(), arr);
    arr.reverse();
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    arr.push({ key: "c", name: "Godhuda" });
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    arr.shift();
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
});
QUnit.test("When re-iterated via deep mutation, the original references are updated", function (assert) {
    var arr = [{ key: "a", name: "Yehuda" }, { key: "b", name: "Godfrey" }];
    var _a = initialize(arr), target = _a.target, artifacts = _a.artifacts;
    assert.deepEqual(target.toValues(), arr);
    arr[0].key = "b";
    arr[0].name = "Godfrey";
    arr[1].key = "a";
    arr[1].name = "Yehuda";
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    arr[0].name = "Yehuda";
    arr[1].name = "Godfrey";
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    arr.push({ key: "c", name: "Godhuda" });
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    arr.shift();
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
});
QUnit.test("When re-iterated via replacement, the original references are updated", function (assert) {
    var arr = [{ key: "a", name: "Yehuda" }, { key: "b", name: "Godfrey" }];
    var _a = initialize(arr), target = _a.target, reference = _a.reference, artifacts = _a.artifacts;
    assert.deepEqual(target.toValues(), arr);
    arr = arr.slice();
    arr.reverse();
    reference.update(arr);
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    reference.update([{ key: 'a', name: "Tom" }, { key: "b", name: "Stef " }]);
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), [{ key: 'a', name: "Tom" }, { key: "b", name: "Stef " }]);
    arr = arr.slice();
    arr.push({ key: "c", name: "Godhuda" });
    reference.update(arr);
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
    arr = arr.slice();
    arr.shift();
    reference.update(arr);
    sync(target, artifacts);
    assert.deepEqual(target.toValues(), arr);
});
//# sourceMappingURL=data:application/json;base64,