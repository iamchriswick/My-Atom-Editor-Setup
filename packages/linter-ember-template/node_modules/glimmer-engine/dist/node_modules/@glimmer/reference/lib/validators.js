"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
exports.CONSTANT = 0;
exports.INITIAL = 1;
exports.VOLATILE = NaN;
var RevisionTag = (function () {
    function RevisionTag() {
    }
    RevisionTag.prototype.validate = function (snapshot) {
        return this.value() === snapshot;
    };
    return RevisionTag;
}());
exports.RevisionTag = RevisionTag;
var $REVISION = exports.INITIAL;
var DirtyableTag = (function (_super) {
    __extends(DirtyableTag, _super);
    function DirtyableTag(revision) {
        if (revision === void 0) { revision = $REVISION; }
        var _this = _super.call(this) || this;
        _this.revision = revision;
        return _this;
    }
    DirtyableTag.prototype.value = function () {
        return this.revision;
    };
    DirtyableTag.prototype.dirty = function () {
        this.revision = ++$REVISION;
    };
    return DirtyableTag;
}(RevisionTag));
exports.DirtyableTag = DirtyableTag;
function combineTagged(tagged) {
    var optimized = [];
    for (var i = 0, l = tagged.length; i < l; i++) {
        var tag = tagged[i].tag;
        if (tag === exports.VOLATILE_TAG)
            return exports.VOLATILE_TAG;
        if (tag === exports.CONSTANT_TAG)
            continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
exports.combineTagged = combineTagged;
function combineSlice(slice) {
    var optimized = [];
    var node = slice.head();
    while (node !== null) {
        var tag = node.tag;
        if (tag === exports.VOLATILE_TAG)
            return exports.VOLATILE_TAG;
        if (tag !== exports.CONSTANT_TAG)
            optimized.push(tag);
        node = slice.nextNode(node);
    }
    return _combine(optimized);
}
exports.combineSlice = combineSlice;
function combine(tags) {
    var optimized = [];
    for (var i = 0, l = tags.length; i < l; i++) {
        var tag = tags[i];
        if (tag === exports.VOLATILE_TAG)
            return exports.VOLATILE_TAG;
        if (tag === exports.CONSTANT_TAG)
            continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
exports.combine = combine;
function _combine(tags) {
    switch (tags.length) {
        case 0:
            return exports.CONSTANT_TAG;
        case 1:
            return tags[0];
        case 2:
            return new TagsPair(tags[0], tags[1]);
        default:
            return new TagsCombinator(tags);
    }
    ;
}
var CachedTag = (function (_super) {
    __extends(CachedTag, _super);
    function CachedTag() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastChecked = null;
        _this.lastValue = null;
        return _this;
    }
    CachedTag.prototype.value = function () {
        var _a = this, lastChecked = _a.lastChecked, lastValue = _a.lastValue;
        if (lastChecked !== $REVISION) {
            this.lastChecked = $REVISION;
            this.lastValue = lastValue = this.compute();
        }
        return this.lastValue;
    };
    CachedTag.prototype.invalidate = function () {
        this.lastChecked = null;
    };
    return CachedTag;
}(RevisionTag));
exports.CachedTag = CachedTag;
var TagsPair = (function (_super) {
    __extends(TagsPair, _super);
    function TagsPair(first, second) {
        var _this = _super.call(this) || this;
        _this.first = first;
        _this.second = second;
        return _this;
    }
    TagsPair.prototype.compute = function () {
        return Math.max(this.first.value(), this.second.value());
    };
    return TagsPair;
}(CachedTag));
var TagsCombinator = (function (_super) {
    __extends(TagsCombinator, _super);
    function TagsCombinator(tags) {
        var _this = _super.call(this) || this;
        _this.tags = tags;
        return _this;
    }
    TagsCombinator.prototype.compute = function () {
        var tags = this.tags;
        var max = -1;
        for (var i = 0; i < tags.length; i++) {
            var value = tags[i].value();
            max = Math.max(value, max);
        }
        return max;
    };
    return TagsCombinator;
}(CachedTag));
var UpdatableTag = (function (_super) {
    __extends(UpdatableTag, _super);
    function UpdatableTag(tag) {
        var _this = _super.call(this) || this;
        _this.tag = tag;
        _this.lastUpdated = exports.INITIAL;
        return _this;
    }
    UpdatableTag.prototype.compute = function () {
        return Math.max(this.lastUpdated, this.tag.value());
    };
    UpdatableTag.prototype.update = function (tag) {
        if (tag !== this.tag) {
            this.tag = tag;
            this.lastUpdated = $REVISION;
            this.invalidate();
        }
    };
    return UpdatableTag;
}(CachedTag));
exports.UpdatableTag = UpdatableTag;
//////////
exports.CONSTANT_TAG = new ((function (_super) {
    __extends(ConstantTag, _super);
    function ConstantTag() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ConstantTag.prototype.value = function () {
        return exports.CONSTANT;
    };
    return ConstantTag;
}(RevisionTag)));
exports.VOLATILE_TAG = new ((function (_super) {
    __extends(VolatileTag, _super);
    function VolatileTag() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VolatileTag.prototype.value = function () {
        return exports.VOLATILE;
    };
    return VolatileTag;
}(RevisionTag)));
exports.CURRENT_TAG = new ((function (_super) {
    __extends(CurrentTag, _super);
    function CurrentTag() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CurrentTag.prototype.value = function () {
        return $REVISION;
    };
    return CurrentTag;
}(DirtyableTag)));
var CachedReference = (function () {
    function CachedReference() {
        this.lastRevision = null;
        this.lastValue = null;
    }
    CachedReference.prototype.value = function () {
        var _a = this, tag = _a.tag, lastRevision = _a.lastRevision, lastValue = _a.lastValue;
        if (!lastRevision || !tag.validate(lastRevision)) {
            lastValue = this.lastValue = this.compute();
            this.lastRevision = tag.value();
        }
        return lastValue;
    };
    CachedReference.prototype.invalidate = function () {
        this.lastRevision = null;
    };
    return CachedReference;
}());
exports.CachedReference = CachedReference;
var MapperReference = (function (_super) {
    __extends(MapperReference, _super);
    function MapperReference(reference, mapper) {
        var _this = _super.call(this) || this;
        _this.tag = reference.tag;
        _this.reference = reference;
        _this.mapper = mapper;
        return _this;
    }
    MapperReference.prototype.compute = function () {
        var _a = this, reference = _a.reference, mapper = _a.mapper;
        return mapper(reference.value());
    };
    return MapperReference;
}(CachedReference));
function map(reference, mapper) {
    return new MapperReference(reference, mapper);
}
exports.map = map;
//////////
var ReferenceCache = (function () {
    function ReferenceCache(reference) {
        this.lastValue = null;
        this.lastRevision = null;
        this.initialized = false;
        this.tag = reference.tag;
        this.reference = reference;
    }
    ReferenceCache.prototype.peek = function () {
        if (!this.initialized) {
            return this.initialize();
        }
        return this.lastValue;
    };
    ReferenceCache.prototype.revalidate = function () {
        if (!this.initialized) {
            return this.initialize();
        }
        var _a = this, reference = _a.reference, lastRevision = _a.lastRevision;
        var tag = reference.tag;
        if (tag.validate(lastRevision))
            return NOT_MODIFIED;
        this.lastRevision = tag.value();
        var lastValue = this.lastValue;
        var value = reference.value();
        if (value === lastValue)
            return NOT_MODIFIED;
        this.lastValue = value;
        return value;
    };
    ReferenceCache.prototype.initialize = function () {
        var reference = this.reference;
        var value = this.lastValue = reference.value();
        this.lastRevision = reference.tag.value();
        this.initialized = true;
        return value;
    };
    return ReferenceCache;
}());
exports.ReferenceCache = ReferenceCache;
var NOT_MODIFIED = "adb3b78e-3d22-4e4b-877a-6317c2c5c145";
function isModified(value) {
    return value !== NOT_MODIFIED;
}
exports.isModified = isModified;
//# sourceMappingURL=data:application/json;base64,