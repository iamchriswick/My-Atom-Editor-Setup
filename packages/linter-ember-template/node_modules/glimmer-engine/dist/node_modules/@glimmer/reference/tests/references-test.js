"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reference_1 = require("@glimmer/reference");
var util_1 = require("@glimmer/util");
var UpdatableReference = (function () {
    function UpdatableReference(content) {
        this.content = content;
        this.tag = this._tag = new reference_1.DirtyableTag();
    }
    UpdatableReference.prototype.value = function () {
        return this.content;
    };
    UpdatableReference.prototype.update = function (content) {
        this._tag.dirty();
        return this.content = content;
    };
    return UpdatableReference;
}());
var TaggedDict = (function () {
    function TaggedDict() {
        this.data = util_1.dict();
        this.tag = this._tag = new reference_1.DirtyableTag();
    }
    TaggedDict.prototype.get = function (key) {
        return this.data[key];
    };
    TaggedDict.prototype.set = function (key, value) {
        this._tag.dirty();
        return this.data[key] = value;
    };
    return TaggedDict;
}());
QUnit.module("References");
QUnit.test("CachedReference caches computation correctly", function (assert) {
    var computed = 0;
    var DictValueReference = (function (_super) {
        __extends(DictValueReference, _super);
        function DictValueReference(dict, key) {
            var _this = _super.call(this) || this;
            _this.dict = dict;
            _this.key = key;
            _this.tag = dict.tag;
            return _this;
        }
        DictValueReference.prototype.compute = function () {
            computed++;
            return this.dict.get(this.key);
        };
        return DictValueReference;
    }(reference_1.CachedReference));
    var dict = new TaggedDict();
    var reference = new DictValueReference(dict, 'foo');
    dict.set('foo', 'bar');
    assert.strictEqual(computed, 0, 'precond');
    assert.equal(reference.value(), 'bar');
    assert.equal(reference.value(), 'bar');
    assert.equal(reference.value(), 'bar');
    assert.strictEqual(computed, 1, 'computed');
    dict.set('foo', 'BAR');
    assert.equal(reference.value(), 'BAR');
    assert.equal(reference.value(), 'BAR');
    assert.equal(reference.value(), 'BAR');
    assert.strictEqual(computed, 2, 'computed');
    dict.set('baz', 'bat');
    assert.equal(reference.value(), 'BAR');
    assert.equal(reference.value(), 'BAR');
    assert.equal(reference.value(), 'BAR');
    assert.strictEqual(computed, 3, 'computed');
    dict.set('foo', 'bar');
    assert.equal(reference.value(), 'bar');
    assert.equal(reference.value(), 'bar');
    assert.equal(reference.value(), 'bar');
    assert.strictEqual(computed, 4, 'computed');
});
QUnit.test("CachedReference caches nested computation correctly", function (assert) {
    var computed = 0;
    var DictValueReference = (function (_super) {
        __extends(DictValueReference, _super);
        function DictValueReference(parent, key) {
            var _this = _super.call(this) || this;
            _this.parent = parent;
            _this.key = key;
            var _tag = _this._tag = new reference_1.UpdatableTag(reference_1.CONSTANT_TAG);
            _this.tag = reference_1.combine([parent.tag, _tag]);
            return _this;
        }
        DictValueReference.prototype.compute = function () {
            computed++;
            var _a = this, parent = _a.parent, _tag = _a._tag, key = _a.key;
            var dict = parent.value();
            _tag.update(dict.tag);
            return dict.get(key);
        };
        return DictValueReference;
    }(reference_1.CachedReference));
    var first = new TaggedDict();
    var second = new TaggedDict();
    var dictReference = new UpdatableReference(first);
    var valueReference = new DictValueReference(dictReference, 'foo');
    first.set('foo', 'bar');
    assert.strictEqual(computed, 0, 'precond');
    assert.equal(valueReference.value(), 'bar');
    assert.equal(valueReference.value(), 'bar');
    assert.equal(valueReference.value(), 'bar');
    assert.strictEqual(computed, 1, 'computed');
    second.set('foo', 'BAR');
    assert.equal(valueReference.value(), 'bar');
    assert.equal(valueReference.value(), 'bar');
    assert.equal(valueReference.value(), 'bar');
    assert.strictEqual(computed, 1, 'computed');
    dictReference.update(second);
    assert.equal(valueReference.value(), 'BAR');
    assert.equal(valueReference.value(), 'BAR');
    assert.equal(valueReference.value(), 'BAR');
    assert.strictEqual(computed, 2, 'computed');
    second.set('foo', 'foo-bar');
    assert.equal(valueReference.value(), 'foo-bar');
    assert.equal(valueReference.value(), 'foo-bar');
    assert.equal(valueReference.value(), 'foo-bar');
    assert.strictEqual(computed, 3, 'computed');
});
//# sourceMappingURL=data:application/json;base64,