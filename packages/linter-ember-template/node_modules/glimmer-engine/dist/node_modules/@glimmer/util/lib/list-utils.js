"use strict";
var ListNode = (function () {
    function ListNode(value) {
        this.next = null;
        this.prev = null;
        this.value = value;
    }
    return ListNode;
}());
exports.ListNode = ListNode;
var LinkedList = (function () {
    function LinkedList() {
        this.clear();
    }
    LinkedList.fromSlice = function (slice) {
        var list = new LinkedList();
        slice.forEachNode(function (n) { return list.append(n.clone()); });
        return list;
    };
    LinkedList.prototype.head = function () {
        return this._head;
    };
    LinkedList.prototype.tail = function () {
        return this._tail;
    };
    LinkedList.prototype.clear = function () {
        this._head = this._tail = null;
    };
    LinkedList.prototype.isEmpty = function () {
        return this._head === null;
    };
    LinkedList.prototype.toArray = function () {
        var out = [];
        this.forEachNode(function (n) { return out.push(n); });
        return out;
    };
    LinkedList.prototype.splice = function (start, end, reference) {
        var before;
        if (reference === null) {
            before = this._tail;
            this._tail = end;
        }
        else {
            before = reference.prev;
            end.next = reference;
            reference.prev = end;
        }
        if (before) {
            before.next = start;
            start.prev = before;
        }
    };
    LinkedList.prototype.nextNode = function (node) {
        return node.next;
    };
    LinkedList.prototype.prevNode = function (node) {
        return node.prev;
    };
    LinkedList.prototype.forEachNode = function (callback) {
        var node = this._head;
        while (node !== null) {
            callback(node);
            node = node.next;
        }
    };
    LinkedList.prototype.contains = function (needle) {
        var node = this._head;
        while (node !== null) {
            if (node === needle)
                return true;
            node = node.next;
        }
        return false;
    };
    LinkedList.prototype.insertBefore = function (node, reference) {
        if (reference === void 0) { reference = null; }
        if (reference === null)
            return this.append(node);
        if (reference.prev)
            reference.prev.next = node;
        else
            this._head = node;
        node.prev = reference.prev;
        node.next = reference;
        reference.prev = node;
        return node;
    };
    LinkedList.prototype.append = function (node) {
        var tail = this._tail;
        if (tail) {
            tail.next = node;
            node.prev = tail;
            node.next = null;
        }
        else {
            this._head = node;
        }
        return (this._tail = node);
    };
    LinkedList.prototype.pop = function () {
        if (this._tail)
            return this.remove(this._tail);
        return null;
    };
    LinkedList.prototype.prepend = function (node) {
        if (this._head)
            return this.insertBefore(node, this._head);
        return (this._head = this._tail = node);
    };
    LinkedList.prototype.remove = function (node) {
        if (node.prev)
            node.prev.next = node.next;
        else
            this._head = node.next;
        if (node.next)
            node.next.prev = node.prev;
        else
            this._tail = node.prev;
        return node;
    };
    return LinkedList;
}());
exports.LinkedList = LinkedList;
var ListSlice = (function () {
    function ListSlice(head, tail) {
        this._head = head;
        this._tail = tail;
    }
    ListSlice.toList = function (slice) {
        var list = new LinkedList();
        slice.forEachNode(function (n) { return list.append(n.clone()); });
        return list;
    };
    ListSlice.prototype.forEachNode = function (callback) {
        var node = this._head;
        while (node !== null) {
            callback(node);
            node = this.nextNode(node);
        }
    };
    ListSlice.prototype.contains = function (needle) {
        var node = this._head;
        while (node !== null) {
            if (node === needle)
                return true;
            node = node.next;
        }
        return false;
    };
    ListSlice.prototype.head = function () {
        return this._head;
    };
    ListSlice.prototype.tail = function () {
        return this._tail;
    };
    ListSlice.prototype.toArray = function () {
        var out = [];
        this.forEachNode(function (n) { return out.push(n); });
        return out;
    };
    ListSlice.prototype.nextNode = function (node) {
        if (node === this._tail)
            return null;
        return node.next;
    };
    ListSlice.prototype.prevNode = function (node) {
        if (node === this._head)
            return null;
        return node.prev;
    };
    ListSlice.prototype.isEmpty = function () {
        return false;
    };
    return ListSlice;
}());
exports.ListSlice = ListSlice;
exports.EMPTY_SLICE = new ListSlice(null, null);
//# sourceMappingURL=data:application/json;base64,