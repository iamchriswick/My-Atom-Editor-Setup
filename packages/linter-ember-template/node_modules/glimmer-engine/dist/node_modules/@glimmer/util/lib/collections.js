"use strict";
var guid_1 = require("./guid");
var proto = Object.create(null, {
    // without this, we will always still end up with (new
    // EmptyObject()).constructor === Object
    constructor: {
        value: undefined,
        enumerable: false,
        writable: true
    }
});
function EmptyObject() { }
EmptyObject.prototype = proto;
function dict() {
    // let d = Object.create(null);
    // d.x = 1;
    // delete d.x;
    // return d;
    return new EmptyObject();
}
exports.dict = dict;
var DictSet = (function () {
    function DictSet() {
        this.dict = dict();
    }
    DictSet.prototype.add = function (obj) {
        if (typeof obj === 'string')
            this.dict[obj] = obj;
        else
            this.dict[guid_1.ensureGuid(obj)] = obj;
        return this;
    };
    DictSet.prototype.delete = function (obj) {
        if (typeof obj === 'string')
            delete this.dict[obj];
        else if (obj._guid)
            delete this.dict[obj._guid];
    };
    DictSet.prototype.forEach = function (callback) {
        var dict = this.dict;
        Object.keys(dict).forEach(function (key) { return callback(dict[key]); });
    };
    DictSet.prototype.toArray = function () {
        return Object.keys(this.dict);
    };
    return DictSet;
}());
exports.DictSet = DictSet;
var Stack = (function () {
    function Stack() {
        this.stack = [];
        this.current = null;
    }
    Stack.prototype.toArray = function () {
        return this.stack;
    };
    Stack.prototype.push = function (item) {
        this.current = item;
        this.stack.push(item);
    };
    Stack.prototype.pop = function () {
        var item = this.stack.pop();
        var len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
    };
    Stack.prototype.isEmpty = function () {
        return this.stack.length === 0;
    };
    return Stack;
}());
exports.Stack = Stack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci91dGlsL2xpYi9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQTZDO0FBYTdDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO0lBQzlCLHNEQUFzRDtJQUN0RCx3Q0FBd0M7SUFDeEMsV0FBVyxFQUFFO1FBQ1gsS0FBSyxFQUFFLFNBQVM7UUFDaEIsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFLElBQUk7S0FDZjtDQUNGLENBQUMsQ0FBQztBQUVILHlCQUF3QixDQUFDO0FBQ3pCLFdBQVcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBRTlCO0lBQ0UsK0JBQStCO0lBQy9CLFdBQVc7SUFDWCxjQUFjO0lBQ2QsWUFBWTtJQUNaLE1BQU0sQ0FBQyxJQUFLLFdBQW1CLEVBQUUsQ0FBQztBQUNwQyxDQUFDO0FBTkQsb0JBTUM7QUFJRDtJQUdFO1FBQ0UsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUssQ0FBQztJQUN4QixDQUFDO0lBRUQscUJBQUcsR0FBSCxVQUFJLEdBQU07UUFDUixFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7WUFBQyxJQUFJLENBQUMsSUFBSSxDQUFNLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN2RCxJQUFJO1lBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBVSxDQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsd0JBQU0sR0FBTixVQUFPLEdBQU07UUFDWCxFQUFFLENBQUMsQ0FBQyxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7WUFBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQU0sR0FBRyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFFLEdBQVcsQ0FBQyxLQUFLLENBQUM7WUFBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUUsR0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRCx5QkFBTyxHQUFQLFVBQVEsUUFBMkI7UUFDM0IsSUFBQSxnQkFBSSxDQUFVO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELHlCQUFPLEdBQVA7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBMUJELElBMEJDO0FBMUJZLDBCQUFPO0FBNEJwQjtJQUFBO1FBQ1UsVUFBSyxHQUFRLEVBQUUsQ0FBQztRQUNqQixZQUFPLEdBQWMsSUFBSSxDQUFDO0lBc0JuQyxDQUFDO0lBcEJDLHVCQUFPLEdBQVA7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsb0JBQUksR0FBSixVQUFLLElBQU87UUFDVixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsbUJBQUcsR0FBSDtRQUNFLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RCxNQUFNLENBQUMsSUFBSSxLQUFLLFNBQVMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQzFDLENBQUM7SUFFRCx1QkFBTyxHQUFQO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0gsWUFBQztBQUFELENBQUMsQUF4QkQsSUF3QkM7QUF4Qlksc0JBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmxldCBwcm90byA9IE9iamVjdC5jcmVhdGUobnVsbCwge1xuICAvLyB3aXRob3V0IHRoaXMsIHdlIHdpbGwgYWx3YXlzIHN0aWxsIGVuZCB1cCB3aXRoIChuZXdcbiAgLy8gRW1wdHlPYmplY3QoKSkuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICBjb25zdHJ1Y3Rvcjoge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIEVtcHR5T2JqZWN0KCkge31cbkVtcHR5T2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgLy8gbGV0IGQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBkLnggPSAxO1xuICAvLyBkZWxldGUgZC54O1xuICAvLyByZXR1cm4gZDtcbiAgcmV0dXJuIG5ldyAoRW1wdHlPYmplY3QgYXMgYW55KSgpO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFs8YW55Pm9ial0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZCg8YW55Pm9iaildID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFs8YW55Pm9ial07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cblxuICBmb3JFYWNoKGNhbGxiYWNrOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGxldCB7IGRpY3QgfSA9IHRoaXM7XG4gICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChrZXkgPT4gY2FsbGJhY2soZGljdFtrZXldKSk7XG4gIH1cblxuICB0b0FycmF5KCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kaWN0KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==