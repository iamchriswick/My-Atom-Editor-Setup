"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var namespaces_1 = require("./lib/namespaces");
exports.getAttrNamespace = namespaces_1.getAttrNamespace;
__export(require("./lib/platform-utils"));
var assert_1 = require("./lib/assert");
exports.assert = assert_1.default;
var logger_1 = require("./lib/logger");
exports.LOGGER = logger_1.default;
exports.Logger = logger_1.Logger;
exports.LogLevel = logger_1.LogLevel;
var object_utils_1 = require("./lib/object-utils");
exports.assign = object_utils_1.assign;
exports.fillNulls = object_utils_1.fillNulls;
var guid_1 = require("./lib/guid");
exports.ensureGuid = guid_1.ensureGuid;
exports.initializeGuid = guid_1.initializeGuid;
exports.HasGuid = guid_1.HasGuid;
var collections_1 = require("./lib/collections");
exports.Stack = collections_1.Stack;
exports.Dict = collections_1.Dict;
exports.Set = collections_1.Set;
exports.DictSet = collections_1.DictSet;
exports.dict = collections_1.dict;
var list_utils_1 = require("./lib/list-utils");
exports.EMPTY_SLICE = list_utils_1.EMPTY_SLICE;
exports.LinkedList = list_utils_1.LinkedList;
exports.LinkedListNode = list_utils_1.LinkedListNode;
exports.ListNode = list_utils_1.ListNode;
exports.CloneableListNode = list_utils_1.CloneableListNode;
exports.ListSlice = list_utils_1.ListSlice;
exports.Slice = list_utils_1.Slice;
var array_utils_1 = require("./lib/array-utils");
exports.A = array_utils_1.default;
var weakmap_1 = require("./lib/weakmap");
exports.HAS_NATIVE_WEAKMAP = weakmap_1.HAS_NATIVE_WEAKMAP;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci91dGlsL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSwrQ0FBb0Q7QUFBM0Msd0NBQUEsZ0JBQWdCLENBQUE7QUFDekIsMENBQXFDO0FBQ3JDLHVDQUFpRDtBQUF4QywwQkFBQSxPQUFPLENBQVU7QUFDMUIsdUNBQW1FO0FBQTFELDBCQUFBLE9BQU8sQ0FBVTtBQUFFLDBCQUFBLE1BQU0sQ0FBQTtBQUFFLDRCQUFBLFFBQVEsQ0FBQTtBQUU1QyxtREFBdUQ7QUFBOUMsZ0NBQUEsTUFBTSxDQUFBO0FBQUUsbUNBQUEsU0FBUyxDQUFBO0FBQzFCLG1DQUFpRTtBQUF4RCw0QkFBQSxVQUFVLENBQUE7QUFBRSxnQ0FBQSxjQUFjLENBQUE7QUFBRSx5QkFBQSxPQUFPLENBQUE7QUFFNUMsaURBQW9FO0FBQTNELDhCQUFBLEtBQUssQ0FBQTtBQUFFLDZCQUFBLElBQUksQ0FBQTtBQUFFLDRCQUFBLEdBQUcsQ0FBQTtBQUFFLGdDQUFBLE9BQU8sQ0FBQTtBQUFFLDZCQUFBLElBQUksQ0FBQTtBQUN4QywrQ0FBMEg7QUFBakgsbUNBQUEsV0FBVyxDQUFBO0FBQUUsa0NBQUEsVUFBVSxDQUFBO0FBQUUsc0NBQUEsY0FBYyxDQUFBO0FBQUUsZ0NBQUEsUUFBUSxDQUFBO0FBQUUseUNBQUEsaUJBQWlCLENBQUE7QUFBRSxpQ0FBQSxTQUFTLENBQUE7QUFBRSw2QkFBQSxLQUFLLENBQUE7QUFDL0YsaURBQWlEO0FBQXhDLDBCQUFBLE9BQU8sQ0FBSztBQUNyQix5Q0FBbUQ7QUFBMUMsdUNBQUEsa0JBQWtCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIERlc3Ryb3lhYmxlIHtcbiAgZGVzdHJveSgpOiB2b2lkO1xufVxuXG5leHBvcnQgeyBnZXRBdHRyTmFtZXNwYWNlIH0gZnJvbSAnLi9saWIvbmFtZXNwYWNlcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9wbGF0Zm9ybS11dGlscyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFzc2VydCB9IGZyb20gJy4vbGliL2Fzc2VydCc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIExPR0dFUiwgTG9nZ2VyLCBMb2dMZXZlbCB9IGZyb20gJy4vbGliL2xvZ2dlcic7XG5cbmV4cG9ydCB7IGFzc2lnbiwgZmlsbE51bGxzIH0gZnJvbSAnLi9saWIvb2JqZWN0LXV0aWxzJztcbmV4cG9ydCB7IGVuc3VyZUd1aWQsIGluaXRpYWxpemVHdWlkLCBIYXNHdWlkIH0gZnJvbSAnLi9saWIvZ3VpZCc7XG5cbmV4cG9ydCB7IFN0YWNrLCBEaWN0LCBTZXQsIERpY3RTZXQsIGRpY3QgfSBmcm9tICcuL2xpYi9jb2xsZWN0aW9ucyc7XG5leHBvcnQgeyBFTVBUWV9TTElDRSwgTGlua2VkTGlzdCwgTGlua2VkTGlzdE5vZGUsIExpc3ROb2RlLCBDbG9uZWFibGVMaXN0Tm9kZSwgTGlzdFNsaWNlLCBTbGljZSB9IGZyb20gJy4vbGliL2xpc3QtdXRpbHMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBBIH0gZnJvbSAnLi9saWIvYXJyYXktdXRpbHMnO1xuZXhwb3J0IHsgSEFTX05BVElWRV9XRUFLTUFQIH0gZnJvbSAnLi9saWIvd2Vha21hcCc7XG5cbmV4cG9ydCB0eXBlIFRTSVNTVUU8VCwgUyBleHRlbmRzIHN0cmluZz4gPSBUO1xuZXhwb3J0IHR5cGUgRklYTUU8VCwgUyBleHRlbmRzIHN0cmluZz4gPSBUO1xuZXhwb3J0IHR5cGUgVFJVU1Q8VCwgUyBleHRlbmRzIHN0cmluZz4gPSBhbnk7XG4iXX0=