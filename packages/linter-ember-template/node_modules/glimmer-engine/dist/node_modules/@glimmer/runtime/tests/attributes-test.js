"use strict";
var index_1 = require("../index");
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
var root;
var env;
var self;
var result;
function compile(template) {
    return env.compile(template);
}
function rootElement() {
    return env.getDOM().createElement('div');
}
function commonSetup() {
    env = new test_helpers_1.TestEnvironment(); // TODO: Support SimpleDOM
    root = rootElement();
    root.setAttribute('debug-root', 'true');
}
function render(template, context, view) {
    if (context === void 0) { context = {}; }
    if (view === void 0) { view = null; }
    self = new object_reference_1.UpdatableReference(context);
    env.begin();
    result = template.render(self, root, new test_helpers_1.TestDynamicScope());
    env.commit();
    assertInvariants(result);
    return result;
}
function assertInvariants(result, msg) {
    strictEqual(result.firstNode(), root.firstChild, "The firstNode of the result is the same as the root's firstChild" + (msg ? ': ' + msg : ''));
    strictEqual(result.lastNode(), root.lastChild, "The lastNode of the result is the same as the root's lastChild" + (msg ? ': ' + msg : ''));
}
function rerender(context) {
    if (context === void 0) { context = null; }
    if (context !== null)
        self.update(context);
    env.begin();
    result.rerender();
    env.commit();
}
// used to obtain the resulting property value after assignment
function nativeValueForElementProperty(tagName, property, value) {
    var element = document.createElement(tagName);
    element[property] = value;
    return element[property];
}
QUnit.module("Attributes", {
    setup: commonSetup
});
test("helpers shadow self", function () {
    env.registerHelper('foo', function () {
        return "hello";
    });
    var template = compile('<div data-test="{{foo}}"></div>');
    var context = { foo: 'bye' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<div data-test="hello"></div>');
    rerender();
    test_helpers_1.equalTokens(root, '<div data-test="hello"></div>');
    rerender({ foo: 'bar' });
    test_helpers_1.equalTokens(root, '<div data-test="hello"></div>');
    rerender({ foo: 'bye' });
    test_helpers_1.equalTokens(root, '<div data-test="hello"></div>');
});
test("disable updates properly", function () {
    var template = compile('<input disabled={{enabled}} />');
    var context = { enabled: true };
    render(template, context);
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: false });
    test_helpers_1.equalTokens(root, '<input />');
    rerender({ enabled: 'wat' });
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: null });
    test_helpers_1.equalTokens(root, '<input />');
    rerender({ enabled: true });
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: undefined });
    test_helpers_1.equalTokens(root, '<input />');
    rerender({ enabled: true });
    test_helpers_1.equalTokens(root, '<input disabled />');
});
test("quoted disable is always disabled", function () {
    var template = compile('<input disabled="{{enabled}}" />');
    var context = { enabled: true };
    render(template, context);
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: false });
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: 'wat' });
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: null });
    test_helpers_1.equalTokens(root, '<input />');
    rerender({ enabled: true });
    test_helpers_1.equalTokens(root, '<input disabled />');
    rerender({ enabled: undefined });
    test_helpers_1.equalTokens(root, '<input />');
    rerender({ enabled: true });
    test_helpers_1.equalTokens(root, '<input disabled />');
});
test("disable without an explicit value is truthy", function () {
    var template = compile('<input disabled />');
    render(template, {});
    test_helpers_1.equalTokens(root, '<input disabled />');
    ok(index_1.readDOMAttr(root.firstChild, 'disabled'));
    rerender();
    test_helpers_1.equalTokens(root, '<input disabled />');
    ok(index_1.readDOMAttr(root.firstChild, 'disabled'));
});
test("a[href] marks javascript: protocol as unsafe", function () {
    var template = compile('<a href="{{foo}}"></a>');
    var context = { foo: 'javascript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<a href="unsafe:javascript:foo()"></a>');
    rerender();
    test_helpers_1.equalTokens(root, '<a href="unsafe:javascript:foo()"></a>');
});
test("a[href] marks javascript: protocol as unsafe, http as safe", function () {
    var template = compile('<a href="{{foo}}"></a>');
    var context = { foo: 'javascript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<a href="unsafe:javascript:foo()"></a>');
    rerender({ foo: 'http://foo.bar' });
    test_helpers_1.equalTokens(root, '<a href="http://foo.bar"></a>');
    rerender({ foo: 'javascript:foo()' });
    test_helpers_1.equalTokens(root, '<a href="unsafe:javascript:foo()"></a>');
});
test("a[href] marks javascript: protocol as unsafe on updates", function () {
    var template = compile('<a href="{{foo}}"></a>');
    var context = { foo: 'http://foo.bar' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<a href="http://foo.bar"></a>');
    rerender({ foo: 'javascript:foo()' });
    test_helpers_1.equalTokens(root, '<a href="unsafe:javascript:foo()"></a>');
    rerender({ foo: 'http://foo.bar' });
    test_helpers_1.equalTokens(root, '<a href="http://foo.bar"></a>');
});
test("a[href] marks vbscript: protocol as unsafe", function () {
    var template = compile('<a href="{{foo}}"></a>');
    var context = { foo: 'vbscript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<a href="unsafe:vbscript:foo()"></a>');
    rerender();
    test_helpers_1.equalTokens(root, '<a href="unsafe:vbscript:foo()"></a>');
});
test("a[href] can be removed by setting to `null`", function () {
    var template = compile('<a href={{foo}}></a>');
    var context = { foo: 'http://foo.bar/derp.jpg' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<a href="http://foo.bar/derp.jpg"></a>');
    rerender({ foo: null });
    test_helpers_1.equalTokens(root, '<a></a>');
});
test("a[href] can be removed by setting to `undefined`", function () {
    var template = compile('<a href={{foo}}></a>');
    var context = { foo: 'http://foo.bar/derp.jpg' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<a href="http://foo.bar/derp.jpg"></a>');
    rerender({ foo: undefined });
    test_helpers_1.equalTokens(root, '<a></a>');
});
test("img[src] marks javascript: protocol as unsafe", function () {
    var template = compile('<img src="{{foo}}">');
    var context = { foo: 'javascript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<img src="unsafe:javascript:foo()">');
    rerender();
    test_helpers_1.equalTokens(root, '<img src="unsafe:javascript:foo()">');
});
test("img[src] marks javascript: protocol as unsafe on updates", function () {
    var template = compile('<img src="{{foo}}">');
    var context = { foo: 'http://foo.bar/derp.jpg' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<img src="http://foo.bar/derp.jpg">');
    rerender({ foo: 'javascript:foo()' });
    test_helpers_1.equalTokens(root, '<img src="unsafe:javascript:foo()">');
    rerender();
    test_helpers_1.equalTokens(root, '<img src="unsafe:javascript:foo()">');
});
test("img[src] marks javascript: protocol as unsafe, http as safe", function () {
    var template = compile('<img src="{{foo}}">');
    var context = { foo: 'javascript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<img src="unsafe:javascript:foo()">');
    rerender({ foo: 'http://foo.bar' });
    test_helpers_1.equalTokens(root, '<img src="http://foo.bar">');
    rerender({ foo: 'javascript:foo()' });
    test_helpers_1.equalTokens(root, '<img src="unsafe:javascript:foo()">');
});
test("img[src] marks vbscript: protocol as unsafe", function () {
    var template = compile('<img src="{{foo}}">');
    var context = { foo: 'vbscript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<img src="unsafe:vbscript:foo()">');
    rerender();
    test_helpers_1.equalTokens(root, '<img src="unsafe:vbscript:foo()">');
});
test("img[src] can be removed by setting to `null`", function () {
    var template = compile('<img src={{foo}}>');
    var context = { foo: 'http://foo.bar/derp.jpg' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<img src="http://foo.bar/derp.jpg">');
    rerender({ foo: null });
    test_helpers_1.equalTokens(root, '<img>');
});
test("img[src] can be removed by setting to `undefined`", function () {
    var template = compile('<img src={{foo}}>');
    var context = { foo: 'http://foo.bar/derp.jpg' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<img src="http://foo.bar/derp.jpg">');
    rerender({ foo: undefined });
    test_helpers_1.equalTokens(root, '<img>');
});
test("div[href] is not not marked as unsafe", function () {
    var template = compile('<div href="{{foo}}"></div>');
    var context = { foo: 'javascript:foo()' };
    render(template, context);
    test_helpers_1.equalTokens(root, '<div href="javascript:foo()"></div>');
    rerender();
    test_helpers_1.equalTokens(root, '<div href="javascript:foo()"></div>');
});
test("triple curlies in attribute position", function (assert) {
    var template = compile('<div data-bar="bar" data-foo={{{rawString}}}>Hello</div>');
    render(template, { rawString: 'TRIPLE' });
    test_helpers_1.equalTokens(root, '<div data-foo="TRIPLE" data-bar="bar">Hello</div>', "initial render");
    rerender({ rawString: 'DOUBLE' });
    test_helpers_1.equalTokens(root, '<div data-foo="DOUBLE" data-bar="bar">Hello</div>', "initial render");
});
test('can read attributes', function (assert) {
    var template = compile('<div data-bar="bar"></div>');
    render(template);
    assert.equal(index_1.readDOMAttr(root.firstChild, 'data-bar'), 'bar');
});
test('can read attributes from namespace elements', function (assert) {
    var template = compile('<svg viewBox="0 0 0 0"></svg>');
    render(template);
    assert.equal(index_1.readDOMAttr(root.firstChild, 'viewBox'), '0 0 0 0');
});
test('can read properties', function (assert) {
    var template = compile('<input value="gnargnar" />');
    render(template);
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'gnargnar');
});
test('handles null input values', function (assert) {
    var template = compile('<input value={{isNull}} />');
    render(template, { isNull: null });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
    rerender({ isNull: 'hey' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'hey');
    rerender({ isNull: null });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
});
test('handles undefined input values', function (assert) {
    var template = compile('<input value={{isUndefined}} />');
    render(template, { isUndefined: undefined });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
    rerender({ isUndefined: 'hey' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'hey');
    rerender({ isUndefined: undefined });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
});
test('handles undefined `toString` input values', function (assert) {
    var obj = Object.create(null);
    var template = compile('<input value={{obj}} />');
    render(template, { obj: obj });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
    rerender({ obj: 'hello' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'hello');
    rerender({ obj: obj });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
});
test('input[checked] prop updates when set to undefined', function (assert) {
    var template = compile('<input checked={{if foo true undefined}} />');
    env.registerHelper('if', function (params) {
        if (params[0]) {
            return params[1];
        }
        else {
            return params[2];
        }
    });
    render(template, { foo: true });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'checked'), true);
    rerender({ foo: false });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'checked'), false);
    rerender({ foo: true });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'checked'), true);
});
test('input[checked] prop updates when set to null', function (assert) {
    var template = compile('<input checked={{foo}} />');
    render(template, { foo: true });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'checked'), true);
    rerender({ foo: null });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'checked'), false);
    rerender({ foo: true });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'checked'), true);
});
test('select[value] prop updates when set to undefined', function (assert) {
    var template = compile('<select value={{foo}}><option></option><option value="us" selected>us</option></select>');
    // setting `select[value]` only works after initial render, just use `undefined` here but it doesn't really matter
    render(template, { foo: undefined });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'us');
    // now setting the `value` property will have an effect
    rerender({ foo: null });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
    rerender({ foo: 'us' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'us');
});
test('handles empty string textarea values', function (assert) {
    var template = compile('<textarea value={{name}} />');
    render(template, { name: '' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
    rerender({ name: 'Alex' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), 'Alex');
    rerender({ name: '' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'value'), '');
});
test('handles empty string input placeholders', function (assert) {
    var template = compile('<input type="text" placeholder={{name}} />');
    render(template, { name: '' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'placeholder'), '');
    rerender({ name: 'Alex' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'placeholder'), 'Alex');
    rerender({ name: '' });
    assert.equal(index_1.readDOMAttr(root.firstChild, 'placeholder'), '');
});
test('does not set undefined attributes', function (assert) {
    var template = compile('<div data-foo={{isUndefined}} /><div data-foo={{isNotUndefined}} />');
    render(template, { isUndefined: undefined, isNotUndefined: 'hello' });
    var firstElement = root.firstChild;
    var secondElement = root.lastChild;
    assert.ok(!firstElement.hasAttribute('data-foo'));
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'hello');
    rerender({ isUndefined: 'hey', isNotUndefined: 'hello' });
    assert.ok(firstElement.hasAttribute('data-foo'));
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'hello');
    rerender({ isUndefined: 'hey', isNotUndefined: 'world' });
    assert.ok(firstElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(firstElement, 'data-foo'), 'hey');
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'world');
    rerender({ isUndefined: undefined, isNotUndefined: 'hello' });
    assert.ok(!firstElement.hasAttribute('data-foo'));
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'hello');
});
test('does not set null attributes', function (assert) {
    var template = compile('<div data-foo={{isNull}} /><div data-foo={{isNotNull}}></div>');
    render(template, { isNull: null, isNotNull: 'hello' });
    var firstElement = root.firstChild;
    var secondElement = root.lastChild;
    assert.ok(!firstElement.hasAttribute('data-foo'));
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'hello');
    rerender({ isNull: 'hey', isNotNull: 'hello' });
    assert.ok(firstElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(firstElement, 'data-foo'), 'hey');
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'hello');
    rerender({ isNull: 'hey', isNotNull: 'world' });
    assert.ok(firstElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(firstElement, 'data-foo'), 'hey');
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'world');
    rerender({ isNull: null, isNotNull: 'hello' });
    assert.ok(!firstElement.hasAttribute('data-foo'));
    assert.ok(secondElement.hasAttribute('data-foo'));
    assert.equal(index_1.readDOMAttr(secondElement, 'data-foo'), 'hello');
});
test('does not set undefined properties initially', function (assert) {
    var template = compile('<div title={{isUndefined}} /><div title={{isNotUndefined}}></div>');
    render(template, { isUndefined: undefined, isNotUndefined: 'hello' });
    var firstElement = root.firstChild;
    var secondElement = root.lastChild;
    assert.ok(!firstElement.hasAttribute('title'));
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'hello');
    test_helpers_1.equalTokens(root, '<div></div><div title="hello"></div>');
    rerender({ isUndefined: 'hey', isNotUndefined: 'hello' });
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), 'hey');
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'hello');
    test_helpers_1.equalTokens(root, '<div title="hey"></div><div title="hello"></div>');
    rerender({ isUndefined: 'hey', isNotUndefined: 'world' });
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), 'hey');
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'world');
    test_helpers_1.equalTokens(root, '<div title="hey"></div><div title="world"></div>');
    rerender({ isUndefined: undefined, isNotUndefined: 'hello' });
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'hello');
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), '');
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), nativeValueForElementProperty('div', 'title', ''));
    test_helpers_1.equalTokens(root, '<div></div><div title="hello"></div>');
});
test('does not set null properties initially', function (assert) {
    var template = compile('<div title={{isNull}} /><div title={{isNotNull}}></div>');
    render(template, { isNull: null, isNotNull: 'hello' });
    var firstElement = root.firstChild;
    var secondElement = root.lastChild;
    assert.ok(!firstElement.hasAttribute('title'));
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'hello');
    test_helpers_1.equalTokens(root, '<div></div><div title="hello"></div>');
    rerender({ isNull: 'hey', isNotNull: 'hello' });
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), 'hey');
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'hello');
    test_helpers_1.equalTokens(root, '<div title="hey"></div><div title="hello"></div>');
    rerender({ isNull: 'hey', isNotNull: 'world' });
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), 'hey');
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'world');
    test_helpers_1.equalTokens(root, '<div title="hey"></div><div title="world"></div>');
    rerender({ isNull: null, isNotNull: 'hello' });
    assert.equal(index_1.readDOMAttr(secondElement, 'title'), 'hello');
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), '');
    assert.equal(index_1.readDOMAttr(firstElement, 'title'), nativeValueForElementProperty('div', 'title', ''));
    test_helpers_1.equalTokens(root, '<div></div><div title="hello"></div>');
});
test("input list attribute updates properly", function () {
    var template = compile('<input list="{{foo}}" />');
    var context = { foo: "bar" };
    render(template, context);
    test_helpers_1.equalTokens(root, '<input list="bar" />');
    rerender({ foo: "baz" });
    test_helpers_1.equalTokens(root, '<input list="baz" />');
    rerender({ foo: "bar" });
    test_helpers_1.equalTokens(root, '<input list="bar" />');
});
//# sourceMappingURL=data:application/json;base64,