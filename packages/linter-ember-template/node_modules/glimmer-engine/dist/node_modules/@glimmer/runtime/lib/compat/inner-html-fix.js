"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bounds_1 = require("../bounds");
var helper_1 = require("../dom/helper");
var innerHTMLWrapper = {
    colgroup: { depth: 2, before: '<table><colgroup>', after: '</colgroup></table>' },
    table: { depth: 1, before: '<table>', after: '</table>' },
    tbody: { depth: 2, before: '<table><tbody>', after: '</tbody></table>' },
    tfoot: { depth: 2, before: '<table><tfoot>', after: '</tfoot></table>' },
    thead: { depth: 2, before: '<table><thead>', after: '</thead></table>' },
    tr: { depth: 3, before: '<table><tbody><tr>', after: '</tr></tbody></table>' }
};
// Patch:    innerHTML Fix
// Browsers: IE9
// Reason:   IE9 don't allow us to set innerHTML on col, colgroup, frameset,
//           html, style, table, tbody, tfoot, thead, title, tr.
// Fix:      Wrap the innerHTML we are about to set in its parents, apply the
//           wrapped innerHTML on a div, then move the unwrapped nodes into the
//           target position.
function domChanges(document, DOMChangesClass) {
    if (!document)
        return DOMChangesClass;
    if (!shouldApplyFix(document)) {
        return DOMChangesClass;
    }
    var div = document.createElement('div');
    return (function (_super) {
        __extends(DOMChangesWithInnerHTMLFix, _super);
        function DOMChangesWithInnerHTMLFix() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DOMChangesWithInnerHTMLFix.prototype.insertHTMLBefore = function (parent, nextSibling, html) {
            if (html === null || html === '') {
                return _super.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
            }
            var parentTag = parent.tagName.toLowerCase();
            var wrapper = innerHTMLWrapper[parentTag];
            if (wrapper === undefined) {
                return _super.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
            }
            return fixInnerHTML(parent, wrapper, div, html, nextSibling);
        };
        return DOMChangesWithInnerHTMLFix;
    }(DOMChangesClass));
}
exports.domChanges = domChanges;
function treeConstruction(document, DOMTreeConstructionClass) {
    if (!document)
        return DOMTreeConstructionClass;
    if (!shouldApplyFix(document)) {
        return DOMTreeConstructionClass;
    }
    var div = document.createElement('div');
    return (function (_super) {
        __extends(DOMTreeConstructionWithInnerHTMLFix, _super);
        function DOMTreeConstructionWithInnerHTMLFix() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DOMTreeConstructionWithInnerHTMLFix.prototype.insertHTMLBefore = function (parent, html, reference) {
            if (html === null || html === '') {
                return _super.prototype.insertHTMLBefore.call(this, parent, html, reference);
            }
            var parentTag = parent.tagName.toLowerCase();
            var wrapper = innerHTMLWrapper[parentTag];
            if (wrapper === undefined) {
                return _super.prototype.insertHTMLBefore.call(this, parent, html, reference);
            }
            return fixInnerHTML(parent, wrapper, div, html, reference);
        };
        return DOMTreeConstructionWithInnerHTMLFix;
    }(DOMTreeConstructionClass));
}
exports.treeConstruction = treeConstruction;
function fixInnerHTML(parent, wrapper, div, html, reference) {
    var wrappedHtml = wrapper.before + html + wrapper.after;
    div.innerHTML = wrappedHtml;
    var parentNode = div;
    for (var i = 0; i < wrapper.depth; i++) {
        parentNode = parentNode.childNodes[0];
    }
    var _a = helper_1.moveNodesBefore(parentNode, parent, reference), first = _a[0], last = _a[1];
    return new bounds_1.ConcreteBounds(parent, first, last);
}
function shouldApplyFix(document) {
    var table = document.createElement('table');
    try {
        table.innerHTML = '<tbody></tbody>';
    }
    catch (e) {
    }
    finally {
        if (table.childNodes.length !== 0) {
            // It worked as expected, no fix required
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,