"use strict";
var Cursor = (function () {
    function Cursor(element, nextSibling) {
        this.element = element;
        this.nextSibling = nextSibling;
    }
    return Cursor;
}());
exports.Cursor = Cursor;
var RealDOMBounds = (function () {
    function RealDOMBounds(bounds) {
        this.bounds = bounds;
    }
    RealDOMBounds.prototype.parentElement = function () { return this.bounds.parentElement(); };
    RealDOMBounds.prototype.firstNode = function () { return this.bounds.firstNode(); };
    RealDOMBounds.prototype.lastNode = function () { return this.bounds.lastNode(); };
    return RealDOMBounds;
}());
exports.RealDOMBounds = RealDOMBounds;
var ConcreteBounds = (function () {
    function ConcreteBounds(parentNode, first, last) {
        this.parentNode = parentNode;
        this.first = first;
        this.last = last;
    }
    ConcreteBounds.prototype.parentElement = function () { return this.parentNode; };
    ConcreteBounds.prototype.firstNode = function () { return this.first; };
    ConcreteBounds.prototype.lastNode = function () { return this.last; };
    return ConcreteBounds;
}());
exports.ConcreteBounds = ConcreteBounds;
var SingleNodeBounds = (function () {
    function SingleNodeBounds(parentNode, node) {
        this.parentNode = parentNode;
        this.node = node;
    }
    SingleNodeBounds.prototype.parentElement = function () { return this.parentNode; };
    SingleNodeBounds.prototype.firstNode = function () { return this.node; };
    SingleNodeBounds.prototype.lastNode = function () { return this.node; };
    return SingleNodeBounds;
}());
exports.SingleNodeBounds = SingleNodeBounds;
function bounds(parent, first, last) {
    return new ConcreteBounds(parent, first, last);
}
exports.bounds = bounds;
function single(parent, node) {
    return new SingleNodeBounds(parent, node);
}
exports.single = single;
function move(bounds, reference) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var node = first;
    while (node) {
        var next = node.nextSibling;
        parent.insertBefore(node, reference);
        if (node === last)
            return next;
        node = next;
    }
    return null;
}
exports.move = move;
function clear(bounds) {
    var parent = bounds.parentElement();
    var first = bounds.firstNode();
    var last = bounds.lastNode();
    var node = first;
    while (node) {
        var next = node.nextSibling;
        parent.removeChild(node);
        if (node === last)
            return next;
        node = next;
    }
    return null;
}
exports.clear = clear;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvYm91bmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFVQTtJQUNFLGdCQUFtQixPQUF1QixFQUFTLFdBQWdDO1FBQWhFLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO0lBQUcsQ0FBQztJQUN6RixhQUFDO0FBQUQsQ0FBQyxBQUZELElBRUM7QUFGWSx3QkFBTTtBQVFuQjtJQUNFLHVCQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFdEMscUNBQWEsR0FBYixjQUFrQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQWEsQ0FBQyxDQUFDLENBQUM7SUFDbEUsaUNBQVMsR0FBVCxjQUFjLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBVSxDQUFDLENBQUMsQ0FBQztJQUN2RCxnQ0FBUSxHQUFSLGNBQWEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELG9CQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7QUFOWSxzQ0FBYTtBQVExQjtJQUNFLHdCQUFtQixVQUEwQixFQUFVLEtBQTBCLEVBQVUsSUFBeUI7UUFBakcsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFxQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQXFCO0lBQUcsQ0FBQztJQUV4SCxzQ0FBYSxHQUFiLGNBQWtCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMzQyxrQ0FBUyxHQUFULGNBQWMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLGlDQUFRLEdBQVIsY0FBYSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEMscUJBQUM7QUFBRCxDQUFDLEFBTkQsSUFNQztBQU5ZLHdDQUFjO0FBUTNCO0lBSUUsMEJBQVksVUFBMEIsRUFBRSxJQUFpQjtRQUN2RCxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQXFCLENBQUM7UUFDeEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVELHdDQUFhLEdBQWIsY0FBa0IsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzNDLG9DQUFTLEdBQVQsY0FBYyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakMsbUNBQVEsR0FBUixjQUFhLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQyx1QkFBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBWlksNENBQWdCO0FBYzdCLGdCQUF1QixNQUFzQixFQUFFLEtBQWtCLEVBQUUsSUFBaUI7SUFDbEYsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUZELHdCQUVDO0FBRUQsZ0JBQXVCLE1BQXNCLEVBQUUsSUFBaUI7SUFDOUQsTUFBTSxDQUFDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFGRCx3QkFFQztBQUVELGNBQXFCLE1BQWMsRUFBRSxTQUE4QjtJQUNqRSxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDcEMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9CLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUU3QixJQUFJLElBQUksR0FBd0IsS0FBSyxDQUFDO0lBRXRDLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksR0FBRyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFmRCxvQkFlQztBQUVELGVBQXNCLE1BQWM7SUFDbEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3BDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMvQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsSUFBSSxJQUFJLEdBQXdCLEtBQUssQ0FBQztJQUV0QyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksR0FBRyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFmRCxzQkFlQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFNpbXBsZSBmcm9tICcuL2RvbS9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE9wdGlvbiwgRGVzdHJveWFibGUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBCb3VuZHMge1xuICAvLyBhIG1ldGhvZCB0byBmdXR1cmUtcHJvb2YgZm9yIHdvcm1ob2xpbmc7IG1heSBub3QgYmUgbmVlZGVkIHVsdGltYXRlbHlcbiAgcGFyZW50RWxlbWVudCgpOiBTaW1wbGUuRWxlbWVudDtcbiAgZmlyc3ROb2RlKCk6IE9wdGlvbjxTaW1wbGUuTm9kZT47XG4gIGxhc3ROb2RlKCk6IE9wdGlvbjxTaW1wbGUuTm9kZT47XG59XG5cbmV4cG9ydCBjbGFzcyBDdXJzb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudDogU2ltcGxlLkVsZW1lbnQsIHB1YmxpYyBuZXh0U2libGluZzogT3B0aW9uPFNpbXBsZS5Ob2RlPikge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm91bmRzO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlc3Ryb3lhYmxlQm91bmRzIGV4dGVuZHMgQm91bmRzLCBEZXN0cm95YWJsZSB7fVxuXG5leHBvcnQgY2xhc3MgUmVhbERPTUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYm91bmRzOiBCb3VuZHMpIHt9XG5cbiAgcGFyZW50RWxlbWVudCgpIHsgcmV0dXJuIHRoaXMuYm91bmRzLnBhcmVudEVsZW1lbnQoKSBhcyBFbGVtZW50OyB9XG4gIGZpcnN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMuYm91bmRzLmZpcnN0Tm9kZSgpIGFzIE5vZGU7IH1cbiAgbGFzdE5vZGUoKSB7IHJldHVybiB0aGlzLmJvdW5kcy5sYXN0Tm9kZSgpIGFzIE5vZGU7IH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbmNyZXRlQm91bmRzIGltcGxlbWVudHMgQm91bmRzIHtcbiAgY29uc3RydWN0b3IocHVibGljIHBhcmVudE5vZGU6IFNpbXBsZS5FbGVtZW50LCBwcml2YXRlIGZpcnN0OiBPcHRpb248U2ltcGxlLk5vZGU+LCBwcml2YXRlIGxhc3Q6IE9wdGlvbjxTaW1wbGUuTm9kZT4pIHt9XG5cbiAgcGFyZW50RWxlbWVudCgpIHsgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTsgfVxuICBmaXJzdE5vZGUoKSB7IHJldHVybiB0aGlzLmZpcnN0OyB9XG4gIGxhc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5sYXN0OyB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaW5nbGVOb2RlQm91bmRzIGltcGxlbWVudHMgQm91bmRzIHtcbiAgcHJpdmF0ZSBwYXJlbnROb2RlOiBFbGVtZW50O1xuICBwcml2YXRlIG5vZGU6IE5vZGU7XG5cbiAgY29uc3RydWN0b3IocGFyZW50Tm9kZTogU2ltcGxlLkVsZW1lbnQsIG5vZGU6IFNpbXBsZS5Ob2RlKSB7XG4gICAgdGhpcy5wYXJlbnROb2RlID0gcGFyZW50Tm9kZSBhcyBFbGVtZW50O1xuICAgIHRoaXMubm9kZSA9IG5vZGUgYXMgTm9kZTtcbiAgfVxuXG4gIHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLnBhcmVudE5vZGU7IH1cbiAgZmlyc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5ub2RlOyB9XG4gIGxhc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5ub2RlOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3VuZHMocGFyZW50OiBTaW1wbGUuRWxlbWVudCwgZmlyc3Q6IFNpbXBsZS5Ob2RlLCBsYXN0OiBTaW1wbGUuTm9kZSk6IEJvdW5kcyB7XG4gIHJldHVybiBuZXcgQ29uY3JldGVCb3VuZHMocGFyZW50LCBmaXJzdCwgbGFzdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5nbGUocGFyZW50OiBTaW1wbGUuRWxlbWVudCwgbm9kZTogU2ltcGxlLk5vZGUpOiBCb3VuZHMge1xuICByZXR1cm4gbmV3IFNpbmdsZU5vZGVCb3VuZHMocGFyZW50LCBub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vdmUoYm91bmRzOiBCb3VuZHMsIHJlZmVyZW5jZTogT3B0aW9uPFNpbXBsZS5Ob2RlPikge1xuICBsZXQgcGFyZW50ID0gYm91bmRzLnBhcmVudEVsZW1lbnQoKTtcbiAgbGV0IGZpcnN0ID0gYm91bmRzLmZpcnN0Tm9kZSgpO1xuICBsZXQgbGFzdCA9IGJvdW5kcy5sYXN0Tm9kZSgpO1xuXG4gIGxldCBub2RlOiBPcHRpb248U2ltcGxlLk5vZGU+ID0gZmlyc3Q7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBsZXQgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCByZWZlcmVuY2UpO1xuICAgIGlmIChub2RlID09PSBsYXN0KSByZXR1cm4gbmV4dDtcbiAgICBub2RlID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXIoYm91bmRzOiBCb3VuZHMpOiBPcHRpb248U2ltcGxlLk5vZGU+IHtcbiAgbGV0IHBhcmVudCA9IGJvdW5kcy5wYXJlbnRFbGVtZW50KCk7XG4gIGxldCBmaXJzdCA9IGJvdW5kcy5maXJzdE5vZGUoKTtcbiAgbGV0IGxhc3QgPSBib3VuZHMubGFzdE5vZGUoKTtcblxuICBsZXQgbm9kZTogT3B0aW9uPFNpbXBsZS5Ob2RlPiA9IGZpcnN0O1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgbGV0IG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIHBhcmVudC5yZW1vdmVDaGlsZChub2RlKTtcbiAgICBpZiAobm9kZSA9PT0gbGFzdCkgcmV0dXJuIG5leHQ7XG4gICAgbm9kZSA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiJdfQ==