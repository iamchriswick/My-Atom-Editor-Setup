"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bounds_1 = require("./bounds");
var util_1 = require("@glimmer/util");
var dom_1 = require("./compiled/opcodes/dom");
var First = (function () {
    function First(node) {
        this.node = node;
    }
    First.prototype.firstNode = function () {
        return this.node;
    };
    return First;
}());
var Last = (function () {
    function Last(node) {
        this.node = node;
    }
    Last.prototype.lastNode = function () {
        return this.node;
    };
    return Last;
}());
var Fragment = (function () {
    function Fragment(bounds) {
        this.bounds = bounds;
    }
    Fragment.prototype.parentElement = function () {
        return this.bounds.parentElement();
    };
    Fragment.prototype.firstNode = function () {
        return this.bounds.firstNode();
    };
    Fragment.prototype.lastNode = function () {
        return this.bounds.lastNode();
    };
    Fragment.prototype.update = function (bounds) {
        this.bounds = bounds;
    };
    return Fragment;
}());
exports.Fragment = Fragment;
var ElementStack = (function () {
    function ElementStack(env, parentNode, nextSibling) {
        this.constructing = null;
        this.operations = null;
        this.elementStack = new util_1.Stack();
        this.nextSiblingStack = new util_1.Stack();
        this.blockStack = new util_1.Stack();
        this.env = env;
        this.dom = env.getAppendOperations();
        this.updateOperations = env.getDOM();
        this.element = parentNode;
        this.nextSibling = nextSibling;
        this.defaultOperations = new dom_1.SimpleElementOperations(env);
        this.elementStack.push(this.element);
        this.nextSiblingStack.push(this.nextSibling);
    }
    ElementStack.forInitialRender = function (env, parentNode, nextSibling) {
        return new ElementStack(env, parentNode, nextSibling);
    };
    ElementStack.resume = function (env, tracker, nextSibling) {
        var parentNode = tracker.parentElement();
        var stack = new ElementStack(env, parentNode, nextSibling);
        stack.pushBlockTracker(tracker);
        return stack;
    };
    ElementStack.prototype.expectConstructing = function (method) {
        return util_1.expect(this.constructing, method + " should only be called while constructing an element");
    };
    ElementStack.prototype.expectOperations = function (method) {
        return util_1.expect(this.operations, method + " should only be called while constructing an element");
    };
    ElementStack.prototype.block = function () {
        return util_1.expect(this.blockStack.current, "Expected a current block tracker");
    };
    ElementStack.prototype.popElement = function () {
        var _a = this, elementStack = _a.elementStack, nextSiblingStack = _a.nextSiblingStack;
        var topElement = elementStack.pop();
        nextSiblingStack.pop();
        util_1.LOGGER.debug("-> element stack " + this.elementStack.toArray().map(function (e) { return e.tagName; }).join(', '));
        this.element = util_1.expect(elementStack.current, "can't pop past the last element");
        this.nextSibling = nextSiblingStack.current;
        return topElement;
    };
    ElementStack.prototype.pushSimpleBlock = function () {
        var tracker = new SimpleBlockTracker(this.element);
        this.pushBlockTracker(tracker);
        return tracker;
    };
    ElementStack.prototype.pushUpdatableBlock = function () {
        var tracker = new UpdatableBlockTracker(this.element);
        this.pushBlockTracker(tracker);
        return tracker;
    };
    ElementStack.prototype.pushBlockTracker = function (tracker, isRemote) {
        if (isRemote === void 0) { isRemote = false; }
        var current = this.blockStack.current;
        if (current !== null) {
            current.newDestroyable(tracker);
            if (!isRemote) {
                current.newBounds(tracker);
            }
        }
        this.blockStack.push(tracker);
        return tracker;
    };
    ElementStack.prototype.pushBlockList = function (list) {
        var tracker = new BlockListTracker(this.element, list);
        var current = this.blockStack.current;
        if (current !== null) {
            current.newDestroyable(tracker);
            current.newBounds(tracker);
        }
        this.blockStack.push(tracker);
        return tracker;
    };
    ElementStack.prototype.popBlock = function () {
        this.block().finalize(this);
        return util_1.expect(this.blockStack.pop(), "Expected popBlock to return a block");
    };
    ElementStack.prototype.openElement = function (tag, operations) {
        if (operations === void 0) { operations = this.defaultOperations; }
        var element = this.dom.createElement(tag, this.element);
        this.constructing = element;
        this.operations = operations;
        return element;
    };
    ElementStack.prototype.flushElement = function () {
        var parent = this.element;
        var element = util_1.expect(this.constructing, "flushElement should only be called when constructing an element");
        this.dom.insertBefore(parent, element, this.nextSibling);
        this.constructing = null;
        this.operations = null;
        this.pushElement(element);
        this.block().openElement(element);
    };
    ElementStack.prototype.pushRemoteElement = function (element) {
        this.pushElement(element);
        var tracker = new RemoteBlockTracker(element);
        this.pushBlockTracker(tracker, true);
    };
    ElementStack.prototype.popRemoteElement = function () {
        this.popBlock();
        this.popElement();
    };
    ElementStack.prototype.pushElement = function (element) {
        this.element = element;
        this.elementStack.push(element);
        util_1.LOGGER.debug("-> element stack " + this.elementStack.toArray().map(function (e) { return e.tagName; }).join(', '));
        this.nextSibling = null;
        this.nextSiblingStack.push(null);
    };
    ElementStack.prototype.newDestroyable = function (d) {
        this.block().newDestroyable(d);
    };
    ElementStack.prototype.newBounds = function (bounds) {
        this.block().newBounds(bounds);
    };
    ElementStack.prototype.appendText = function (string) {
        var dom = this.dom;
        var text = dom.createTextNode(string);
        dom.insertBefore(this.element, text, this.nextSibling);
        this.block().newNode(text);
        return text;
    };
    ElementStack.prototype.appendComment = function (string) {
        var dom = this.dom;
        var comment = dom.createComment(string);
        dom.insertBefore(this.element, comment, this.nextSibling);
        this.block().newNode(comment);
        return comment;
    };
    ElementStack.prototype.setStaticAttribute = function (name, value) {
        this.expectOperations('setStaticAttribute').addStaticAttribute(this.expectConstructing('setStaticAttribute'), name, value);
    };
    ElementStack.prototype.setStaticAttributeNS = function (namespace, name, value) {
        this.expectOperations('setStaticAttributeNS').addStaticAttributeNS(this.expectConstructing('setStaticAttributeNS'), namespace, name, value);
    };
    ElementStack.prototype.setDynamicAttribute = function (name, reference, isTrusting) {
        this.expectOperations('setDynamicAttribute').addDynamicAttribute(this.expectConstructing('setDynamicAttribute'), name, reference, isTrusting);
    };
    ElementStack.prototype.setDynamicAttributeNS = function (namespace, name, reference, isTrusting) {
        this.expectOperations('setDynamicAttributeNS').addDynamicAttributeNS(this.expectConstructing('setDynamicAttributeNS'), namespace, name, reference, isTrusting);
    };
    ElementStack.prototype.closeElement = function () {
        this.block().closeElement();
        this.popElement();
    };
    return ElementStack;
}());
exports.ElementStack = ElementStack;
var SimpleBlockTracker = (function () {
    function SimpleBlockTracker(parent) {
        this.parent = parent;
        this.first = null;
        this.last = null;
        this.destroyables = null;
        this.nesting = 0;
    }
    SimpleBlockTracker.prototype.destroy = function () {
        var destroyables = this.destroyables;
        if (destroyables && destroyables.length) {
            for (var i = 0; i < destroyables.length; i++) {
                destroyables[i].destroy();
            }
        }
    };
    SimpleBlockTracker.prototype.parentElement = function () {
        return this.parent;
    };
    SimpleBlockTracker.prototype.firstNode = function () {
        return this.first && this.first.firstNode();
    };
    SimpleBlockTracker.prototype.lastNode = function () {
        return this.last && this.last.lastNode();
    };
    SimpleBlockTracker.prototype.openElement = function (element) {
        this.newNode(element);
        this.nesting++;
    };
    SimpleBlockTracker.prototype.closeElement = function () {
        this.nesting--;
    };
    SimpleBlockTracker.prototype.newNode = function (node) {
        if (this.nesting !== 0)
            return;
        if (!this.first) {
            this.first = new First(node);
        }
        this.last = new Last(node);
    };
    SimpleBlockTracker.prototype.newBounds = function (bounds) {
        if (this.nesting !== 0)
            return;
        if (!this.first) {
            this.first = bounds;
        }
        this.last = bounds;
    };
    SimpleBlockTracker.prototype.newDestroyable = function (d) {
        this.destroyables = this.destroyables || [];
        this.destroyables.push(d);
    };
    SimpleBlockTracker.prototype.finalize = function (stack) {
        if (!this.first) {
            stack.appendComment('');
        }
    };
    return SimpleBlockTracker;
}());
exports.SimpleBlockTracker = SimpleBlockTracker;
var RemoteBlockTracker = (function (_super) {
    __extends(RemoteBlockTracker, _super);
    function RemoteBlockTracker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemoteBlockTracker.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        bounds_1.clear(this);
    };
    return RemoteBlockTracker;
}(SimpleBlockTracker));
var UpdatableBlockTracker = (function (_super) {
    __extends(UpdatableBlockTracker, _super);
    function UpdatableBlockTracker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UpdatableBlockTracker.prototype.reset = function (env) {
        var destroyables = this.destroyables;
        if (destroyables && destroyables.length) {
            for (var i = 0; i < destroyables.length; i++) {
                env.didDestroy(destroyables[i]);
            }
        }
        var nextSibling = bounds_1.clear(this);
        this.destroyables = null;
        this.first = null;
        this.last = null;
        return nextSibling;
    };
    return UpdatableBlockTracker;
}(SimpleBlockTracker));
exports.UpdatableBlockTracker = UpdatableBlockTracker;
var BlockListTracker = (function () {
    function BlockListTracker(parent, boundList) {
        this.parent = parent;
        this.boundList = boundList;
        this.parent = parent;
        this.boundList = boundList;
    }
    BlockListTracker.prototype.destroy = function () {
        this.boundList.forEachNode(function (node) { return node.destroy(); });
    };
    BlockListTracker.prototype.parentElement = function () {
        return this.parent;
    };
    BlockListTracker.prototype.firstNode = function () {
        var head = this.boundList.head();
        return head && head.firstNode();
    };
    BlockListTracker.prototype.lastNode = function () {
        var tail = this.boundList.tail();
        return tail && tail.lastNode();
    };
    BlockListTracker.prototype.openElement = function (_element) {
        util_1.assert(false, 'Cannot openElement directly inside a block list');
    };
    BlockListTracker.prototype.closeElement = function () {
        util_1.assert(false, 'Cannot closeElement directly inside a block list');
    };
    BlockListTracker.prototype.newNode = function (_node) {
        util_1.assert(false, 'Cannot create a new node directly inside a block list');
    };
    BlockListTracker.prototype.newBounds = function (_bounds) {
    };
    BlockListTracker.prototype.newDestroyable = function (_d) {
    };
    BlockListTracker.prototype.finalize = function (_stack) {
    };
    return BlockListTracker;
}());
//# sourceMappingURL=data:application/json;base64,