"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bounds_1 = require("../bounds");
var helper_1 = require("../dom/helper");
var util_1 = require("@glimmer/util");
exports.SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
// Patch:    insertAdjacentHTML on SVG Fix
// Browsers: Safari, IE, Edge, Firefox ~33-34
// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
//           present but throws an exception on IE and Edge. Old versions of
//           Firefox create nodes in the incorrect namespace.
// Fix:      Since IE and Edge silently fail to create SVG nodes using
//           innerHTML, and because Firefox may create nodes in the incorrect
//           namespace using innerHTML on SVG elements, an HTML-string wrapping
//           approach is used. A pre/post SVG tag is added to the string, then
//           that whole string is added to a div. The created nodes are plucked
//           out and applied to the target location on DOM.
function domChanges(document, DOMChangesClass, svgNamespace) {
    if (!document)
        return DOMChangesClass;
    if (!shouldApplyFix(document, svgNamespace)) {
        return DOMChangesClass;
    }
    var div = document.createElement('div');
    return (function (_super) {
        __extends(DOMChangesWithSVGInnerHTMLFix, _super);
        function DOMChangesWithSVGInnerHTMLFix() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DOMChangesWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function (parent, nextSibling, html) {
            if (html === null || html === '') {
                return _super.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
            }
            if (parent.namespaceURI !== svgNamespace) {
                return _super.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
            }
            return fixSVG(parent, div, html, nextSibling);
        };
        return DOMChangesWithSVGInnerHTMLFix;
    }(DOMChangesClass));
}
exports.domChanges = domChanges;
function treeConstruction(document, TreeConstructionClass, svgNamespace) {
    if (!document)
        return TreeConstructionClass;
    if (!shouldApplyFix(document, svgNamespace)) {
        return TreeConstructionClass;
    }
    var div = document.createElement('div');
    return (function (_super) {
        __extends(TreeConstructionWithSVGInnerHTMLFix, _super);
        function TreeConstructionWithSVGInnerHTMLFix() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TreeConstructionWithSVGInnerHTMLFix.prototype.insertHTMLBefore = function (parent, html, reference) {
            if (html === null || html === '') {
                return _super.prototype.insertHTMLBefore.call(this, parent, html, reference);
            }
            if (parent.namespaceURI !== svgNamespace) {
                return _super.prototype.insertHTMLBefore.call(this, parent, html, reference);
            }
            return fixSVG(parent, div, html, reference);
        };
        return TreeConstructionWithSVGInnerHTMLFix;
    }(TreeConstructionClass));
}
exports.treeConstruction = treeConstruction;
function fixSVG(parent, div, html, reference) {
    // IE, Edge: also do not correctly support using `innerHTML` on SVG
    // namespaced elements. So here a wrapper is used.
    var wrappedHtml = '<svg>' + html + '</svg>';
    div.innerHTML = wrappedHtml;
    var _a = helper_1.moveNodesBefore(div.firstChild, parent, reference), first = _a[0], last = _a[1];
    return new bounds_1.ConcreteBounds(parent, first, last);
}
function shouldApplyFix(document, svgNamespace) {
    var svg = document.createElementNS(svgNamespace, 'svg');
    try {
        svg['insertAdjacentHTML']('beforeEnd', '<circle></circle>');
    }
    catch (e) {
    }
    finally {
        // FF: Old versions will create a node in the wrong namespace
        if (svg.childNodes.length === 1 && util_1.unwrap(svg.firstChild).namespaceURI === exports.SVG_NAMESPACE) {
            // The test worked as expected, no fix required
            return false;
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,