"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var blocks_1 = require("./compiled/blocks");
var compiler_1 = require("./compiler");
var WireFormat = require("@glimmer/wire-format");
var symbol_table_1 = require("./symbol-table");
var functions_1 = require("./syntax/functions");
var specialize_1 = require("./syntax/specialize");
function compileStatement(statement, builder) {
    var refined = specialize_1.SPECIALIZE.specialize(statement, builder.symbolTable);
    functions_1.STATEMENTS.compile(refined, builder);
}
exports.compileStatement = compileStatement;
var Template = (function () {
    function Template(statements, symbolTable) {
        this.statements = statements;
        this.symbolTable = symbolTable;
    }
    return Template;
}());
exports.Template = Template;
var Layout = (function (_super) {
    __extends(Layout, _super);
    function Layout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Layout;
}(Template));
exports.Layout = Layout;
var EntryPoint = (function (_super) {
    __extends(EntryPoint, _super);
    function EntryPoint() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EntryPoint.prototype.compile = function (env) {
        var table = this.symbolTable;
        var b = compiler_1.builder(env, table);
        for (var i = 0; i < this.statements.length; i++) {
            var statement = this.statements[i];
            var refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, b);
        }
        return new blocks_1.CompiledProgram(b.toSlice(), this.symbolTable.size);
    };
    return EntryPoint;
}(Template));
exports.EntryPoint = EntryPoint;
var InlineBlock = (function (_super) {
    __extends(InlineBlock, _super);
    function InlineBlock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InlineBlock.prototype.splat = function (builder) {
        var table = builder.symbolTable;
        var locals = table.getSymbols().locals;
        if (locals) {
            builder.pushChildScope();
            builder.bindPositionalArgsForLocals(locals);
        }
        for (var i = 0; i < this.statements.length; i++) {
            var statement = this.statements[i];
            var refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, builder);
        }
        if (locals) {
            builder.popScope();
        }
    };
    InlineBlock.prototype.compile = function (env) {
        var table = this.symbolTable;
        var b = compiler_1.builder(env, table);
        this.splat(b);
        return new blocks_1.CompiledBlock(b.toSlice());
    };
    return InlineBlock;
}(Template));
exports.InlineBlock = InlineBlock;
var PartialBlock = (function (_super) {
    __extends(PartialBlock, _super);
    function PartialBlock() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PartialBlock.prototype.compile = function (env) {
        var table = this.symbolTable;
        var b = compiler_1.builder(env, table);
        for (var i = 0; i < this.statements.length; i++) {
            var statement = this.statements[i];
            var refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, b);
        }
        return new blocks_1.CompiledProgram(b.toSlice(), table.size);
    };
    return PartialBlock;
}(Template));
exports.PartialBlock = PartialBlock;
var Scanner = (function () {
    function Scanner(block, meta, env) {
        this.block = block;
        this.meta = meta;
        this.env = env;
    }
    Scanner.prototype.scanEntryPoint = function () {
        var _a = this, block = _a.block, meta = _a.meta;
        var symbolTable = symbol_table_1.entryPoint(meta);
        var child = scanBlock(block, symbolTable, this.env);
        return new EntryPoint(child.statements, symbolTable);
    };
    Scanner.prototype.scanLayout = function () {
        var _a = this, block = _a.block, meta = _a.meta;
        var named = block.named, yields = block.yields, hasPartials = block.hasPartials;
        var symbolTable = symbol_table_1.layout(meta, named, yields, hasPartials);
        var child = scanBlock(block, symbolTable, this.env);
        return new Layout(child.statements, symbolTable);
    };
    Scanner.prototype.scanPartial = function (symbolTable) {
        var block = this.block;
        var child = scanBlock(block, symbolTable, this.env);
        return new PartialBlock(child.statements, symbolTable);
    };
    return Scanner;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Scanner;
function scanBlock(_a, symbolTable, env) {
    var statements = _a.statements;
    return new RawInlineBlock(env, symbolTable, statements).scan();
}
exports.scanBlock = scanBlock;
var BaselineSyntax;
(function (BaselineSyntax) {
    BaselineSyntax.isScannedComponent = WireFormat.is('scanned-component');
    BaselineSyntax.isPrimitiveElement = WireFormat.is('open-primitive-element');
    BaselineSyntax.isOptimizedAppend = WireFormat.is('optimized-append');
    BaselineSyntax.isUnoptimizedAppend = WireFormat.is('unoptimized-append');
    BaselineSyntax.isAnyAttr = WireFormat.is('any-dynamic-attr');
    BaselineSyntax.isStaticPartial = WireFormat.is('static-partial');
    BaselineSyntax.isDynamicPartial = WireFormat.is('dynamic-partial');
    BaselineSyntax.isFunctionExpression = WireFormat.is('function');
    BaselineSyntax.isNestedBlock = WireFormat.is('nested-block');
    BaselineSyntax.isScannedBlock = WireFormat.is('scanned-block');
    BaselineSyntax.isDebugger = WireFormat.is('debugger');
    var NestedBlock;
    (function (NestedBlock) {
        function defaultBlock(sexp) {
            return sexp[4];
        }
        NestedBlock.defaultBlock = defaultBlock;
        function inverseBlock(sexp) {
            return sexp[5];
        }
        NestedBlock.inverseBlock = inverseBlock;
        function params(sexp) {
            return sexp[2];
        }
        NestedBlock.params = params;
        function hash(sexp) {
            return sexp[3];
        }
        NestedBlock.hash = hash;
    })(NestedBlock = BaselineSyntax.NestedBlock || (BaselineSyntax.NestedBlock = {}));
})(BaselineSyntax = exports.BaselineSyntax || (exports.BaselineSyntax = {}));
var RawInlineBlock = (function () {
    function RawInlineBlock(env, table, statements) {
        this.env = env;
        this.table = table;
        this.statements = statements;
    }
    RawInlineBlock.prototype.scan = function () {
        var buffer = [];
        for (var i = 0; i < this.statements.length; i++) {
            var statement = this.statements[i];
            if (WireFormat.Statements.isBlock(statement)) {
                buffer.push(this.specializeBlock(statement));
            }
            else if (WireFormat.Statements.isComponent(statement)) {
                buffer.push.apply(buffer, this.specializeComponent(statement));
            }
            else {
                buffer.push(statement);
            }
        }
        return new InlineBlock(buffer, this.table);
    };
    RawInlineBlock.prototype.specializeBlock = function (block) {
        var path = block[1], params = block[2], hash = block[3], template = block[4], inverse = block[5];
        return ['scanned-block', path, params, hash, this.child(template), this.child(inverse)];
    };
    RawInlineBlock.prototype.specializeComponent = function (sexp) {
        var tag = sexp[1], component = sexp[2];
        if (this.env.hasComponentDefinition([tag], this.table)) {
            var child = this.child(component);
            var attrs = new RawInlineBlock(this.env, this.table, component.attrs);
            return [['scanned-component', tag, attrs, component.args, child]];
        }
        else {
            var buf = [];
            buf.push(['open-element', tag, []]);
            buf.push.apply(buf, component.attrs);
            buf.push(['flush-element']);
            buf.push.apply(buf, component.statements);
            buf.push(['close-element']);
            return buf;
        }
    };
    RawInlineBlock.prototype.child = function (block) {
        if (!block)
            return null;
        var table = symbol_table_1.block(this.table, block.locals);
        return new RawInlineBlock(this.env, table, block.statements);
    };
    return RawInlineBlock;
}());
exports.RawInlineBlock = RawInlineBlock;
//# sourceMappingURL=data:application/json;base64,