"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var reference_1 = require("@glimmer/reference");
var PrimitiveReference = (function (_super) {
    __extends(PrimitiveReference, _super);
    function PrimitiveReference(value) {
        return _super.call(this, value) || this;
    }
    PrimitiveReference.create = function (value) {
        if (value === undefined) {
            return exports.UNDEFINED_REFERENCE;
        }
        else if (value === null) {
            return exports.NULL_REFERENCE;
        }
        else if (value === true) {
            return TRUE_REFERENCE;
        }
        else if (value === false) {
            return FALSE_REFERENCE;
        }
        else if (typeof value === 'number') {
            return new ValueReference(value);
        }
        else {
            return new StringReference(value);
        }
    };
    PrimitiveReference.prototype.get = function (_key) {
        return exports.UNDEFINED_REFERENCE;
    };
    return PrimitiveReference;
}(reference_1.ConstReference));
exports.PrimitiveReference = PrimitiveReference;
var StringReference = (function (_super) {
    __extends(StringReference, _super);
    function StringReference() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lengthReference = null;
        return _this;
    }
    StringReference.prototype.get = function (key) {
        if (key === 'length') {
            var lengthReference = this.lengthReference;
            if (lengthReference === null) {
                lengthReference = this.lengthReference = new ValueReference(this.inner.length);
            }
            return lengthReference;
        }
        else {
            return _super.prototype.get.call(this, key);
        }
    };
    return StringReference;
}(PrimitiveReference));
var ValueReference = (function (_super) {
    __extends(ValueReference, _super);
    function ValueReference(value) {
        return _super.call(this, value) || this;
    }
    return ValueReference;
}(PrimitiveReference));
exports.UNDEFINED_REFERENCE = new ValueReference(undefined);
exports.NULL_REFERENCE = new ValueReference(null);
var TRUE_REFERENCE = new ValueReference(true);
var FALSE_REFERENCE = new ValueReference(false);
var ConditionalReference = (function () {
    function ConditionalReference(inner) {
        this.inner = inner;
        this.tag = inner.tag;
    }
    ConditionalReference.prototype.value = function () {
        return this.toBool(this.inner.value());
    };
    ConditionalReference.prototype.toBool = function (value) {
        return !!value;
    };
    return ConditionalReference;
}());
exports.ConditionalReference = ConditionalReference;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3JlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQTJGO0FBSzNGO0lBQTZELHNDQUFpQjtJQWlCNUUsNEJBQXNCLEtBQVE7ZUFDNUIsa0JBQU0sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQWxCTSx5QkFBTSxHQUFiLFVBQW1DLEtBQVE7UUFDekMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxDQUFDLDJCQUE0QyxDQUFDO1FBQ3RELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLHNCQUF1QyxDQUFDO1FBQ2pELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLGNBQXVDLENBQUM7UUFDakQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsZUFBd0MsQ0FBQztRQUNsRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLEtBQWUsQ0FBMEIsQ0FBQztRQUN0RSxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxlQUFlLENBQUMsS0FBZSxDQUFpQyxDQUFDO1FBQzlFLENBQUM7SUFDSCxDQUFDO0lBTUQsZ0NBQUcsR0FBSCxVQUFJLElBQVk7UUFDZCxNQUFNLENBQUMsMkJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQXhCRCxDQUE2RCwwQkFBYyxHQXdCMUU7QUF4QlksZ0RBQWtCO0FBMEIvQjtJQUE4QixtQ0FBMEI7SUFBeEQ7UUFBQSxxRUFnQkM7UUFmUyxxQkFBZSxHQUF1QyxJQUFJLENBQUM7O0lBZXJFLENBQUM7SUFiQyw2QkFBRyxHQUFILFVBQUksR0FBVztRQUNiLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBQSxzQ0FBZSxDQUFVO1lBRS9CLEVBQUUsQ0FBQyxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pGLENBQUM7WUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDO1FBQ3pCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxpQkFBTSxHQUFHLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsQ0FBQztJQUNILENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFoQkQsQ0FBOEIsa0JBQWtCLEdBZ0IvQztBQUlEO0lBQThDLGtDQUFxQjtJQUNqRSx3QkFBWSxLQUFRO2VBQ2xCLGtCQUFNLEtBQUssQ0FBQztJQUNkLENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUFKRCxDQUE4QyxrQkFBa0IsR0FJL0Q7QUFFWSxRQUFBLG1CQUFtQixHQUFrQyxJQUFJLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuRixRQUFBLGNBQWMsR0FBNkIsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakYsSUFBTSxjQUFjLEdBQWdDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdFLElBQU0sZUFBZSxHQUFnQyxJQUFJLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUUvRTtJQUdFLDhCQUFvQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUMxQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdkIsQ0FBQztJQUVELG9DQUFLLEdBQUw7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVTLHFDQUFNLEdBQWhCLFVBQWlCLEtBQWE7UUFDNUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNILDJCQUFDO0FBQUQsQ0FBQyxBQWRELElBY0M7QUFkWSxvREFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZXZpc2lvblRhZywgQ29uc3RSZWZlcmVuY2UsIFBhdGhSZWZlcmVuY2UsIFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBPcHRpb24sIE9wYXF1ZSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgdHlwZSBQcmltaXRpdmUgPSB1bmRlZmluZWQgfCBudWxsIHwgYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZVJlZmVyZW5jZTxUIGV4dGVuZHMgUHJpbWl0aXZlPiBleHRlbmRzIENvbnN0UmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgUGF0aFJlZmVyZW5jZTxUPiB7XG4gIHN0YXRpYyBjcmVhdGU8VCBleHRlbmRzIFByaW1pdGl2ZT4odmFsdWU6IFQpOiBQcmltaXRpdmVSZWZlcmVuY2U8VD4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIE5VTExfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gVFJVRV9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRkFMU0VfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuZXcgVmFsdWVSZWZlcmVuY2UodmFsdWUgYXMgbnVtYmVyKSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgU3RyaW5nUmVmZXJlbmNlKHZhbHVlIGFzIHN0cmluZykgYXMgYW55IGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodmFsdWU6IFQpIHtcbiAgICBzdXBlcih2YWx1ZSk7XG4gIH1cblxuICBnZXQoX2tleTogc3RyaW5nKTogUHJpbWl0aXZlUmVmZXJlbmNlPFByaW1pdGl2ZT4ge1xuICAgIHJldHVybiBVTkRFRklORURfUkVGRVJFTkNFO1xuICB9XG59XG5cbmNsYXNzIFN0cmluZ1JlZmVyZW5jZSBleHRlbmRzIFByaW1pdGl2ZVJlZmVyZW5jZTxzdHJpbmc+IHtcbiAgcHJpdmF0ZSBsZW5ndGhSZWZlcmVuY2U6IE9wdGlvbjxQcmltaXRpdmVSZWZlcmVuY2U8bnVtYmVyPj4gPSBudWxsO1xuXG4gIGdldChrZXk6IHN0cmluZyk6IFByaW1pdGl2ZVJlZmVyZW5jZTxQcmltaXRpdmU+IHtcbiAgICBpZiAoa2V5ID09PSAnbGVuZ3RoJykge1xuICAgICAgbGV0IHsgbGVuZ3RoUmVmZXJlbmNlIH0gPSB0aGlzO1xuXG4gICAgICBpZiAobGVuZ3RoUmVmZXJlbmNlID09PSBudWxsKSB7XG4gICAgICAgIGxlbmd0aFJlZmVyZW5jZSA9IHRoaXMubGVuZ3RoUmVmZXJlbmNlID0gbmV3IFZhbHVlUmVmZXJlbmNlKHRoaXMuaW5uZXIubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxlbmd0aFJlZmVyZW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgIH1cbiAgfVxufVxuXG50eXBlIFZhbHVlID0gdW5kZWZpbmVkIHwgbnVsbCB8IG51bWJlciB8IGJvb2xlYW47XG5cbmNsYXNzIFZhbHVlUmVmZXJlbmNlPFQgZXh0ZW5kcyBWYWx1ZT4gZXh0ZW5kcyBQcmltaXRpdmVSZWZlcmVuY2U8VD4ge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHN1cGVyKHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgVU5ERUZJTkVEX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPHVuZGVmaW5lZD4gPSBuZXcgVmFsdWVSZWZlcmVuY2UodW5kZWZpbmVkKTtcbmV4cG9ydCBjb25zdCBOVUxMX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPG51bGw+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKG51bGwpO1xuY29uc3QgVFJVRV9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh0cnVlKTtcbmNvbnN0IEZBTFNFX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPGJvb2xlYW4+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKGZhbHNlKTtcblxuZXhwb3J0IGNsYXNzIENvbmRpdGlvbmFsUmVmZXJlbmNlIGltcGxlbWVudHMgUmVmZXJlbmNlPGJvb2xlYW4+IHtcbiAgcHVibGljIHRhZzogUmV2aXNpb25UYWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbm5lcjogUmVmZXJlbmNlPE9wYXF1ZT4pIHtcbiAgICB0aGlzLnRhZyA9IGlubmVyLnRhZztcbiAgfVxuXG4gIHZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnRvQm9vbCh0aGlzLmlubmVyLnZhbHVlKCkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHRvQm9vbCh2YWx1ZTogT3BhcXVlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdmFsdWU7XG4gIH1cbn1cbiJdfQ==