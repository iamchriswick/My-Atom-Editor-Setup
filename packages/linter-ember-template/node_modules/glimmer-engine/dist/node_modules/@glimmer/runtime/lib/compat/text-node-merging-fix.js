"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// Patch:    Adjacent text node merging fix
// Browsers: IE, Edge, Firefox w/o inspector open
// Reason:   These browsers will merge adjacent text nodes. For exmaple given
//           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
//           with proper behavior will populate div.childNodes with two items.
//           These browsers will populate it with one merged node instead.
// Fix:      Add these nodes to a wrapper element, then iterate the childNodes
//           of that wrapper and move the nodes to their target location. Note
//           that potential SVG bugs will have been handled before this fix.
//           Note that this fix must only apply to the previous text node, as
//           the base implementation of `insertHTMLBefore` already handles
//           following text nodes correctly.
function domChanges(document, DOMChangesClass) {
    if (!document)
        return DOMChangesClass;
    if (!shouldApplyFix(document)) {
        return DOMChangesClass;
    }
    return (function (_super) {
        __extends(DOMChangesWithTextNodeMergingFix, _super);
        function DOMChangesWithTextNodeMergingFix(document) {
            var _this = _super.call(this, document) || this;
            _this.uselessComment = document.createComment('');
            return _this;
        }
        DOMChangesWithTextNodeMergingFix.prototype.insertHTMLBefore = function (parent, nextSibling, html) {
            if (html === null) {
                return _super.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
            }
            var didSetUselessComment = false;
            var nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;
            if (nextPrevious && nextPrevious instanceof Text) {
                didSetUselessComment = true;
                parent.insertBefore(this.uselessComment, nextSibling);
            }
            var bounds = _super.prototype.insertHTMLBefore.call(this, parent, nextSibling, html);
            if (didSetUselessComment) {
                parent.removeChild(this.uselessComment);
            }
            return bounds;
        };
        return DOMChangesWithTextNodeMergingFix;
    }(DOMChangesClass));
}
exports.domChanges = domChanges;
function treeConstruction(document, TreeConstructionClass) {
    if (!document)
        return TreeConstructionClass;
    if (!shouldApplyFix(document)) {
        return TreeConstructionClass;
    }
    return (function (_super) {
        __extends(TreeConstructionWithTextNodeMergingFix, _super);
        function TreeConstructionWithTextNodeMergingFix(document) {
            var _this = _super.call(this, document) || this;
            _this.uselessComment = _this.createComment('');
            return _this;
        }
        TreeConstructionWithTextNodeMergingFix.prototype.insertHTMLBefore = function (parent, html, reference) {
            if (html === null) {
                return _super.prototype.insertHTMLBefore.call(this, parent, html, reference);
            }
            var didSetUselessComment = false;
            var nextPrevious = reference ? reference.previousSibling : parent.lastChild;
            if (nextPrevious && nextPrevious instanceof Text) {
                didSetUselessComment = true;
                parent.insertBefore(this.uselessComment, reference);
            }
            var bounds = _super.prototype.insertHTMLBefore.call(this, parent, html, reference);
            if (didSetUselessComment) {
                parent.removeChild(this.uselessComment);
            }
            return bounds;
        };
        return TreeConstructionWithTextNodeMergingFix;
    }(TreeConstructionClass));
}
exports.treeConstruction = treeConstruction;
function shouldApplyFix(document) {
    var mergingTextDiv = document.createElement('div');
    mergingTextDiv.innerHTML = 'first';
    mergingTextDiv.insertAdjacentHTML('beforeEnd', 'second');
    if (mergingTextDiv.childNodes.length === 2) {
        // It worked as expected, no fix required
        return false;
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,