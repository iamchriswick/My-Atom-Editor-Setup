"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var test_helpers_1 = require("@glimmer/test-helpers");
var StaticContentTests = (function (_super) {
    __extends(StaticContentTests, _super);
    function StaticContentTests() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StaticContentTests.prototype[_a = 'renders text'] = function () {
        this.render({});
        this.assertContent("Hello World!");
        this.assertStableRerender();
    };
    StaticContentTests.prototype[_b = 'renders static element'] = function () {
        this.render({});
        this.assertContent("<h1>Hello World!</h1>");
        this.assertStableRerender();
    };
    StaticContentTests.prototype[_c = 'renders custom elements'] = function () {
        this.render({});
        this.assertContent("<use-the-platform></use-the-platform>");
        this.assertStableRerender();
    };
    StaticContentTests.prototype[_d = 'renders static template'] = function () {
        this.render({});
        this.assertContent((_a = ["\n    <div class=\"world\">\n      <h1>Hello World!</h1>\n      <p>This is just a paragraph</p>\n      <a href=\"http://linkedin.com\">Some Link</a>\n    </div>\n    "], _a.raw = ["\n    <div class=\"world\">\n      <h1>Hello World!</h1>\n      <p>This is just a paragraph</p>\n      <a href=\"http://linkedin.com\">Some Link</a>\n    </div>\n    "], test_helpers_1.strip(_a)));
        this.assertStableRerender();
        var _a;
    };
    return StaticContentTests;
}(test_helpers_1.RenderingTest));
__decorate([
    test_helpers_1.template("Hello World!")
], StaticContentTests.prototype, _a, null);
__decorate([
    test_helpers_1.template("<h1>Hello World!</h1>")
], StaticContentTests.prototype, _b, null);
__decorate([
    test_helpers_1.template("<use-the-platform />")
], StaticContentTests.prototype, _c, null);
__decorate([
    test_helpers_1.template((_a = ["\n    <div class=\"world\">\n      <h1>Hello World!</h1>\n      <p>This is just a paragraph</p>\n      <a href=\"http://linkedin.com\">Some Link</a>\n    </div>\n  "], _a.raw = ["\n    <div class=\"world\">\n      <h1>Hello World!</h1>\n      <p>This is just a paragraph</p>\n      <a href=\"http://linkedin.com\">Some Link</a>\n    </div>\n  "], test_helpers_1.strip(_a)))
], StaticContentTests.prototype, _d, null);
StaticContentTests = __decorate([
    test_helpers_1.testModule('Static Content Tests')
], StaticContentTests);
var DynamicContentTests = (function (_super) {
    __extends(DynamicContentTests, _super);
    function DynamicContentTests() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DynamicContentTests.prototype[_a = 'renders simple curly'] = function (assert) {
        var _this = this;
        this.render({ value: 'hello world' });
        this.assertContent('<div><p>hello world</p></div>');
        this.assertStableRerender();
        this.runTask(function () { return _this.context.set('value', "goodbye world"); });
        this.assertContent('<div><p>goodbye world</p></div>');
        this.assertInvariants();
        this.runTask(function () { return _this.context.update({ value: 'hello world' }); });
        this.assertContent('<div><p>hello world</p></div>');
        this.assertInvariants();
    };
    DynamicContentTests.prototype[_b = 'renders simple curly with sibling'] = function (assert) {
        var _this = this;
        this.render({ value: 'hello' });
        this.assertContent('<div><p>hello world</p></div>');
        this.assertStableRerender();
        this.runTask(function () { return _this.context.set('value', "goodbye"); });
        this.assertContent('<div><p>goodbye world</p></div>');
        this.assertInvariants();
        this.runTask(function () { return _this.context.update({ value: 'hello' }); });
        this.assertContent('<div><p>hello world</p></div>');
        this.assertInvariants();
    };
    DynamicContentTests.prototype[_c = 'null and undefined produces empty text nodes'] = function (assert) {
        var _this = this;
        this.render({ v1: null, v2: undefined });
        this.assertContent('<div><p></p><p></p></div>');
        this.assertStableRerender();
        this.runTask(function () {
            _this.context.set('v1', "hello");
            _this.context.set('v2', "world");
        });
        this.assertContent('<div><p>hello</p><p>world</p></div>');
        this.assertInvariants();
        this.runTask(function () {
            _this.context.update({ v1: null, v2: undefined });
        });
        this.assertContent('<div><p></p><p></p></div>');
        this.assertInvariants();
    };
    DynamicContentTests.prototype[_d = 'renders path expression'] = function () {
        var _this = this;
        this.render({ foo: { bar: { baz: 'Hello World' } } });
        this.assertStableRerender();
        this.assertContent('<div>Hello World</div>');
        this.runTask(function () { return _this.context.set('foo', { bar: { baz: 'WOOT' } }); });
        this.assertContent('<div>WOOT</div>');
        this.runTask(function () { return _this.context.set('foo', { bar: { baz: 'Hello World' } }); });
        this.assertContent('<div>Hello World</div>');
    };
    DynamicContentTests.prototype[_e = 'updating a single trusting curly'] = function () {
        var _this = this;
        this.render({ value: '<p>hello world</p>' });
        this.assertStableRerender();
        this.assertContent('<div><p>hello world</p></div>');
        this.runTask(function () { return _this.context.set('value', '<h1>WORD</h1>'); });
        this.assertContent('<div><h1>WORD</h1></div>');
        this.runTask(function () { return _this.context.update({ value: '<p>hello world</p>' }); });
        this.assertContent('<div><p>hello world</p></div>');
    };
    return DynamicContentTests;
}(test_helpers_1.RenderingTest));
__decorate([
    test_helpers_1.template("<div><p>{{value}}</p></div>")
], DynamicContentTests.prototype, _a, null);
__decorate([
    test_helpers_1.template("<div><p>{{value}} world</p></div>")
], DynamicContentTests.prototype, _b, null);
__decorate([
    test_helpers_1.template("<div><p>{{v1}}</p><p>{{v2}}</p></div>")
], DynamicContentTests.prototype, _c, null);
__decorate([
    test_helpers_1.template("<div>{{foo.bar.baz}}</div>")
], DynamicContentTests.prototype, _d, null);
__decorate([
    test_helpers_1.template("<div>{{{value}}}</div>")
], DynamicContentTests.prototype, _e, null);
DynamicContentTests = __decorate([
    test_helpers_1.testModule('Content Tests')
], DynamicContentTests);
var _a, _b, _c, _d, _a, _b, _c, _d, _e;
var _a;
//# sourceMappingURL=data:application/json;base64,