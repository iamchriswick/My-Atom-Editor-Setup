"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var opcodes_1 = require("../../opcodes");
var vm_1 = require("./vm");
var args_1 = require("../../compiled/expressions/args");
var reference_1 = require("@glimmer/reference");
var opcodes_2 = require("../../opcodes");
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PutDynamicComponent, function (vm) {
    var reference = vm.frame.getOperand();
    var cache = reference_1.isConst(reference) ? undefined : new reference_1.ReferenceCache(reference);
    var definition = cache ? cache.peek() : reference.value();
    vm.frame.setImmediate(definition);
    if (cache) {
        vm.updateWith(new vm_1.Assert(cache));
    }
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PutComponent, function (vm, _a) {
    var _component = _a.op1;
    var definition = vm.constants.getOther(_component);
    vm.frame.setImmediate(definition);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.OpenComponent, function (vm, _a) {
    var _args = _a.op1, _shadow = _a.op2;
    var rawArgs = vm.constants.getExpression(_args);
    var shadow = vm.constants.getBlock(_shadow);
    var definition = vm.frame.getImmediate();
    var dynamicScope = vm.pushDynamicScope();
    var callerScope = vm.scope();
    var manager = definition.manager;
    var args = manager.prepareArgs(definition, rawArgs.evaluate(vm), dynamicScope);
    var hasDefaultBlock = !!args.blocks.default; // TODO Cleanup?
    var component = manager.create(vm.env, definition, args, dynamicScope, vm.getSelf(), hasDefaultBlock);
    var destructor = manager.getDestructor(component);
    if (destructor)
        vm.newDestroyable(destructor);
    var layout = manager.layoutFor(definition, component, vm.env);
    var selfRef = manager.getSelf(component);
    vm.beginCacheGroup();
    vm.stack().pushSimpleBlock();
    vm.pushRootScope(selfRef, layout.symbols);
    vm.invokeLayout(args, layout, callerScope, component, manager, shadow);
    vm.updateWith(new UpdateComponentOpcode(definition.name, component, manager, args, dynamicScope));
});
// export class DidCreateElementOpcode extends Opcode {
//   public type = "did-create-element";
//   evaluate(vm: VM) {
//     let manager = vm.frame.getManager();
//     let component = vm.frame.getComponent();
//     let action = 'DidCreateElementOpcode#evaluate';
//     manager.didCreateElement(component, vm.stack().expectConstructing(action), vm.stack().expectOperations(action));
//   }
//   toJSON(): OpcodeJSON {
//     return {
//       guid: this._guid,
//       type: this.type,
//       args: ["$ARGS"]
//     };
//   }
// }
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.DidCreateElement, function (vm) {
    var manager = vm.frame.getManager();
    var component = vm.frame.getComponent();
    var action = 'DidCreateElementOpcode#evaluate';
    manager.didCreateElement(component, vm.stack().expectConstructing(action), vm.stack().expectOperations(action));
});
// export class ShadowAttributesOpcode extends Opcode {
//   public type = "shadow-attributes";
//   evaluate(vm: VM) {
//     let shadow = vm.frame.getShadow();
//     vm.pushCallerScope();
//     if (!shadow) return;
//     vm.invokeBlock(shadow, EvaluatedArgs.empty());
//   }
//   toJSON(): OpcodeJSON {
//     return {
//       guid: this._guid,
//       type: this.type,
//       args: ["$ARGS"]
//     };
//   }
// }
// Slow path for non-specialized component invocations. Uses an internal
// named lookup on the args.
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.ShadowAttributes, function (vm) {
    var shadow = vm.frame.getShadow();
    vm.pushCallerScope();
    if (!shadow)
        return;
    vm.invokeBlock(shadow, args_1.EvaluatedArgs.empty());
});
// export class DidRenderLayoutOpcode extends Opcode {
//   public type = "did-render-layout";
//   evaluate(vm: VM) {
//     let manager = vm.frame.getManager();
//     let component = vm.frame.getComponent();
//     let bounds = vm.stack().popBlock();
//     manager.didRenderLayout(component, bounds);
//     vm.env.didCreate(component, manager);
//     vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));
//   }
// }
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.DidRenderLayout, function (vm) {
    var manager = vm.frame.getManager();
    var component = vm.frame.getComponent();
    var bounds = vm.stack().popBlock();
    manager.didRenderLayout(component, bounds);
    vm.env.didCreate(component, manager);
    vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));
});
// export class CloseComponentOpcode extends Opcode {
//   public type = "close-component";
//   evaluate(vm: VM) {
//     vm.popScope();
//     vm.popDynamicScope();
//     vm.commitCacheGroup();
//   }
// }
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.CloseComponent, function (vm) {
    vm.popScope();
    vm.popDynamicScope();
    vm.commitCacheGroup();
});
var UpdateComponentOpcode = (function (_super) {
    __extends(UpdateComponentOpcode, _super);
    function UpdateComponentOpcode(name, component, manager, args, dynamicScope) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.component = component;
        _this.manager = manager;
        _this.args = args;
        _this.dynamicScope = dynamicScope;
        _this.type = "update-component";
        var componentTag = manager.getTag(component);
        if (componentTag) {
            _this.tag = reference_1.combine([args.tag, componentTag]);
        }
        else {
            _this.tag = args.tag;
        }
        return _this;
    }
    UpdateComponentOpcode.prototype.evaluate = function (_vm) {
        var _a = this, component = _a.component, manager = _a.manager, args = _a.args, dynamicScope = _a.dynamicScope;
        manager.update(component, args, dynamicScope);
    };
    UpdateComponentOpcode.prototype.toJSON = function () {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.name)]
        };
    };
    return UpdateComponentOpcode;
}(opcodes_1.UpdatingOpcode));
exports.UpdateComponentOpcode = UpdateComponentOpcode;
var DidUpdateLayoutOpcode = (function (_super) {
    __extends(DidUpdateLayoutOpcode, _super);
    function DidUpdateLayoutOpcode(manager, component, bounds) {
        var _this = _super.call(this) || this;
        _this.manager = manager;
        _this.component = component;
        _this.bounds = bounds;
        _this.type = "did-update-layout";
        _this.tag = reference_1.CONSTANT_TAG;
        return _this;
    }
    DidUpdateLayoutOpcode.prototype.evaluate = function (vm) {
        var _a = this, manager = _a.manager, component = _a.component, bounds = _a.bounds;
        manager.didUpdateLayout(component, bounds);
        vm.env.didUpdate(component, manager);
    };
    return DidUpdateLayoutOpcode;
}(opcodes_1.UpdatingOpcode));
exports.DidUpdateLayoutOpcode = DidUpdateLayoutOpcode;
//# sourceMappingURL=data:application/json;base64,