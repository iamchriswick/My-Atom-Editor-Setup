"use strict";
var args_1 = require("../expressions/args");
var util_1 = require("@glimmer/util");
var reference_1 = require("@glimmer/reference");
var opcodes_1 = require("../../opcodes");
var IterablePresenceReference = (function () {
    function IterablePresenceReference(artifacts) {
        this.tag = artifacts.tag;
        this.artifacts = artifacts;
    }
    IterablePresenceReference.prototype.value = function () {
        return !this.artifacts.isEmpty();
    };
    return IterablePresenceReference;
}());
opcodes_1.APPEND_OPCODES.add(opcodes_1.OpcodeName.PutIterator, function (vm) {
    var listRef = vm.frame.getOperand();
    var args = util_1.expect(vm.frame.getArgs(), 'PutIteratorOpcode expects a populated args register');
    var iterable = vm.env.iterableFor(listRef, args);
    var iterator = new reference_1.ReferenceIterator(iterable);
    vm.frame.setIterator(iterator);
    vm.frame.setCondition(new IterablePresenceReference(iterator.artifacts));
});
opcodes_1.APPEND_OPCODES.add(opcodes_1.OpcodeName.EnterList, function (vm, _a) {
    var _slice = _a.op1;
    vm.enterList(vm.constants.getSlice(_slice));
});
opcodes_1.APPEND_OPCODES.add(opcodes_1.OpcodeName.ExitList, function (vm) { return vm.exitList(); });
opcodes_1.APPEND_OPCODES.add(opcodes_1.OpcodeName.EnterWithKey, function (vm, _a) {
    var _slice = _a.op2;
    var key = util_1.expect(vm.frame.getKey(), 'EnterWithKeyOpcode expects a populated key register');
    var slice = vm.constants.getSlice(_slice);
    vm.enterWithKey(key, slice);
});
var TRUE_REF = new reference_1.ConstReference(true);
var FALSE_REF = new reference_1.ConstReference(false);
opcodes_1.APPEND_OPCODES.add(opcodes_1.OpcodeName.NextIter, function (vm, _a) {
    var end = _a.op1;
    var item = vm.frame.getIterator().next();
    if (item) {
        vm.frame.setCondition(TRUE_REF);
        vm.frame.setKey(item.key);
        vm.frame.setOperand(item.value);
        vm.frame.setArgs(args_1.EvaluatedArgs.positional([item.value, item.memo]));
    }
    else {
        vm.frame.setCondition(FALSE_REF);
        vm.goto(end);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9ydW50aW1lL2xpYi9jb21waWxlZC9vcGNvZGVzL2xpc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBb0Q7QUFDcEQsc0NBQXVDO0FBQ3ZDLGdEQUFtSDtBQUNuSCx5Q0FBaUU7QUFFakU7SUFJRSxtQ0FBWSxTQUE2QjtRQUN2QyxJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELHlDQUFLLEdBQUw7UUFDRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFDSCxnQ0FBQztBQUFELENBQUMsQUFaRCxJQVlDO0FBRUQsd0JBQWMsQ0FBQyxHQUFHLENBQUMsb0JBQUUsQ0FBQyxXQUFXLEVBQUUsVUFBQSxFQUFFO0lBQ25DLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEMsSUFBSSxJQUFJLEdBQUcsYUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUscURBQXFELENBQUMsQ0FBQztJQUM3RixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakQsSUFBSSxRQUFRLEdBQUcsSUFBSSw2QkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUUvQyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzNFLENBQUMsQ0FBQyxDQUFDO0FBRUgsd0JBQWMsQ0FBQyxHQUFHLENBQUMsb0JBQUUsQ0FBQyxTQUFTLEVBQUUsVUFBQyxFQUFFLEVBQUUsRUFBZTtRQUFiLGVBQVc7SUFDakQsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUMsQ0FBQyxDQUFDO0FBRUgsd0JBQWMsQ0FBQyxHQUFHLENBQUMsb0JBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQWIsQ0FBYSxDQUFDLENBQUM7QUFFckQsd0JBQWMsQ0FBQyxHQUFHLENBQUMsb0JBQUUsQ0FBQyxZQUFZLEVBQUUsVUFBQyxFQUFFLEVBQUUsRUFBZTtRQUFiLGVBQVc7SUFDcEQsSUFBSSxHQUFHLEdBQUcsYUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUscURBQXFELENBQUMsQ0FBQztJQUMzRixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUMsQ0FBQztBQUVILElBQU0sUUFBUSxHQUFHLElBQUksMEJBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQyxJQUFNLFNBQVMsR0FBRyxJQUFJLDBCQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFNUMsd0JBQWMsQ0FBQyxHQUFHLENBQUMsb0JBQUUsQ0FBQyxRQUFRLEVBQUUsVUFBQyxFQUFFLEVBQUUsRUFBWTtRQUFWLFlBQVE7SUFDN0MsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV6QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ1QsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxvQkFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNqQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZhbHVhdGVkQXJncyB9IGZyb20gJy4uL2V4cHJlc3Npb25zL2FyZ3MnO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBSZXZpc2lvblRhZywgUmVmZXJlbmNlLCBDb25zdFJlZmVyZW5jZSwgUmVmZXJlbmNlSXRlcmF0b3IsIEl0ZXJhdGlvbkFydGlmYWN0cyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUywgT3Bjb2RlTmFtZSBhcyBPcCB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuXG5jbGFzcyBJdGVyYWJsZVByZXNlbmNlUmVmZXJlbmNlIGltcGxlbWVudHMgUmVmZXJlbmNlPGJvb2xlYW4+IHtcbiAgcHVibGljIHRhZzogUmV2aXNpb25UYWc7XG4gIHByaXZhdGUgYXJ0aWZhY3RzOiBJdGVyYXRpb25BcnRpZmFjdHM7XG5cbiAgY29uc3RydWN0b3IoYXJ0aWZhY3RzOiBJdGVyYXRpb25BcnRpZmFjdHMpIHtcbiAgICB0aGlzLnRhZyA9IGFydGlmYWN0cy50YWc7XG4gICAgdGhpcy5hcnRpZmFjdHMgPSBhcnRpZmFjdHM7XG4gIH1cblxuICB2YWx1ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuYXJ0aWZhY3RzLmlzRW1wdHkoKTtcbiAgfVxufVxuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuUHV0SXRlcmF0b3IsIHZtID0+IHtcbiAgbGV0IGxpc3RSZWYgPSB2bS5mcmFtZS5nZXRPcGVyYW5kKCk7XG4gIGxldCBhcmdzID0gZXhwZWN0KHZtLmZyYW1lLmdldEFyZ3MoKSwgJ1B1dEl0ZXJhdG9yT3Bjb2RlIGV4cGVjdHMgYSBwb3B1bGF0ZWQgYXJncyByZWdpc3RlcicpO1xuICBsZXQgaXRlcmFibGUgPSB2bS5lbnYuaXRlcmFibGVGb3IobGlzdFJlZiwgYXJncyk7XG4gIGxldCBpdGVyYXRvciA9IG5ldyBSZWZlcmVuY2VJdGVyYXRvcihpdGVyYWJsZSk7XG5cbiAgdm0uZnJhbWUuc2V0SXRlcmF0b3IoaXRlcmF0b3IpO1xuICB2bS5mcmFtZS5zZXRDb25kaXRpb24obmV3IEl0ZXJhYmxlUHJlc2VuY2VSZWZlcmVuY2UoaXRlcmF0b3IuYXJ0aWZhY3RzKSk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkVudGVyTGlzdCwgKHZtLCB7IG9wMTogX3NsaWNlIH0pID0+IHtcbiAgdm0uZW50ZXJMaXN0KHZtLmNvbnN0YW50cy5nZXRTbGljZShfc2xpY2UpKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRXhpdExpc3QsIHZtID0+IHZtLmV4aXRMaXN0KCkpO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRW50ZXJXaXRoS2V5LCAodm0sIHsgb3AyOiBfc2xpY2UgfSkgPT4ge1xuICBsZXQga2V5ID0gZXhwZWN0KHZtLmZyYW1lLmdldEtleSgpLCAnRW50ZXJXaXRoS2V5T3Bjb2RlIGV4cGVjdHMgYSBwb3B1bGF0ZWQga2V5IHJlZ2lzdGVyJyk7XG4gIGxldCBzbGljZSA9IHZtLmNvbnN0YW50cy5nZXRTbGljZShfc2xpY2UpO1xuICB2bS5lbnRlcldpdGhLZXkoa2V5LCBzbGljZSk7XG59KTtcblxuY29uc3QgVFJVRV9SRUYgPSBuZXcgQ29uc3RSZWZlcmVuY2UodHJ1ZSk7XG5jb25zdCBGQUxTRV9SRUYgPSBuZXcgQ29uc3RSZWZlcmVuY2UoZmFsc2UpO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuTmV4dEl0ZXIsICh2bSwgeyBvcDE6IGVuZCB9KSA9PiB7XG4gIGxldCBpdGVtID0gdm0uZnJhbWUuZ2V0SXRlcmF0b3IoKS5uZXh0KCk7XG5cbiAgaWYgKGl0ZW0pIHtcbiAgICB2bS5mcmFtZS5zZXRDb25kaXRpb24oVFJVRV9SRUYpO1xuICAgIHZtLmZyYW1lLnNldEtleShpdGVtLmtleSk7XG4gICAgdm0uZnJhbWUuc2V0T3BlcmFuZChpdGVtLnZhbHVlKTtcbiAgICB2bS5mcmFtZS5zZXRBcmdzKEV2YWx1YXRlZEFyZ3MucG9zaXRpb25hbChbaXRlbS52YWx1ZSwgaXRlbS5tZW1vXSkpO1xuICB9IGVsc2Uge1xuICAgIHZtLmZyYW1lLnNldENvbmRpdGlvbihGQUxTRV9SRUYpO1xuICAgIHZtLmdvdG8oZW5kKTtcbiAgfVxufSk7XG4iXX0=