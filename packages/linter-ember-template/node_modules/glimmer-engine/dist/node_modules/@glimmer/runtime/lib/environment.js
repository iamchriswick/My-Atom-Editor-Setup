"use strict";
var util_1 = require("@glimmer/util");
var functions_1 = require("./syntax/functions");
var opcodes_1 = require("./opcodes");
var references_1 = require("./references");
var attribute_managers_1 = require("./dom/attribute-managers");
var util_2 = require("@glimmer/util");
var Scope = (function () {
    function Scope(references, callerScope) {
        if (callerScope === void 0) { callerScope = null; }
        this.callerScope = null;
        this.slots = references;
        this.callerScope = callerScope;
    }
    Scope.root = function (self, size) {
        if (size === void 0) { size = 0; }
        var refs = new Array(size + 1);
        for (var i = 0; i <= size; i++) {
            refs[i] = references_1.UNDEFINED_REFERENCE;
        }
        return new Scope(refs).init({ self: self });
    };
    Scope.prototype.init = function (_a) {
        var self = _a.self;
        this.slots[0] = self;
        return this;
    };
    Scope.prototype.getSelf = function () {
        return this.slots[0];
    };
    Scope.prototype.getSymbol = function (symbol) {
        return this.slots[symbol];
    };
    Scope.prototype.getBlock = function (symbol) {
        return this.slots[symbol];
    };
    Scope.prototype.getPartialArgs = function (symbol) {
        return this.slots[symbol];
    };
    Scope.prototype.bindSymbol = function (symbol, value) {
        this.slots[symbol] = value;
    };
    Scope.prototype.bindBlock = function (symbol, value) {
        this.slots[symbol] = value;
    };
    Scope.prototype.bindPartialArgs = function (symbol, value) {
        this.slots[symbol] = value;
    };
    Scope.prototype.bindCallerScope = function (scope) {
        this.callerScope = scope;
    };
    Scope.prototype.getCallerScope = function () {
        return this.callerScope;
    };
    Scope.prototype.child = function () {
        return new Scope(this.slots.slice(), this.callerScope);
    };
    return Scope;
}());
exports.Scope = Scope;
var Transaction = (function () {
    function Transaction() {
        this.scheduledInstallManagers = [];
        this.scheduledInstallModifiers = [];
        this.scheduledUpdateModifierManagers = [];
        this.scheduledUpdateModifiers = [];
        this.createdComponents = [];
        this.createdManagers = [];
        this.updatedComponents = [];
        this.updatedManagers = [];
        this.destructors = [];
    }
    Transaction.prototype.didCreate = function (component, manager) {
        this.createdComponents.push(component);
        this.createdManagers.push(manager);
    };
    Transaction.prototype.didUpdate = function (component, manager) {
        this.updatedComponents.push(component);
        this.updatedManagers.push(manager);
    };
    Transaction.prototype.scheduleInstallModifier = function (modifier, manager) {
        this.scheduledInstallManagers.push(manager);
        this.scheduledInstallModifiers.push(modifier);
    };
    Transaction.prototype.scheduleUpdateModifier = function (modifier, manager) {
        this.scheduledUpdateModifierManagers.push(manager);
        this.scheduledUpdateModifiers.push(modifier);
    };
    Transaction.prototype.didDestroy = function (d) {
        this.destructors.push(d);
    };
    Transaction.prototype.commit = function () {
        var _a = this, createdComponents = _a.createdComponents, createdManagers = _a.createdManagers;
        for (var i = 0; i < createdComponents.length; i++) {
            var component = createdComponents[i];
            var manager = createdManagers[i];
            manager.didCreate(component);
        }
        var _b = this, updatedComponents = _b.updatedComponents, updatedManagers = _b.updatedManagers;
        for (var i = 0; i < updatedComponents.length; i++) {
            var component = updatedComponents[i];
            var manager = updatedManagers[i];
            manager.didUpdate(component);
        }
        var destructors = this.destructors;
        for (var i = 0; i < destructors.length; i++) {
            destructors[i].destroy();
        }
        var _c = this, scheduledInstallManagers = _c.scheduledInstallManagers, scheduledInstallModifiers = _c.scheduledInstallModifiers;
        for (var i = 0; i < scheduledInstallManagers.length; i++) {
            var manager = scheduledInstallManagers[i];
            var modifier = scheduledInstallModifiers[i];
            manager.install(modifier);
        }
        var _d = this, scheduledUpdateModifierManagers = _d.scheduledUpdateModifierManagers, scheduledUpdateModifiers = _d.scheduledUpdateModifiers;
        for (var i = 0; i < scheduledUpdateModifierManagers.length; i++) {
            var manager = scheduledUpdateModifierManagers[i];
            var modifier = scheduledUpdateModifiers[i];
            manager.update(modifier);
        }
    };
    return Transaction;
}());
var Opcode = (function () {
    function Opcode(array) {
        this.array = array;
        this.offset = 0;
    }
    Object.defineProperty(Opcode.prototype, "type", {
        get: function () {
            return this.array[this.offset];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Opcode.prototype, "op1", {
        get: function () {
            return this.array[this.offset + 1];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Opcode.prototype, "op2", {
        get: function () {
            return this.array[this.offset + 2];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Opcode.prototype, "op3", {
        get: function () {
            return this.array[this.offset + 3];
        },
        enumerable: true,
        configurable: true
    });
    return Opcode;
}());
exports.Opcode = Opcode;
var Program = (function () {
    function Program() {
        this.opcodes = new util_1.A(0x100000);
        this._offset = 0;
        this._opcode = new Opcode(this.opcodes);
    }
    Object.defineProperty(Program.prototype, "next", {
        get: function () {
            return this._offset;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Program.prototype, "current", {
        get: function () {
            return this._offset - 4;
        },
        enumerable: true,
        configurable: true
    });
    Program.prototype.opcode = function (offset) {
        this._opcode.offset = offset;
        return this._opcode;
    };
    Program.prototype.set = function (pos, opcode) {
        var type = opcode[0], op1 = opcode[1], op2 = opcode[2], op3 = opcode[3];
        this.opcodes[pos] = type;
        this.opcodes[pos + 1] = op1;
        this.opcodes[pos + 2] = op2;
        this.opcodes[pos + 3] = op3;
    };
    Program.prototype.push = function (opcode) {
        var offset = this._offset;
        var type = opcode[0], op1 = opcode[1], op2 = opcode[2], op3 = opcode[3];
        this.opcodes[this._offset++] = type;
        this.opcodes[this._offset++] = op1;
        this.opcodes[this._offset++] = op2;
        this.opcodes[this._offset++] = op3;
        return offset;
    };
    return Program;
}());
exports.Program = Program;
var Environment = (function () {
    function Environment(_a) {
        var appendOperations = _a.appendOperations, updateOperations = _a.updateOperations;
        this._macros = null;
        this._transaction = null;
        this.constants = new opcodes_1.Constants();
        this.program = new Program();
        this.appendOperations = appendOperations;
        this.updateOperations = updateOperations;
    }
    Environment.prototype.toConditionalReference = function (reference) {
        return new references_1.ConditionalReference(reference);
    };
    Environment.prototype.getAppendOperations = function () { return this.appendOperations; };
    Environment.prototype.getDOM = function () { return this.updateOperations; };
    Environment.prototype.getIdentity = function (object) {
        return util_2.ensureGuid(object) + '';
    };
    Environment.prototype.begin = function () {
        util_2.assert(!this._transaction, 'Cannot start a nested transaction');
        this._transaction = new Transaction();
    };
    Object.defineProperty(Environment.prototype, "transaction", {
        get: function () {
            return util_2.expect(this._transaction, 'must be in a transaction');
        },
        enumerable: true,
        configurable: true
    });
    Environment.prototype.didCreate = function (component, manager) {
        this.transaction.didCreate(component, manager);
    };
    Environment.prototype.didUpdate = function (component, manager) {
        this.transaction.didUpdate(component, manager);
    };
    Environment.prototype.scheduleInstallModifier = function (modifier, manager) {
        this.transaction.scheduleInstallModifier(modifier, manager);
    };
    Environment.prototype.scheduleUpdateModifier = function (modifier, manager) {
        this.transaction.scheduleUpdateModifier(modifier, manager);
    };
    Environment.prototype.didDestroy = function (d) {
        this.transaction.didDestroy(d);
    };
    Environment.prototype.commit = function () {
        this.transaction.commit();
        this._transaction = null;
    };
    Environment.prototype.attributeFor = function (element, attr, isTrusting, namespace) {
        return attribute_managers_1.defaultManagers(element, attr, isTrusting, namespace === undefined ? null : namespace);
    };
    Environment.prototype.macros = function () {
        var macros = this._macros;
        if (!macros) {
            this._macros = macros = functions_1.populateBuiltins();
        }
        return macros;
    };
    return Environment;
}());
exports.Environment = Environment;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Environment;
//# sourceMappingURL=data:application/json;base64,