"use strict";
var WireFormat = require("@glimmer/wire-format");
var util_1 = require("@glimmer/util");
var Specialize = (function () {
    function Specialize() {
        this.names = util_1.dict();
        this.funcs = [];
    }
    Specialize.prototype.add = function (name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };
    Specialize.prototype.specialize = function (sexp, table) {
        var name = sexp[0];
        var index = this.names[name];
        if (index === undefined)
            return sexp;
        var func = this.funcs[index];
        util_1.assert(!!func, "expected a specialization for " + sexp[0]);
        return func(sexp, table);
    };
    return Specialize;
}());
exports.Specialize = Specialize;
exports.SPECIALIZE = new Specialize();
var E = WireFormat.Expressions;
exports.SPECIALIZE.add('append', function (sexp, _symbolTable) {
    var path = sexp[1];
    if (Array.isArray(path) && (E.isUnknown(path) || E.isGet(path))) {
        if (path[1].length !== 1) {
            return ['unoptimized-append', sexp[1], sexp[2]];
        }
    }
    return ['optimized-append', sexp[1], sexp[2]];
});
exports.SPECIALIZE.add('dynamic-attr', function (sexp, _symbolTable) {
    return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], false];
});
exports.SPECIALIZE.add('trusting-attr', function (sexp, _symbolTable) {
    return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], true];
});
exports.SPECIALIZE.add('partial', function (sexp, _table) {
    var expression = sexp[1];
    if (typeof expression === 'string') {
        return ['static-partial', expression];
    }
    else {
        return ['dynamic-partial', expression];
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY2lhbGl6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3N5bnRheC9zcGVjaWFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpREFBbUQ7QUFFbkQsc0NBQTZDO0FBTzdDO0lBQUE7UUFDVSxVQUFLLEdBQUcsV0FBSSxFQUFVLENBQUM7UUFDdkIsVUFBSyxHQUF5QixFQUFFLENBQUM7SUFpQjNDLENBQUM7SUFmQyx3QkFBRyxHQUFILFVBQUksSUFBVSxFQUFFLElBQXdCO1FBQ3RDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCwrQkFBVSxHQUFWLFVBQVcsSUFBWSxFQUFFLEtBQWtCO1FBQ3pDLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTdCLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBRXJDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0IsYUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsbUNBQWlDLElBQUksQ0FBQyxDQUFDLENBQUcsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUFuQkQsSUFtQkM7QUFuQlksZ0NBQVU7QUFxQlYsUUFBQSxVQUFVLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztBQUczQyxJQUFPLENBQUMsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO0FBRWxDLGtCQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFDLElBQWMsRUFBRSxZQUFZO0lBQ3BELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuQixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6QixNQUFNLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsVUFBQyxJQUFtQixFQUFFLFlBQVk7SUFDL0QsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBVSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsVUFBQyxJQUFvQixFQUFFLFlBQVk7SUFDakUsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0QsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQkFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBQyxJQUFlLEVBQUUsTUFBTTtJQUNoRCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFekIsRUFBRSxDQUFDLENBQUMsT0FBTyxVQUFVLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQUMsSUFBSSxDQUFDLENBQUM7UUFDTixNQUFNLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN6QyxDQUFDO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBXaXJlRm9ybWF0IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcclxuaW1wb3J0IHsgQmFzZWxpbmVTeW50YXggfSBmcm9tICcuLi9zY2FubmVyJztcclxuaW1wb3J0IHsgZGljdCwgYXNzZXJ0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XHJcbmltcG9ydCB7IFN5bWJvbFRhYmxlIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XHJcblxyXG5leHBvcnQgdHlwZSBTeW50YXggPSBCYXNlbGluZVN5bnRheC5BbnlTdGF0ZW1lbnQ7XHJcbmV4cG9ydCB0eXBlIE5hbWUgPSBCYXNlbGluZVN5bnRheC5BbnlTdGF0ZW1lbnRbMF07XHJcbmV4cG9ydCB0eXBlIFNwZWNpYWxpemVGdW5jdGlvbiA9IChzZXhwOiBTeW50YXgsIHN5bWJvbFRhYmxlOiBTeW1ib2xUYWJsZSkgPT4gU3ludGF4O1xyXG5cclxuZXhwb3J0IGNsYXNzIFNwZWNpYWxpemUge1xyXG4gIHByaXZhdGUgbmFtZXMgPSBkaWN0PG51bWJlcj4oKTtcclxuICBwcml2YXRlIGZ1bmNzOiBTcGVjaWFsaXplRnVuY3Rpb25bXSA9IFtdO1xyXG5cclxuICBhZGQobmFtZTogTmFtZSwgZnVuYzogU3BlY2lhbGl6ZUZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLmZ1bmNzLnB1c2goZnVuYyk7XHJcbiAgICB0aGlzLm5hbWVzW25hbWVdID0gdGhpcy5mdW5jcy5sZW5ndGggLSAxO1xyXG4gIH1cclxuXHJcbiAgc3BlY2lhbGl6ZShzZXhwOiBTeW50YXgsIHRhYmxlOiBTeW1ib2xUYWJsZSk6IFN5bnRheCB7XHJcbiAgICBsZXQgbmFtZTogTmFtZSA9IHNleHBbMF07XHJcbiAgICBsZXQgaW5kZXggPSB0aGlzLm5hbWVzW25hbWVdO1xyXG5cclxuICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gc2V4cDtcclxuXHJcbiAgICBsZXQgZnVuYyA9IHRoaXMuZnVuY3NbaW5kZXhdO1xyXG4gICAgYXNzZXJ0KCEhZnVuYywgYGV4cGVjdGVkIGEgc3BlY2lhbGl6YXRpb24gZm9yICR7c2V4cFswXX1gKTtcclxuICAgIHJldHVybiBmdW5jKHNleHAsIHRhYmxlKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTUEVDSUFMSVpFID0gbmV3IFNwZWNpYWxpemUoKTtcclxuXHJcbmltcG9ydCBTID0gV2lyZUZvcm1hdC5TdGF0ZW1lbnRzO1xyXG5pbXBvcnQgRSA9IFdpcmVGb3JtYXQuRXhwcmVzc2lvbnM7XHJcblxyXG5TUEVDSUFMSVpFLmFkZCgnYXBwZW5kJywgKHNleHA6IFMuQXBwZW5kLCBfc3ltYm9sVGFibGUpID0+IHtcclxuICBsZXQgcGF0aCA9IHNleHBbMV07XHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpICYmIChFLmlzVW5rbm93bihwYXRoKSB8fCBFLmlzR2V0KHBhdGgpKSkge1xyXG4gICAgaWYgKHBhdGhbMV0ubGVuZ3RoICE9PSAxKSB7XHJcblxyXG4gICAgICByZXR1cm4gWyd1bm9wdGltaXplZC1hcHBlbmQnLCBzZXhwWzFdLCBzZXhwWzJdXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBbJ29wdGltaXplZC1hcHBlbmQnLCBzZXhwWzFdLCBzZXhwWzJdXTtcclxufSk7XHJcblxyXG5TUEVDSUFMSVpFLmFkZCgnZHluYW1pYy1hdHRyJywgKHNleHA6IFMuRHluYW1pY0F0dHIsIF9zeW1ib2xUYWJsZSkgPT4ge1xyXG4gIHJldHVybiBbJ2FueS1keW5hbWljLWF0dHInLCBzZXhwWzFdLCBzZXhwWzJdLCBzZXhwWzNdLCBmYWxzZV07XHJcbn0pO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ3RydXN0aW5nLWF0dHInLCAoc2V4cDogUy5UcnVzdGluZ0F0dHIsIF9zeW1ib2xUYWJsZSkgPT4ge1xyXG4gIHJldHVybiBbJ2FueS1keW5hbWljLWF0dHInLCBzZXhwWzFdLCBzZXhwWzJdLCBzZXhwWzNdLCB0cnVlXTtcclxufSk7XHJcblxyXG5TUEVDSUFMSVpFLmFkZCgncGFydGlhbCcsIChzZXhwOiBTLlBhcnRpYWwsIF90YWJsZSkgPT4ge1xyXG4gIGxldCBleHByZXNzaW9uID0gc2V4cFsxXTtcclxuXHJcbiAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIFsnc3RhdGljLXBhcnRpYWwnLCBleHByZXNzaW9uXTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIFsnZHluYW1pYy1wYXJ0aWFsJywgZXhwcmVzc2lvbl07XHJcbiAgfVxyXG59KTtcclxuIl19