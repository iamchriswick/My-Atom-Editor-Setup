"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var upsert_1 = require("../../upsert");
var interfaces_1 = require("../../component/interfaces");
var opcodes_1 = require("../../opcodes");
var expressions_1 = require("../expressions");
var update_1 = require("../../vm/update");
var reference_1 = require("@glimmer/reference");
var util_1 = require("@glimmer/util");
var bounds_1 = require("../../bounds");
var builder_1 = require("../../builder");
var builder_2 = require("./builder");
var references_1 = require("../../references");
var builder_3 = require("../../builder");
var opcodes_2 = require("../../opcodes");
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.DynamicContent, function (vm, _a) {
    var append = _a.op1;
    var opcode = vm.constants.getOther(append);
    opcode.evaluate(vm);
});
function isEmpty(value) {
    return value === null || value === undefined || typeof value['toString'] !== 'function';
}
function normalizeTextValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    return String(value);
}
exports.normalizeTextValue = normalizeTextValue;
function normalizeTrustedValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    if (upsert_1.isString(value)) {
        return value;
    }
    if (upsert_1.isSafeString(value)) {
        return value.toHTML();
    }
    if (upsert_1.isNode(value)) {
        return value;
    }
    return String(value);
}
function normalizeValue(value) {
    if (isEmpty(value)) {
        return '';
    }
    if (upsert_1.isString(value)) {
        return value;
    }
    if (upsert_1.isSafeString(value) || upsert_1.isNode(value)) {
        return value;
    }
    return String(value);
}
var AppendDynamicOpcode = (function () {
    function AppendDynamicOpcode() {
    }
    AppendDynamicOpcode.prototype.evaluate = function (vm) {
        var reference = vm.frame.getOperand();
        var normalized = this.normalize(reference);
        var value, cache;
        if (reference_1.isConst(reference)) {
            value = normalized.value();
        }
        else {
            cache = new reference_1.ReferenceCache(normalized);
            value = cache.peek();
        }
        var stack = vm.stack();
        var upsert = this.insert(vm.env.getAppendOperations(), stack, value);
        var bounds = new builder_1.Fragment(upsert.bounds);
        stack.newBounds(bounds);
        if (cache /* i.e. !isConst(reference) */) {
            vm.updateWith(this.updateWith(vm, reference, cache, bounds, upsert));
        }
    };
    return AppendDynamicOpcode;
}());
exports.AppendDynamicOpcode = AppendDynamicOpcode;
var GuardedAppendOpcode = (function (_super) {
    __extends(GuardedAppendOpcode, _super);
    function GuardedAppendOpcode(expression, symbolTable) {
        var _this = _super.call(this) || this;
        _this.expression = expression;
        _this.symbolTable = symbolTable;
        _this.deopted = null;
        return _this;
    }
    GuardedAppendOpcode.prototype.evaluate = function (vm) {
        if (this.deopted) {
            vm.pushEvalFrame(this.deopted);
        }
        else {
            vm.evaluateOperand(this.expression);
            var value = vm.frame.getOperand().value();
            if (interfaces_1.isComponentDefinition(value)) {
                vm.pushEvalFrame(this.deopt(vm.env));
            }
            else {
                _super.prototype.evaluate.call(this, vm);
            }
        }
    };
    GuardedAppendOpcode.prototype.deopt = function (env) {
        // At compile time, we determined that this append callsite might refer
        // to a local variable/property lookup that resolves to a component
        // definition at runtime.
        //
        // We could have eagerly compiled this callsite into something like this:
        //
        //   {{#if (is-component-definition foo)}}
        //     {{component foo}}
        //   {{else}}
        //     {{foo}}
        //   {{/if}}
        //
        // However, in practice, there might be a large amout of these callsites
        // and most of them would resolve to a simple value lookup. Therefore, we
        // tried to be optimistic and assumed that the callsite will resolve to
        // appending a simple value.
        //
        // However, we have reached here because at runtime, the guard conditional
        // have detected that this callsite is indeed referring to a component
        // definition object. Since this is likely going to be true for other
        // instances of the same callsite, it is now appropiate to deopt into the
        // expanded version that handles both cases. The compilation would look
        // like this:
        //
        //               PutValue(expression)
        //               Test(is-component-definition)
        //               Enter(BEGIN, END)
        //   BEGIN:      Noop
        //               JumpUnless(VALUE)
        //               PutDynamicComponentDefinitionOpcode
        //               OpenComponent
        //               CloseComponent
        //               Jump(END)
        //   VALUE:      Noop
        //               OptimizedAppend
        //   END:        Noop
        //               Exit
        //
        // Keep in mind that even if we *don't* reach here at initial render time,
        // it is still possible (although quite rare) that the simple value we
        // encounter during initial render could later change into a component
        // definition object at update time. That is handled by the "lazy deopt"
        // code on the update side (scroll down for the next big block of comment).
        var _this = this;
        var dsl = new builder_2.default(this.symbolTable, env);
        dsl.putValue(this.expression);
        dsl.test(IsComponentDefinitionReference.create);
        dsl.labelled(null, function (dsl, _BEGIN, END) {
            dsl.jumpUnless('VALUE');
            dsl.putDynamicComponentDefinition();
            dsl.openComponent(expressions_1.CompiledArgs.empty());
            dsl.closeComponent();
            dsl.jump(END);
            dsl.label('VALUE');
            dsl.dynamicContent(new _this.AppendOpcode());
        });
        var deopted = this.deopted = dsl.toSlice();
        // From this point on, we have essentially replaced ourselves with a new set
        // of opcodes. Since we will always be executing the new/deopted code, it's
        // a good idea (as a pattern) to null out any unneeded fields here to avoid
        // holding on to unneeded/stale objects:
        // QUESTION: Shouldn't this whole object be GCed? If not, why not?
        this.expression = null;
        return deopted;
    };
    return GuardedAppendOpcode;
}(AppendDynamicOpcode));
exports.GuardedAppendOpcode = GuardedAppendOpcode;
var IsComponentDefinitionReference = (function (_super) {
    __extends(IsComponentDefinitionReference, _super);
    function IsComponentDefinitionReference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IsComponentDefinitionReference.create = function (inner) {
        return new IsComponentDefinitionReference(inner);
    };
    IsComponentDefinitionReference.prototype.toBool = function (value) {
        return interfaces_1.isComponentDefinition(value);
    };
    return IsComponentDefinitionReference;
}(references_1.ConditionalReference));
var UpdateOpcode = (function (_super) {
    __extends(UpdateOpcode, _super);
    function UpdateOpcode(cache, bounds, upsert) {
        var _this = _super.call(this) || this;
        _this.cache = cache;
        _this.bounds = bounds;
        _this.upsert = upsert;
        _this.tag = cache.tag;
        return _this;
    }
    UpdateOpcode.prototype.evaluate = function (vm) {
        var value = this.cache.revalidate();
        if (reference_1.isModified(value)) {
            var _a = this, bounds = _a.bounds, upsert = _a.upsert;
            var dom = vm.dom;
            if (!this.upsert.update(dom, value)) {
                var cursor = new bounds_1.Cursor(bounds.parentElement(), bounds_1.clear(bounds));
                upsert = this.upsert = this.insert(vm.env.getAppendOperations(), cursor, value);
            }
            bounds.update(upsert.bounds);
        }
    };
    UpdateOpcode.prototype.toJSON = function () {
        var _a = this, guid = _a._guid, type = _a.type, cache = _a.cache;
        return {
            guid: guid,
            type: type,
            details: { lastValue: JSON.stringify(cache.peek()) }
        };
    };
    return UpdateOpcode;
}(opcodes_1.UpdatingOpcode));
var GuardedUpdateOpcode = (function (_super) {
    __extends(GuardedUpdateOpcode, _super);
    function GuardedUpdateOpcode(reference, cache, bounds, upsert, appendOpcode, state) {
        var _this = _super.call(this, cache, bounds, upsert) || this;
        _this.reference = reference;
        _this.appendOpcode = appendOpcode;
        _this.state = state;
        _this.deopted = null;
        _this.tag = _this._tag = new reference_1.UpdatableTag(_this.tag);
        return _this;
    }
    GuardedUpdateOpcode.prototype.evaluate = function (vm) {
        if (this.deopted) {
            vm.evaluateOpcode(this.deopted);
        }
        else {
            if (interfaces_1.isComponentDefinition(this.reference.value())) {
                this.lazyDeopt(vm);
            }
            else {
                _super.prototype.evaluate.call(this, vm);
            }
        }
    };
    GuardedUpdateOpcode.prototype.lazyDeopt = function (vm) {
        // Durign initial render, we know that the reference does not contain a
        // component definition, so we optimistically assumed that this append
        // is just a normal append. However, at update time, we discovered that
        // the reference has switched into containing a component definition, so
        // we need to do a "lazy deopt", simulating what would have happened if
        // we had decided to perform the deopt in the first place during initial
        // render.
        //
        // More concretely, we would have expanded the curly into a if/else, and
        // based on whether the value is a component definition or not, we would
        // have entered either the dynamic component branch or the simple value
        // branch.
        //
        // Since we rendered a simple value during initial render (and all the
        // updates up until this point), we need to pretend that the result is
        // produced by the "VALUE" branch of the deopted append opcode:
        //
        //   Try(BEGIN, END)
        //     Assert(IsComponentDefinition, expected=false)
        //     OptimizedUpdate
        //
        // In this case, because the reference has switched from being a simple
        // value into a component definition, what would have happened is that
        // the assert would throw, causing the Try opcode to teardown the bounds
        // and rerun the original append opcode.
        //
        // Since the Try opcode would have nuked the updating opcodes anyway, we
        // wouldn't have to worry about simulating those. All we have to do is to
        // execute the Try opcode and immediately throw.
        var _a = this, bounds = _a.bounds, appendOpcode = _a.appendOpcode, state = _a.state;
        var env = vm.env;
        var slice = appendOpcode.deopt(env);
        var enter = util_1.expect(env.program.opcode(slice[0] + 8), 'hardcoded deopt location');
        var ops = vm.constants.getSlice(enter.op1);
        var tracker = new builder_3.UpdatableBlockTracker(bounds.parentElement());
        tracker.newBounds(this.bounds);
        var children = new util_1.LinkedList();
        state.frame['condition'] = IsComponentDefinitionReference.create(util_1.expect(state.frame['operand'], 'operand should be populated'));
        var deopted = this.deopted = new update_1.TryOpcode(ops, state, tracker, children);
        this._tag.update(deopted.tag);
        vm.evaluateOpcode(deopted);
        vm.throw();
        // From this point on, we have essentially replaced ourselve with a new
        // opcode. Since we will always be executing the new/deopted code, it's a
        // good idea (as a pattern) to null out any unneeded fields here to avoid
        // holding on to unneeded/stale objects:
        // QUESTION: Shouldn't this whole object be GCed? If not, why not?
        this._tag = null;
        this.reference = null;
        this.cache = null;
        this.bounds = null;
        this.upsert = null;
        this.appendOpcode = null;
        this.state = null;
    };
    GuardedUpdateOpcode.prototype.toJSON = function () {
        var _a = this, guid = _a._guid, type = _a.type, deopted = _a.deopted;
        if (deopted) {
            return {
                guid: guid,
                type: type,
                deopted: true,
                children: [deopted.toJSON()]
            };
        }
        else {
            return _super.prototype.toJSON.call(this);
        }
    };
    return GuardedUpdateOpcode;
}(UpdateOpcode));
var OptimizedCautiousAppendOpcode = (function (_super) {
    __extends(OptimizedCautiousAppendOpcode, _super);
    function OptimizedCautiousAppendOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'optimized-cautious-append';
        return _this;
    }
    OptimizedCautiousAppendOpcode.prototype.normalize = function (reference) {
        return reference_1.map(reference, normalizeValue);
    };
    OptimizedCautiousAppendOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.cautiousInsert(dom, cursor, value);
    };
    OptimizedCautiousAppendOpcode.prototype.updateWith = function (_vm, _reference, cache, bounds, upsert) {
        return new OptimizedCautiousUpdateOpcode(cache, bounds, upsert);
    };
    return OptimizedCautiousAppendOpcode;
}(AppendDynamicOpcode));
exports.OptimizedCautiousAppendOpcode = OptimizedCautiousAppendOpcode;
var OptimizedCautiousUpdateOpcode = (function (_super) {
    __extends(OptimizedCautiousUpdateOpcode, _super);
    function OptimizedCautiousUpdateOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'optimized-cautious-update';
        return _this;
    }
    OptimizedCautiousUpdateOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.cautiousInsert(dom, cursor, value);
    };
    return OptimizedCautiousUpdateOpcode;
}(UpdateOpcode));
var GuardedCautiousAppendOpcode = (function (_super) {
    __extends(GuardedCautiousAppendOpcode, _super);
    function GuardedCautiousAppendOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'guarded-cautious-append';
        _this.AppendOpcode = OptimizedCautiousAppendOpcode;
        return _this;
    }
    GuardedCautiousAppendOpcode.prototype.normalize = function (reference) {
        return reference_1.map(reference, normalizeValue);
    };
    GuardedCautiousAppendOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.cautiousInsert(dom, cursor, value);
    };
    GuardedCautiousAppendOpcode.prototype.updateWith = function (vm, reference, cache, bounds, upsert) {
        return new GuardedCautiousUpdateOpcode(reference, cache, bounds, upsert, this, vm.capture());
    };
    return GuardedCautiousAppendOpcode;
}(GuardedAppendOpcode));
exports.GuardedCautiousAppendOpcode = GuardedCautiousAppendOpcode;
var GuardedCautiousUpdateOpcode = (function (_super) {
    __extends(GuardedCautiousUpdateOpcode, _super);
    function GuardedCautiousUpdateOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'guarded-cautious-update';
        return _this;
    }
    GuardedCautiousUpdateOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.cautiousInsert(dom, cursor, value);
    };
    return GuardedCautiousUpdateOpcode;
}(GuardedUpdateOpcode));
var OptimizedTrustingAppendOpcode = (function (_super) {
    __extends(OptimizedTrustingAppendOpcode, _super);
    function OptimizedTrustingAppendOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'optimized-trusting-append';
        return _this;
    }
    OptimizedTrustingAppendOpcode.prototype.normalize = function (reference) {
        return reference_1.map(reference, normalizeTrustedValue);
    };
    OptimizedTrustingAppendOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.trustingInsert(dom, cursor, value);
    };
    OptimizedTrustingAppendOpcode.prototype.updateWith = function (_vm, _reference, cache, bounds, upsert) {
        return new OptimizedTrustingUpdateOpcode(cache, bounds, upsert);
    };
    return OptimizedTrustingAppendOpcode;
}(AppendDynamicOpcode));
exports.OptimizedTrustingAppendOpcode = OptimizedTrustingAppendOpcode;
var OptimizedTrustingUpdateOpcode = (function (_super) {
    __extends(OptimizedTrustingUpdateOpcode, _super);
    function OptimizedTrustingUpdateOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'optimized-trusting-update';
        return _this;
    }
    OptimizedTrustingUpdateOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.trustingInsert(dom, cursor, value);
    };
    return OptimizedTrustingUpdateOpcode;
}(UpdateOpcode));
var GuardedTrustingAppendOpcode = (function (_super) {
    __extends(GuardedTrustingAppendOpcode, _super);
    function GuardedTrustingAppendOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'guarded-trusting-append';
        _this.AppendOpcode = OptimizedTrustingAppendOpcode;
        return _this;
    }
    GuardedTrustingAppendOpcode.prototype.normalize = function (reference) {
        return reference_1.map(reference, normalizeTrustedValue);
    };
    GuardedTrustingAppendOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.trustingInsert(dom, cursor, value);
    };
    GuardedTrustingAppendOpcode.prototype.updateWith = function (vm, reference, cache, bounds, upsert) {
        return new GuardedTrustingUpdateOpcode(reference, cache, bounds, upsert, this, vm.capture());
    };
    return GuardedTrustingAppendOpcode;
}(GuardedAppendOpcode));
exports.GuardedTrustingAppendOpcode = GuardedTrustingAppendOpcode;
var GuardedTrustingUpdateOpcode = (function (_super) {
    __extends(GuardedTrustingUpdateOpcode, _super);
    function GuardedTrustingUpdateOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'trusting-update';
        return _this;
    }
    GuardedTrustingUpdateOpcode.prototype.insert = function (dom, cursor, value) {
        return upsert_1.trustingInsert(dom, cursor, value);
    };
    return GuardedTrustingUpdateOpcode;
}(GuardedUpdateOpcode));
//# sourceMappingURL=data:application/json;base64,