"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
var env, root, result, self;
function rootElement() {
    return env.getDOM().createElement('div');
}
function compile(template) {
    return env.compile(template);
}
function commonSetup() {
    env = new test_helpers_1.TestEnvironment(); // TODO: Support SimpleDOM
    root = rootElement();
}
function render(template, context) {
    if (context === void 0) { context = {}; }
    self = new object_reference_1.UpdatableReference(context);
    env.begin();
    result = template.render(self, root, new test_helpers_1.TestDynamicScope());
    env.commit();
    assertInvariants(result);
    return result;
}
function rerender(context, params) {
    if (context === void 0) { context = null; }
    if (params === void 0) { params = { assertStable: false }; }
    var snapshot;
    if (params.assertStable) {
        snapshot = test_helpers_1.generateSnapshot(root);
    }
    if (context !== null)
        self.update(context);
    env.begin();
    result.rerender();
    env.commit();
    if (params.assertStable) {
        test_helpers_1.equalSnapshots(test_helpers_1.generateSnapshot(root), snapshot);
    }
}
function assertInvariants(result) {
    strictEqual(result.firstNode(), root.firstChild, "The firstNode of the result is the same as the root's firstChild");
    strictEqual(result.lastNode(), root.lastChild, "The lastNode of the result is the same as the root's lastChild");
}
QUnit.module("Partials", {
    setup: commonSetup
});
QUnit.test('static partial with static content', function (assert) {
    var template = compile("Before {{partial 'test'}} After");
    env.registerPartial('test', "<div>Testing</div>");
    render(template);
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
    rerender(null, { assertStable: true });
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
});
QUnit.test('static partial with self reference', function (assert) {
    var template = compile("{{partial 'birdman'}}");
    env.registerPartial('birdman', "Respeck my {{item}}. When my {{item}} come up put some respeck on it.");
    render(template, { item: 'name' });
    rerender(null, { assertStable: true });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
    rerender({ item: 'name' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
});
QUnit.test('static partial with local reference', function (assert) {
    var template = compile("{{#each qualities key='id' as |quality|}}{{partial 'test'}}. {{/each}}");
    env.registerPartial('test', "You {{quality.value}}");
    render(template, { qualities: [{ id: 1, value: 'smaht' }, { id: 2, value: 'loyal' }] });
    rerender(null, { assertStable: true });
    test_helpers_1.equalTokens(root, "You smaht. You loyal. ");
    rerender({ qualities: [{ id: 1, value: 'smaht' }, { id: 2, value: 'loyal' }] }, { assertStable: true });
    test_helpers_1.equalTokens(root, "You smaht. You loyal. ");
});
QUnit.test('static partial with named arguments', function (assert) {
    env.registerBasicComponent('foo-bar', test_helpers_1.BasicComponent, "<p>{{@foo}}-{{partial 'test'}}</p>");
    var template = compile("<foo-bar @foo={{foo}} @bar={{bar}} />");
    env.registerPartial('test', "{{@foo}}-{{@bar}}");
    render(template, { foo: 'foo', bar: 'bar' });
    test_helpers_1.equalTokens(root, "<p>foo-foo-bar</p>");
    rerender(null, { assertStable: true });
    rerender({ foo: 'FOO', bar: 'BAR' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "<p>FOO-FOO-BAR</p>");
    rerender({ foo: 'foo', bar: 'bar' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "<p>foo-foo-bar</p>");
});
QUnit.test('static partial with has-block in basic component', function (assert) {
    env.registerBasicComponent('foo-bar', test_helpers_1.BasicComponent, "<p>{{partial 'test'}}</p>");
    env.registerBasicComponent('foo-bar-baz', test_helpers_1.BasicComponent, "<p>{{partial 'test'}}-{{has-block}}-{{has-block 'inverse'}}</p>");
    env.registerPartial('test', "{{has-block}}-{{has-block 'inverse'}}");
    render(compile((_a = ["\n    <foo-bar>a block</foo-bar>\n    <foo-bar />\n    <foo-bar-baz>a block</foo-bar-baz>\n    <foo-bar-baz />\n  "], _a.raw = ["\n    <foo-bar>a block</foo-bar>\n    <foo-bar />\n    <foo-bar-baz>a block</foo-bar-baz>\n    <foo-bar-baz />\n  "], test_helpers_1.strip(_a))));
    test_helpers_1.equalTokens(root, (_b = ["\n    <p>true-false</p>\n    <p>true-false</p>\n    <p>true-false-true-false</p>\n    <p>true-false-true-false</p>\n  "], _b.raw = ["\n    <p>true-false</p>\n    <p>true-false</p>\n    <p>true-false-true-false</p>\n    <p>true-false-true-false</p>\n  "], test_helpers_1.strip(_b)));
    rerender(null, { assertStable: true });
    var _a, _b;
});
QUnit.test('static partial with has-block in curly component', function (assert) {
    var TaglessComponent = (function (_super) {
        __extends(TaglessComponent, _super);
        function TaglessComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = '';
            return _this;
        }
        return TaglessComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', TaglessComponent, "<p>{{partial 'test'}}</p>");
    env.registerEmberishCurlyComponent('foo-bar-baz', TaglessComponent, "<p>{{partial 'test'}}-{{has-block}}-{{has-block 'inverse'}}</p>");
    env.registerPartial('test', "{{has-block}}-{{has-block 'inverse'}}");
    render(compile((_a = ["\n    {{#foo-bar}}a block{{/foo-bar}}\n    {{#foo-bar}}a block{{else}}inverse{{/foo-bar}}\n    {{foo-bar}}\n    {{#foo-bar-baz}}a block{{/foo-bar-baz}}\n    {{#foo-bar-baz}}a block{{else}}inverse{{/foo-bar-baz}}\n    {{foo-bar-baz}}\n  "], _a.raw = ["\n    {{#foo-bar}}a block{{/foo-bar}}\n    {{#foo-bar}}a block{{else}}inverse{{/foo-bar}}\n    {{foo-bar}}\n    {{#foo-bar-baz}}a block{{/foo-bar-baz}}\n    {{#foo-bar-baz}}a block{{else}}inverse{{/foo-bar-baz}}\n    {{foo-bar-baz}}\n  "], test_helpers_1.strip(_a))));
    test_helpers_1.equalTokens(root, (_b = ["\n    <p>true-false</p>\n    <p>true-true</p>\n    <p>false-false</p>\n    <p>true-false-true-false</p>\n    <p>true-true-true-true</p>\n    <p>false-false-false-false</p>\n  "], _b.raw = ["\n    <p>true-false</p>\n    <p>true-true</p>\n    <p>false-false</p>\n    <p>true-false-true-false</p>\n    <p>true-true-true-true</p>\n    <p>false-false-false-false</p>\n  "], test_helpers_1.strip(_b)));
    rerender(null, { assertStable: true });
    var _a, _b;
});
QUnit.test('static partial with has-block-params in basic component', function (assert) {
    env.registerBasicComponent('foo-bar', test_helpers_1.BasicComponent, "<p>{{partial 'test'}}</p>");
    env.registerBasicComponent('foo-bar-baz', test_helpers_1.BasicComponent, "<p>{{partial 'test'}}-{{has-block-params}}-{{has-block-params \"inverse\"}}</p>");
    env.registerPartial('test', "{{has-block-params}}-{{has-block-params \"inverse\"}}");
    render(compile((_a = ["\n    <foo-bar as |x|>a block</foo-bar>\n    <foo-bar>a block</foo-bar>\n    <foo-bar />\n    <foo-bar-baz as |x|>a block</foo-bar-baz>\n    <foo-bar-baz>a block</foo-bar-baz>\n    <foo-bar-baz />\n  "], _a.raw = ["\n    <foo-bar as |x|>a block</foo-bar>\n    <foo-bar>a block</foo-bar>\n    <foo-bar />\n    <foo-bar-baz as |x|>a block</foo-bar-baz>\n    <foo-bar-baz>a block</foo-bar-baz>\n    <foo-bar-baz />\n  "], test_helpers_1.strip(_a))));
    test_helpers_1.equalTokens(root, (_b = ["\n    <p>true-false</p>\n    <p>false-false</p>\n    <p>false-false</p>\n    <p>true-false-true-false</p>\n    <p>false-false-false-false</p>\n    <p>false-false-false-false</p>\n  "], _b.raw = ["\n    <p>true-false</p>\n    <p>false-false</p>\n    <p>false-false</p>\n    <p>true-false-true-false</p>\n    <p>false-false-false-false</p>\n    <p>false-false-false-false</p>\n  "], test_helpers_1.strip(_b)));
    rerender(null, { assertStable: true });
    var _a, _b;
});
QUnit.test('static partial with has-block-params in curly component', function (assert) {
    var TaglessComponent = (function (_super) {
        __extends(TaglessComponent, _super);
        function TaglessComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = '';
            return _this;
        }
        return TaglessComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', TaglessComponent, "<p>{{partial 'test'}}</p>");
    env.registerEmberishCurlyComponent('foo-bar-baz', TaglessComponent, "<p>{{partial 'test'}}-{{has-block-params}}-{{has-block-params \"inverse\"}}</p>");
    env.registerPartial('test', "{{has-block-params}}-{{has-block-params \"inverse\"}}");
    render(compile((_a = ["\n    {{#foo-bar as |x|}}a block{{/foo-bar}}\n    {{#foo-bar}}a block{{else}}inverse{{/foo-bar}}\n    {{#foo-bar}}a block{{/foo-bar}}\n    {{foo-bar}}\n    {{#foo-bar-baz as |x|}}a block{{/foo-bar-baz}}\n    {{#foo-bar-baz}}a block{{else}}inverse{{/foo-bar-baz}}\n    {{#foo-bar-baz}}a block{{/foo-bar-baz}}\n    {{foo-bar-baz}}\n  "], _a.raw = ["\n    {{#foo-bar as |x|}}a block{{/foo-bar}}\n    {{#foo-bar}}a block{{else}}inverse{{/foo-bar}}\n    {{#foo-bar}}a block{{/foo-bar}}\n    {{foo-bar}}\n    {{#foo-bar-baz as |x|}}a block{{/foo-bar-baz}}\n    {{#foo-bar-baz}}a block{{else}}inverse{{/foo-bar-baz}}\n    {{#foo-bar-baz}}a block{{/foo-bar-baz}}\n    {{foo-bar-baz}}\n  "], test_helpers_1.strip(_a))));
    test_helpers_1.equalTokens(root, (_b = ["\n    <p>true-false</p>\n    <p>false-false</p>\n    <p>false-false</p>\n    <p>false-false</p>\n    <p>true-false-true-false</p>\n    <p>false-false-false-false</p>\n    <p>false-false-false-false</p>\n    <p>false-false-false-false</p>\n  "], _b.raw = ["\n    <p>true-false</p>\n    <p>false-false</p>\n    <p>false-false</p>\n    <p>false-false</p>\n    <p>true-false-true-false</p>\n    <p>false-false-false-false</p>\n    <p>false-false-false-false</p>\n    <p>false-false-false-false</p>\n  "], test_helpers_1.strip(_b)));
    rerender(null, { assertStable: true });
    var _a, _b;
});
QUnit.test('static partial with yield in basic component', function (assert) {
    env.registerBasicComponent('foo-bar', test_helpers_1.BasicComponent, "<p>{{partial 'test'}}</p>");
    env.registerBasicComponent('foo-bar-baz', test_helpers_1.BasicComponent, "<p>{{partial 'test'}}-{{yield \"layout\"}}-{{yield to='inverse'}}</p>");
    env.registerPartial('test', "{{yield \"partial\"}}-{{yield to='inverse'}}");
    render(compile((_a = ["\n    <foo-bar as |source|>from {{source}}</foo-bar>\n    <foo-bar />\n    <foo-bar-baz as |source|>from {{source}}</foo-bar-baz>\n    <foo-bar-baz />\n  "], _a.raw = ["\n    <foo-bar as |source|>from {{source}}</foo-bar>\n    <foo-bar />\n    <foo-bar-baz as |source|>from {{source}}</foo-bar-baz>\n    <foo-bar-baz />\n  "], test_helpers_1.strip(_a))));
    test_helpers_1.equalTokens(root, (_b = ["\n    <p>from partial-</p>\n    <p>-</p>\n    <p>from partial--from layout-</p>\n    <p>---</p>\n  "], _b.raw = ["\n    <p>from partial-</p>\n    <p>-</p>\n    <p>from partial--from layout-</p>\n    <p>---</p>\n  "], test_helpers_1.strip(_b)));
    rerender(null, { assertStable: true });
    var _a, _b;
});
QUnit.test('static partial with yield in curly component', function (assert) {
    var TaglessComponent = (function (_super) {
        __extends(TaglessComponent, _super);
        function TaglessComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = '';
            return _this;
        }
        return TaglessComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', TaglessComponent, "<p>{{partial 'test'}}</p>");
    env.registerEmberishCurlyComponent('foo-bar-baz', TaglessComponent, "<p>{{partial 'test'}}-{{yield \"layout\"}}-{{yield to='inverse'}}</p>");
    env.registerPartial('test', "{{yield \"partial\"}}-{{yield to='inverse'}}");
    render(compile((_a = ["\n    {{#foo-bar as |source|}}from {{source}}{{/foo-bar}}\n    {{#foo-bar as |source|}}from {{source}}{{else}}inverse{{/foo-bar}}\n    {{foo-bar}}\n    {{#foo-bar-baz as |source|}}from {{source}}{{/foo-bar-baz}}\n    {{#foo-bar-baz as |source|}}from {{source}}{{else}}inverse{{/foo-bar-baz}}\n    {{foo-bar-baz}}\n  "], _a.raw = ["\n    {{#foo-bar as |source|}}from {{source}}{{/foo-bar}}\n    {{#foo-bar as |source|}}from {{source}}{{else}}inverse{{/foo-bar}}\n    {{foo-bar}}\n    {{#foo-bar-baz as |source|}}from {{source}}{{/foo-bar-baz}}\n    {{#foo-bar-baz as |source|}}from {{source}}{{else}}inverse{{/foo-bar-baz}}\n    {{foo-bar-baz}}\n  "], test_helpers_1.strip(_a))));
    test_helpers_1.equalTokens(root, (_b = ["\n    <p>from partial-</p>\n    <p>from partial-inverse</p>\n    <p>-</p>\n    <p>from partial--from layout-</p>\n    <p>from partial-inverse-from layout-inverse</p>\n    <p>---</p>\n  "], _b.raw = ["\n    <p>from partial-</p>\n    <p>from partial-inverse</p>\n    <p>-</p>\n    <p>from partial--from layout-</p>\n    <p>from partial-inverse-from layout-inverse</p>\n    <p>---</p>\n  "], test_helpers_1.strip(_b)));
    rerender(null, { assertStable: true });
    var _a, _b;
});
QUnit.test('dynamic partial with static content', function (assert) {
    var template = compile("Before {{partial name}} After");
    env.registerPartial('test', "<div>Testing</div>");
    render(template, { name: 'test' });
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
    rerender({ name: 'test' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
});
QUnit.test('nested dynamic partial with dynamic content', function (assert) {
    var template = compile("Before {{partial name}} After");
    env.registerPartial('test', "<div>Testing {{wat}} {{partial nest}}</div>");
    env.registerPartial('nested', "<div>Nested {{lol}}</div>");
    render(template, { name: 'test', nest: 'nested', wat: 'wat are', lol: 'you doing?' });
    test_helpers_1.equalTokens(root, "Before <div>Testing wat are <div>Nested you doing?</div></div> After");
    rerender({ name: 'test', nest: 'nested', wat: 'wat are', lol: 'you doing?' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Before <div>Testing wat are <div>Nested you doing?</div></div> After");
});
QUnit.test('dynamic partial with falsy value does not render', function (assert) {
    var template = compile("Before {{partial name}} After");
    render(template, { name: false });
    test_helpers_1.equalTokens(root, "Before <!----> After");
    rerender({ name: false }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Before <!----> After");
});
QUnit.test('static partial that does not exist asserts', function (assert) {
    var template = compile("Before {{partial 'test'}} After");
    assert.throws(function () {
        render(template);
    }, /Could not find a partial named "test"/);
});
QUnit.test('dynamic partial that does not exist does not render', function (assert) {
    var template = compile("Before {{partial name}} After");
    assert.throws(function () {
        render(template, { name: 'illuminati' });
    }, /Could not find a partial named "illuminati"/);
});
QUnit.test('dynamic partial with can change from falsy to real template', function (assert) {
    var template = compile("Before {{partial name}} After");
    env.registerPartial('test', "<div>Testing</div>");
    render(template, { name: false });
    test_helpers_1.equalTokens(root, "Before <!----> After");
    rerender({ name: false }, { assertStable: true });
    rerender({ name: 'test' });
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
    rerender({ name: false });
    test_helpers_1.equalTokens(root, "Before <!----> After");
    rerender({ name: 'test' });
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
    rerender({ name: null });
    test_helpers_1.equalTokens(root, "Before <!----> After");
    rerender({ name: 'test' });
    test_helpers_1.equalTokens(root, "Before <div>Testing</div> After");
    rerender({ name: undefined });
    test_helpers_1.equalTokens(root, "Before <!----> After");
});
QUnit.test('dynamic partial with self reference', function (assert) {
    var template = compile("{{partial name}}");
    env.registerPartial('test', "I know {{item}}. I have the best {{item}}s.");
    render(template, { name: 'test', item: 'partial' });
    test_helpers_1.equalTokens(root, "I know partial. I have the best partials.");
    rerender({ name: 'test', item: 'partial' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "I know partial. I have the best partials.");
});
QUnit.test('changing dynamic partial with self reference', function (assert) {
    var template = compile("{{partial name}}");
    env.registerPartial('weezy', "Ain't my birthday but I got my {{item}} on the cake.");
    env.registerPartial('birdman', "Respeck my {{item}}. When my {{item}} come up put some respeck on it.");
    render(template, { name: 'weezy', item: 'name' });
    test_helpers_1.equalTokens(root, "Ain't my birthday but I got my name on the cake.");
    rerender({ name: 'birdman', item: 'name' });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
    rerender({ name: 'birdman', item: 'name' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
});
QUnit.test('changing dynamic partial and changing reference values', function (assert) {
    var template = compile("{{partial name}}");
    env.registerPartial('weezy', "Ain't my birthday but I got my {{item}} on the cake.");
    env.registerPartial('birdman', "Respeck my {{item}}. When my {{item}} come up put some respeck on it.");
    render(template, { name: 'weezy', item: 'partial' });
    test_helpers_1.equalTokens(root, "Ain't my birthday but I got my partial on the cake.");
    rerender({ name: 'birdman', item: 'name' });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
    rerender({ name: 'birdman', item: 'name' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
});
QUnit.test('changing dynamic partial and changing references', function (assert) {
    var template = compile("{{partial name}}");
    env.registerPartial('weezy', "Ain't my birthday but I got my {{item}} on the cake.");
    env.registerPartial('birdman', "Respeck my {{noun}}. When my {{noun}} come up put some respeck on it.");
    render(template, { name: 'weezy', item: 'partial' });
    test_helpers_1.equalTokens(root, "Ain't my birthday but I got my partial on the cake.");
    rerender({ name: 'birdman', noun: 'name' });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
    rerender({ name: 'birdman', noun: 'name' }, { assertStable: true });
    test_helpers_1.equalTokens(root, "Respeck my name. When my name come up put some respeck on it.");
});
QUnit.skip('FIXME (bug?) dynamic partial with local reference', function (assert) {
    var template = compile("{{#each qualities key='id' as |quality|}}{{partial name}}. {{/each}}");
    env.registerPartial('test', "You {{quality}}");
    render(template, { name: 'test', qualities: ['smaht', 'loyal'] });
    test_helpers_1.equalTokens(root, "You smaht. You loyal. ");
    rerender({ name: 'test', qualities: ['smaht', 'loyal'] }, { assertStable: true });
    test_helpers_1.equalTokens(root, "You smaht. You loyal. ");
});
QUnit.test('partial without arguments throws', function (assert) {
    assert.throws(function () {
        compile("Before {{partial}} After");
    }, (_a = ["Partial found with no arguments. You must specify a template name."], _a.raw = ["Partial found with no arguments. You must specify a template name."], test_helpers_1.strip(_a)));
    var _a;
});
QUnit.test('partial with more than one argument throws', function (assert) {
    assert.throws(function () {
        compile("Before {{partial 'turnt' 'up'}} After");
    }, (_a = ["Partial found with more than one argument. You can only specify a single template."], _a.raw = ["Partial found with more than one argument. You can only specify a single template."], test_helpers_1.strip(_a)));
    var _a;
});
//# sourceMappingURL=data:application/json;base64,