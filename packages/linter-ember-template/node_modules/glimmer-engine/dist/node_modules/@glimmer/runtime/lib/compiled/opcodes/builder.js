"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var content = require("./content");
var vm = require("./vm");
var has_block_1 = require("../../compiled/expressions/has-block");
var util_1 = require("@glimmer/util");
var functions_1 = require("../../syntax/functions");
var expressions_1 = require("../expressions");
var compiler_1 = require("../../compiler");
var opcodes_1 = require("../../opcodes");
function appendOpcode(name, op1, op2, op3) {
    return opcodes_1.APPEND_OPCODES.construct(name, null, op1, op2, op3);
}
var Labels = (function () {
    function Labels() {
        this.labels = util_1.dict();
        this.jumps = [];
        this.ranges = [];
    }
    Labels.prototype.label = function (name, index) {
        this.labels[name] = index;
    };
    Labels.prototype.jump = function (at, Target, target) {
        this.jumps.push({ at: at, target: target, Target: Target });
    };
    Labels.prototype.range = function (at, Range, start, end) {
        this.ranges.push({ at: at, start: start, end: end, Range: Range });
    };
    Labels.prototype.patch = function (constants, opcodes) {
        for (var i = 0; i < this.jumps.length; i++) {
            var _a = this.jumps[i], at = _a.at, target = _a.target, Target = _a.Target;
            opcodes.set(at, opcodes_1.APPEND_OPCODES.construct(Target, null, this.labels[target]));
        }
        for (var i = 0; i < this.ranges.length; i++) {
            var _b = this.ranges[i], at = _b.at, start = _b.start, end = _b.end, Range = _b.Range;
            var slice = constants.slice([this.labels[start], this.labels[end] - 1]);
            opcodes.set(at, opcodes_1.APPEND_OPCODES.construct(Range, null, slice));
        }
    };
    return Labels;
}());
var BasicOpcodeBuilder = (function () {
    function BasicOpcodeBuilder(symbolTable, env, program) {
        this.symbolTable = symbolTable;
        this.env = env;
        this.program = program;
        this.labelsStack = new util_1.Stack();
        this.constants = env.constants;
        this.start = program.next;
    }
    Object.defineProperty(BasicOpcodeBuilder.prototype, "pos", {
        get: function () {
            return this.program.current;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasicOpcodeBuilder.prototype, "nextPos", {
        get: function () {
            return this.program.next;
        },
        enumerable: true,
        configurable: true
    });
    BasicOpcodeBuilder.prototype.opcode = function (name, op1, op2, op3) {
        this.push(appendOpcode(name, op1, op2, op3));
    };
    BasicOpcodeBuilder.prototype.push = function (op) {
        // console.log(`pushing ${op && op.type}`);
        if (op === null) {
            this.program.push([0, 0, 0, 0]);
        }
        else {
            this.program.push(op);
        }
    };
    BasicOpcodeBuilder.prototype.toSlice = function () {
        return [this.start, this.program.current];
    };
    Object.defineProperty(BasicOpcodeBuilder.prototype, "labels", {
        // helpers
        get: function () {
            return util_1.expect(this.labelsStack.current, 'bug: not in a label stack');
        },
        enumerable: true,
        configurable: true
    });
    BasicOpcodeBuilder.prototype.startLabels = function () {
        this.labelsStack.push(new Labels());
    };
    BasicOpcodeBuilder.prototype.stopLabels = function () {
        var label = util_1.expect(this.labelsStack.pop(), 'unbalanced push and pop labels');
        label.patch(this.constants, this.program);
    };
    // partials
    BasicOpcodeBuilder.prototype.putPartialDefinition = function (_definition) {
        var definition = this.constants.other(_definition);
        this.opcode(opcodes_1.OpcodeName.PutPartial, definition);
    };
    BasicOpcodeBuilder.prototype.putDynamicPartialDefinition = function () {
        this.opcode(opcodes_1.OpcodeName.PutDynamicPartial, this.constants.other(this.symbolTable));
    };
    BasicOpcodeBuilder.prototype.evaluatePartial = function () {
        this.opcode(opcodes_1.OpcodeName.EvaluatePartial, this.constants.other(this.symbolTable), this.constants.other(util_1.dict()));
    };
    // components
    BasicOpcodeBuilder.prototype.putComponentDefinition = function (definition) {
        this.opcode(opcodes_1.OpcodeName.PutComponent, this.other(definition));
    };
    BasicOpcodeBuilder.prototype.putDynamicComponentDefinition = function () {
        this.opcode(opcodes_1.OpcodeName.PutDynamicComponent);
    };
    BasicOpcodeBuilder.prototype.openComponent = function (args, shadow) {
        this.opcode(opcodes_1.OpcodeName.OpenComponent, this.args(args), shadow ? this.block(shadow) : 0);
    };
    BasicOpcodeBuilder.prototype.didCreateElement = function () {
        this.opcode(opcodes_1.OpcodeName.DidCreateElement);
    };
    BasicOpcodeBuilder.prototype.shadowAttributes = function () {
        this.opcode(opcodes_1.OpcodeName.ShadowAttributes);
        this.opcode(opcodes_1.OpcodeName.CloseBlock);
    };
    BasicOpcodeBuilder.prototype.didRenderLayout = function () {
        this.opcode(opcodes_1.OpcodeName.DidRenderLayout);
    };
    BasicOpcodeBuilder.prototype.closeComponent = function () {
        this.opcode(opcodes_1.OpcodeName.CloseComponent);
    };
    // content
    BasicOpcodeBuilder.prototype.dynamicContent = function (Opcode) {
        this.opcode(opcodes_1.OpcodeName.DynamicContent, this.other(Opcode));
    };
    BasicOpcodeBuilder.prototype.cautiousAppend = function () {
        this.dynamicContent(new content.OptimizedCautiousAppendOpcode());
    };
    BasicOpcodeBuilder.prototype.trustingAppend = function () {
        this.dynamicContent(new content.OptimizedTrustingAppendOpcode());
    };
    BasicOpcodeBuilder.prototype.guardedCautiousAppend = function (expression) {
        this.dynamicContent(new content.GuardedCautiousAppendOpcode(this.compileExpression(expression), this.symbolTable));
    };
    BasicOpcodeBuilder.prototype.guardedTrustingAppend = function (expression) {
        this.dynamicContent(new content.GuardedTrustingAppendOpcode(this.compileExpression(expression), this.symbolTable));
    };
    // dom
    BasicOpcodeBuilder.prototype.text = function (text) {
        this.opcode(opcodes_1.OpcodeName.Text, this.constants.string(text));
    };
    BasicOpcodeBuilder.prototype.openPrimitiveElement = function (tag) {
        this.opcode(opcodes_1.OpcodeName.OpenElement, this.constants.string(tag));
    };
    BasicOpcodeBuilder.prototype.openComponentElement = function (tag) {
        this.opcode(opcodes_1.OpcodeName.OpenComponentElement, this.constants.string(tag));
    };
    BasicOpcodeBuilder.prototype.openDynamicPrimitiveElement = function () {
        this.opcode(opcodes_1.OpcodeName.OpenDynamicElement);
    };
    BasicOpcodeBuilder.prototype.flushElement = function () {
        this.opcode(opcodes_1.OpcodeName.FlushElement);
    };
    BasicOpcodeBuilder.prototype.closeElement = function () {
        this.opcode(opcodes_1.OpcodeName.CloseElement);
    };
    BasicOpcodeBuilder.prototype.staticAttr = function (_name, _namespace, _value) {
        var name = this.constants.string(_name);
        var namespace = _namespace ? this.constants.string(_namespace) : 0;
        var value = this.constants.string(_value);
        this.opcode(opcodes_1.OpcodeName.StaticAttr, name, value, namespace);
    };
    BasicOpcodeBuilder.prototype.dynamicAttrNS = function (_name, _namespace, trusting) {
        var name = this.constants.string(_name);
        var namespace = this.constants.string(_namespace);
        this.opcode(opcodes_1.OpcodeName.DynamicAttrNS, name, namespace, trusting | 0);
    };
    BasicOpcodeBuilder.prototype.dynamicAttr = function (_name, trusting) {
        var name = this.constants.string(_name);
        this.opcode(opcodes_1.OpcodeName.DynamicAttr, name, trusting | 0);
    };
    BasicOpcodeBuilder.prototype.comment = function (_comment) {
        var comment = this.constants.string(_comment);
        this.opcode(opcodes_1.OpcodeName.Comment, comment);
    };
    BasicOpcodeBuilder.prototype.modifier = function (_name, _args) {
        var args = this.constants.expression(this.compile(_args));
        var _modifierManager = this.env.lookupModifier([_name], this.symbolTable);
        var modifierManager = this.constants.other(_modifierManager);
        var name = this.constants.string(_name);
        this.opcode(opcodes_1.OpcodeName.Modifier, name, modifierManager, args);
    };
    // lists
    BasicOpcodeBuilder.prototype.putIterator = function () {
        this.opcode(opcodes_1.OpcodeName.PutIterator);
    };
    BasicOpcodeBuilder.prototype.enterList = function (start, end) {
        this.push(null);
        this.labels.range(this.pos, opcodes_1.OpcodeName.EnterList, start, end);
    };
    BasicOpcodeBuilder.prototype.exitList = function () {
        this.opcode(opcodes_1.OpcodeName.ExitList);
    };
    BasicOpcodeBuilder.prototype.enterWithKey = function (start, end) {
        this.push(null);
        this.labels.range(this.pos, opcodes_1.OpcodeName.EnterWithKey, start, end);
    };
    BasicOpcodeBuilder.prototype.nextIter = function (end) {
        this.push(null);
        this.labels.jump(this.pos, opcodes_1.OpcodeName.NextIter, end);
    };
    // vm
    BasicOpcodeBuilder.prototype.openBlock = function (_args, _inner) {
        var args = this.constants.expression(this.compile(_args));
        var inner = this.constants.other(_inner);
        this.opcode(opcodes_1.OpcodeName.OpenBlock, inner, args);
    };
    BasicOpcodeBuilder.prototype.closeBlock = function () {
        this.opcode(opcodes_1.OpcodeName.CloseBlock);
    };
    BasicOpcodeBuilder.prototype.pushRemoteElement = function () {
        this.opcode(opcodes_1.OpcodeName.PushRemoteElement);
    };
    BasicOpcodeBuilder.prototype.popRemoteElement = function () {
        this.opcode(opcodes_1.OpcodeName.PopRemoteElement);
    };
    BasicOpcodeBuilder.prototype.popElement = function () {
        this.opcode(opcodes_1.OpcodeName.PopElement);
    };
    BasicOpcodeBuilder.prototype.label = function (name) {
        this.labels.label(name, this.nextPos);
    };
    BasicOpcodeBuilder.prototype.pushChildScope = function () {
        this.opcode(opcodes_1.OpcodeName.PushChildScope);
    };
    BasicOpcodeBuilder.prototype.popScope = function () {
        this.opcode(opcodes_1.OpcodeName.PopScope);
    };
    BasicOpcodeBuilder.prototype.pushDynamicScope = function () {
        this.opcode(opcodes_1.OpcodeName.PushDynamicScope);
    };
    BasicOpcodeBuilder.prototype.popDynamicScope = function () {
        this.opcode(opcodes_1.OpcodeName.PopDynamicScope);
    };
    BasicOpcodeBuilder.prototype.putNull = function () {
        this.opcode(opcodes_1.OpcodeName.Put, this.constants.NULL_REFERENCE);
    };
    BasicOpcodeBuilder.prototype.putValue = function (_expression) {
        var expr = this.constants.expression(this.compileExpression(_expression));
        this.opcode(opcodes_1.OpcodeName.EvaluatePut, expr);
    };
    BasicOpcodeBuilder.prototype.putArgs = function (_args) {
        var args = this.constants.expression(this.compile(_args));
        this.opcode(opcodes_1.OpcodeName.PutArgs, args);
    };
    BasicOpcodeBuilder.prototype.bindDynamicScope = function (_names) {
        this.opcode(opcodes_1.OpcodeName.BindDynamicScope, this.names(_names));
    };
    BasicOpcodeBuilder.prototype.bindPositionalArgs = function (_names, _symbols) {
        this.opcode(opcodes_1.OpcodeName.BindPositionalArgs, this.names(_names), this.symbols(_symbols));
    };
    BasicOpcodeBuilder.prototype.bindNamedArgs = function (_names, _symbols) {
        this.opcode(opcodes_1.OpcodeName.BindNamedArgs, this.names(_names), this.symbols(_symbols));
    };
    BasicOpcodeBuilder.prototype.bindBlocks = function (_names, _symbols) {
        this.opcode(opcodes_1.OpcodeName.BindBlocks, this.names(_names), this.symbols(_symbols));
    };
    BasicOpcodeBuilder.prototype.enter = function (enter, exit) {
        this.push(null);
        this.labels.range(this.pos, opcodes_1.OpcodeName.Enter, enter, exit);
    };
    BasicOpcodeBuilder.prototype.exit = function () {
        this.opcode(opcodes_1.OpcodeName.Exit);
    };
    BasicOpcodeBuilder.prototype.evaluate = function (_block) {
        var block = this.constants.block(_block);
        this.opcode(opcodes_1.OpcodeName.Evaluate, block);
    };
    BasicOpcodeBuilder.prototype.test = function (testFunc) {
        var _func;
        if (testFunc === 'const') {
            _func = vm.ConstTest;
        }
        else if (testFunc === 'simple') {
            _func = vm.SimpleTest;
        }
        else if (testFunc === 'environment') {
            _func = vm.EnvironmentTest;
        }
        else if (typeof testFunc === 'function') {
            _func = testFunc;
        }
        else {
            throw new Error('unreachable');
        }
        var func = this.constants.function(_func);
        this.opcode(opcodes_1.OpcodeName.Test, func);
    };
    BasicOpcodeBuilder.prototype.jump = function (target) {
        this.push(null);
        this.labels.jump(this.pos, opcodes_1.OpcodeName.Jump, target);
    };
    BasicOpcodeBuilder.prototype.jumpIf = function (target) {
        this.push(null);
        this.labels.jump(this.pos, opcodes_1.OpcodeName.JumpIf, target);
    };
    BasicOpcodeBuilder.prototype.jumpUnless = function (target) {
        this.push(null);
        this.labels.jump(this.pos, opcodes_1.OpcodeName.JumpUnless, target);
    };
    BasicOpcodeBuilder.prototype.names = function (_names) {
        var _this = this;
        var names = _names.map(function (n) { return _this.constants.string(n); });
        return this.constants.array(names);
    };
    BasicOpcodeBuilder.prototype.symbols = function (symbols) {
        return this.constants.array(symbols);
    };
    BasicOpcodeBuilder.prototype.other = function (value) {
        return this.constants.other(value);
    };
    BasicOpcodeBuilder.prototype.args = function (args) {
        return this.constants.expression(this.compile(args));
    };
    BasicOpcodeBuilder.prototype.block = function (block) {
        return this.constants.block(block);
    };
    return BasicOpcodeBuilder;
}());
exports.BasicOpcodeBuilder = BasicOpcodeBuilder;
function isCompilableExpression(expr) {
    return expr && typeof expr['compile'] === 'function';
}
var OpcodeBuilder = (function (_super) {
    __extends(OpcodeBuilder, _super);
    function OpcodeBuilder(symbolTable, env, program) {
        if (program === void 0) { program = env.program; }
        var _this = _super.call(this, symbolTable, env, program) || this;
        _this.component = new compiler_1.ComponentBuilder(_this);
        return _this;
    }
    OpcodeBuilder.prototype.compile = function (expr) {
        if (isCompilableExpression(expr)) {
            return expr.compile(this);
        }
        else {
            return expr;
        }
    };
    OpcodeBuilder.prototype.compileExpression = function (expression) {
        if (expression instanceof expressions_1.CompiledExpression) {
            return expression;
        }
        else {
            return functions_1.expr(expression, this);
        }
    };
    OpcodeBuilder.prototype.bindPositionalArgsForLocals = function (locals) {
        var symbols = Object.keys(locals).map(function (name) { return locals[name]; });
        this.opcode(opcodes_1.OpcodeName.BindPositionalArgs, this.symbols(symbols));
    };
    OpcodeBuilder.prototype.preludeForLayout = function (layout) {
        var symbols = layout.symbolTable.getSymbols();
        if (symbols.named) {
            var named_1 = symbols.named;
            var namedNames = Object.keys(named_1);
            var namedSymbols = namedNames.map(function (n) { return named_1[n]; });
            this.opcode(opcodes_1.OpcodeName.BindNamedArgs, this.names(namedNames), this.symbols(namedSymbols));
        }
        this.opcode(opcodes_1.OpcodeName.BindCallerScope);
        if (symbols.yields) {
            var yields_1 = symbols.yields;
            var yieldNames = Object.keys(yields_1);
            var yieldSymbols = yieldNames.map(function (n) { return yields_1[n]; });
            this.opcode(opcodes_1.OpcodeName.BindBlocks, this.names(yieldNames), this.symbols(yieldSymbols));
        }
        if (symbols.partialArgs) {
            this.opcode(opcodes_1.OpcodeName.BindPartialArgs, symbols.partialArgs);
        }
    };
    OpcodeBuilder.prototype.yield = function (args, to) {
        var yields, partial;
        var inner;
        if (yields = this.symbolTable.getSymbol('yields', to)) {
            inner = new has_block_1.CompiledGetBlockBySymbol(yields, to);
        }
        else if (partial = this.symbolTable.getPartialArgs()) {
            inner = new has_block_1.CompiledInPartialGetBlock(partial, to);
        }
        else {
            throw new Error('[BUG] ${to} is not a valid block name.');
        }
        this.openBlock(args, inner);
        this.closeBlock();
    };
    // TODO
    // come back to this
    OpcodeBuilder.prototype.labelled = function (args, callback) {
        if (args)
            this.putArgs(args);
        this.startLabels();
        this.enter('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.stopLabels();
    };
    // TODO
    // come back to this
    OpcodeBuilder.prototype.iter = function (callback) {
        this.startLabels();
        this.enterList('BEGIN', 'END');
        this.label('ITER');
        this.nextIter('BREAK');
        this.enterWithKey('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.jump('ITER');
        this.label('BREAK');
        this.exitList();
        this.stopLabels();
    };
    // TODO
    // come back to this
    OpcodeBuilder.prototype.unit = function (callback) {
        this.startLabels();
        callback(this);
        this.stopLabels();
    };
    return OpcodeBuilder;
}(BasicOpcodeBuilder));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = OpcodeBuilder;
//# sourceMappingURL=data:application/json;base64,