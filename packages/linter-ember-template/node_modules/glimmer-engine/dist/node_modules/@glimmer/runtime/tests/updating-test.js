"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var runtime_1 = require("@glimmer/runtime");
var test_helpers_1 = require("@glimmer/test-helpers");
var reference_1 = require("@glimmer/reference");
var object_reference_1 = require("@glimmer/object-reference");
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var XLINK_NAMESPACE = 'http://www.w3.org/1999/xlink';
var XHTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
/*
 * Phantom 1.9 does not serialize namespaced attributes correctly. The namespace
 * prefix is incorrectly stripped off.
 */
var serializesNSAttributesCorrectly = (function () {
    var div = document.createElement('div');
    var span = document.createElement('span');
    span.setAttributeNS('http://www.w3.org/XML/1998/namespace', 'xml:lang', 'en-uk');
    div.appendChild(span);
    return div.innerHTML === '<span xml:lang="en-uk"></span>';
})();
var hooks, root;
var env;
var self;
var result;
function compile(template) {
    return env.compile(template);
}
function rootElement() {
    return env.getDOM().createElement('div');
}
function commonSetup() {
    env = new test_helpers_1.TestEnvironment(); // TODO: Support SimpleDOM
    root = rootElement();
    root.setAttribute('debug-root', 'true');
}
function render(template, context, view) {
    if (context === void 0) { context = {}; }
    if (view === void 0) { view = null; }
    self = new object_reference_1.UpdatableReference(context);
    env.begin();
    result = template.render(self, root, new test_helpers_1.TestDynamicScope());
    env.commit();
    assertInvariants(result);
    return result;
}
function rerender(context) {
    if (context === void 0) { context = null; }
    if (context !== null)
        self.update(context);
    env.begin();
    result.rerender();
    env.commit();
}
function getNodeByClassName(className) {
    var itemNode = root.querySelector("." + className);
    ok(itemNode, "Expected node with class='" + className + "'");
    return itemNode;
}
function getFirstChildOfNode(className) {
    var itemNode = getNodeByClassName(className);
    ok(itemNode, "Expected child node of node with class='" + className + "', but no parent node found");
    var childNode = itemNode && itemNode.firstChild;
    ok(childNode, "Expected child node of node with class='" + className + "', but not child node found");
    return childNode;
}
QUnit.module("Updating", {
    setup: commonSetup
});
test("updating a single curly", function () {
    var object = { value: 'hello world' };
    var template = compile('<div><p>{{value}}</p></div>');
    render(template, object);
    var valueNode = root.firstChild.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "no change");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
    object.value = 'goodbye world';
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>goodbye world</p></div>', "After updating and dirtying");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
});
test("updating a single curly with siblings", function () {
    var value = 'brave new ';
    var context = { value: value };
    var getDiv = function () { return root.firstChild; };
    var template = compile('<div>hello {{value}}world</div>');
    render(template, context);
    equal(getDiv().firstChild.textContent, 'hello ');
    equal(getDiv().childNodes[1].textContent, 'brave new ');
    equal(getDiv().lastChild.textContent, 'world');
    rerender();
    equal(getDiv().firstChild.textContent, 'hello ');
    equal(getDiv().childNodes[1].textContent, 'brave new ');
    equal(getDiv().lastChild.textContent, 'world');
    context.value = 'another ';
    rerender();
    equal(getDiv().firstChild.textContent, 'hello ');
    equal(getDiv().childNodes[1].textContent, 'another ');
    equal(getDiv().lastChild.textContent, 'world');
    rerender({ value: value });
    equal(getDiv().firstChild.textContent, 'hello ');
    equal(getDiv().childNodes[1].textContent, 'brave new ');
    equal(getDiv().lastChild.textContent, 'world');
});
test("null and undefined produces empty text nodes", function () {
    var object = { v1: null, v2: undefined };
    var template = compile('<div><p>{{v1}}</p><p>{{v2}}</p></div>');
    render(template, object);
    var valueNode1 = root.firstChild.firstChild.firstChild;
    var valueNode2 = root.firstChild.lastChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><p></p><p></p></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p></p><p></p></div>', "no change");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode1, "The text node was not blown away");
    strictEqual(root.firstChild.lastChild.firstChild, valueNode2, "The text node was not blown away");
    object.v1 = 'hello';
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello</p><p></p></div>', "After updating and dirtying");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode1, "The text node was not blown away");
    strictEqual(root.firstChild.lastChild.firstChild, valueNode2, "The text node was not blown away");
    object.v2 = 'world';
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello</p><p>world</p></div>', "After updating and dirtying");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode1, "The text node was not blown away");
    strictEqual(root.firstChild.lastChild.firstChild, valueNode2, "The text node was not blown away");
    object.v1 = null;
    object.v2 = undefined;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p></p><p></p></div>', "Reset");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode1, "The text node was not blown away");
    strictEqual(root.firstChild.lastChild.firstChild, valueNode2, "The text node was not blown away");
});
test("weird paths", function () {
    var context = {
        "": "empty string",
        "1": "1",
        "undefined": "undefined",
        "null": "null",
        "true": "true",
        "false": "false",
        "this": "this",
        "foo.bar": "foo.bar",
        "nested": null
    };
    context.nested = context;
    var getDiv = function () { return root.firstChild; };
    var template = compile((_a = ["\n    <div>\n      [{{[]}}]\n      [{{[1]}}]\n      [{{[undefined]}}]\n      [{{[null]}}]\n      [{{[true]}}]\n      [{{[false]}}]\n      [{{[this]}}]\n      [{{[foo.bar]}}]\n\n      [{{nested.[]}}]\n      [{{nested.[1]}}]\n      [{{nested.[undefined]}}]\n      [{{nested.[null]}}]\n      [{{nested.[true]}}]\n      [{{nested.[false]}}]\n      [{{nested.[this]}}]\n      [{{nested.[foo.bar]}}]\n    </div>\n  "], _a.raw = ["\n    <div>\n      [{{[]}}]\n      [{{[1]}}]\n      [{{[undefined]}}]\n      [{{[null]}}]\n      [{{[true]}}]\n      [{{[false]}}]\n      [{{[this]}}]\n      [{{[foo.bar]}}]\n\n      [{{nested.[]}}]\n      [{{nested.[1]}}]\n      [{{nested.[undefined]}}]\n      [{{nested.[null]}}]\n      [{{nested.[true]}}]\n      [{{nested.[false]}}]\n      [{{nested.[this]}}]\n      [{{nested.[foo.bar]}}]\n    </div>\n  "], test_helpers_1.stripTight(_a)));
    render(template, context);
    equal(getDiv().textContent, (_b = ["\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n  "], _b.raw = ["\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n  "], test_helpers_1.stripTight(_b)));
    rerender();
    equal(getDiv().textContent, (_c = ["\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n  "], _c.raw = ["\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n  "], test_helpers_1.stripTight(_c)));
    context[""] = "EMPTY STRING";
    context["1"] = "ONE";
    context["undefined"] = "UNDEFINED";
    context["null"] = "NULL";
    context["true"] = "TRUE";
    context["false"] = "FALSE";
    context["this"] = "THIS";
    context["foo.bar"] = "FOO.BAR";
    rerender();
    equal(getDiv().textContent, (_d = ["\n    [EMPTY STRING]\n    [ONE]\n    [UNDEFINED]\n    [NULL]\n    [TRUE]\n    [FALSE]\n    [THIS]\n    [FOO.BAR]\n\n    [EMPTY STRING]\n    [ONE]\n    [UNDEFINED]\n    [NULL]\n    [TRUE]\n    [FALSE]\n    [THIS]\n    [FOO.BAR]\n  "], _d.raw = ["\n    [EMPTY STRING]\n    [ONE]\n    [UNDEFINED]\n    [NULL]\n    [TRUE]\n    [FALSE]\n    [THIS]\n    [FOO.BAR]\n\n    [EMPTY STRING]\n    [ONE]\n    [UNDEFINED]\n    [NULL]\n    [TRUE]\n    [FALSE]\n    [THIS]\n    [FOO.BAR]\n  "], test_helpers_1.stripTight(_d)));
    context = {
        "": "empty string",
        "1": "1",
        "undefined": "undefined",
        "null": "null",
        "true": "true",
        "false": "false",
        "this": "this",
        "foo.bar": "foo.bar",
        "nested": null
    };
    context.nested = context;
    rerender(context);
    equal(getDiv().textContent, (_e = ["\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n  "], _e.raw = ["\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n\n    [empty string]\n    [1]\n    [undefined]\n    [null]\n    [true]\n    [false]\n    [this]\n    [foo.bar]\n  "], test_helpers_1.stripTight(_e)));
    var _a, _b, _c, _d, _e;
});
test("updating a single trusting curly", function () {
    var value = '<p>hello world</p>';
    var object = { value: value };
    var template = compile('<div>{{{value}}}</div>');
    render(template, object);
    var valueNode = root.firstChild.firstChild.firstChild;
    test_helpers_1.equalTokens(root, "<div>" + value + "</div>", "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "no change");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
    object.value = '<span>goodbye world</span>';
    rerender();
    test_helpers_1.equalTokens(root, "<div>" + object.value + "</div>", "After updating and dirtying");
    notStrictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was blown away");
    object.value = 'a <span>good man</span> is hard to <b>fund</b>';
    rerender();
    test_helpers_1.equalTokens(root, "<div>" + object.value + "</div>", "After updating with many nodes and dirtying");
    rerender({ value: value });
    test_helpers_1.equalTokens(root, "<div>" + value + "</div>", "no change");
});
test("updating a single trusting curly with siblings", function () {
    var value = '<b>brave new </b>';
    var context = { value: value };
    var getDiv = function () { return root.firstChild; };
    var template = compile('<div>hello {{{value}}}world</div>');
    render(template, context);
    test_helpers_1.equalTokens(root, '<div>hello <b>brave new </b>world</div>', 'Initial render');
    rerender();
    test_helpers_1.equalTokens(root, '<div>hello <b>brave new </b>world</div>', 'rerender');
    context.value = 'big <b>wide</b> ';
    rerender();
    equal(getDiv().firstChild.textContent, 'hello ');
    equal(getDiv().childNodes[1].textContent, 'big ');
    equal(getDiv().childNodes[2].innerHTML, 'wide');
    equal(getDiv().childNodes[3].textContent, ' ');
    equal(getDiv().lastChild.textContent, 'world');
    context.value = 'another ';
    rerender();
    equal(getDiv().firstChild.textContent, 'hello ');
    equal(getDiv().childNodes[1].textContent, 'another ');
    equal(getDiv().lastChild.textContent, 'world');
    rerender({ value: value });
    test_helpers_1.equalTokens(root, '<div>hello <b>brave new </b>world</div>', 'rerender');
});
test("updating a single trusting curly with previous sibling", function () {
    var value = '<b>brave new </b>';
    var context = { value: value };
    var getDiv = function () { return root.firstChild; };
    var template = compile('<div>hello {{{value}}}</div>');
    render(template, context);
    test_helpers_1.equalTokens(root, '<div>hello <b>brave new </b></div>', 'Initial render');
    rerender();
    test_helpers_1.equalTokens(root, '<div>hello <b>brave new </b></div>', 'rerender');
    context.value = 'another ';
    rerender();
    equal(getDiv().firstChild.textContent, 'hello ');
    test_helpers_1.equalTokens(getDiv().lastChild.textContent, 'another ');
    rerender({ value: value });
    test_helpers_1.equalTokens(root, '<div>hello <b>brave new </b></div>', 'rerender');
});
// This is to catch a regression about not caching lastValue correctly
test("Cycling between two values in a trusting curly", function () {
    var a = '<p>A</p>';
    var b = '<p>B</p>';
    var object = { value: a };
    var template = compile('<div>{{{value}}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><p>A</p></div>', "Initial render");
    object.value = b;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>B</p></div>', "Updating");
    // Change it back
    object.value = a;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>A</p></div>', "Updating");
    // Change it back
    object.value = b;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>B</p></div>', "Updating");
});
test("updating a curly with a safe and unsafe string", function () {
    var safeString = {
        string: '<p>hello world</p>',
        toHTML: function () { return this.string; },
        toString: function () { return this.string; }
    };
    var unsafeString = '<b>Big old world!</b>';
    var object = {
        value: safeString
    };
    var template = compile('<div>{{value}}</div>');
    render(template, object);
    var valueNode = root.firstChild.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "no change");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
    object.value = unsafeString;
    rerender();
    test_helpers_1.equalTokens(root, '<div>&lt;b&gt;Big old world!&lt;/b&gt;</div>', "After replacing with unsafe string");
    notStrictEqual(root.firstChild.firstChild, valueNode, "The text node was blown away");
    object.value = safeString;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "original input causes no problem");
});
function makeSafeString(value) {
    return {
        string: value,
        toHTML: function () { return this.string; },
        toString: function () { return this.string; }
    };
}
// Test cases to matrix:
// const helper returns const SafeString
// non-const
// safe string
// unsafe string
// swapping between safe and unsafe
// swapping between unsafe and safe
function makeElement(tag, content) {
    var el = document.createElement(tag);
    el.appendChild(document.createTextNode(content));
    return el;
}
function makeFragment(nodes) {
    var frag = document.createDocumentFragment();
    nodes.forEach(function (node) { return frag.appendChild(node); });
    return frag;
}
[{
        name: 'double curlies',
        template: '<div>{{value}}</div>',
        values: [{
                input: 'hello',
                expected: '<div>hello</div>',
                description: 'plain string'
            }, {
                input: '<b>hello</b>',
                expected: '<div>&lt;b&gt;hello&lt;/b&gt;</div>',
                description: 'string containing HTML'
            }, {
                input: null,
                expected: '<div></div>',
                description: 'null literal'
            }, {
                input: undefined,
                expected: '<div></div>',
                description: 'undefined literal'
            }, {
                input: makeSafeString('<b>hello</b>'),
                expected: '<div><b>hello</b></div>',
                description: 'safe string containing HTML'
            }, {
                input: makeElement('p', 'hello'),
                expected: '<div><p>hello</p></div>',
                description: 'DOM node containing and element with text'
            }, {
                input: makeFragment([makeElement('p', 'one'), makeElement('p', 'two')]),
                expected: '<div><p>one</p><p>two</p></div>',
                description: 'DOM fragment containing multiple nodes'
            }, {
                input: 'not modified',
                expected: '<div>not modified</div>',
                description: 'plain string (not modified, first render)'
            }, {
                input: 'not modified',
                expected: '<div>not modified</div>',
                description: 'plain string (not modified, second render)'
            }, {
                input: 0,
                expected: '<div>0</div>',
                description: 'number literal (0)'
            }, {
                input: true,
                expected: '<div>true</div>',
                description: 'boolean literal (true)'
            }, {
                input: {
                    toString: function () {
                        return 'I am an Object';
                    }
                },
                expected: '<div>I am an Object</div>',
                description: 'object with a toString function'
            }]
    }, {
        name: 'triple curlies',
        template: '<div>{{{value}}}</div>',
        values: [{
                input: 'hello',
                expected: '<div>hello</div>',
                description: 'plain string'
            }, {
                input: '<b>hello</b>',
                expected: '<div><b>hello</b></div>',
                description: 'string containing HTML'
            }, {
                input: null,
                expected: '<div></div>',
                description: 'null literal'
            }, {
                input: undefined,
                expected: '<div></div>',
                description: 'undefined literal'
            }, {
                input: makeSafeString('<b>hello</b>'),
                expected: '<div><b>hello</b></div>',
                description: 'safe string containing HTML'
            }, {
                input: makeElement('p', 'hello'),
                expected: '<div><p>hello</p></div>',
                description: 'DOM node containing and element with text'
            }, {
                input: makeFragment([makeElement('p', 'one'), makeElement('p', 'two')]),
                expected: '<div><p>one</p><p>two</p></div>',
                description: 'DOM fragment containing multiple nodes'
            }, {
                input: 'not modified',
                expected: '<div>not modified</div>',
                description: 'plain string (not modified, first render)'
            }, {
                input: 'not modified',
                expected: '<div>not modified</div>',
                description: 'plain string (not modified, second render)'
            }, {
                input: 0,
                expected: '<div>0</div>',
                description: 'number literal (0)'
            }, {
                input: true,
                expected: '<div>true</div>',
                description: 'boolean literal (true)'
            }, {
                input: {
                    toString: function () {
                        return 'I am an Object';
                    }
                },
                expected: '<div>I am an Object</div>',
                description: 'object with a toString function'
            }]
    }].forEach(function (config) {
    test("updating " + config.name + " produces expected result", function () {
        var template = compile(config.template);
        var context = {
            value: undefined
        };
        config.values.forEach(function (testCase, index) {
            context.value = testCase.input;
            if (index === 0) {
                render(template, context);
                test_helpers_1.equalTokens(root, testCase.expected, "expected initial render (" + testCase.description + ")");
            }
            else {
                rerender();
                test_helpers_1.equalTokens(root, testCase.expected, "expected updated render (" + testCase.description + ")");
            }
        });
    });
});
test("updating a triple curly with a safe and unsafe string", function () {
    var safeString = makeSafeString('<p>hello world</p>');
    var unsafeString = '<b>Big old world!</b>';
    var object = {
        value: safeString
    };
    var template = compile('<div>{{{value}}}</div>');
    render(template, object);
    var valueNode = root.firstChild.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "no change");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The nodes were not blown away");
    object.value = unsafeString;
    rerender();
    test_helpers_1.equalTokens(root, '<div><b>Big old world!</b></div>', "Normal strings may contain HTML");
    notStrictEqual(root.firstChild.firstChild.firstChild, valueNode, "The nodes were blown away");
    object.value = safeString;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "original input causes no problem");
});
test("triple curlies with empty string initial value", function (assert) {
    var input = {
        value: ''
    };
    var template = compile('<div>{{{value}}}</div>');
    render(template, input);
    test_helpers_1.equalTokens(root, '<div></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div></div>', "no change");
    input.value = '<b>Bold and spicy</b>';
    rerender();
    test_helpers_1.equalTokens(root, '<div><b>Bold and spicy</b></div>', "markup is updated");
    input.value = '';
    rerender();
    test_helpers_1.equalTokens(root, '<div></div>', "back to empty string");
});
var ValueReference = (function (_super) {
    __extends(ValueReference, _super);
    function ValueReference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ValueReference.prototype.get = function () {
        return runtime_1.UNDEFINED_REFERENCE;
    };
    return ValueReference;
}(reference_1.ConstReference));
test("double curlies with const SafeString", function (assert) {
    var rawString = '<b>bold</b> and spicy';
    env.registerInternalHelper('const-foobar', function (vm, args) {
        return new ValueReference(makeSafeString(rawString));
    });
    var template = compile('<div>{{const-foobar}}</div>');
    var input = {};
    render(template, input);
    var valueNode = root.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><b>bold</b> and spicy</div>', "initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><b>bold</b> and spicy</div>', "no change");
    strictEqual(root.firstChild.firstChild, valueNode, "The nodes were not blown away");
});
test("double curlies with const Node", function (assert) {
    var rawString = '<b>bold</b> and spicy';
    env.registerInternalHelper('const-foobar', function (vm, args) {
        return new ValueReference(document.createTextNode(rawString));
    });
    var template = compile('<div>{{const-foobar}}</div>');
    var input = {};
    render(template, input);
    var valueNode = root.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div>&lt;b&gt;bold&lt;/b&gt; and spicy</div>', "initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div>&lt;b&gt;bold&lt;/b&gt; and spicy</div>', "no change");
    strictEqual(root.firstChild.firstChild, valueNode, "The node was not blown away");
});
test("triple curlies with const SafeString", function (assert) {
    var rawString = '<b>bold</b> and spicy';
    env.registerInternalHelper('const-foobar', function (vm, args) {
        return new ValueReference(makeSafeString(rawString));
    });
    var template = compile('<div>{{{const-foobar}}}</div>');
    var input = {};
    render(template, input);
    var valueNode = root.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><b>bold</b> and spicy</div>', "initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><b>bold</b> and spicy</div>', "no change");
    strictEqual(root.firstChild.firstChild, valueNode, "The nodes were not blown away");
});
test("triple curlies with const Node", function (assert) {
    var rawString = '<b>bold</b> and spicy';
    env.registerInternalHelper('const-foobar', function (vm, args) {
        return new ValueReference(document.createTextNode(rawString));
    });
    var template = compile('<div>{{{const-foobar}}}</div>');
    var input = {};
    render(template, input);
    var valueNode = root.firstChild;
    test_helpers_1.equalTokens(root, '<div>&lt;b&gt;bold&lt;/b&gt; and spicy</div>', "initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div>&lt;b&gt;bold&lt;/b&gt; and spicy</div>', "no change");
    strictEqual(root.firstChild, valueNode, "The node was not blown away");
});
test("helpers can add destroyables", function (assert) {
    var destroyable = {
        count: 0,
        destroy: function () {
            this.count++;
        }
    };
    env.registerInternalHelper('destroy-me', function (vm, args) {
        vm.newDestroyable(destroyable);
        return runtime_1.PrimitiveReference.create('destroy me!');
    });
    var template = compile('<div>{{destroy-me}}</div>');
    render(template, {});
    test_helpers_1.equalTokens(root, '<div>destroy me!</div>', 'initial render');
    strictEqual(destroyable.count, 0, 'not destroyed');
    rerender();
    test_helpers_1.equalTokens(root, '<div>destroy me!</div>', 'no change');
    strictEqual(destroyable.count, 0, 'not destroyed');
    result.destroy();
    strictEqual(destroyable.count, 1, 'is destroyed');
});
test("helpers passed as arguments to {{#if}} are not torn down when switching between blocks", function (assert) {
    var options = {
        template: '{{#if (stateful-foo)}}Yes{{/if}}',
        truthyValue: true,
        falsyValue: false
    };
    testStatefulHelper(assert, options);
});
test("helpers passed as arguments to {{#unless}} are not torn down when switching between blocks", function (assert) {
    var options = {
        template: '{{#unless (stateful-foo)}}Yes{{/unless}}',
        truthyValue: false,
        falsyValue: true
    };
    testStatefulHelper(assert, options);
});
test("helpers passed as arguments to {{#with}} are not torn down when switching between blocks", function (assert) {
    var options = {
        template: '{{#with (stateful-foo) as |unused|}}Yes{{/with}}',
        truthyValue: {},
        falsyValue: null
    };
    testStatefulHelper(assert, options);
});
test("helpers passed as arguments to {{#each}} are not torn down when switching between blocks", function (assert) {
    var options = {
        template: '{{#each (stateful-foo) key="@index" as |unused|}}Yes{{/each}}',
        truthyValue: [1],
        falsyValue: null
    };
    testStatefulHelper(assert, options);
});
test("helpers passed as arguments to {{partial}} are not torn down when switching between blocks", function (assert) {
    env.registerPartial('yasss', 'Yes');
    env.registerPartial('noooo', '');
    var options = {
        template: '{{partial (stateful-foo)}}',
        truthyValue: 'yasss',
        falsyValue: 'noooo'
    };
    testStatefulHelper(assert, options);
});
test("helpers passed as arguments to {{component}} are not torn down when switching between blocks", function (assert) {
    env.registerBasicComponent('x-yasss', test_helpers_1.BasicComponent, 'Yes');
    var options = {
        template: '{{component (stateful-foo)}}',
        truthyValue: 'x-yasss',
        falsyValue: null
    };
    testStatefulHelper(assert, options);
});
test("helpers passed as arguments to {{#-in-element}} are not torn down when switching between blocks", function (assert) {
    var externalElement = document.createElement('div');
    var options = {
        template: '{{#-in-element (stateful-foo)}}Yes{{/-in-element}}',
        truthyValue: externalElement,
        falsyValue: null,
        element: externalElement
    };
    testStatefulHelper(assert, options);
});
function testStatefulHelper(assert, _a) {
    var template = _a.template, truthyValue = _a.truthyValue, falsyValue = _a.falsyValue, _b = _a.element, element = _b === void 0 ? root : _b;
    var didCreate = 0;
    var didDestroy = 0;
    var reference;
    env.registerInternalHelper('stateful-foo', function (vm, args) {
        didCreate++;
        vm.newDestroyable({
            destroy: function () {
                didDestroy++;
            }
        });
        return reference = new object_reference_1.UpdatableReference(truthyValue);
    });
    assert.strictEqual(didCreate, 0, 'didCreate: before render');
    assert.strictEqual(didDestroy, 0, 'didDestroy: before render');
    render(compile(template), {});
    assert.equal(element.textContent, 'Yes', 'initial render');
    assert.strictEqual(didCreate, 1, 'didCreate: after initial render');
    assert.strictEqual(didDestroy, 0, 'didDestroy: after initial render');
    rerender();
    assert.equal(element.textContent, 'Yes', 'after no-op re-render');
    assert.strictEqual(didCreate, 1, 'didCreate: after no-op re-render');
    assert.strictEqual(didDestroy, 0, 'didDestroy: after no-op re-render');
    reference.update(falsyValue);
    rerender();
    assert.strictEqual(element.textContent, '', 'after switching to falsy');
    assert.strictEqual(didCreate, 1, 'didCreate: after switching to falsy');
    assert.strictEqual(didDestroy, 0, 'didDestroy: after switching to falsy');
    reference.update(truthyValue);
    rerender();
    assert.equal(element.textContent, 'Yes', 'after reset');
    assert.strictEqual(didCreate, 1, 'didCreate: after reset');
    assert.strictEqual(didDestroy, 0, 'didDestroy: after reset');
}
test("updating a curly with this", function () {
    var object = { value: 'hello world' };
    var template = compile('<div><p>{{this.value}}</p></div>');
    render(template, object);
    var valueNode = root.firstChild.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "no change");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
    object.value = 'goodbye world';
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>goodbye world</p></div>', "After updating and dirtying");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
});
test("a simple implementation of a dirtying rerender", function () {
    var object = { condition: true, value: 'hello world' };
    var template = compile('<div>{{#if condition}}<p>{{value}}</p>{{else}}<p>Nothing</p>{{/if}}</div>');
    render(template, object);
    var valueNode = root.firstChild.firstChild.firstChild;
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "After dirtying but not updating");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
    // Even though the #if was stable, a dirty child node is updated
    object.value = 'goodbye world';
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>goodbye world</p></div>', "After updating and dirtying");
    strictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
    object.condition = false;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>Nothing</p></div>', "And then dirtying");
    QUnit.notStrictEqual(root.firstChild.firstChild.firstChild, valueNode, "The text node was not blown away");
});
test('The if helper should consider an empty array falsy', function () {
    var object = { condition: [], value: 'hello world' };
    var template = compile('<div>{{#if condition}}<p>{{value}}</p>{{else}}<p>Nothing</p>{{/if}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><p>Nothing</p></div>');
    object.condition.push('thing');
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    object.condition.pop();
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>Nothing</p></div>');
});
test("a simple implementation of a dirtying rerender without inverse", function () {
    var object = { condition: true, value: 'hello world' };
    var template = compile('<div>{{#if condition}}<p>{{value}}</p>{{/if}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    object.condition = false;
    rerender();
    test_helpers_1.equalTokens(root, '<div><!----></div>', "If the condition is false, the morph becomes empty");
    object.condition = true;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "If the condition is true, the morph repopulates");
});
test('The unless helper without inverse', function () {
    var object = { condition: true, value: 'hello world' };
    var template = compile('<div>{{#unless condition}}<p>{{value}}</p>{{/unless}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><!----></div>', "Initial render");
    object.condition = false;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "If the condition is false, the morph becomes populated");
    object.condition = true;
    rerender();
    test_helpers_1.equalTokens(root, '<div><!----></div>', "If the condition is true, the morph unpopulated");
});
test('The unless helper with inverse', function () {
    var object = { condition: true, value: 'hello world' };
    var template = compile('<div>{{#unless condition}}<p>{{value}}</p>{{else}}<p>Nothing</p>{{/unless}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><p>Nothing</p></div>', "Initial render");
    object.condition = false;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "If the condition is false, the default renders");
    object.condition = true;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>Nothing</p></div>', "If the condition is true, the inverse renders");
});
test('The unless helper should consider an empty array falsy', function () {
    var object = { condition: [], value: 'hello world' };
    var template = compile('<div>{{#unless condition}}<p>{{value}}</p>{{else}}<p>Nothing</p>{{/unless}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "Initial render");
    object.condition.push(1);
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>Nothing</p></div>', "If the condition is true, the inverse renders");
    object.condition.pop();
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "If the condition is false, the default renders");
});
test("a conditional that is false on the first run", function (assert) {
    var object = { condition: false, value: 'hello world' };
    var template = compile('<div>{{#if condition}}<p>{{value}}</p>{{/if}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><!----></div>', "Initial render");
    object.condition = true;
    rerender();
    test_helpers_1.equalTokens(root, '<div><p>hello world</p></div>', "If the condition is true, the morph populates");
    object.condition = false;
    rerender();
    test_helpers_1.equalTokens(root, '<div><!----></div>', "If the condition is false, the morph is empty");
});
test("block arguments", function (assert) {
    var template = compile("<div>{{#with person.name.first as |f|}}{{f}}{{/with}}</div>");
    var object = { person: { name: { first: "Godfrey", last: "Chan" } } };
    render(template, object);
    test_helpers_1.equalTokens(root, '<div>Godfrey</div>', "Initial render");
    object.person.name.first = "Godfreak";
    rerender();
    test_helpers_1.equalTokens(root, '<div>Godfreak</div>', "After updating");
    rerender({ person: { name: { first: "Godfrey", last: "Chan" } } });
    test_helpers_1.equalTokens(root, '<div>Godfrey</div>', "After reset");
});
test("block arguments should have higher presedence than helpers", function (assert) {
    env.registerHelper('foo', function () { return 'foo-helper'; });
    env.registerHelper('bar', function () { return 'bar-helper'; });
    env.registerHelper('echo', function (args) { return args[0]; });
    var template = compile((_a = ["\n    <div>\n      foo: \"{{foo}}\";\n      bar: \"{{bar}}\";\n      value: \"{{value}}\";\n      echo foo: \"{{echo foo}}\";\n      echo bar: \"{{echo bar}}\";\n      echo value: \"{{echo value}}\";\n\n      -----\n\n      {{#with value as |foo|}}\n        foo: \"{{foo}}\";\n        bar: \"{{bar}}\";\n        value: \"{{value}}\";\n        echo foo: \"{{echo foo}}\";\n        echo bar: \"{{echo bar}}\";\n        echo value: \"{{echo value}}\";\n\n        -----\n\n        {{#with foo as |bar|}}\n          foo: \"{{foo}}\";\n          bar: \"{{bar}}\";\n          value: \"{{value}}\";\n          echo foo: \"{{echo foo}}\";\n          echo bar: \"{{echo bar}}\";\n          echo value: \"{{echo value}}\";\n        {{/with}}\n      {{/with}}\n\n      -----\n\n      {{#with value as |bar|}}\n        foo: \"{{foo}}\";\n        bar: \"{{bar}}\";\n        value: \"{{value}}\";\n        echo foo: \"{{echo foo}}\";\n        echo bar: \"{{echo bar}}\";\n        echo value: \"{{echo value}}\";\n      {{/with}}\n    </div>\n  "], _a.raw = ["\n    <div>\n      foo: \"{{foo}}\";\n      bar: \"{{bar}}\";\n      value: \"{{value}}\";\n      echo foo: \"{{echo foo}}\";\n      echo bar: \"{{echo bar}}\";\n      echo value: \"{{echo value}}\";\n\n      -----\n\n      {{#with value as |foo|}}\n        foo: \"{{foo}}\";\n        bar: \"{{bar}}\";\n        value: \"{{value}}\";\n        echo foo: \"{{echo foo}}\";\n        echo bar: \"{{echo bar}}\";\n        echo value: \"{{echo value}}\";\n\n        -----\n\n        {{#with foo as |bar|}}\n          foo: \"{{foo}}\";\n          bar: \"{{bar}}\";\n          value: \"{{value}}\";\n          echo foo: \"{{echo foo}}\";\n          echo bar: \"{{echo bar}}\";\n          echo value: \"{{echo value}}\";\n        {{/with}}\n      {{/with}}\n\n      -----\n\n      {{#with value as |bar|}}\n        foo: \"{{foo}}\";\n        bar: \"{{bar}}\";\n        value: \"{{value}}\";\n        echo foo: \"{{echo foo}}\";\n        echo bar: \"{{echo bar}}\";\n        echo value: \"{{echo value}}\";\n      {{/with}}\n    </div>\n  "], test_helpers_1.trimLines(_a)));
    var object = { foo: 'foo-value', bar: 'bar-value', value: 'value-value' };
    render(template, object);
    test_helpers_1.equalTokens(root, (_b = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n    </div>"], _b.raw = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n    </div>"], test_helpers_1.trimLines(_b)), 'Initial render');
    rerender();
    test_helpers_1.equalTokens(root, (_c = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n    </div>"], _c.raw = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n    </div>"], test_helpers_1.trimLines(_c)), 'After no-op re-render');
    object.value = 'NEW-VALUE';
    rerender();
    test_helpers_1.equalTokens(root, (_d = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"NEW-VALUE\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"NEW-VALUE\";\n\n      -----\n\n      foo: \"NEW-VALUE\";\n      bar: \"bar-helper\";\n      value: \"NEW-VALUE\";\n      echo foo: \"NEW-VALUE\";\n      echo bar: \"bar-value\";\n      echo value: \"NEW-VALUE\";\n\n      -----\n\n      foo: \"NEW-VALUE\";\n      bar: \"NEW-VALUE\";\n      value: \"NEW-VALUE\";\n      echo foo: \"NEW-VALUE\";\n      echo bar: \"NEW-VALUE\";\n      echo value: \"NEW-VALUE\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"NEW-VALUE\";\n      value: \"NEW-VALUE\";\n      echo foo: \"foo-value\";\n      echo bar: \"NEW-VALUE\";\n      echo value: \"NEW-VALUE\";\n    </div>"], _d.raw = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"NEW-VALUE\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"NEW-VALUE\";\n\n      -----\n\n      foo: \"NEW-VALUE\";\n      bar: \"bar-helper\";\n      value: \"NEW-VALUE\";\n      echo foo: \"NEW-VALUE\";\n      echo bar: \"bar-value\";\n      echo value: \"NEW-VALUE\";\n\n      -----\n\n      foo: \"NEW-VALUE\";\n      bar: \"NEW-VALUE\";\n      value: \"NEW-VALUE\";\n      echo foo: \"NEW-VALUE\";\n      echo bar: \"NEW-VALUE\";\n      echo value: \"NEW-VALUE\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"NEW-VALUE\";\n      value: \"NEW-VALUE\";\n      echo foo: \"foo-value\";\n      echo bar: \"NEW-VALUE\";\n      echo value: \"NEW-VALUE\";\n    </div>"], test_helpers_1.trimLines(_d)), 'After update');
    rerender({ foo: 'foo-value', bar: 'bar-value', value: 'value-value' });
    test_helpers_1.equalTokens(root, (_e = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n    </div>"], _e.raw = ["\n    <div>\n      foo: \"foo-helper\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"bar-helper\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"bar-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"value-value\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"value-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n\n      -----\n\n      foo: \"foo-helper\";\n      bar: \"value-value\";\n      value: \"value-value\";\n      echo foo: \"foo-value\";\n      echo bar: \"value-value\";\n      echo value: \"value-value\";\n    </div>"], test_helpers_1.trimLines(_e)), 'After reset');
    var _a, _b, _c, _d, _e;
});
test("block arguments (ensure balanced push/pop)", function (assert) {
    var template = compile("<div>{{#with person.name.first as |f|}}{{f}}{{/with}}{{f}}</div>");
    var object = { person: { name: { first: "Godfrey", last: "Chan" } }, f: "Outer" };
    render(template, object);
    test_helpers_1.equalTokens(root, '<div>GodfreyOuter</div>', "Initial render");
    object.person.name.first = "Godfreak";
    rerender();
    test_helpers_1.equalTokens(root, '<div>GodfreakOuter</div>', "After updating");
});
test("block arguments cannot be accessed through {{this}}", function (assert) {
    env.registerHelper('noop', function (params) { return params[0]; });
    var template = compile((_a = ["\n    <div>\n      [{{#with person as |name|}}{{this.name}}{{/with}}]\n      [{{#with person as |name|}}{{#with this.name as |test|}}{{test}}{{/with}}{{/with}}]\n      [{{#with person as |name|}}{{#with (noop this.name) as |test|}}{{test}}{{/with}}{{/with}}]\n    </div>"], _a.raw = ["\n    <div>\n      [{{#with person as |name|}}{{this.name}}{{/with}}]\n      [{{#with person as |name|}}{{#with this.name as |test|}}{{test}}{{/with}}{{/with}}]\n      [{{#with person as |name|}}{{#with (noop this.name) as |test|}}{{test}}{{/with}}{{/with}}]\n    </div>"], test_helpers_1.stripTight(_a)));
    var object = { person: "Yehuda", name: "Godfrey" };
    render(template, object);
    test_helpers_1.equalTokens(root, '<div>[Godfrey][Godfrey][Godfrey]</div>', "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, '<div>[Godfrey][Godfrey][Godfrey]</div>', "Initial render");
    object.name = "Godfreak";
    rerender();
    test_helpers_1.equalTokens(root, '<div>[Godfreak][Godfreak][Godfreak]</div>', "After update");
    object.name = "Godfrey";
    rerender();
    test_helpers_1.equalTokens(root, '<div>[Godfrey][Godfrey][Godfrey]</div>', "After reset");
    var _a;
});
test("The with helper should consider an empty array falsy", function (assert) {
    var object = { condition: [] };
    var template = compile("<div>{{#with condition as |c|}}{{c.length}}{{/with}}</div>");
    render(template, object);
    test_helpers_1.equalTokens(root, '<div><!----></div>', "Initial render");
    object.condition.push(1);
    rerender();
    test_helpers_1.equalTokens(root, '<div>1</div>', "After updating");
});
test("block helpers whose template has a morph at the edge", function () {
    var template = compile("{{#identity}}{{value}}{{/identity}}");
    var object = { value: "hello world" };
    render(template, object);
    test_helpers_1.equalTokens(root, 'hello world');
    var firstNode = result.firstNode();
    equal(firstNode.nodeType, 3, "the first node of the helper should be a text node");
    equal(firstNode.nodeValue, "hello world", "its content should be hello world");
    strictEqual(firstNode.nextSibling, null, "there should only be one nodes");
});
function assertInvariants(result, msg) {
    strictEqual(result.firstNode(), root.firstChild, "The firstNode of the result is the same as the root's firstChild" + (msg ? ': ' + msg : ''));
    strictEqual(result.lastNode(), root.lastChild, "The lastNode of the result is the same as the root's lastChild" + (msg ? ': ' + msg : ''));
}
test("clean content doesn't get blown away", function () {
    var template = compile("<div>{{value}}</div>");
    var object = { value: "hello" };
    render(template, object);
    var textNode = result.firstNode().firstChild;
    equal(textNode.nodeValue, "hello");
    object.value = "goodbye";
    rerender();
    test_helpers_1.equalTokens(root, '<div>goodbye</div>');
    object.value = "hello";
    rerender();
    textNode = root.firstChild.firstChild;
    equal(textNode.nodeValue, "hello");
});
test("helper calls follow the normal dirtying rules", function () {
    env.registerHelper('capitalize', function (params) {
        return params[0].toUpperCase();
    });
    var template = compile("<div>{{capitalize value}}</div>");
    var object = { value: "hello" };
    render(template, object);
    var textNode = result.firstNode().firstChild;
    equal(textNode.nodeValue, "HELLO");
    object.value = "goodbye";
    rerender();
    test_helpers_1.equalTokens(root, '<div>GOODBYE</div>');
    rerender();
    test_helpers_1.equalTokens(root, '<div>GOODBYE</div>');
    // Checks normalized value, not raw value
    object.value = "GoOdByE";
    rerender();
    textNode = root.firstChild.firstChild;
    equal(textNode.nodeValue, "GOODBYE");
});
test("class attribute follow the normal dirtying rules", function () {
    var template = compile("<div class='{{value}}'>hello</div>");
    var object = { value: "world" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div class='world'>hello</div>", "Initial render");
    object.value = "universe";
    rerender();
    test_helpers_1.equalTokens(root, "<div class='universe'>hello</div>", "Revalidating without dirtying");
    rerender();
    test_helpers_1.equalTokens(root, "<div class='universe'>hello</div>", "Revalidating after dirtying");
    object.value = "world";
    rerender();
    test_helpers_1.equalTokens(root, "<div class='world'>hello</div>", "Revalidating after dirtying");
});
test("class attribute w/ concat follow the normal dirtying rules", function () {
    var template = compile("<div class='hello {{value}}'>hello</div>");
    var object = { value: "world" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div class='hello world'>hello</div>");
    rerender();
    test_helpers_1.equalTokens(root, "<div class='hello world'>hello</div>");
    object.value = "universe";
    rerender();
    test_helpers_1.equalTokens(root, "<div class='hello universe'>hello</div>");
    object.value = null;
    rerender();
    test_helpers_1.equalTokens(root, "<div class='hello '>hello</div>");
    object.value = "world";
    rerender();
    test_helpers_1.equalTokens(root, "<div class='hello world'>hello</div>");
});
test("class attribute is removed if the binding becomes null or undefined", function () {
    var template = compile("<div class={{value}}>hello</div>");
    var object = { value: "foo" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div class='foo'>hello</div>");
    rerender();
    test_helpers_1.equalTokens(root, "<div class='foo'>hello</div>");
    object.value = null;
    rerender();
    test_helpers_1.equalTokens(root, "<div>hello</div>");
    object.value = 0;
    rerender();
    test_helpers_1.equalTokens(root, "<div class='0'>hello</div>");
    object.value = undefined;
    rerender();
    test_helpers_1.equalTokens(root, "<div>hello</div>");
    object.value = 'foo';
    rerender();
    test_helpers_1.equalTokens(root, "<div class='foo'>hello</div>");
});
test("attribute nodes follow the normal dirtying rules", function () {
    var template = compile("<div data-value='{{value}}'>hello</div>");
    var object = { value: "world" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div data-value='world'>hello</div>", "Initial render");
    object.value = "universe";
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='universe'>hello</div>", "Revalidating without dirtying");
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='universe'>hello</div>", "Revalidating after dirtying");
    object.value = null;
    rerender();
    test_helpers_1.equalTokens(root, "<div>hello</div>", "Revalidating after dirtying");
    object.value = "world";
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='world'>hello</div>", "Revalidating after dirtying");
});
test("attribute nodes w/ concat follow the normal dirtying rules", function () {
    var template = compile("<div data-value='hello {{value}}'>hello</div>");
    var object = { value: "world" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div data-value='hello world'>hello</div>");
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='hello world'>hello</div>");
    object.value = "universe";
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='hello universe'>hello</div>");
    object.value = null;
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='hello '>hello</div>");
    object.value = "world";
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='hello world'>hello</div>");
});
test("attributes values are normalized correctly", function () {
    var template = compile("<div data-value={{value}}>hello</div>");
    var object = { value: { toString: function () { return "world"; } } };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div data-value='world'>hello</div>", "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='world'>hello</div>", "Initial render");
    object.value = 123;
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='123'>hello</div>", "Revalidating without dirtying");
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='123'>hello</div>", "Revalidating after dirtying");
    object.value = false;
    rerender();
    test_helpers_1.equalTokens(root, "<div>hello</div>", "Revalidating after dirtying");
    rerender();
    test_helpers_1.equalTokens(root, "<div>hello</div>", "Revalidating after dirtying");
    object.value = { toString: function () { return "world"; } };
    rerender();
    test_helpers_1.equalTokens(root, "<div data-value='world'>hello</div>", "Revalidating after dirtying");
});
if (serializesNSAttributesCorrectly) {
    test("namespaced attribute nodes follow the normal dirtying rules", function () {
        var template = compile("<div xml:lang='{{lang}}'>hello</div>");
        var object = { lang: "en-us" };
        render(template, object);
        test_helpers_1.equalTokens(root, "<div xml:lang='en-us'>hello</div>", "Initial render");
        object.lang = "en-uk";
        rerender();
        test_helpers_1.equalTokens(root, "<div xml:lang='en-uk'>hello</div>", "Revalidating without dirtying");
        rerender();
        test_helpers_1.equalTokens(root, "<div xml:lang='en-uk'>hello</div>", "Revalidating after dirtying");
    });
    test("namespaced attribute nodes w/ concat follow the normal dirtying rules", function () {
        var template = compile("<div xml:lang='en-{{locale}}'>hello</div>");
        var object = { locale: "us" };
        render(template, object);
        test_helpers_1.equalTokens(root, "<div xml:lang='en-us'>hello</div>", "Initial render");
        rerender();
        test_helpers_1.equalTokens(root, "<div xml:lang='en-us'>hello</div>", "No-op rerender");
        object.locale = "uk";
        rerender();
        test_helpers_1.equalTokens(root, "<div xml:lang='en-uk'>hello</div>", "After update");
        object.locale = null;
        rerender();
        test_helpers_1.equalTokens(root, "<div xml:lang='en-'>hello</div>", "After updating to null");
        object.locale = "us";
        rerender();
        test_helpers_1.equalTokens(root, "<div xml:lang='en-us'>hello</div>", "After reset");
    });
}
test("non-standard namespaced attribute nodes follow the normal dirtying rules", function () {
    var template = compile("<div epub:type='{{type}}'>hello</div>");
    var object = { type: "dedication" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div epub:type='dedication'>hello</div>", "Initial render");
    object.type = "backmatter";
    rerender();
    test_helpers_1.equalTokens(root, "<div epub:type='backmatter'>hello</div>", "Revalidating without dirtying");
    rerender();
    test_helpers_1.equalTokens(root, "<div epub:type='backmatter'>hello</div>", "Revalidating after dirtying");
});
test("non-standard namespaced attribute nodes w/ concat follow the normal dirtying rules", function () {
    var template = compile("<div epub:type='dedication {{type}}'>hello</div>");
    var object = { type: "backmatter" };
    render(template, object);
    test_helpers_1.equalTokens(root, "<div epub:type='dedication backmatter'>hello</div>", "Initial render");
    rerender();
    test_helpers_1.equalTokens(root, "<div epub:type='dedication backmatter'>hello</div>", "No-op rerender");
    object.type = "index";
    rerender();
    test_helpers_1.equalTokens(root, "<div epub:type='dedication index'>hello</div>", "After update");
    object.type = null;
    rerender();
    test_helpers_1.equalTokens(root, "<div epub:type='dedication '>hello</div>", "After updating to null");
    object.type = "backmatter";
    rerender();
    test_helpers_1.equalTokens(root, "<div epub:type='dedication backmatter'>hello</div>", "After reset");
});
test("<option selected> is normalized and updated correctly", function () {
    function assertSelected(expectedSelected, label) {
        var options = root.querySelectorAll('option');
        var actualSelected = [];
        for (var i = 0; i < options.length; i++) {
            var option = options[i];
            if (option.selected) {
                actualSelected.push(option.value);
            }
        }
        deepEqual(actualSelected, expectedSelected, label);
    }
    var template = compile("\n    <select multiple>\n      <option>0</option>\n      <option selected={{one}}>1</option>\n      <option selected={{two}}>2</option>\n      <option selected={{three}}>3</option>\n      <option selected={{four}}>4</option>\n      <option selected={{five}}>5</option>\n    </select>");
    var object = {
        one: true,
        two: 'is-true',
        three: undefined,
        four: null,
        five: false
    };
    render(template, object);
    var expectedInitialTokens = "\n    <select multiple=\"\">\n      <option>0</option>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n    </select>";
    test_helpers_1.equalTokens(root, expectedInitialTokens, 'initial render tokens');
    assertSelected(['1', '2'], 'selection after initial render');
    rerender();
    assertSelected(['1', '2'], 'selection after no-op re-render');
    object.one = false;
    object.two = false;
    rerender();
    assertSelected([], 'selection after update to all falsey');
    object.three = true;
    object.four = 'asdf';
    rerender();
    assertSelected(['3', '4'], 'selection after update 3 & 4 to truthy');
    object.three = null;
    object.four = undefined;
    rerender();
    assertSelected([], 'selection after update 3 & 4 back to falsey');
});
test("top-level bounds are correct when swapping order", function (assert) {
    var template = compile("{{#each list key='key' as |item|}}{{item.name}}{{/each}}");
    var tom = { key: "1", name: "Tom Dale", "class": "tomdale" };
    var yehuda = { key: "2", name: "Yehuda Katz", "class": "wycats" };
    var object = { list: [tom, yehuda] };
    render(template, object);
    assertInvariants(result, "initial render");
    rerender();
    assertInvariants(result, "after no-op rerender");
    object = { list: [yehuda, tom] };
    rerender(object);
    assertInvariants(result, "after reordering");
    object = { list: [tom] };
    rerender(object);
    assertInvariants(result, "after deleting from the front");
    object = { list: [] };
    rerender(object);
    assertInvariants(result, "after emptying the list");
});
test("top-level bounds are correct when toggling conditionals", function (assert) {
    var template = compile("{{#if item}}{{item.name}}{{/if}}");
    var tom = { name: "Tom Dale" };
    var yehuda = { name: "Yehuda Katz" };
    var object = { item: tom };
    render(template, object);
    assertInvariants(result, "initial render");
    rerender();
    assertInvariants(result, "after no-op rerender");
    object = { item: yehuda };
    rerender(object);
    assertInvariants(result, "after replacement");
    object = { item: null };
    rerender(object);
    assertInvariants(result, "after nulling");
});
test("top-level bounds are correct when changing innerHTML", function (assert) {
    var template = compile("{{{html}}}");
    var object = { html: "<b>inner</b>-<b>before</b>" };
    render(template, object);
    assertInvariants(result, "initial render");
    rerender();
    assertInvariants(result, "after no-op rerender");
    object = { html: "<p>inner-after</p>" };
    rerender(object);
    assertInvariants(result, "after replacement");
    object = { html: "" };
    rerender(object);
    assertInvariants(result, "after emptying");
});
testEachHelper("An implementation of #each using block params", "<ul>{{#each list key='key' as |item|}}<li class='{{item.class}}'>{{item.name}}</li>{{/each}}</ul>");
testEachHelper("An implementation of #each using a self binding", "<ul>{{#each list}}<li class={{class}}>{{name}}</li>{{/each}}</ul>", QUnit.skip);
test('The each helper with inverse', function () {
    var object = { list: [] };
    var template = compile("<ul>{{#each list key='name' as |item|}}<li class=\"{{item.class}}\">{{item.name}}</li>{{else}}<li class=\"none\">none</li>{{/each}}</ul>");
    render(template, object);
    var itemNode = getNodeByClassName('none');
    var textNode = getFirstChildOfNode('none');
    test_helpers_1.equalTokens(root, "<ul><li class=\"none\">none</li></none");
    rerender(object);
    assertStableNodes('none', 'after no-op rerender');
    object = { list: [{ name: 'Foo Bar', class: "foobar" }] };
    rerender(object);
    test_helpers_1.equalTokens(root, '<ul><li class="foobar">Foo Bar</li></ul>');
    object = { list: [] };
    rerender(object);
    test_helpers_1.equalTokens(root, '<ul><li class="none">none</li></ul>');
    function assertStableNodes(className, message) {
        strictEqual(getNodeByClassName(className), itemNode, "The item node has not changed " + message);
        strictEqual(getFirstChildOfNode(className), textNode, "The text node has not changed " + message);
    }
});
test('The each helper yields the index of the current item current item when using the @index key', function () {
    var tom = { name: "Tom Dale", "class": "tomdale" };
    var yehuda = { name: "Yehuda Katz", "class": "wycats" };
    var object = { list: [tom, yehuda] };
    var template = compile("<ul>{{#each list key='@index' as |item index|}}<li class='{{item.class}}'>{{item.name}}<p class='index-{{index}}'>{{index}}</p></li>{{/each}}</ul>");
    render(template, object);
    var itemNode = getNodeByClassName('tomdale');
    var indexNode = getNodeByClassName('index-0');
    var nameNode = getFirstChildOfNode('tomdale');
    test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale<p class='index-0'>0</p></li><li class='wycats'>Yehuda Katz<p class='index-1'>1</p></li></ul>", "Initial render");
    rerender();
    assertStableNodes('tomdale', 0, 'after no-op rerender');
    test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale<p class='index-0'>0</p></li><li class='wycats'>Yehuda Katz<p class='index-1'>1</p></li></ul>", "After no-op render");
    rerender();
    assertStableNodes('tomdale', 0, 'after non-dirty rerender');
    test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale<p class='index-0'>0</p></li><li class='wycats'>Yehuda Katz<p class='index-1'>1</p></li></ul>", "After non-dirty render");
    object = { list: [yehuda, tom] };
    rerender(object);
    test_helpers_1.equalTokens(root, "<ul><li class='wycats'>Yehuda Katz<p class='index-0'>0</p></li><li class='tomdale'>Tom Dale<p class='index-1'>1</p></li></ul>", "After changing list order");
    strictEqual(getNodeByClassName("index-0"), indexNode, "The index node has not changed after changing list order");
    object = { list: [
            { name: "Martin Muñoz", class: "mmun" },
            { name: "Kris Selden", class: "krisselden" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after changing the list entries, but with stable keys");
    test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li><li class='krisselden'>Kris Selden<p class='index-1'>1</p></li></ul>", "After changing the list entries, but with stable keys");
    object = { list: [
            { name: "Martin Muñoz", class: "mmun" },
            { name: "Kristoph Selden", class: "krisselden" },
            { name: "Matthew Beale", class: "mixonic" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after adding an additional entry");
    test_helpers_1.equalTokens(root, (_a = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='krisselden'>Kristoph Selden<p class='index-1'>1</p></li>\n      <li class='mixonic'>Matthew Beale<p class='index-2'>2</p></li></ul>"], _a.raw = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='krisselden'>Kristoph Selden<p class='index-1'>1</p></li>\n      <li class='mixonic'>Matthew Beale<p class='index-2'>2</p></li></ul>"], test_helpers_1.stripTight(_a)), "After adding an additional entry");
    object = { list: [
            { name: "Martin Muñoz", class: "mmun" },
            { name: "Matthew Beale", class: "mixonic" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after removing the middle entry");
    test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Muñoz<p class='index-0'>0</p></li><li class='mixonic'>Matthew Beale<p class='index-1'>1</p></li></ul>", "after removing the middle entry");
    object = { list: [
            { name: "Martin Muñoz", class: "mmun" },
            { name: "Stefan Penner", class: "stefanpenner" },
            { name: "Robert Jackson", class: "rwjblue" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after adding two more entries");
    test_helpers_1.equalTokens(root, (_b = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], _b.raw = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], test_helpers_1.stripTight(_b)), "After adding two more entries");
    // New node for stability check
    itemNode = getNodeByClassName('rwjblue');
    nameNode = getFirstChildOfNode('rwjblue');
    indexNode = getNodeByClassName('index-2');
    object = { list: [
            { name: "Robert Jackson", class: "rwjblue" }
        ] };
    rerender(object);
    test_helpers_1.equalTokens(root, "<ul><li class='rwjblue'>Robert Jackson<p class='index-0'>0</p></li></ul>", "After removing two entries");
    object = { list: [
            { name: "Martin Muñoz", class: "mmun" },
            { name: "Stefan Penner", class: "stefanpenner" },
            { name: "Robert Jackson", class: "rwjblue" }
        ] };
    rerender(object);
    test_helpers_1.equalTokens(root, (_c = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], _c.raw = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], test_helpers_1.stripTight(_c)), "After adding back entries");
    // New node for stability check
    itemNode = getNodeByClassName('mmun');
    nameNode = getFirstChildOfNode('mmun');
    indexNode = getNodeByClassName('index-0');
    object = { list: [
            { name: "Martin Muñoz", class: "mmun" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after removing from the back");
    test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Muñoz<p class='index-0'>0</p></li></ul>", "After removing from the back");
    object = { list: [] };
    rerender(object);
    strictEqual(root.firstChild.firstChild.nodeType, 8, "there are no li's after removing the remaining entry");
    test_helpers_1.equalTokens(root, "<ul><!----></ul>", "After removing the remaining entries");
    function assertStableNodes(className, index, message) {
        strictEqual(getNodeByClassName(className), itemNode, "The item node has not changed " + message);
        strictEqual(getNodeByClassName("index-" + index), indexNode, "The index node has not changed " + message);
        strictEqual(getFirstChildOfNode(className), nameNode, "The name node has not changed " + message);
    }
    var _a, _b, _c;
});
test('The each helper yields the index of the current item when using a non-@index key', function () {
    var tom = { key: "1", name: "Tom Dale", class: "tomdale" };
    var yehuda = { key: "2", name: "Yehuda Katz", class: "wycats" };
    var object = { list: [tom, yehuda] };
    var template = compile("<ul>{{#each list key='key' as |item index|}}<li class='{{item.class}}'>{{item.name}}<p class='index-{{index}}'>{{index}}</p></li>{{/each}}</ul>");
    render(template, object);
    var itemNode = getNodeByClassName('tomdale');
    var indexNode = getNodeByClassName('index-0');
    var nameNode = getFirstChildOfNode('tomdale');
    test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale<p class='index-0'>0</p></li><li class='wycats'>Yehuda Katz<p class='index-1'>1</p></li></ul>", "Initial render");
    rerender();
    assertStableNodes('tomdale', 0, 'after no-op rerender');
    test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale<p class='index-0'>0</p></li><li class='wycats'>Yehuda Katz<p class='index-1'>1</p></li></ul>", "After no-op render");
    rerender();
    assertStableNodes('tomdale', 0, 'after non-dirty rerender');
    test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale<p class='index-0'>0</p></li><li class='wycats'>Yehuda Katz<p class='index-1'>1</p></li></ul>", "After non-dirty render");
    object = { list: [yehuda, tom] };
    rerender(object);
    test_helpers_1.equalTokens(root, "<ul><li class='wycats'>Yehuda Katz<p class='index-0'>0</p></li><li class='tomdale'>Tom Dale<p class='index-1'>1</p></li></ul>", "After changing list order");
    strictEqual(getNodeByClassName('index-1'), indexNode, "The index node has been moved after changing list order");
    object = { list: [
            { key: "1", name: "Martin Muñoz", class: "mmun" },
            { key: "2", name: "Kris Selden", class: "krisselden" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after changing the list entries, but with stable keys");
    test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li><li class='krisselden'>Kris Selden<p class='index-1'>1</p></li></ul>", "After changing the list entries, but with stable keys");
    object = { list: [
            { key: "1", name: "Martin Muñoz", class: "mmun" },
            { key: "2", name: "Kristoph Selden", class: "krisselden" },
            { key: "3", name: "Matthew Beale", class: "mixonic" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after adding an additional entry");
    test_helpers_1.equalTokens(root, (_a = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='krisselden'>Kristoph Selden<p class='index-1'>1</p></li>\n      <li class='mixonic'>Matthew Beale<p class='index-2'>2</p></li></ul>"], _a.raw = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='krisselden'>Kristoph Selden<p class='index-1'>1</p></li>\n      <li class='mixonic'>Matthew Beale<p class='index-2'>2</p></li></ul>"], test_helpers_1.stripTight(_a)), "After adding an additional entry");
    object = { list: [
            { key: "1", name: "Martin Muñoz", class: "mmun" },
            { key: "3", name: "Matthew Beale", class: "mixonic" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after removing the middle entry");
    test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Muñoz<p class='index-0'>0</p></li><li class='mixonic'>Matthew Beale<p class='index-1'>1</p></li></ul>", "after removing the middle entry");
    object = { list: [
            { key: "1", name: "Martin Muñoz", class: "mmun" },
            { key: "4", name: "Stefan Penner", class: "stefanpenner" },
            { key: "5", name: "Robert Jackson", class: "rwjblue" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after adding two more entries");
    test_helpers_1.equalTokens(root, (_b = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], _b.raw = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], test_helpers_1.stripTight(_b)), "After adding two more entries");
    // New node for stability check
    itemNode = getNodeByClassName('rwjblue');
    nameNode = getFirstChildOfNode('rwjblue');
    indexNode = getNodeByClassName('index-2');
    object = { list: [
            { key: "5", name: "Robert Jackson", class: "rwjblue" }
        ] };
    rerender(object);
    assertStableNodes('rwjblue', 0, "after removing two entries");
    test_helpers_1.equalTokens(root, "<ul><li class='rwjblue'>Robert Jackson<p class='index-0'>0</p></li></ul>", "After removing two entries");
    object = { list: [
            { key: "1", name: "Martin Muñoz", class: "mmun" },
            { key: "4", name: "Stefan Penner", class: "stefanpenner" },
            { key: "5", name: "Robert Jackson", class: "rwjblue" }
        ] };
    rerender(object);
    assertStableNodes('rwjblue', 2, "after adding back entries");
    test_helpers_1.equalTokens(root, (_c = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], _c.raw = ["<ul>\n      <li class='mmun'>Martin Mu\u00F1oz<p class='index-0'>0</p></li>\n      <li class='stefanpenner'>Stefan Penner<p class='index-1'>1</p></li>\n      <li class='rwjblue'>Robert Jackson<p class='index-2'>2</p></li></ul>"], test_helpers_1.stripTight(_c)), "After adding back entries");
    // New node for stability check
    itemNode = getNodeByClassName('mmun');
    nameNode = getFirstChildOfNode('mmun');
    indexNode = getNodeByClassName('index-0');
    object = { list: [
            { key: "1", name: "Martin Muñoz", class: "mmun" }
        ] };
    rerender(object);
    assertStableNodes('mmun', 0, "after removing from the back");
    test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Muñoz<p class='index-0'>0</p></li></ul>", "After removing from the back");
    object = { list: [] };
    rerender(object);
    strictEqual(root.firstChild.firstChild.nodeType, 8, "there are no li's after removing the remaining entry");
    test_helpers_1.equalTokens(root, "<ul><!----></ul>", "After removing the remaining entries");
    function assertStableNodes(className, index, message) {
        strictEqual(getNodeByClassName(className), itemNode, "The item node has not changed " + message);
        strictEqual(getNodeByClassName("index-" + index), indexNode, "The index node has not changed " + message);
        strictEqual(getFirstChildOfNode(className), nameNode, "The name node has not changed " + message);
    }
    var _a, _b, _c;
});
// TODO: port https://github.com/emberjs/ember.js/pull/14082
function testEachHelper(testName, templateSource, testMethod) {
    if (testMethod === void 0) { testMethod = QUnit.test; }
    testMethod(testName, function () {
        var template = compile(templateSource);
        var tom = { key: "1", name: "Tom Dale", class: "tomdale" };
        var yehuda = { key: "2", name: "Yehuda Katz", class: "wycats" };
        var object = { list: [tom, yehuda] };
        render(template, object);
        var itemNode = getNodeByClassName('tomdale');
        var nameNode = getFirstChildOfNode('tomdale');
        test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale</li><li class='wycats'>Yehuda Katz</li></ul>", "Initial render");
        rerender();
        assertStableNodes('tomdale', "after no-op rerender");
        test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale</li><li class='wycats'>Yehuda Katz</li></ul>", "After no-op re-render");
        rerender();
        assertStableNodes('tomdale', "after non-dirty rerender");
        test_helpers_1.equalTokens(root, "<ul><li class='tomdale'>Tom Dale</li><li class='wycats'>Yehuda Katz</li></ul>", "After non-dirty re-render");
        object = { list: [yehuda, tom] };
        rerender(object);
        assertStableNodes('tomdale', "after changing the list order");
        test_helpers_1.equalTokens(root, "<ul><li class='wycats'>Yehuda Katz</li><li class='tomdale'>Tom Dale</li></ul>", "After changing the list order");
        object = { list: [
                { key: "1", name: "Martin Muñoz", "class": "mmun" },
                { key: "2", name: "Kris Selden", "class": "krisselden" }
            ] };
        rerender(object);
        assertStableNodes('mmun', "after changing the list entries, but with stable keys");
        test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='krisselden'>Kris Selden</li></ul>", "After changing the list entries, but with stable keys");
        object = { list: [
                { key: "1", name: "Martin Muñoz", "class": "mmun" },
                { key: "2", name: "Kristoph Selden", "class": "krisselden" },
                { key: "3", name: "Matthew Beale", "class": "mixonic" }
            ] };
        rerender(object);
        assertStableNodes('mmun', "after adding an additional entry");
        test_helpers_1.equalTokens(root, (_a = ["<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='krisselden'>Kristoph Selden</li>\n        <li class='mixonic'>Matthew Beale</li></ul>"], _a.raw = ["<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='krisselden'>Kristoph Selden</li>\n        <li class='mixonic'>Matthew Beale</li></ul>"], test_helpers_1.stripTight(_a)), "After adding an additional entry");
        object = { list: [
                { key: "1", name: "Martin Muñoz", "class": "mmun" },
                { key: "3", name: "Matthew Beale", "class": "mixonic" }
            ] };
        rerender(object);
        assertStableNodes('mmun', "after removing the middle entry");
        test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Muñoz</li><li class='mixonic'>Matthew Beale</li></ul>", "after removing the middle entry");
        object = { list: [
                { key: "1", name: "Martin Muñoz", "class": "mmun" },
                { key: "4", name: "Stefan Penner", "class": "stefanpenner" },
                { key: "5", name: "Robert Jackson", "class": "rwjblue" }
            ] };
        rerender(object);
        assertStableNodes('mmun', "after adding two more entries");
        test_helpers_1.equalTokens(root, (_b = ["<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='stefanpenner'>Stefan Penner</li>\n        <li class='rwjblue'>Robert Jackson</li></ul>"], _b.raw = ["<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='stefanpenner'>Stefan Penner</li>\n        <li class='rwjblue'>Robert Jackson</li></ul>"], test_helpers_1.stripTight(_b)), "After adding two more entries");
        // New node for stability check
        itemNode = getNodeByClassName('rwjblue');
        nameNode = getFirstChildOfNode('rwjblue');
        object = { list: [
                { key: "5", name: "Robert Jackson", "class": "rwjblue" }
            ] };
        rerender(object);
        assertStableNodes('rwjblue', "after removing two entries");
        test_helpers_1.equalTokens(root, "<ul><li class='rwjblue'>Robert Jackson</li></ul>", "After removing two entries");
        object = { list: [
                { key: "1", name: "Martin Muñoz", "class": "mmun" },
                { key: "4", name: "Stefan Penner", "class": "stefanpenner" },
                { key: "5", name: "Robert Jackson", "class": "rwjblue" }
            ] };
        rerender(object);
        assertStableNodes('rwjblue', "after adding back entries");
        test_helpers_1.equalTokens(root, (_c = ["<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='stefanpenner'>Stefan Penner</li>\n        <li class='rwjblue'>Robert Jackson</li></ul>"], _c.raw = ["<ul><li class='mmun'>Martin Mu\u00F1oz</li><li class='stefanpenner'>Stefan Penner</li>\n        <li class='rwjblue'>Robert Jackson</li></ul>"], test_helpers_1.stripTight(_c)), "After adding back entries");
        // New node for stability check
        itemNode = getNodeByClassName('mmun');
        nameNode = getFirstChildOfNode('mmun');
        object = { list: [
                { key: "1", name: "Martin Muñoz", "class": "mmun" }
            ] };
        rerender(object);
        assertStableNodes('mmun', "after removing from the back");
        test_helpers_1.equalTokens(root, "<ul><li class='mmun'>Martin Muñoz</li></ul>", "After removing from the back");
        object = { list: [] };
        rerender(object);
        strictEqual(root.firstChild.firstChild.nodeType, 8, "there are no li's after removing the remaining entry");
        test_helpers_1.equalTokens(root, "<ul><!----></ul>", "After removing the remaining entries");
        function assertStableNodes(className, message) {
            strictEqual(getNodeByClassName(className), itemNode, "The item node has not changed " + message);
            strictEqual(getFirstChildOfNode(className), nameNode, "The name node has not changed " + message);
        }
        var _a, _b, _c;
    });
}
var destroyedRenderNodeCount;
var destroyedRenderNode;
QUnit.module("HTML-based compiler (dirtying) - pruning", {
    setup: function () {
        commonSetup();
        destroyedRenderNodeCount = 0;
        destroyedRenderNode = null;
        hooks.destroyRenderNode = function (renderNode) {
            destroyedRenderNode = renderNode;
            destroyedRenderNodeCount++;
        };
    }
});
QUnit.skip("Pruned render nodes invoke a cleanup hook when replaced", function () {
    var object = { condition: true, value: 'hello world', falsy: "Nothing" };
    var template = compile('<div>{{#if condition}}<p>{{value}}</p>{{else}}<p>{{falsy}}</p>{{/if}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<div><p>hello world</p></div>");
    object.condition = false;
    rerender();
    strictEqual(destroyedRenderNodeCount, 1, "cleanup hook was invoked once");
    strictEqual(destroyedRenderNode.lastValue, 'hello world', "The correct render node is passed in");
    object.condition = true;
    rerender();
    strictEqual(destroyedRenderNodeCount, 2, "cleanup hook was invoked again");
    strictEqual(destroyedRenderNode.lastValue, 'Nothing', "The correct render node is passed in");
});
QUnit.skip("MorphLists in childMorphs are properly cleared", function () {
    var object = {
        condition: true,
        falsy: "Nothing",
        list: [
            { key: "1", word: 'Hello' },
            { key: "2", word: 'World' }
        ]
    };
    var template = compile('<div>{{#if condition}}{{#each list as |item|}}<p>{{item.word}}</p>{{/each}}{{else}}<p>{{falsy}}</p>{{/if}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<div><p>Hello</p><p>World</p></div>");
    object.condition = false;
    rerender();
    test_helpers_1.equalTokens(root, "<div><p>Nothing</p></div>");
    strictEqual(destroyedRenderNodeCount, 5, "cleanup hook was invoked for each morph");
    object.condition = true;
    rerender();
    strictEqual(destroyedRenderNodeCount, 6, "cleanup hook was invoked again");
});
QUnit.skip("Pruned render nodes invoke a cleanup hook when cleared", function () {
    var object = { condition: true, value: 'hello world' };
    var template = compile('<div>{{#if condition}}<p>{{value}}</p>{{/if}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<div><p>hello world</p></div>");
    object.condition = false;
    rerender();
    strictEqual(destroyedRenderNodeCount, 1, "cleanup hook was invoked once");
    strictEqual(destroyedRenderNode.lastValue, 'hello world', "The correct render node is passed in");
    object.condition = true;
    rerender();
    strictEqual(destroyedRenderNodeCount, 1, "cleanup hook was not invoked again");
});
QUnit.skip("Pruned lists invoke a cleanup hook when removing elements", function () {
    var object = { list: [{ key: "1", word: "hello" }, { key: "2", word: "world" }] };
    var template = compile('<div>{{#each list as |item|}}<p>{{item.word}}</p>{{/each}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<div><p>hello</p><p>world</p></div>");
    object.list.pop();
    rerender();
    strictEqual(destroyedRenderNodeCount, 2, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "world", "The correct render node is passed in");
    object.list.pop();
    rerender();
    strictEqual(destroyedRenderNodeCount, 4, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "hello", "The correct render node is passed in");
});
QUnit.skip("Pruned lists invoke a cleanup hook on their subtrees when removing elements", function () {
    var object = { list: [{ key: "1", word: "hello" }, { key: "2", word: "world" }] };
    var template = compile('<div>{{#each list as |item|}}<p>{{#if item.word}}{{item.word}}{{/if}}</p>{{/each}}</div>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<div><p>hello</p><p>world</p></div>");
    object.list.pop();
    rerender();
    strictEqual(destroyedRenderNodeCount, 3, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "world", "The correct render node is passed in");
    object.list.pop();
    rerender();
    strictEqual(destroyedRenderNodeCount, 6, "cleanup hook was invoked once for the wrapper morph and once for the {{item.word}}");
    strictEqual(destroyedRenderNode.lastValue, "hello", "The correct render node is passed in");
});
QUnit.module("Updating SVG", {
    setup: commonSetup
});
test("HTML namespace from root element is continued to child templates", function () {
    var object = { hasCircle: true };
    var getSvg = function () { return root.firstChild; };
    var getCircle = function () { return getSvg().firstChild; };
    var template = compile('<svg>{{#if hasCircle}}<circle />{{/if}}</svg>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<svg><circle /></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getCircle().namespaceURI, SVG_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg><circle /></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getCircle().namespaceURI, SVG_NAMESPACE);
    object.hasCircle = false;
    rerender();
    test_helpers_1.equalTokens(root, "<svg><!----></svg>");
    rerender({ hasCircle: true });
    test_helpers_1.equalTokens(root, "<svg><circle /></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getCircle().namespaceURI, SVG_NAMESPACE);
});
test("root <foreignObject> tag is SVG namespaced", function () {
    var object = { hasForeignObject: true };
    var getForeignObject = function () { return root.firstChild; };
    var getDiv = function () { return getForeignObject().firstChild; };
    var template = compile('{{#if hasForeignObject}}<foreignObject><div></div></foreignObject>{{/if}}');
    // Add an SVG node on the root that can be rendered into
    root.appendChild(env.getDOM().createElement('svg'));
    root = root.firstChild;
    render(template, object);
    test_helpers_1.equalTokens(root.parentNode, "<svg><foreignObject><div></div></foreignObject></svg>");
    equal(getForeignObject().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root.parentNode, "<svg><foreignObject><div></div></foreignObject></svg>");
    equal(getForeignObject().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    object.hasForeignObject = false;
    rerender();
    test_helpers_1.equalTokens(root.parentNode, "<svg><!----></svg>");
    rerender({ hasForeignObject: true });
    test_helpers_1.equalTokens(root.parentNode, "<svg><foreignObject><div></div></foreignObject></svg>");
    equal(getForeignObject().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
});
test("elements nested inside <foreignObject> have an XHTML namespace", function () {
    var object = { hasDiv: true };
    var getSvg = function () { return root.firstChild; };
    var getForeignObject = function () { return getSvg().firstChild; };
    var getDiv = function () { return getForeignObject().firstChild; };
    var template = compile('<svg><foreignObject>{{#if hasDiv}}<div></div>{{/if}}</foreignObject></svg>');
    render(template, object);
    test_helpers_1.equalTokens(root, "<svg><foreignObject><div></div></foreignObject></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getForeignObject().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg><foreignObject><div></div></foreignObject></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getForeignObject().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    object.hasDiv = false;
    rerender();
    test_helpers_1.equalTokens(root, "<svg><foreignObject><!----></foreignObject></svg>");
    rerender({ hasDiv: true });
    test_helpers_1.equalTokens(root, "<svg><foreignObject><div></div></foreignObject></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getForeignObject().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
});
test("Namespaced attribute with a quoted expression", function () {
    var title = 'svg-title';
    var context = { title: title };
    var getSvg = function () { return root.firstChild; };
    var getXlinkAttr = function () { return getSvg().attributes[0]; };
    var template = compile('<svg xlink:title="{{title}}">content</svg>');
    render(template, context);
    test_helpers_1.equalTokens(root, "<svg xlink:title=\"" + title + "\">content</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getXlinkAttr().namespaceURI, XLINK_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg xlink:title=\"" + title + "\">content</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getXlinkAttr().namespaceURI, XLINK_NAMESPACE);
    context.title = 'mmun';
    rerender();
    test_helpers_1.equalTokens(root, "<svg xlink:title=\"" + context.title + "\">content</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getXlinkAttr().namespaceURI, XLINK_NAMESPACE);
    rerender({ title: title });
    test_helpers_1.equalTokens(root, "<svg xlink:title=\"" + title + "\">content</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getXlinkAttr().namespaceURI, XLINK_NAMESPACE);
});
test("<svg> tag and expression as sibling", function () {
    var name = 'svg-title';
    var context = { name: name };
    var getSvg = function () { return root.firstChild; };
    var template = compile('<svg></svg>{{name}}');
    render(template, context);
    test_helpers_1.equalTokens(root, "<svg></svg>" + name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg></svg>" + name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    context.name = null;
    rerender();
    test_helpers_1.equalTokens(root, "<svg></svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender({ name: name });
    test_helpers_1.equalTokens(root, "<svg></svg>" + name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
});
test("<svg> tag and unsafe expression as sibling", function () {
    var name = '<i>Biff</i>';
    var context = { name: name };
    var getSvg = function () { return root.firstChild; };
    var getItalic = function () { return root.lastChild; };
    var template = compile('<svg></svg>{{{name}}}');
    render(template, context);
    test_helpers_1.equalTokens(root, "<svg></svg>" + name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getItalic().namespaceURI, XHTML_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg></svg>" + name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getItalic().namespaceURI, XHTML_NAMESPACE);
    context.name = 'ef4';
    rerender();
    test_helpers_1.equalTokens(root, "<svg></svg>" + context.name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender({ name: name });
    test_helpers_1.equalTokens(root, "<svg></svg>" + name);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getItalic().namespaceURI, XHTML_NAMESPACE);
});
test("unsafe expression nested inside a namespace", function () {
    var content = '<path></path>';
    var context = { content: content };
    var getSvg = function () { return root.firstChild; };
    var getPath = function () { return getSvg().firstChild; };
    var getDiv = function () { return root.lastChild; };
    var template = compile('<svg>{{{content}}}</svg><div></div>');
    render(template, context);
    test_helpers_1.equalTokens(root, "<svg>" + content + "</svg><div></div>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getPath().namespaceURI, SVG_NAMESPACE, 'initial render path has SVG namespace');
    rerender();
    test_helpers_1.equalTokens(root, "<svg>" + content + "</svg><div></div>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getPath().namespaceURI, SVG_NAMESPACE, 'path has SVG namespace');
    context.content = '<foreignObject><span></span></foreignObject>';
    rerender();
    test_helpers_1.equalTokens(root, "<svg>" + context.content + "</svg><div></div>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().firstChild.namespaceURI, SVG_NAMESPACE, 'foreignObject has SVG NS');
    equal(getSvg().firstChild.firstChild.namespaceURI, XHTML_NAMESPACE, 'span has XHTML NS');
    context.content = '<path></path><circle></circle>';
    rerender();
    test_helpers_1.equalTokens(root, "<svg>" + context.content + "</svg><div></div>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().firstChild.namespaceURI, SVG_NAMESPACE);
    equal(getSvg().lastChild.namespaceURI, SVG_NAMESPACE);
    rerender({ content: content });
    test_helpers_1.equalTokens(root, "<svg>" + content + "</svg><div></div>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getPath().namespaceURI, SVG_NAMESPACE);
});
test("expression nested inside a namespace", function () {
    var content = 'Milly';
    var context = { content: content };
    var getDiv = function () { return root.firstChild; };
    var getSvg = function () { return getDiv().firstChild; };
    var template = compile('<div><svg>{{content}}</svg></div>');
    render(template, context);
    test_helpers_1.equalTokens(root, "<div><svg>" + content + "</svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<div><svg>" + content + "</svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    context.content = 'Moe';
    rerender();
    test_helpers_1.equalTokens(root, "<div><svg>" + context.content + "</svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender({ content: content });
    test_helpers_1.equalTokens(root, "<div><svg>" + content + "</svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
});
test("expression nested inside a namespaced root element", function () {
    var content = 'Maurice';
    var context = { content: content };
    var getSvg = function () { return root.firstChild; };
    var template = compile('<svg>{{content}}</svg>');
    render(template, context);
    test_helpers_1.equalTokens(root, "<svg>" + content + "</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg>" + content + "</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    context.content = null;
    rerender();
    equal(getSvg().tagName, 'svg');
    ok(getSvg().firstChild.textContent === '');
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender({ content: content });
    test_helpers_1.equalTokens(root, "<svg>" + content + "</svg>");
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
});
test("HTML namespace is created in child templates", function () {
    var isTrue = true;
    var context = { isTrue: isTrue };
    var template = compile('{{#if isTrue}}<svg></svg>{{else}}<div><svg></svg></div>{{/if}}');
    render(template, context);
    test_helpers_1.equalTokens(root, "<svg></svg>");
    equal(root.firstChild.namespaceURI, SVG_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<svg></svg>");
    equal(root.firstChild.namespaceURI, SVG_NAMESPACE);
    context.isTrue = false;
    rerender();
    test_helpers_1.equalTokens(root, "<div><svg></svg></div>");
    equal(root.firstChild.namespaceURI, XHTML_NAMESPACE);
    equal(root.firstChild.firstChild.namespaceURI, SVG_NAMESPACE);
    rerender({ isTrue: isTrue });
    test_helpers_1.equalTokens(root, "<svg></svg>");
    equal(root.firstChild.namespaceURI, SVG_NAMESPACE);
});
test("HTML namespace is continued to child templates", function () {
    var isTrue = true;
    var context = { isTrue: isTrue };
    var getDiv = function () { return root.firstChild; };
    var getSvg = function () { return getDiv().firstChild; };
    var template = compile('<div><svg>{{#if isTrue}}<circle />{{/if}}</svg></div>');
    render(template, context);
    test_helpers_1.equalTokens(root, "<div><svg><circle /></svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getSvg().firstChild.namespaceURI, SVG_NAMESPACE);
    rerender();
    test_helpers_1.equalTokens(root, "<div><svg><circle /></svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getSvg().firstChild.namespaceURI, SVG_NAMESPACE);
    context.isTrue = false;
    rerender();
    test_helpers_1.equalTokens(root, "<div><svg><!----></svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    rerender({ isTrue: isTrue });
    test_helpers_1.equalTokens(root, "<div><svg><circle /></svg></div>");
    equal(getDiv().namespaceURI, XHTML_NAMESPACE);
    equal(getSvg().namespaceURI, SVG_NAMESPACE);
    equal(getSvg().firstChild.namespaceURI, SVG_NAMESPACE);
});
QUnit.module("Updating Element Modifiers", {
    setup: commonSetup
});
test("Updating a element modifier", function (assert) {
    var manager = new test_helpers_1.TestModifierManager();
    env.registerModifier('foo', manager);
    var template = compile('<div {{foo bar}}></div>');
    var input = {
        bar: 'Super Metroid'
    };
    render(template, input);
    var valueNode = root.firstChild;
    test_helpers_1.equalTokens(root, '<div data-modifier="installed - Super Metroid"></div>', "initial render");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 0);
    equal(manager.destroyedModifiers.length, 0);
    rerender();
    test_helpers_1.equalTokens(root, '<div data-modifier="updated - Super Metroid"></div>', "modifier updated");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 1);
    equal(valueNode, manager.updatedElements[0]);
    equal(manager.destroyedModifiers.length, 0);
    input.bar = 'Super Mario';
    rerender();
    test_helpers_1.equalTokens(root, '<div data-modifier="updated - Super Mario"></div>', "no change");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 2);
    equal(valueNode, manager.updatedElements[1]);
    equal(manager.destroyedModifiers.length, 0);
});
test("Const input doesn't trigger update in a element modifier", function (assert) {
    var manager = new test_helpers_1.TestModifierManager();
    env.registerModifier('foo', manager);
    var template = compile('<div {{foo "bar"}}></div>');
    var input = {};
    render(template, input);
    var valueNode = root.firstChild;
    test_helpers_1.equalTokens(root, '<div data-modifier="installed - bar"></div>', "initial render");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 0);
    equal(manager.destroyedModifiers.length, 0);
    rerender();
    test_helpers_1.equalTokens(root, '<div data-modifier="installed - bar"></div>', "no change");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 0);
    equal(manager.destroyedModifiers.length, 0);
});
test("Destructor is triggered on element modifiers", function (assert) {
    var manager = new test_helpers_1.TestModifierManager();
    env.registerModifier('foo', manager);
    var template = compile('{{#if bar}}<div {{foo bar}}></div>{{else}}<div></div>{{/if}}');
    var input = {
        bar: true
    };
    render(template, input);
    var valueNode = root.firstChild;
    test_helpers_1.equalTokens(root, '<div data-modifier="installed - true"></div>', "initial render");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 0);
    equal(manager.destroyedModifiers.length, 0);
    rerender();
    test_helpers_1.equalTokens(root, '<div data-modifier="updated - true"></div>', "modifier updated");
    equal(manager.installedElements.length, 1);
    equal(valueNode, manager.installedElements[0]);
    equal(manager.updatedElements.length, 1);
    equal(manager.destroyedModifiers.length, 0);
    input.bar = false;
    rerender();
    test_helpers_1.equalTokens(root, '<div></div>', "no more modifier");
    equal(manager.destroyedModifiers.length, 1);
    input.bar = true;
    rerender();
    test_helpers_1.equalTokens(root, '<div data-modifier="installed - true"></div>', "back to default render");
    equal(manager.installedElements.length, 2);
    equal(manager.destroyedModifiers.length, 1);
});
//# sourceMappingURL=data:application/json;base64,