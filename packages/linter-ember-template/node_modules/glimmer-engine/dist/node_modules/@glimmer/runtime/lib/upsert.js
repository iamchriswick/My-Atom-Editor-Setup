"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var util_1 = require("@glimmer/util");
var bounds_1 = require("./bounds");
function isSafeString(value) {
    return !!value && typeof value['toHTML'] === 'function';
}
exports.isSafeString = isSafeString;
function isNode(value) {
    return value !== null && typeof value === 'object' && typeof value['nodeType'] === 'number';
}
exports.isNode = isNode;
function isString(value) {
    return typeof value === 'string';
}
exports.isString = isString;
var Upsert = (function () {
    function Upsert(bounds) {
        this.bounds = bounds;
    }
    return Upsert;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Upsert;
function cautiousInsert(dom, cursor, value) {
    if (isString(value)) {
        return TextUpsert.insert(dom, cursor, value);
    }
    if (isSafeString(value)) {
        return SafeStringUpsert.insert(dom, cursor, value);
    }
    if (isNode(value)) {
        return NodeUpsert.insert(dom, cursor, value);
    }
    throw util_1.unreachable();
}
exports.cautiousInsert = cautiousInsert;
function trustingInsert(dom, cursor, value) {
    if (isString(value)) {
        return HTMLUpsert.insert(dom, cursor, value);
    }
    if (isNode(value)) {
        return NodeUpsert.insert(dom, cursor, value);
    }
    throw util_1.unreachable();
}
exports.trustingInsert = trustingInsert;
var TextUpsert = (function (_super) {
    __extends(TextUpsert, _super);
    function TextUpsert(bounds, textNode) {
        var _this = _super.call(this, bounds) || this;
        _this.textNode = textNode;
        return _this;
    }
    TextUpsert.insert = function (dom, cursor, value) {
        var textNode = dom.createTextNode(value);
        dom.insertBefore(cursor.element, textNode, cursor.nextSibling);
        var bounds = new bounds_1.SingleNodeBounds(cursor.element, textNode);
        return new TextUpsert(bounds, textNode);
    };
    TextUpsert.prototype.update = function (_dom, value) {
        if (isString(value)) {
            var textNode = this.textNode;
            textNode.nodeValue = value;
            return true;
        }
        else {
            return false;
        }
    };
    return TextUpsert;
}(Upsert));
var HTMLUpsert = (function (_super) {
    __extends(HTMLUpsert, _super);
    function HTMLUpsert() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HTMLUpsert.insert = function (dom, cursor, value) {
        var bounds = dom.insertHTMLBefore(cursor.element, value, cursor.nextSibling);
        return new HTMLUpsert(bounds);
    };
    HTMLUpsert.prototype.update = function (dom, value) {
        if (isString(value)) {
            var bounds = this.bounds;
            var parentElement = bounds.parentElement();
            var nextSibling = bounds_1.clear(bounds);
            this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, value);
            return true;
        }
        else {
            return false;
        }
    };
    return HTMLUpsert;
}(Upsert));
var SafeStringUpsert = (function (_super) {
    __extends(SafeStringUpsert, _super);
    function SafeStringUpsert(bounds, lastStringValue) {
        var _this = _super.call(this, bounds) || this;
        _this.lastStringValue = lastStringValue;
        return _this;
    }
    SafeStringUpsert.insert = function (dom, cursor, value) {
        var stringValue = value.toHTML();
        var bounds = dom.insertHTMLBefore(cursor.element, stringValue, cursor.nextSibling);
        return new SafeStringUpsert(bounds, stringValue);
    };
    SafeStringUpsert.prototype.update = function (dom, value) {
        if (isSafeString(value)) {
            var stringValue = value.toHTML();
            if (stringValue !== this.lastStringValue) {
                var bounds = this.bounds;
                var parentElement = bounds.parentElement();
                var nextSibling = bounds_1.clear(bounds);
                this.bounds = dom.insertHTMLBefore(parentElement, nextSibling, stringValue);
                this.lastStringValue = stringValue;
            }
            return true;
        }
        else {
            return false;
        }
    };
    return SafeStringUpsert;
}(Upsert));
var NodeUpsert = (function (_super) {
    __extends(NodeUpsert, _super);
    function NodeUpsert() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeUpsert.insert = function (dom, cursor, node) {
        dom.insertBefore(cursor.element, node, cursor.nextSibling);
        return new NodeUpsert(bounds_1.single(cursor.element, node));
    };
    NodeUpsert.prototype.update = function (dom, value) {
        if (isNode(value)) {
            var bounds = this.bounds;
            var parentElement = bounds.parentElement();
            var nextSibling = bounds_1.clear(bounds);
            this.bounds = dom.insertNodeBefore(parentElement, value, nextSibling);
            return true;
        }
        else {
            return false;
        }
    };
    return NodeUpsert;
}(Upsert));
//# sourceMappingURL=data:application/json;base64,