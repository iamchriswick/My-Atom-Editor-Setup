"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var opcodes_1 = require("../../opcodes");
var util_1 = require("@glimmer/util");
var reference_1 = require("@glimmer/reference");
var references_1 = require("../../references");
var vm_1 = require("./vm");
var opcodes_2 = require("../../opcodes");
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Text, function (vm, _a) {
    var text = _a.op1;
    vm.stack().appendText(vm.constants.getString(text));
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Comment, function (vm, _a) {
    var text = _a.op1;
    vm.stack().appendComment(vm.constants.getString(text));
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.OpenElement, function (vm, _a) {
    var tag = _a.op1;
    vm.stack().openElement(vm.constants.getString(tag));
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PushRemoteElement, function (vm) {
    var reference = vm.frame.getOperand();
    var cache = reference_1.isConst(reference) ? undefined : new reference_1.ReferenceCache(reference);
    var element = cache ? cache.peek() : reference.value();
    vm.stack().pushRemoteElement(element);
    if (cache) {
        vm.updateWith(new vm_1.Assert(cache));
    }
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PopRemoteElement, function (vm) { return vm.stack().popRemoteElement(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.OpenComponentElement, function (vm, _a) {
    var _tag = _a.op1;
    var tag = vm.constants.getString(_tag);
    vm.stack().openElement(tag, new ComponentElementOperations(vm.env));
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.OpenDynamicElement, function (vm) {
    var tagName = vm.frame.getOperand().value();
    vm.stack().openElement(tagName);
});
var ClassList = (function () {
    function ClassList() {
        this.list = null;
        this.isConst = true;
    }
    ClassList.prototype.append = function (reference) {
        var _a = this, list = _a.list, isConst = _a.isConst;
        if (list === null)
            list = this.list = [];
        list.push(reference);
        this.isConst = isConst && reference_1.isConst(reference);
    };
    ClassList.prototype.toReference = function () {
        var _a = this, list = _a.list, isConst = _a.isConst;
        if (!list)
            return references_1.NULL_REFERENCE;
        if (isConst)
            return references_1.PrimitiveReference.create(toClassName(list));
        return new ClassListReference(list);
    };
    return ClassList;
}());
var ClassListReference = (function (_super) {
    __extends(ClassListReference, _super);
    function ClassListReference(list) {
        var _this = _super.call(this) || this;
        _this.list = [];
        _this.tag = reference_1.combineTagged(list);
        _this.list = list;
        return _this;
    }
    ClassListReference.prototype.compute = function () {
        return toClassName(this.list);
    };
    return ClassListReference;
}(reference_1.CachedReference));
function toClassName(list) {
    var ret = [];
    for (var i = 0; i < list.length; i++) {
        var value = list[i].value();
        if (value !== false && value !== null && value !== undefined)
            ret.push(value);
    }
    return (ret.length === 0) ? null : ret.join(' ');
}
var SimpleElementOperations = (function () {
    function SimpleElementOperations(env) {
        this.env = env;
        this.opcodes = null;
        this.classList = null;
    }
    SimpleElementOperations.prototype.addStaticAttribute = function (element, name, value) {
        if (name === 'class') {
            this.addClass(references_1.PrimitiveReference.create(value));
        }
        else {
            this.env.getAppendOperations().setAttribute(element, name, value);
        }
    };
    SimpleElementOperations.prototype.addStaticAttributeNS = function (element, namespace, name, value) {
        this.env.getAppendOperations().setAttribute(element, name, value, namespace);
    };
    SimpleElementOperations.prototype.addDynamicAttribute = function (element, name, reference, isTrusting) {
        if (name === 'class') {
            this.addClass(reference);
        }
        else {
            var attributeManager = this.env.attributeFor(element, name, isTrusting);
            var attribute = new DynamicAttribute(element, attributeManager, name, reference);
            this.addAttribute(attribute);
        }
    };
    SimpleElementOperations.prototype.addDynamicAttributeNS = function (element, namespace, name, reference, isTrusting) {
        var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);
        var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);
        this.addAttribute(nsAttribute);
    };
    SimpleElementOperations.prototype.flush = function (element, vm) {
        var env = vm.env;
        var _a = this, opcodes = _a.opcodes, classList = _a.classList;
        for (var i = 0; opcodes && i < opcodes.length; i++) {
            vm.updateWith(opcodes[i]);
        }
        if (classList) {
            var attributeManager = env.attributeFor(element, 'class', false);
            var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());
            var opcode = attribute.flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
        this.opcodes = null;
        this.classList = null;
    };
    SimpleElementOperations.prototype.addClass = function (reference) {
        var classList = this.classList;
        if (!classList) {
            classList = this.classList = new ClassList();
        }
        classList.append(reference);
    };
    SimpleElementOperations.prototype.addAttribute = function (attribute) {
        var opcode = attribute.flush(this.env);
        if (opcode) {
            var opcodes = this.opcodes;
            if (!opcodes) {
                opcodes = this.opcodes = [];
            }
            opcodes.push(opcode);
        }
    };
    return SimpleElementOperations;
}());
exports.SimpleElementOperations = SimpleElementOperations;
var ComponentElementOperations = (function () {
    function ComponentElementOperations(env) {
        this.env = env;
        this.attributeNames = null;
        this.attributes = null;
        this.classList = null;
    }
    ComponentElementOperations.prototype.addStaticAttribute = function (element, name, value) {
        if (name === 'class') {
            this.addClass(references_1.PrimitiveReference.create(value));
        }
        else if (this.shouldAddAttribute(name)) {
            this.addAttribute(name, new StaticAttribute(element, name, value));
        }
    };
    ComponentElementOperations.prototype.addStaticAttributeNS = function (element, namespace, name, value) {
        if (this.shouldAddAttribute(name)) {
            this.addAttribute(name, new StaticAttribute(element, name, value, namespace));
        }
    };
    ComponentElementOperations.prototype.addDynamicAttribute = function (element, name, reference, isTrusting) {
        if (name === 'class') {
            this.addClass(reference);
        }
        else if (this.shouldAddAttribute(name)) {
            var attributeManager = this.env.attributeFor(element, name, isTrusting);
            var attribute = new DynamicAttribute(element, attributeManager, name, reference);
            this.addAttribute(name, attribute);
        }
    };
    ComponentElementOperations.prototype.addDynamicAttributeNS = function (element, namespace, name, reference, isTrusting) {
        if (this.shouldAddAttribute(name)) {
            var attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);
            var nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);
            this.addAttribute(name, nsAttribute);
        }
    };
    ComponentElementOperations.prototype.flush = function (element, vm) {
        var env = this.env;
        var _a = this, attributes = _a.attributes, classList = _a.classList;
        for (var i = 0; attributes && i < attributes.length; i++) {
            var opcode = attributes[i].flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
        if (classList) {
            var attributeManager = env.attributeFor(element, 'class', false);
            var attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());
            var opcode = attribute.flush(env);
            if (opcode) {
                vm.updateWith(opcode);
            }
        }
    };
    ComponentElementOperations.prototype.shouldAddAttribute = function (name) {
        return !this.attributeNames || this.attributeNames.indexOf(name) === -1;
    };
    ComponentElementOperations.prototype.addClass = function (reference) {
        var classList = this.classList;
        if (!classList) {
            classList = this.classList = new ClassList();
        }
        classList.append(reference);
    };
    ComponentElementOperations.prototype.addAttribute = function (name, attribute) {
        var _a = this, attributeNames = _a.attributeNames, attributes = _a.attributes;
        if (!attributeNames) {
            attributeNames = this.attributeNames = [];
            attributes = this.attributes = [];
        }
        attributeNames.push(name);
        util_1.unwrap(attributes).push(attribute);
    };
    return ComponentElementOperations;
}());
exports.ComponentElementOperations = ComponentElementOperations;
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.FlushElement, function (vm) {
    var stack = vm.stack();
    var action = 'FlushElementOpcode#evaluate';
    stack.expectOperations(action).flush(stack.expectConstructing(action), vm);
    stack.flushElement();
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.CloseElement, function (vm) { return vm.stack().closeElement(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PopElement, function (vm) { return vm.stack().popElement(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.StaticAttr, function (vm, _a) {
    var _name = _a.op1, _value = _a.op2, _namespace = _a.op3;
    var name = vm.constants.getString(_name);
    var value = vm.constants.getString(_value);
    if (_namespace) {
        var namespace = vm.constants.getString(_namespace);
        vm.stack().setStaticAttributeNS(namespace, name, value);
    }
    else {
        vm.stack().setStaticAttribute(name, value);
    }
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Modifier, function (vm, _a) {
    var _name = _a.op1, _manager = _a.op2, _args = _a.op3;
    var manager = vm.constants.getOther(_manager);
    var rawArgs = vm.constants.getExpression(_args);
    var stack = vm.stack();
    var element = stack.constructing, updateOperations = stack.updateOperations;
    var args = rawArgs.evaluate(vm);
    var dynamicScope = vm.dynamicScope();
    var modifier = manager.create(element, args, dynamicScope, updateOperations);
    vm.env.scheduleInstallModifier(modifier, manager);
    var destructor = manager.getDestructor(modifier);
    if (destructor) {
        vm.newDestroyable(destructor);
    }
    vm.updateWith(new UpdateModifierOpcode(manager, modifier, args));
});
var UpdateModifierOpcode = (function (_super) {
    __extends(UpdateModifierOpcode, _super);
    function UpdateModifierOpcode(manager, modifier, args) {
        var _this = _super.call(this) || this;
        _this.manager = manager;
        _this.modifier = modifier;
        _this.args = args;
        _this.type = "update-modifier";
        _this.tag = args.tag;
        _this.lastUpdated = args.tag.value();
        return _this;
    }
    UpdateModifierOpcode.prototype.evaluate = function (vm) {
        var _a = this, manager = _a.manager, modifier = _a.modifier, tag = _a.tag, lastUpdated = _a.lastUpdated;
        if (!tag.validate(lastUpdated)) {
            vm.env.scheduleUpdateModifier(modifier, manager);
            this.lastUpdated = tag.value();
        }
    };
    UpdateModifierOpcode.prototype.toJSON = function () {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.args)]
        };
    };
    return UpdateModifierOpcode;
}(opcodes_1.UpdatingOpcode));
exports.UpdateModifierOpcode = UpdateModifierOpcode;
var StaticAttribute = (function () {
    function StaticAttribute(element, name, value, namespace) {
        this.element = element;
        this.name = name;
        this.value = value;
        this.namespace = namespace;
    }
    StaticAttribute.prototype.flush = function (env) {
        env.getAppendOperations().setAttribute(this.element, this.name, this.value, this.namespace);
        return null;
    };
    return StaticAttribute;
}());
exports.StaticAttribute = StaticAttribute;
var DynamicAttribute = (function () {
    function DynamicAttribute(element, attributeManager, name, reference, namespace) {
        this.element = element;
        this.attributeManager = attributeManager;
        this.name = name;
        this.reference = reference;
        this.namespace = namespace;
        this.cache = null;
        this.tag = reference.tag;
    }
    DynamicAttribute.prototype.patch = function (env) {
        var _a = this, element = _a.element, cache = _a.cache;
        var value = util_1.expect(cache, 'must patch after flush').revalidate();
        if (reference_1.isModified(value)) {
            this.attributeManager.updateAttribute(env, element, value, this.namespace);
        }
    };
    DynamicAttribute.prototype.flush = function (env) {
        var _a = this, reference = _a.reference, element = _a.element;
        if (reference_1.isConst(reference)) {
            var value = reference.value();
            this.attributeManager.setAttribute(env, element, value, this.namespace);
            return null;
        }
        else {
            var cache = this.cache = new reference_1.ReferenceCache(reference);
            var value = cache.peek();
            this.attributeManager.setAttribute(env, element, value, this.namespace);
            return new PatchElementOpcode(this);
        }
    };
    DynamicAttribute.prototype.toJSON = function () {
        var _a = this, element = _a.element, namespace = _a.namespace, name = _a.name, cache = _a.cache;
        var formattedElement = formatElement(element);
        var lastValue = util_1.expect(cache, 'must serialize after flush').peek();
        if (namespace) {
            return {
                element: formattedElement,
                type: 'attribute',
                namespace: namespace,
                name: name,
                lastValue: lastValue
            };
        }
        return {
            element: formattedElement,
            type: 'attribute',
            namespace: namespace === undefined ? null : namespace,
            name: name,
            lastValue: lastValue
        };
    };
    return DynamicAttribute;
}());
exports.DynamicAttribute = DynamicAttribute;
function formatElement(element) {
    return JSON.stringify("<" + element.tagName.toLowerCase() + " />");
}
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.DynamicAttrNS, function (vm, _a) {
    var _name = _a.op1, _namespace = _a.op2, trusting = _a.op3;
    var name = vm.constants.getString(_name);
    var namespace = vm.constants.getString(_namespace);
    var reference = vm.frame.getOperand();
    vm.stack().setDynamicAttributeNS(namespace, name, reference, !!trusting);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.DynamicAttr, function (vm, _a) {
    var _name = _a.op1, trusting = _a.op2;
    var name = vm.constants.getString(_name);
    var reference = vm.frame.getOperand();
    vm.stack().setDynamicAttribute(name, reference, !!trusting);
});
var PatchElementOpcode = (function (_super) {
    __extends(PatchElementOpcode, _super);
    function PatchElementOpcode(operation) {
        var _this = _super.call(this) || this;
        _this.type = "patch-element";
        _this.tag = operation.tag;
        _this.operation = operation;
        return _this;
    }
    PatchElementOpcode.prototype.evaluate = function (vm) {
        this.operation.patch(vm.env);
    };
    PatchElementOpcode.prototype.toJSON = function () {
        var _a = this, _guid = _a._guid, type = _a.type, operation = _a.operation;
        return {
            guid: _guid,
            type: type,
            details: operation.toJSON()
        };
    };
    return PatchElementOpcode;
}(opcodes_1.UpdatingOpcode));
exports.PatchElementOpcode = PatchElementOpcode;
//# sourceMappingURL=data:application/json;base64,