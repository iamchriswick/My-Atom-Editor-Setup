"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var sanitized_values_1 = require("./sanitized-values");
var props_1 = require("./props");
var helper_1 = require("./helper");
var content_1 = require("../compiled/opcodes/content");
function defaultManagers(element, attr, _isTrusting, _namespace) {
    var tagName = element.tagName;
    var isSVG = element.namespaceURI === helper_1.SVG_NAMESPACE;
    if (isSVG) {
        return defaultAttributeManagers(tagName, attr);
    }
    var _a = props_1.normalizeProperty(element, attr), type = _a.type, normalized = _a.normalized;
    if (type === 'attr') {
        return defaultAttributeManagers(tagName, normalized);
    }
    else {
        return defaultPropertyManagers(tagName, normalized);
    }
}
exports.defaultManagers = defaultManagers;
function defaultPropertyManagers(tagName, attr) {
    if (sanitized_values_1.requiresSanitization(tagName, attr)) {
        return new SafePropertyManager(attr);
    }
    if (isUserInputValue(tagName, attr)) {
        return exports.INPUT_VALUE_PROPERTY_MANAGER;
    }
    if (isOptionSelected(tagName, attr)) {
        return exports.OPTION_SELECTED_MANAGER;
    }
    return new PropertyManager(attr);
}
exports.defaultPropertyManagers = defaultPropertyManagers;
function defaultAttributeManagers(tagName, attr) {
    if (sanitized_values_1.requiresSanitization(tagName, attr)) {
        return new SafeAttributeManager(attr);
    }
    return new AttributeManager(attr);
}
exports.defaultAttributeManagers = defaultAttributeManagers;
function readDOMAttr(element, attr) {
    var isSVG = element.namespaceURI === helper_1.SVG_NAMESPACE;
    var _a = props_1.normalizeProperty(element, attr), type = _a.type, normalized = _a.normalized;
    if (isSVG) {
        return element.getAttribute(normalized);
    }
    if (type === 'attr') {
        return element.getAttribute(normalized);
    }
    {
        return element[normalized];
    }
}
exports.readDOMAttr = readDOMAttr;
;
var AttributeManager = (function () {
    function AttributeManager(attr) {
        this.attr = attr;
    }
    AttributeManager.prototype.setAttribute = function (env, element, value, namespace) {
        var dom = env.getAppendOperations();
        var normalizedValue = normalizeAttributeValue(value);
        if (!isAttrRemovalValue(normalizedValue)) {
            dom.setAttribute(element, this.attr, normalizedValue, namespace);
        }
    };
    AttributeManager.prototype.updateAttribute = function (env, element, value, namespace) {
        if (value === null || value === undefined || value === false) {
            if (namespace) {
                env.getDOM().removeAttributeNS(element, namespace, this.attr);
            }
            else {
                env.getDOM().removeAttribute(element, this.attr);
            }
        }
        else {
            this.setAttribute(env, element, value);
        }
    };
    return AttributeManager;
}());
exports.AttributeManager = AttributeManager;
;
var PropertyManager = (function (_super) {
    __extends(PropertyManager, _super);
    function PropertyManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropertyManager.prototype.setAttribute = function (_env, element, value, _namespace) {
        if (!isAttrRemovalValue(value)) {
            element[this.attr] = value;
        }
    };
    PropertyManager.prototype.removeAttribute = function (env, element, namespace) {
        // TODO this sucks but to preserve properties first and to meet current
        // semantics we must do this.
        var attr = this.attr;
        if (namespace) {
            env.getDOM().removeAttributeNS(element, namespace, attr);
        }
        else {
            env.getDOM().removeAttribute(element, attr);
        }
    };
    PropertyManager.prototype.updateAttribute = function (env, element, value, namespace) {
        // ensure the property is always updated
        element[this.attr] = value;
        if (isAttrRemovalValue(value)) {
            this.removeAttribute(env, element, namespace);
        }
    };
    return PropertyManager;
}(AttributeManager));
exports.PropertyManager = PropertyManager;
;
function normalizeAttributeValue(value) {
    if (value === false || value === undefined || value === null) {
        return null;
    }
    if (value === true) {
        return '';
    }
    // onclick function etc in SSR
    if (typeof value === 'function') {
        return null;
    }
    return String(value);
}
function isAttrRemovalValue(value) {
    return value === null || value === undefined;
}
var SafePropertyManager = (function (_super) {
    __extends(SafePropertyManager, _super);
    function SafePropertyManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SafePropertyManager.prototype.setAttribute = function (env, element, value) {
        _super.prototype.setAttribute.call(this, env, element, sanitized_values_1.sanitizeAttributeValue(env, element, this.attr, value));
    };
    SafePropertyManager.prototype.updateAttribute = function (env, element, value) {
        _super.prototype.updateAttribute.call(this, env, element, sanitized_values_1.sanitizeAttributeValue(env, element, this.attr, value));
    };
    return SafePropertyManager;
}(PropertyManager));
function isUserInputValue(tagName, attribute) {
    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';
}
var InputValuePropertyManager = (function (_super) {
    __extends(InputValuePropertyManager, _super);
    function InputValuePropertyManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputValuePropertyManager.prototype.setAttribute = function (_env, element, value) {
        var input = element;
        input.value = content_1.normalizeTextValue(value);
    };
    InputValuePropertyManager.prototype.updateAttribute = function (_env, element, value) {
        var input = element;
        var currentValue = input.value;
        var normalizedValue = content_1.normalizeTextValue(value);
        if (currentValue !== normalizedValue) {
            input.value = normalizedValue;
        }
    };
    return InputValuePropertyManager;
}(AttributeManager));
exports.INPUT_VALUE_PROPERTY_MANAGER = new InputValuePropertyManager('value');
function isOptionSelected(tagName, attribute) {
    return tagName === 'OPTION' && attribute === 'selected';
}
var OptionSelectedManager = (function (_super) {
    __extends(OptionSelectedManager, _super);
    function OptionSelectedManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OptionSelectedManager.prototype.setAttribute = function (_env, element, value) {
        if (value !== null && value !== undefined && value !== false) {
            var option = element;
            option.selected = true;
        }
    };
    OptionSelectedManager.prototype.updateAttribute = function (_env, element, value) {
        var option = element;
        if (value) {
            option.selected = true;
        }
        else {
            option.selected = false;
        }
    };
    return OptionSelectedManager;
}(PropertyManager));
exports.OPTION_SELECTED_MANAGER = new OptionSelectedManager('selected');
var SafeAttributeManager = (function (_super) {
    __extends(SafeAttributeManager, _super);
    function SafeAttributeManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SafeAttributeManager.prototype.setAttribute = function (env, element, value) {
        _super.prototype.setAttribute.call(this, env, element, sanitized_values_1.sanitizeAttributeValue(env, element, this.attr, value));
    };
    SafeAttributeManager.prototype.updateAttribute = function (env, element, value, _namespace) {
        _super.prototype.updateAttribute.call(this, env, element, sanitized_values_1.sanitizeAttributeValue(env, element, this.attr, value));
    };
    return SafeAttributeManager;
}(AttributeManager));
//# sourceMappingURL=data:application/json;base64,