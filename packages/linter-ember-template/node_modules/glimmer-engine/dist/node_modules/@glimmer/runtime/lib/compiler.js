"use strict";
var blocks_1 = require("./compiled/blocks");
var scanner_1 = require("./scanner");
var functions_1 = require("./syntax/functions");
var builder_1 = require("./compiled/opcodes/builder");
function compileLayout(compilable, env) {
    var builder = new ComponentLayoutBuilder(env);
    compilable.compile(builder);
    return builder.compile();
}
exports.compileLayout = compileLayout;
var ComponentLayoutBuilder = (function () {
    function ComponentLayoutBuilder(env) {
        this.env = env;
    }
    ComponentLayoutBuilder.prototype.wrapLayout = function (layout) {
        this.inner = new WrappedBuilder(this.env, layout);
    };
    ComponentLayoutBuilder.prototype.fromLayout = function (layout) {
        this.inner = new UnwrappedBuilder(this.env, layout);
    };
    ComponentLayoutBuilder.prototype.compile = function () {
        return this.inner.compile();
    };
    Object.defineProperty(ComponentLayoutBuilder.prototype, "tag", {
        get: function () {
            return this.inner.tag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentLayoutBuilder.prototype, "attrs", {
        get: function () {
            return this.inner.attrs;
        },
        enumerable: true,
        configurable: true
    });
    return ComponentLayoutBuilder;
}());
var WrappedBuilder = (function () {
    function WrappedBuilder(env, layout) {
        this.env = env;
        this.layout = layout;
        this.tag = new ComponentTagBuilder();
        this.attrs = new ComponentAttrsBuilder();
    }
    WrappedBuilder.prototype.compile = function () {
        //========DYNAMIC
        //        PutValue(TagExpr)
        //        Test
        //        JumpUnless(BODY)
        //        OpenDynamicPrimitiveElement
        //        DidCreateElement
        //        ...attr statements...
        //        FlushElement
        // BODY:  Noop
        //        ...body statements...
        //        PutValue(TagExpr)
        //        Test
        //        JumpUnless(END)
        //        CloseElement
        // END:   Noop
        //        DidRenderLayout
        //        Exit
        //
        //========STATIC
        //        OpenPrimitiveElementOpcode
        //        DidCreateElement
        //        ...attr statements...
        //        FlushElement
        //        ...body statements...
        //        CloseElement
        //        DidRenderLayout
        //        Exit
        var _a = this, env = _a.env, layout = _a.layout;
        var symbolTable = layout.symbolTable;
        var b = builder(env, layout.symbolTable);
        b.startLabels();
        var dynamicTag = this.tag.getDynamic();
        var staticTag;
        if (dynamicTag) {
            b.putValue(dynamicTag);
            b.test('simple');
            b.jumpUnless('BODY');
            b.openDynamicPrimitiveElement();
            b.didCreateElement();
            this.attrs['buffer'].forEach(function (statement) { return scanner_1.compileStatement(statement, b); });
            b.flushElement();
            b.label('BODY');
        }
        else if (staticTag = this.tag.getStatic()) {
            b.openPrimitiveElement(staticTag);
            b.didCreateElement();
            this.attrs['buffer'].forEach(function (statement) { return scanner_1.compileStatement(statement, b); });
            b.flushElement();
        }
        b.preludeForLayout(layout);
        layout.statements.forEach(function (statement) { return scanner_1.compileStatement(statement, b); });
        if (dynamicTag) {
            b.putValue(dynamicTag);
            b.test('simple');
            b.jumpUnless('END');
            b.closeElement();
            b.label('END');
        }
        else if (staticTag) {
            b.closeElement();
        }
        b.didRenderLayout();
        b.stopLabels();
        return new blocks_1.CompiledProgram(b.toSlice(), symbolTable.size);
    };
    return WrappedBuilder;
}());
function isOpenElement(value) {
    var type = value[0];
    return type === 'open-element' || type === 'open-primitive-element';
}
var UnwrappedBuilder = (function () {
    function UnwrappedBuilder(env, layout) {
        this.env = env;
        this.layout = layout;
        this.attrs = new ComponentAttrsBuilder();
    }
    Object.defineProperty(UnwrappedBuilder.prototype, "tag", {
        get: function () {
            throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');
        },
        enumerable: true,
        configurable: true
    });
    UnwrappedBuilder.prototype.compile = function () {
        var _a = this, env = _a.env, layout = _a.layout;
        var b = builder(env, layout.symbolTable);
        b.startLabels();
        b.preludeForLayout(layout);
        var attrs = this.attrs['buffer'];
        var attrsInserted = false;
        for (var i = 0; i < layout.statements.length; i++) {
            var statement = layout.statements[i];
            if (!attrsInserted && isOpenElement(statement)) {
                b.openComponentElement(statement[1]);
                b.didCreateElement();
                b.shadowAttributes();
                attrs.forEach(function (statement) { return scanner_1.compileStatement(statement, b); });
                attrsInserted = true;
            }
            else {
                scanner_1.compileStatement(statement, b);
            }
        }
        b.didRenderLayout();
        b.stopLabels();
        return new blocks_1.CompiledProgram(b.toSlice(), layout.symbolTable.size);
    };
    return UnwrappedBuilder;
}());
var ComponentTagBuilder = (function () {
    function ComponentTagBuilder() {
        this.isDynamic = null;
        this.isStatic = null;
        this.staticTagName = null;
        this.dynamicTagName = null;
    }
    ComponentTagBuilder.prototype.getDynamic = function () {
        if (this.isDynamic) {
            return this.dynamicTagName;
        }
    };
    ComponentTagBuilder.prototype.getStatic = function () {
        if (this.isStatic) {
            return this.staticTagName;
        }
    };
    ComponentTagBuilder.prototype.static = function (tagName) {
        this.isStatic = true;
        this.staticTagName = tagName;
    };
    ComponentTagBuilder.prototype.dynamic = function (tagName) {
        this.isDynamic = true;
        this.dynamicTagName = ['function', tagName];
    };
    return ComponentTagBuilder;
}());
var ComponentAttrsBuilder = (function () {
    function ComponentAttrsBuilder() {
        this.buffer = [];
    }
    ComponentAttrsBuilder.prototype.static = function (name, value) {
        this.buffer.push(['static-attr', name, value, null]);
    };
    ComponentAttrsBuilder.prototype.dynamic = function (name, value) {
        this.buffer.push(['dynamic-attr', name, ['function', value], null]);
    };
    return ComponentAttrsBuilder;
}());
var ComponentBuilder = (function () {
    function ComponentBuilder(builder) {
        this.builder = builder;
        this.env = builder.env;
    }
    ComponentBuilder.prototype.static = function (definition, args, _symbolTable, shadow) {
        this.builder.unit(function (b) {
            b.putComponentDefinition(definition);
            b.openComponent(functions_1.compileBaselineArgs(args, b), shadow);
            b.closeComponent();
        });
    };
    ComponentBuilder.prototype.dynamic = function (definitionArgs, definition, args, _symbolTable, shadow) {
        this.builder.unit(function (b) {
            b.putArgs(functions_1.compileArgs(definitionArgs[0], definitionArgs[1], b));
            b.putValue(['function', definition]);
            b.test('simple');
            b.enter('BEGIN', 'END');
            b.label('BEGIN');
            b.jumpUnless('END');
            b.putDynamicComponentDefinition();
            b.openComponent(functions_1.compileBaselineArgs(args, b), shadow);
            b.closeComponent();
            b.label('END');
            b.exit();
        });
    };
    return ComponentBuilder;
}());
exports.ComponentBuilder = ComponentBuilder;
function builder(env, symbolTable) {
    return new builder_1.default(symbolTable, env);
}
exports.builder = builder;
//# sourceMappingURL=data:application/json;base64,