"use strict";
var value_1 = require("../compiled/expressions/value");
var has_block_1 = require("../compiled/expressions/has-block");
var util_1 = require("@glimmer/util");
var lookups_1 = require("../compiled/expressions/lookups");
var helper_1 = require("../compiled/expressions/helper");
var concat_1 = require("../compiled/expressions/concat");
var args_1 = require("../compiled/expressions/args");
var has_block_2 = require("../compiled/expressions/has-block");
var function_1 = require("../compiled/expressions/function");
function debugCallback(context, get) {
    console.info('Use `context`, and `get(<path>)` to debug this template.');
    /* tslint:disable */
    debugger;
    /* tslint:enable */
    return { context: context, get: get };
}
function getter(vm, builder) {
    return function (path) {
        var parts = path.split('.');
        if (parts[0] === 'this') {
            parts[0] = null;
        }
        return compileRef(parts, builder).evaluate(vm);
    };
}
var callback = debugCallback;
// For testing purposes
function setDebuggerCallback(cb) {
    callback = cb;
}
exports.setDebuggerCallback = setDebuggerCallback;
function resetDebuggerCallback() {
    callback = debugCallback;
}
exports.resetDebuggerCallback = resetDebuggerCallback;
var Compilers = (function () {
    function Compilers() {
        this.names = util_1.dict();
        this.funcs = [];
    }
    Compilers.prototype.add = function (name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };
    Compilers.prototype.compile = function (sexp, builder) {
        var name = sexp[0];
        var index = this.names[name];
        var func = this.funcs[index];
        util_1.assert(!!func, "expected an implementation for " + sexp[0]);
        return func(sexp, builder);
    };
    return Compilers;
}());
exports.Compilers = Compilers;
exports.STATEMENTS = new Compilers();
exports.STATEMENTS.add('text', function (sexp, builder) {
    builder.text(sexp[1]);
});
exports.STATEMENTS.add('comment', function (sexp, builder) {
    builder.comment(sexp[1]);
});
exports.STATEMENTS.add('close-element', function (_sexp, builder) {
    util_1.LOGGER.trace('close-element statement');
    builder.closeElement();
});
exports.STATEMENTS.add('flush-element', function (_sexp, builder) {
    builder.flushElement();
});
exports.STATEMENTS.add('modifier', function (sexp, builder) {
    var path = sexp[1], params = sexp[2], hash = sexp[3];
    var args = compileArgs(params, hash, builder);
    if (builder.env.hasModifier(path, builder.symbolTable)) {
        builder.modifier(path[0], args);
    }
    else {
        throw new Error("Compile Error " + path.join('.') + " is not a modifier: Helpers may not be used in the element form.");
    }
});
exports.STATEMENTS.add('static-attr', function (sexp, builder) {
    var name = sexp[1], value = sexp[2], namespace = sexp[3];
    builder.staticAttr(name, namespace, value);
});
exports.STATEMENTS.add('any-dynamic-attr', function (sexp, builder) {
    var name = sexp[1], value = sexp[2], namespace = sexp[3], trusting = sexp[4];
    builder.putValue(value);
    if (namespace) {
        builder.dynamicAttrNS(name, namespace, trusting);
    }
    else {
        builder.dynamicAttr(name, trusting);
    }
});
exports.STATEMENTS.add('open-element', function (sexp, builder) {
    util_1.LOGGER.trace('open-element statement');
    builder.openPrimitiveElement(sexp[1]);
});
exports.STATEMENTS.add('optimized-append', function (sexp, builder) {
    var value = sexp[1], trustingMorph = sexp[2];
    var inlines = builder.env.macros().inlines;
    var returned = inlines.compile(sexp, builder) || value;
    if (returned === true)
        return;
    builder.putValue(returned[1]);
    if (trustingMorph) {
        builder.trustingAppend();
    }
    else {
        builder.cautiousAppend();
    }
});
exports.STATEMENTS.add('unoptimized-append', function (sexp, builder) {
    var value = sexp[1], trustingMorph = sexp[2];
    var inlines = builder.env.macros().inlines;
    var returned = inlines.compile(sexp, builder) || value;
    if (returned === true)
        return;
    if (trustingMorph) {
        builder.guardedTrustingAppend(returned[1]);
    }
    else {
        builder.guardedCautiousAppend(returned[1]);
    }
});
exports.STATEMENTS.add('nested-block', function (sexp, builder) {
    var blocks = builder.env.macros().blocks;
    blocks.compile(sexp, builder);
});
exports.STATEMENTS.add('scanned-block', function (sexp, builder) {
    var path = sexp[1], params = sexp[2], hash = sexp[3], template = sexp[4], inverse = sexp[5];
    var templateBlock = template && template.scan();
    var inverseBlock = inverse && inverse.scan();
    var blocks = builder.env.macros().blocks;
    blocks.compile(['nested-block', path, params, hash, templateBlock, inverseBlock], builder);
});
exports.STATEMENTS.add('scanned-component', function (sexp, builder) {
    var tag = sexp[1], attrs = sexp[2], rawArgs = sexp[3], rawBlock = sexp[4];
    var block = rawBlock && rawBlock.scan();
    var args = compileBlockArgs(null, rawArgs, { default: block, inverse: null }, builder);
    var definition = builder.env.getComponentDefinition([tag], builder.symbolTable);
    builder.putComponentDefinition(definition);
    builder.openComponent(args, attrs.scan());
    builder.closeComponent();
});
exports.STATEMENTS.add('static-partial', function (sexp, builder) {
    var name = sexp[1];
    if (!builder.env.hasPartial(name, builder.symbolTable)) {
        throw new Error("Compile Error: Could not find a partial named \"" + name + "\"");
    }
    var definition = builder.env.lookupPartial(name, builder.symbolTable);
    builder.putPartialDefinition(definition);
    builder.evaluatePartial();
});
exports.STATEMENTS.add('dynamic-partial', function (sexp, builder) {
    var name = sexp[1];
    builder.startLabels();
    builder.putValue(name);
    builder.test('simple');
    builder.enter('BEGIN', 'END');
    builder.label('BEGIN');
    builder.jumpUnless('END');
    builder.putDynamicPartialDefinition();
    builder.evaluatePartial();
    builder.label('END');
    builder.exit();
    builder.stopLabels();
});
exports.STATEMENTS.add('yield', function (sexp, builder) {
    var to = sexp[1], params = sexp[2];
    var args = compileArgs(params, null, builder);
    builder.yield(args, to);
});
exports.STATEMENTS.add('debugger', function (sexp, builder) {
    builder.putValue(['function', function (vm) {
            var context = vm.getSelf().value();
            var get = function (path) {
                return getter(vm, builder)(path).value();
            };
            callback(context, get);
        }]);
    return sexp;
});
var EXPRESSIONS = new Compilers();
function expr(expression, builder) {
    if (Array.isArray(expression)) {
        return EXPRESSIONS.compile(expression, builder);
    }
    else {
        return new value_1.default(expression);
    }
}
exports.expr = expr;
EXPRESSIONS.add('unknown', function (sexp, builder) {
    var path = sexp[1];
    if (builder.env.hasHelper(path, builder.symbolTable)) {
        return new helper_1.default(path, builder.env.lookupHelper(path, builder.symbolTable), args_1.CompiledArgs.empty(), builder.symbolTable);
    }
    else {
        return compileRef(path, builder);
    }
});
EXPRESSIONS.add('concat', (function (sexp, builder) {
    var params = sexp[1].map(function (p) { return expr(p, builder); });
    return new concat_1.default(params);
}));
EXPRESSIONS.add('function', function (sexp, builder) {
    return new function_1.CompiledFunctionExpression(sexp[1], builder.symbolTable);
});
EXPRESSIONS.add('helper', function (sexp, builder) {
    var env = builder.env, symbolTable = builder.symbolTable;
    var path = sexp[1], params = sexp[2], hash = sexp[3];
    if (env.hasHelper(path, symbolTable)) {
        var args = compileArgs(params, hash, builder);
        return new helper_1.default(path, env.lookupHelper(path, symbolTable), args, symbolTable);
    }
    else {
        throw new Error("Compile Error: " + path.join('.') + " is not a helper");
    }
});
EXPRESSIONS.add('get', function (sexp, builder) {
    return compileRef(sexp[1], builder);
});
EXPRESSIONS.add('undefined', function (_sexp, _builder) {
    return new value_1.default(undefined);
});
EXPRESSIONS.add('arg', function (sexp, builder) {
    var parts = sexp[1];
    var head = parts[0];
    var named, partial;
    if (named = builder.symbolTable.getSymbol('named', head)) {
        var path = parts.slice(1);
        var inner = new lookups_1.CompiledSymbol(named, head);
        return lookups_1.default.create(inner, path);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        var path = parts.slice(1);
        var inner = new lookups_1.CompiledInPartialName(partial, head);
        return lookups_1.default.create(inner, path);
    }
    else {
        throw new Error("[BUG] @" + parts.join('.') + " is not a valid lookup path.");
    }
});
EXPRESSIONS.add('has-block', function (sexp, builder) {
    var blockName = sexp[1];
    var yields, partial;
    if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
        var inner = new has_block_2.CompiledGetBlockBySymbol(yields, blockName);
        return new has_block_1.default(inner);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        var inner = new has_block_2.CompiledInPartialGetBlock(partial, blockName);
        return new has_block_1.default(inner);
    }
    else {
        throw new Error('[BUG] ${blockName} is not a valid block name.');
    }
});
EXPRESSIONS.add('has-block-params', function (sexp, builder) {
    var blockName = sexp[1];
    var yields, partial;
    if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
        var inner = new has_block_2.CompiledGetBlockBySymbol(yields, blockName);
        return new has_block_1.CompiledHasBlockParams(inner);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        var inner = new has_block_2.CompiledInPartialGetBlock(partial, blockName);
        return new has_block_1.CompiledHasBlockParams(inner);
    }
    else {
        throw new Error('[BUG] ${blockName} is not a valid block name.');
    }
});
function compileArgs(params, hash, builder) {
    var compiledParams = compileParams(params, builder);
    var compiledHash = compileHash(hash, builder);
    return args_1.CompiledArgs.create(compiledParams, compiledHash, args_1.EMPTY_BLOCKS);
}
exports.compileArgs = compileArgs;
function compileBlockArgs(params, hash, blocks, builder) {
    var compiledParams = compileParams(params, builder);
    var compiledHash = compileHash(hash, builder);
    return args_1.CompiledArgs.create(compiledParams, compiledHash, blocks);
}
exports.compileBlockArgs = compileBlockArgs;
function compileBaselineArgs(args, builder) {
    var params = args[0], hash = args[1], _default = args[2], inverse = args[3];
    return args_1.CompiledArgs.create(compileParams(params, builder), compileHash(hash, builder), { default: _default, inverse: inverse });
}
exports.compileBaselineArgs = compileBaselineArgs;
function compileParams(params, builder) {
    if (!params || params.length === 0)
        return args_1.COMPILED_EMPTY_POSITIONAL_ARGS;
    var compiled = params.map(function (p) { return expr(p, builder); });
    return args_1.CompiledPositionalArgs.create(compiled);
}
function compileHash(hash, builder) {
    if (!hash)
        return args_1.COMPILED_EMPTY_NAMED_ARGS;
    var keys = hash[0], values = hash[1];
    if (keys.length === 0)
        return args_1.COMPILED_EMPTY_NAMED_ARGS;
    var compiled = values.map(function (p) { return expr(p, builder); });
    return new args_1.CompiledNamedArgs(keys, compiled);
}
function compileRef(parts, builder) {
    var head = parts[0];
    var local;
    if (head === null) {
        var inner = new lookups_1.CompiledSelf();
        var path = parts.slice(1);
        return lookups_1.default.create(inner, path);
    }
    else if (local = builder.symbolTable.getSymbol('local', head)) {
        var path = parts.slice(1);
        var inner = new lookups_1.CompiledSymbol(local, head);
        return lookups_1.default.create(inner, path);
    }
    else {
        var inner = new lookups_1.CompiledSelf();
        return lookups_1.default.create(inner, parts);
    }
}
var Blocks = (function () {
    function Blocks() {
        this.names = util_1.dict();
        this.funcs = [];
    }
    Blocks.prototype.add = function (name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };
    Blocks.prototype.addMissing = function (func) {
        this.missing = func;
    };
    Blocks.prototype.compile = function (sexp, builder) {
        // assert(sexp[1].length === 1, 'paths in blocks are not supported');
        var name = sexp[1][0];
        var index = this.names[name];
        if (index === undefined) {
            util_1.assert(!!this.missing, name + " not found, and no catch-all block handler was registered");
            var func = this.missing;
            var handled = func(sexp, builder);
            util_1.assert(!!handled, name + " not found, and the catch-all block handler didn't handle it");
        }
        else {
            var func = this.funcs[index];
            func(sexp, builder);
        }
    };
    return Blocks;
}());
exports.Blocks = Blocks;
exports.BLOCKS = new Blocks();
var Inlines = (function () {
    function Inlines() {
        this.names = util_1.dict();
        this.funcs = [];
    }
    Inlines.prototype.add = function (name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    };
    Inlines.prototype.addMissing = function (func) {
        this.missing = func;
    };
    Inlines.prototype.compile = function (sexp, builder) {
        var value = sexp[1];
        // TODO: Fix this so that expression macros can return
        // things like components, so that {{component foo}}
        // is the same as {{(component foo)}}
        if (!Array.isArray(value))
            return ['expr', value];
        var path;
        var params;
        var hash;
        if (value[0] === 'helper') {
            path = value[1];
            params = value[2];
            hash = value[3];
        }
        else if (value[0] === 'unknown') {
            path = value[1];
            params = hash = null;
        }
        else {
            return ['expr', value];
        }
        if (path.length > 1 && !params && !hash) {
            return ['expr', value];
        }
        var name = path[0];
        var index = this.names[name];
        if (index === undefined && this.missing) {
            var func = this.missing;
            var returned = func(path, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        }
        else if (index !== undefined) {
            var func = this.funcs[index];
            var returned = func(path, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        }
        else {
            return ['expr', value];
        }
    };
    return Inlines;
}());
exports.Inlines = Inlines;
exports.INLINES = new Inlines();
populateBuiltins(exports.BLOCKS, exports.INLINES);
function populateBuiltins(blocks, inlines) {
    if (blocks === void 0) { blocks = new Blocks(); }
    if (inlines === void 0) { inlines = new Inlines(); }
    blocks.add('if', function (sexp, builder) {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        var params = sexp[2], hash = sexp[3], _default = sexp[4], inverse = sexp[5];
        var args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, function (b) {
            if (_default && inverse) {
                b.jumpUnless('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpUnless('END');
                b.evaluate(_default);
            }
            else {
                throw util_1.unreachable();
            }
        });
    });
    blocks.add('unless', function (sexp, builder) {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        var params = sexp[2], hash = sexp[3], _default = sexp[4], inverse = sexp[5];
        var args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, function (b) {
            if (_default && inverse) {
                b.jumpIf('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpIf('END');
                b.evaluate(_default);
            }
            else {
                throw util_1.unreachable();
            }
        });
    });
    blocks.add('with', function (sexp, builder) {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        var params = sexp[2], hash = sexp[3], _default = sexp[4], inverse = sexp[5];
        var args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, function (b) {
            if (_default && inverse) {
                b.jumpUnless('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpUnless('END');
                b.evaluate(_default);
            }
            else {
                throw util_1.unreachable();
            }
        });
    });
    blocks.add('each', function (sexp, builder) {
        //         Enter(BEGIN, END)
        // BEGIN:  Noop
        //         PutArgs
        //         PutIterable
        //         JumpUnless(ELSE)
        //         EnterList(BEGIN2, END2)
        // ITER:   Noop
        //         NextIter(BREAK)
        //         EnterWithKey(BEGIN2, END2)
        // BEGIN2: Noop
        //         PushChildScope
        //         Evaluate(default)
        //         PopScope
        // END2:   Noop
        //         Exit
        //         Jump(ITER)
        // BREAK:  Noop
        //         ExitList
        //         Jump(END)
        // ELSE:   Noop
        //         Evalulate(inverse)
        // END:    Noop
        //         Exit
        var params = sexp[2], hash = sexp[3], _default = sexp[4], inverse = sexp[5];
        var args = compileArgs(params, hash, builder);
        builder.labelled(args, function (b) {
            b.putIterator();
            if (inverse) {
                b.jumpUnless('ELSE');
            }
            else {
                b.jumpUnless('END');
            }
            b.iter(function (b) {
                b.evaluate(util_1.unwrap(_default));
            });
            if (inverse) {
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
        });
    });
    return { blocks: blocks, inlines: inlines };
}
exports.populateBuiltins = populateBuiltins;
//# sourceMappingURL=data:application/json;base64,