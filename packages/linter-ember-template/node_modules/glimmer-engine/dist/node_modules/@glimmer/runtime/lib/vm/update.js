"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bounds_1 = require("../bounds");
var builder_1 = require("../builder");
var util_1 = require("@glimmer/util");
var reference_1 = require("@glimmer/reference");
var args_1 = require("../compiled/expressions/args");
var opcodes_1 = require("../opcodes");
var append_1 = require("./append");
var UpdatingVM = (function () {
    function UpdatingVM(env, _a) {
        var _b = _a.alwaysRevalidate, alwaysRevalidate = _b === void 0 ? false : _b;
        this.frameStack = new util_1.Stack();
        this.env = env;
        this.constants = env.constants;
        this.dom = env.getDOM();
        this.alwaysRevalidate = alwaysRevalidate;
    }
    UpdatingVM.prototype.execute = function (opcodes, handler) {
        var frameStack = this.frameStack;
        this.try(opcodes, handler);
        while (true) {
            if (frameStack.isEmpty())
                break;
            var opcode = this.frame.nextStatement();
            if (opcode === null) {
                this.frameStack.pop();
                continue;
            }
            util_1.LOGGER.debug("[VM] OP " + opcode.type);
            util_1.LOGGER.trace(opcode);
            opcode.evaluate(this);
        }
    };
    Object.defineProperty(UpdatingVM.prototype, "frame", {
        get: function () {
            return util_1.expect(this.frameStack.current, 'bug: expected a frame');
        },
        enumerable: true,
        configurable: true
    });
    UpdatingVM.prototype.goto = function (op) {
        this.frame.goto(op);
    };
    UpdatingVM.prototype.try = function (ops, handler) {
        this.frameStack.push(new UpdatingVMFrame(this, ops, handler));
    };
    UpdatingVM.prototype.throw = function () {
        this.frame.handleException();
        this.frameStack.pop();
    };
    UpdatingVM.prototype.evaluateOpcode = function (opcode) {
        opcode.evaluate(this);
    };
    return UpdatingVM;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = UpdatingVM;
var BlockOpcode = (function (_super) {
    __extends(BlockOpcode, _super);
    function BlockOpcode(ops, state, bounds, children) {
        var _this = _super.call(this) || this;
        _this.ops = ops;
        _this.type = "block";
        _this.next = null;
        _this.prev = null;
        var env = state.env, scope = state.scope, dynamicScope = state.dynamicScope, frame = state.frame;
        _this.children = children;
        _this.env = env;
        _this.scope = scope;
        _this.dynamicScope = dynamicScope;
        _this.frame = frame;
        _this.bounds = bounds;
        return _this;
    }
    BlockOpcode.prototype.parentElement = function () {
        return this.bounds.parentElement();
    };
    BlockOpcode.prototype.firstNode = function () {
        return this.bounds.firstNode();
    };
    BlockOpcode.prototype.lastNode = function () {
        return this.bounds.lastNode();
    };
    BlockOpcode.prototype.evaluate = function (vm) {
        vm.try(this.children, null);
    };
    BlockOpcode.prototype.destroy = function () {
        this.bounds.destroy();
    };
    BlockOpcode.prototype.didDestroy = function () {
        this.env.didDestroy(this.bounds);
    };
    BlockOpcode.prototype.toJSON = function () {
        var details = util_1.dict();
        details["guid"] = "" + this._guid;
        return {
            guid: this._guid,
            type: this.type,
            details: details,
            children: this.children.toArray().map(function (op) { return op.toJSON(); })
        };
    };
    return BlockOpcode;
}(opcodes_1.UpdatingOpcode));
exports.BlockOpcode = BlockOpcode;
var TryOpcode = (function (_super) {
    __extends(TryOpcode, _super);
    function TryOpcode(ops, state, bounds, children) {
        var _this = _super.call(this, ops, state, bounds, children) || this;
        _this.type = "try";
        _this.tag = _this._tag = new reference_1.UpdatableTag(reference_1.CONSTANT_TAG);
        return _this;
    }
    TryOpcode.prototype.didInitializeChildren = function () {
        this._tag.update(reference_1.combineSlice(this.children));
    };
    TryOpcode.prototype.evaluate = function (vm) {
        vm.try(this.children, this);
    };
    TryOpcode.prototype.handleException = function () {
        var _a = this, env = _a.env, scope = _a.scope, ops = _a.ops, dynamicScope = _a.dynamicScope, frame = _a.frame;
        var elementStack = builder_1.ElementStack.resume(this.env, this.bounds, this.bounds.reset(env));
        var vm = new append_1.default(env, scope, dynamicScope, elementStack);
        var result = vm.resume(ops, frame);
        this.children = result.opcodes();
        this.didInitializeChildren();
    };
    TryOpcode.prototype.toJSON = function () {
        var json = _super.prototype.toJSON.call(this);
        var details = json["details"];
        if (!details) {
            details = json["details"] = {};
        }
        return _super.prototype.toJSON.call(this);
    };
    return TryOpcode;
}(BlockOpcode));
exports.TryOpcode = TryOpcode;
var ListRevalidationDelegate = (function () {
    function ListRevalidationDelegate(opcode, marker) {
        this.opcode = opcode;
        this.marker = marker;
        this.didInsert = false;
        this.didDelete = false;
        this.map = opcode.map;
        this.updating = opcode['children'];
    }
    ListRevalidationDelegate.prototype.insert = function (key, item, memo, before) {
        var _a = this, map = _a.map, opcode = _a.opcode, updating = _a.updating;
        var nextSibling = null;
        var reference = null;
        if (before) {
            reference = map[before];
            nextSibling = reference['bounds'].firstNode();
        }
        else {
            nextSibling = this.marker;
        }
        var vm = opcode.vmForInsertion(nextSibling);
        var tryOpcode = null;
        vm.execute(opcode.ops, function (vm) {
            vm.frame.setArgs(args_1.EvaluatedArgs.positional([item, memo]));
            vm.frame.setOperand(item);
            vm.frame.setCondition(new reference_1.ConstReference(true));
            vm.frame.setKey(key);
            var state = vm.capture();
            var tracker = vm.stack().pushUpdatableBlock();
            tryOpcode = new TryOpcode(opcode.ops, state, tracker, vm.updating());
        });
        tryOpcode.didInitializeChildren();
        updating.insertBefore(tryOpcode, reference);
        map[key] = tryOpcode;
        this.didInsert = true;
    };
    ListRevalidationDelegate.prototype.retain = function (_key, _item, _memo) {
    };
    ListRevalidationDelegate.prototype.move = function (key, _item, _memo, before) {
        var _a = this, map = _a.map, updating = _a.updating;
        var entry = map[key];
        var reference = map[before] || null;
        if (before) {
            bounds_1.move(entry, reference.firstNode());
        }
        else {
            bounds_1.move(entry, this.marker);
        }
        updating.remove(entry);
        updating.insertBefore(entry, reference);
    };
    ListRevalidationDelegate.prototype.delete = function (key) {
        var map = this.map;
        var opcode = map[key];
        opcode.didDestroy();
        bounds_1.clear(opcode);
        this.updating.remove(opcode);
        delete map[key];
        this.didDelete = true;
    };
    ListRevalidationDelegate.prototype.done = function () {
        this.opcode.didInitializeChildren(this.didInsert || this.didDelete);
    };
    return ListRevalidationDelegate;
}());
var ListBlockOpcode = (function (_super) {
    __extends(ListBlockOpcode, _super);
    function ListBlockOpcode(ops, state, bounds, children, artifacts) {
        var _this = _super.call(this, ops, state, bounds, children) || this;
        _this.type = "list-block";
        _this.map = util_1.dict();
        _this.lastIterated = reference_1.INITIAL;
        _this.artifacts = artifacts;
        var _tag = _this._tag = new reference_1.UpdatableTag(reference_1.CONSTANT_TAG);
        _this.tag = reference_1.combine([artifacts.tag, _tag]);
        return _this;
    }
    ListBlockOpcode.prototype.didInitializeChildren = function (listDidChange) {
        if (listDidChange === void 0) { listDidChange = true; }
        this.lastIterated = this.artifacts.tag.value();
        if (listDidChange) {
            this._tag.update(reference_1.combineSlice(this.children));
        }
    };
    ListBlockOpcode.prototype.evaluate = function (vm) {
        var _a = this, artifacts = _a.artifacts, lastIterated = _a.lastIterated;
        if (!artifacts.tag.validate(lastIterated)) {
            var bounds = this.bounds;
            var dom = vm.dom;
            var marker = dom.createComment('');
            dom.insertAfter(bounds.parentElement(), marker, util_1.expect(bounds.lastNode(), "can't insert after an empty bounds"));
            var target = new ListRevalidationDelegate(this, marker);
            var synchronizer = new reference_1.IteratorSynchronizer({ target: target, artifacts: artifacts });
            synchronizer.sync();
            this.parentElement().removeChild(marker);
        }
        // Run now-updated updating opcodes
        _super.prototype.evaluate.call(this, vm);
    };
    ListBlockOpcode.prototype.vmForInsertion = function (nextSibling) {
        var _a = this, env = _a.env, scope = _a.scope, dynamicScope = _a.dynamicScope;
        var elementStack = builder_1.ElementStack.forInitialRender(this.env, this.bounds.parentElement(), nextSibling);
        return new append_1.default(env, scope, dynamicScope, elementStack);
    };
    ListBlockOpcode.prototype.toJSON = function () {
        var json = _super.prototype.toJSON.call(this);
        var map = this.map;
        var inner = Object.keys(map).map(function (key) {
            return JSON.stringify(key) + ": " + map[key]._guid;
        }).join(", ");
        var details = json["details"];
        if (!details) {
            details = json["details"] = {};
        }
        details["map"] = "{" + inner + "}";
        return json;
    };
    return ListBlockOpcode;
}(BlockOpcode));
exports.ListBlockOpcode = ListBlockOpcode;
var UpdatingVMFrame = (function () {
    function UpdatingVMFrame(vm, ops, exceptionHandler) {
        this.vm = vm;
        this.ops = ops;
        this.exceptionHandler = exceptionHandler;
        this.vm = vm;
        this.ops = ops;
        this.current = ops.head();
    }
    UpdatingVMFrame.prototype.goto = function (op) {
        this.current = op;
    };
    UpdatingVMFrame.prototype.nextStatement = function () {
        var _a = this, current = _a.current, ops = _a.ops;
        if (current)
            this.current = ops.nextNode(current);
        return current;
    };
    UpdatingVMFrame.prototype.handleException = function () {
        if (this.exceptionHandler) {
            this.exceptionHandler.handleException();
        }
    };
    return UpdatingVMFrame;
}());
//# sourceMappingURL=data:application/json;base64,