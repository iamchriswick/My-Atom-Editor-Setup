"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
var env, root, result, self;
function rootElement() {
    return env.getDOM().createElement('div');
}
function compile(template) {
    return env.compile(template);
}
function commonSetup() {
    env = new test_helpers_1.TestEnvironment(); // TODO: Support SimpleDOM
    env.registerBasicComponent('my-component', MyComponent, "<div>{{yield}}</div>");
    root = rootElement();
}
function render(template, context) {
    if (context === void 0) { context = {}; }
    self = new object_reference_1.UpdatableReference(context);
    env.begin();
    result = template.render(self, root, new test_helpers_1.TestDynamicScope());
    env.commit();
    assertInvariants(result);
    return result;
}
function rerender(context) {
    if (context === void 0) { context = null; }
    if (context !== null)
        self.update(context);
    env.begin();
    result.rerender();
    env.commit();
}
function assertInvariants(result) {
    strictEqual(result.firstNode(), root.firstChild, "The firstNode of the result is the same as the root's firstChild");
    strictEqual(result.lastNode(), root.lastChild, "The lastNode of the result is the same as the root's lastChild");
}
QUnit.module("Components", {
    setup: commonSetup
});
var MyComponent = (function (_super) {
    __extends(MyComponent, _super);
    function MyComponent(attrs) {
        var _this = _super.call(this, attrs) || this;
        _this.attrs = attrs;
        return _this;
    }
    Object.defineProperty(MyComponent.prototype, "testing", {
        get: function () {
            if (this.attrs.color === 'red') {
                return '123';
            }
            else {
                return '456';
            }
        },
        enumerable: true,
        configurable: true
    });
    return MyComponent;
}(test_helpers_1.BasicComponent));
var MyOtherComponent = (function (_super) {
    __extends(MyOtherComponent, _super);
    function MyOtherComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MyOtherComponent;
}(test_helpers_1.BasicComponent));
QUnit.test('creating a new component', function (assert) {
    var template = compile("<my-component color='{{color}}'>hello!</my-component>");
    render(template, { color: 'red' });
    test_helpers_1.equalTokens(root, "<div color='red'>hello!</div>");
    rerender({ color: 'green' });
    test_helpers_1.equalTokens(root, "<div color='green'>hello!</div>");
});
QUnit.test('the component class is its context', function (assert) {
    env.registerBasicComponent('my-component', MyComponent, '<div><p>{{testing}}</p>{{yield}}</div>');
    var template = compile("<my-component @color={{color}} color='{{color}}'>hello!</my-component>");
    render(template, { color: 'red' });
    test_helpers_1.equalTokens(root, "<div color='red'><p>123</p>hello!</div>");
    rerender({ color: 'green' });
    test_helpers_1.equalTokens(root, "<div color='green'><p>456</p>hello!</div>");
});
QUnit.test('attrs are available in the layout', function (assert) {
    env.registerBasicComponent('my-component', MyComponent, '<div><p>{{attrs.color}}</p>{{yield}}</div>');
    var template = compile("<my-component color='{{color}}' @color={{color}}>hello!</my-component>");
    render(template, { color: 'red' });
    test_helpers_1.equalTokens(root, "<div color='red'><p>red</p>hello!</div>");
    rerender({ color: 'green' });
    test_helpers_1.equalTokens(root, "<div color='green'><p>green</p>hello!</div>");
});
QUnit.test('nested components', function (assert) {
    env.registerBasicComponent('my-other-component', MyOtherComponent, '<p>{{yield}}</p>');
    var template = compile('<my-component><my-other-component>{{color}}</my-other-component></my-component>');
    render(template, { color: 'red' });
    test_helpers_1.equalTokens(root, '<div><p>red</p></div>');
    rerender({ color: 'green' });
    test_helpers_1.equalTokens(root, '<div><p>green</p></div>');
});
function testError(layout, expected) {
    QUnit.skip("'" + layout + "' produces an error like " + expected, function (assert) {
        env.registerBasicComponent('my-component', MyComponent, layout);
        var template = compile("<my-component>hello!</my-component>");
        assert.throws(function () { return render(template); }, expected);
    });
}
testError("<div>{{yield}}</div>nope", /non-whitespace text/);
testError("<div>{{yield}}</div><div></div>", /multiple root elements/);
testError("<div>{{yield}}</div>{{color}}", /cannot have curlies/);
testError("{{color}}", /cannot have curlies/);
testError("nope", /non-whitespace text/);
testError("", /single root element/);
//# sourceMappingURL=data:application/json;base64,