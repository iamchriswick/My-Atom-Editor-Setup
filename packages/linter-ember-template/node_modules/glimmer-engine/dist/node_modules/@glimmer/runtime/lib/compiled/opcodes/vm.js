"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var opcodes_1 = require("../../opcodes");
var reference_1 = require("@glimmer/reference");
var util_1 = require("@glimmer/util");
var reference_2 = require("@glimmer/reference");
var opcodes_2 = require("../../opcodes");
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PushChildScope, function (vm) { return vm.pushChildScope(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PopScope, function (vm) { return vm.popScope(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PushDynamicScope, function (vm) { return vm.pushDynamicScope(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PopDynamicScope, function (vm) { return vm.popDynamicScope(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Put, function (vm, _a) {
    var reference = _a.op1;
    vm.frame.setOperand(vm.constants.getReference(reference));
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.EvaluatePut, function (vm, _a) {
    var expression = _a.op1;
    var expr = vm.constants.getExpression(expression);
    vm.evaluateOperand(expr);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.PutArgs, function (vm, _a) {
    var args = _a.op1;
    vm.evaluateArgs(vm.constants.getExpression(args));
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.BindPositionalArgs, function (vm, _a) {
    var _symbols = _a.op1;
    var symbols = vm.constants.getArray(_symbols);
    vm.bindPositionalArgs(symbols);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.BindNamedArgs, function (vm, _a) {
    var _names = _a.op1, _symbols = _a.op2;
    var names = vm.constants.getArray(_names);
    var symbols = vm.constants.getArray(_symbols);
    vm.bindNamedArgs(names, symbols);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.BindBlocks, function (vm, _a) {
    var _names = _a.op1, _symbols = _a.op2;
    var names = vm.constants.getArray(_names);
    var symbols = vm.constants.getArray(_symbols);
    vm.bindBlocks(names, symbols);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.BindPartialArgs, function (vm, _a) {
    var symbol = _a.op1;
    vm.bindPartialArgs(symbol);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.BindCallerScope, function (vm) { return vm.bindCallerScope(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.BindDynamicScope, function (vm, _a) {
    var _names = _a.op1;
    var names = vm.constants.getArray(_names);
    vm.bindDynamicScope(names);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Enter, function (vm, _a) {
    var slice = _a.op1;
    return vm.enter(slice);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Exit, function (vm) { return vm.exit(); });
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Evaluate, function (vm, _a) {
    var _block = _a.op1;
    var block = vm.constants.getBlock(_block);
    var args = vm.frame.getArgs();
    vm.invokeBlock(block, args);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Jump, function (vm, _a) {
    var target = _a.op1;
    return vm.goto(target);
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.JumpIf, function (vm, _a) {
    var target = _a.op1;
    var reference = vm.frame.getCondition();
    if (reference_2.isConst(reference)) {
        if (reference.value()) {
            vm.goto(target);
        }
    }
    else {
        var cache = new reference_2.ReferenceCache(reference);
        if (cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.JumpUnless, function (vm, _a) {
    var target = _a.op1;
    var reference = vm.frame.getCondition();
    if (reference_2.isConst(reference)) {
        if (!reference.value()) {
            vm.goto(target);
        }
    }
    else {
        var cache = new reference_2.ReferenceCache(reference);
        if (!cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
exports.ConstTest = function (ref, _env) {
    return new reference_1.ConstReference(!!ref.value());
};
exports.SimpleTest = function (ref, _env) {
    return ref;
};
exports.EnvironmentTest = function (ref, env) {
    return env.toConditionalReference(ref);
};
opcodes_2.APPEND_OPCODES.add(opcodes_2.OpcodeName.Test, function (vm, _a) {
    var _func = _a.op1;
    var operand = vm.frame.getOperand();
    var func = vm.constants.getFunction(_func);
    vm.frame.setCondition(func(operand, vm.env));
});
var Assert = (function (_super) {
    __extends(Assert, _super);
    function Assert(cache) {
        var _this = _super.call(this) || this;
        _this.type = "assert";
        _this.tag = cache.tag;
        _this.cache = cache;
        return _this;
    }
    Assert.prototype.evaluate = function (vm) {
        var cache = this.cache;
        if (reference_2.isModified(cache.revalidate())) {
            vm.throw();
        }
    };
    Assert.prototype.toJSON = function () {
        var _a = this, type = _a.type, _guid = _a._guid, cache = _a.cache;
        var expected;
        try {
            expected = JSON.stringify(cache.peek());
        }
        catch (e) {
            expected = String(cache.peek());
        }
        return {
            guid: _guid,
            type: type,
            args: [],
            details: { expected: expected }
        };
    };
    return Assert;
}(opcodes_1.UpdatingOpcode));
exports.Assert = Assert;
var JumpIfNotModifiedOpcode = (function (_super) {
    __extends(JumpIfNotModifiedOpcode, _super);
    function JumpIfNotModifiedOpcode(tag, target) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.type = "jump-if-not-modified";
        _this.tag = tag;
        _this.lastRevision = tag.value();
        return _this;
    }
    JumpIfNotModifiedOpcode.prototype.evaluate = function (vm) {
        var _a = this, tag = _a.tag, target = _a.target, lastRevision = _a.lastRevision;
        if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {
            vm.goto(target);
        }
    };
    JumpIfNotModifiedOpcode.prototype.didModify = function () {
        this.lastRevision = this.tag.value();
    };
    JumpIfNotModifiedOpcode.prototype.toJSON = function () {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.target.inspect())]
        };
    };
    return JumpIfNotModifiedOpcode;
}(opcodes_1.UpdatingOpcode));
exports.JumpIfNotModifiedOpcode = JumpIfNotModifiedOpcode;
var DidModifyOpcode = (function (_super) {
    __extends(DidModifyOpcode, _super);
    function DidModifyOpcode(target) {
        var _this = _super.call(this) || this;
        _this.target = target;
        _this.type = "did-modify";
        _this.tag = reference_2.CONSTANT_TAG;
        return _this;
    }
    DidModifyOpcode.prototype.evaluate = function () {
        this.target.didModify();
    };
    return DidModifyOpcode;
}(opcodes_1.UpdatingOpcode));
exports.DidModifyOpcode = DidModifyOpcode;
var LabelOpcode = (function () {
    function LabelOpcode(label) {
        this.tag = reference_2.CONSTANT_TAG;
        this.type = "label";
        this.label = null;
        this.prev = null;
        this.next = null;
        util_1.initializeGuid(this);
        if (label)
            this.label = label;
    }
    LabelOpcode.prototype.evaluate = function () { };
    LabelOpcode.prototype.inspect = function () {
        return this.label + " [" + this._guid + "]";
    };
    LabelOpcode.prototype.toJSON = function () {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.inspect())]
        };
    };
    return LabelOpcode;
}());
exports.LabelOpcode = LabelOpcode;
//# sourceMappingURL=data:application/json;base64,