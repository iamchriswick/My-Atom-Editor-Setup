"use strict";
var util_1 = require("@glimmer/util");
var builder_1 = require("./builder");
var vm_1 = require("./vm");
var scanner_1 = require("./scanner");
var clientId = 0;
function templateFactory(_a) {
    var templateId = _a.id, meta = _a.meta, block = _a.block;
    var parsedBlock;
    var id = templateId || "client-" + clientId++;
    var create = function (env, envMeta) {
        var newMeta = envMeta ? util_1.assign({}, envMeta, meta) : meta;
        if (!parsedBlock) {
            parsedBlock = JSON.parse(block);
        }
        return template(parsedBlock, id, newMeta, env);
    };
    return { id: id, meta: meta, create: create };
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = templateFactory;
function template(block, id, meta, env) {
    var scanner = new scanner_1.default(block, meta, env);
    var entryPoint;
    var asEntryPoint = function () {
        if (!entryPoint)
            entryPoint = scanner.scanEntryPoint();
        return entryPoint;
    };
    var layout;
    var asLayout = function () {
        if (!layout)
            layout = scanner.scanLayout();
        return layout;
    };
    var asPartial = function (symbols) { return scanner.scanPartial(symbols); };
    var render = function (self, appendTo, dynamicScope) {
        var elementStack = builder_1.ElementStack.forInitialRender(env, appendTo, null);
        var compiled = asEntryPoint().compile(env);
        var vm = vm_1.VM.initial(env, self, dynamicScope, elementStack, compiled.symbols);
        return vm.execute(compiled.slice);
    };
    return { id: id, meta: meta, _block: block, asEntryPoint: asEntryPoint, asLayout: asLayout, asPartial: asPartial, render: render };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9ydW50aW1lL2xpYi90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0Esc0NBQXVDO0FBR3ZDLHFDQUF5QztBQUN6QywyQkFBMEI7QUFFMUIscUNBSW1CO0FBNkRuQixJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFTakIseUJBQXdDLEVBQXFFO1FBQW5FLGtCQUFjLEVBQUUsY0FBSSxFQUFFLGdCQUFLO0lBQ25FLElBQUksV0FBb0MsQ0FBQztJQUN6QyxJQUFJLEVBQUUsR0FBRyxVQUFVLElBQUksWUFBVSxRQUFRLEVBQUksQ0FBQztJQUM5QyxJQUFJLE1BQU0sR0FBRyxVQUFDLEdBQWdCLEVBQUUsT0FBWTtRQUMxQyxJQUFJLE9BQU8sR0FBRyxPQUFPLEdBQUcsYUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3pELEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUNqQixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQ0QsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsRUFBRSxFQUFFLElBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDO0FBQzlCLENBQUM7O0FBWEQsa0NBV0M7QUFFRCxrQkFBcUIsS0FBOEIsRUFBRSxFQUFVLEVBQUUsSUFBTyxFQUFFLEdBQWdCO0lBQ3hGLElBQUksT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzVDLElBQUksVUFBc0IsQ0FBQztJQUMzQixJQUFJLFlBQVksR0FBRztRQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkQsTUFBTSxDQUFDLFVBQVUsQ0FBQztJQUNwQixDQUFDLENBQUM7SUFDRixJQUFJLE1BQWMsQ0FBQztJQUNuQixJQUFJLFFBQVEsR0FBRztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMzQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztJQUNGLElBQUksU0FBUyxHQUFHLFVBQUMsT0FBb0IsSUFBSyxPQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQTVCLENBQTRCLENBQUM7SUFDdkUsSUFBSSxNQUFNLEdBQUcsVUFBQyxJQUF3QixFQUFFLFFBQXdCLEVBQUUsWUFBMEI7UUFDMUYsSUFBSSxZQUFZLEdBQUcsc0JBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RFLElBQUksUUFBUSxHQUFHLFlBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzQyxJQUFJLEVBQUUsR0FBRyxPQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0UsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBQSxFQUFFLElBQUksTUFBQSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxjQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsU0FBUyxXQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQztBQUNoRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jayxcbiAgU2VyaWFsaXplZFRlbXBsYXRlQmxvY2tcbn0gZnJvbSAnQGdsaW1tZXIvd2lyZS1mb3JtYXQnO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFN5bWJvbFRhYmxlIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBFbnZpcm9ubWVudCwgRHluYW1pY1Njb3BlIH0gZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5pbXBvcnQgeyBFbGVtZW50U3RhY2sgfSBmcm9tICcuL2J1aWxkZXInO1xuaW1wb3J0IHsgVk0gfSBmcm9tICcuL3ZtJztcbmltcG9ydCBSZW5kZXJSZXN1bHQgZnJvbSAnLi92bS9yZW5kZXItcmVzdWx0JztcbmltcG9ydCBTY2FubmVyLCB7XG4gIEVudHJ5UG9pbnQsXG4gIFBhcnRpYWxCbG9jayxcbiAgTGF5b3V0XG59IGZyb20gJy4vc2Nhbm5lcic7XG5pbXBvcnQgKiBhcyBTaW1wbGUgZnJvbSAnLi9kb20vaW50ZXJmYWNlcyc7XG5cbi8qKlxuICogRW52aXJvbm1lbnQgc3BlY2lmaWMgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGU8VD4ge1xuICAvKipcbiAgICogVGVtcGxhdGUgaWRlbnRpZmllciwgaWYgcHJlY29tcGlsZWQgd2lsbCBiZSB0aGUgaWQgb2YgdGhlXG4gICAqIHByZWNvbXBpbGVkIHRlbXBsYXRlLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGVtcGxhdGUgbWV0YSAoYm90aCBjb21waWxlIHRpbWUgYW5kIGVudmlyb25tZW50IHNwZWNpZmljKS5cbiAgICovXG4gIG1ldGE6IFQ7XG5cbiAgLyoqXG4gICAqIEhlbHBlciB0byByZW5kZXIgdGVtcGxhdGUgYXMgcm9vdCBlbnRyeSBwb2ludC5cbiAgICovXG4gIHJlbmRlcihzZWxmOiBQYXRoUmVmZXJlbmNlPGFueT4sIGFwcGVuZFRvOiBTaW1wbGUuRWxlbWVudCwgZHluYW1pY1Njb3BlOiBEeW5hbWljU2NvcGUpOiBSZW5kZXJSZXN1bHQ7XG5cbiAgLy8gaW50ZXJuYWwgY2FzdHMsIHRoZXNlIGFyZSBsYXppbHkgY3JlYXRlZCBhbmQgY2FjaGVkXG4gIGFzRW50cnlQb2ludCgpOiBFbnRyeVBvaW50O1xuICBhc0xheW91dCgpOiBMYXlvdXQ7XG4gIGFzUGFydGlhbChzeW1ib2xzOiBTeW1ib2xUYWJsZSk6IFBhcnRpYWxCbG9jaztcblxuICAvLyBleHBvc2VkIGZvciB2aXN1YWxpemVyXG4gIF9ibG9jazogU2VyaWFsaXplZFRlbXBsYXRlQmxvY2s7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGVtcGxhdGVGYWN0b3J5PFQsIFU+IHtcbiAgLyoqXG4gICAqIFRlbXBsYXRlIGlkZW50aWZpZXIsIGlmIHByZWNvbXBpbGVkIHdpbGwgYmUgdGhlIGlkIG9mIHRoZVxuICAgKiBwcmVjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgdGltZSBtZXRhLlxuICAgKi9cbiAgbWV0YTogVDtcblxuICAvKipcbiAgICogVXNlZCB0byBjcmVhdGUgYW4gZW52aXJvbm1lbnQgc3BlY2lmaWMgc2luZ2xldG9uIGluc3RhbmNlXG4gICAqIG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtFbnZpcm9ubWVudH0gZW52IGdsaW1tZXIgRW52aXJvbm1lbnRcbiAgICovXG4gIGNyZWF0ZShlbnY6IEVudmlyb25tZW50KTogVGVtcGxhdGU8VD47XG4gIC8qKlxuICAgKiBVc2VkIHRvIGNyZWF0ZSBhbiBlbnZpcm9ubWVudCBzcGVjaWZpYyBzaW5nbGV0b24gaW5zdGFuY2VcbiAgICogb2YgdGhlIHRlbXBsYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Vudmlyb25tZW50fSBlbnYgZ2xpbW1lciBFbnZpcm9ubWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gbWV0YSBlbnZpcm9ubWVudCBzcGVjaWZpYyBpbmplY3Rpb25zIGludG8gbWV0YVxuICAgKi9cbiAgY3JlYXRlKGVudjogRW52aXJvbm1lbnQsIG1ldGE6IFUpOiBUZW1wbGF0ZTxUICYgVT47XG59XG5cbmxldCBjbGllbnRJZCA9IDA7XG5cbi8qKlxuICogV3JhcHMgYSB0ZW1wbGF0ZSBqcyBpbiBhIHRlbXBsYXRlIG1vZHVsZSB0byBjaGFuZ2UgaXQgaW50byBhIGZhY3RvcnlcbiAqIHRoYXQgaGFuZGxlcyBsYXp5IHBhcnNpbmcgdGhlIHRlbXBsYXRlIGFuZCB0byBjcmVhdGUgcGVyIGVudiBzaW5nbGV0b25zXG4gKiBvZiB0aGUgdGVtcGxhdGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeTxUPihzZXJpYWxpemVkVGVtcGxhdGU6IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8VD4pOiBUZW1wbGF0ZUZhY3Rvcnk8VCwgVD47XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZW1wbGF0ZUZhY3Rvcnk8VCwgVT4oc2VyaWFsaXplZFRlbXBsYXRlOiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPFQ+KTogVGVtcGxhdGVGYWN0b3J5PFQsIFU+O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcGxhdGVGYWN0b3J5KHsgaWQ6IHRlbXBsYXRlSWQsIG1ldGEsIGJsb2NrIH06IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8YW55Pik6IFRlbXBsYXRlRmFjdG9yeTx7fSwge30+IHtcbiAgbGV0IHBhcnNlZEJsb2NrOiBTZXJpYWxpemVkVGVtcGxhdGVCbG9jaztcbiAgbGV0IGlkID0gdGVtcGxhdGVJZCB8fCBgY2xpZW50LSR7Y2xpZW50SWQrK31gO1xuICBsZXQgY3JlYXRlID0gKGVudjogRW52aXJvbm1lbnQsIGVudk1ldGE/OiB7fSkgPT4ge1xuICAgIGxldCBuZXdNZXRhID0gZW52TWV0YSA/IGFzc2lnbih7fSwgZW52TWV0YSwgbWV0YSkgOiBtZXRhO1xuICAgIGlmICghcGFyc2VkQmxvY2spIHtcbiAgICAgIHBhcnNlZEJsb2NrID0gSlNPTi5wYXJzZShibG9jayk7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wbGF0ZShwYXJzZWRCbG9jaywgaWQsIG5ld01ldGEsIGVudik7XG4gIH07XG4gIHJldHVybiB7IGlkLCBtZXRhLCBjcmVhdGUgfTtcbn1cblxuZnVuY3Rpb24gdGVtcGxhdGU8VD4oYmxvY2s6IFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrLCBpZDogc3RyaW5nLCBtZXRhOiBULCBlbnY6IEVudmlyb25tZW50KTogVGVtcGxhdGU8VD4ge1xuICBsZXQgc2Nhbm5lciA9IG5ldyBTY2FubmVyKGJsb2NrLCBtZXRhLCBlbnYpO1xuICBsZXQgZW50cnlQb2ludDogRW50cnlQb2ludDtcbiAgbGV0IGFzRW50cnlQb2ludCA9ICgpID0+IHtcbiAgICBpZiAoIWVudHJ5UG9pbnQpIGVudHJ5UG9pbnQgPSBzY2FubmVyLnNjYW5FbnRyeVBvaW50KCk7XG4gICAgcmV0dXJuIGVudHJ5UG9pbnQ7XG4gIH07XG4gIGxldCBsYXlvdXQ6IExheW91dDtcbiAgbGV0IGFzTGF5b3V0ID0gKCkgPT4ge1xuICAgIGlmICghbGF5b3V0KSBsYXlvdXQgPSBzY2FubmVyLnNjYW5MYXlvdXQoKTtcbiAgICByZXR1cm4gbGF5b3V0O1xuICB9O1xuICBsZXQgYXNQYXJ0aWFsID0gKHN5bWJvbHM6IFN5bWJvbFRhYmxlKSA9PiBzY2FubmVyLnNjYW5QYXJ0aWFsKHN5bWJvbHMpO1xuICBsZXQgcmVuZGVyID0gKHNlbGY6IFBhdGhSZWZlcmVuY2U8YW55PiwgYXBwZW5kVG86IFNpbXBsZS5FbGVtZW50LCBkeW5hbWljU2NvcGU6IER5bmFtaWNTY29wZSkgPT4ge1xuICAgIGxldCBlbGVtZW50U3RhY2sgPSBFbGVtZW50U3RhY2suZm9ySW5pdGlhbFJlbmRlcihlbnYsIGFwcGVuZFRvLCBudWxsKTtcbiAgICBsZXQgY29tcGlsZWQgPSBhc0VudHJ5UG9pbnQoKS5jb21waWxlKGVudik7XG4gICAgbGV0IHZtID0gVk0uaW5pdGlhbChlbnYsIHNlbGYsIGR5bmFtaWNTY29wZSwgZWxlbWVudFN0YWNrLCBjb21waWxlZC5zeW1ib2xzKTtcbiAgICByZXR1cm4gdm0uZXhlY3V0ZShjb21waWxlZC5zbGljZSk7XG4gIH07XG4gIHJldHVybiB7IGlkLCBtZXRhLCBfYmxvY2s6IGJsb2NrLCBhc0VudHJ5UG9pbnQsIGFzTGF5b3V0LCBhc1BhcnRpYWwsIHJlbmRlciB9O1xufVxuIl19