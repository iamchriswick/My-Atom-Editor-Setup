"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var references_1 = require("../../references");
var utils_1 = require("../../utils");
var reference_1 = require("@glimmer/reference");
var CompiledPositionalArgs = (function () {
    function CompiledPositionalArgs(values) {
        this.values = values;
        this.length = values.length;
    }
    CompiledPositionalArgs.create = function (values) {
        if (values.length) {
            return new this(values);
        }
        else {
            return exports.COMPILED_EMPTY_POSITIONAL_ARGS;
        }
    };
    CompiledPositionalArgs.empty = function () {
        return exports.COMPILED_EMPTY_POSITIONAL_ARGS;
    };
    CompiledPositionalArgs.prototype.evaluate = function (vm) {
        var _a = this, values = _a.values, length = _a.length;
        var references = new Array(length);
        for (var i = 0; i < length; i++) {
            references[i] = values[i].evaluate(vm);
        }
        return EvaluatedPositionalArgs.create(references);
    };
    CompiledPositionalArgs.prototype.toJSON = function () {
        return "[" + this.values.map(function (value) { return value.toJSON(); }).join(", ") + "]";
    };
    return CompiledPositionalArgs;
}());
exports.CompiledPositionalArgs = CompiledPositionalArgs;
exports.COMPILED_EMPTY_POSITIONAL_ARGS = new ((function (_super) {
    __extends(class_1, _super);
    function class_1() {
        return _super.call(this, utils_1.EMPTY_ARRAY) || this;
    }
    class_1.prototype.evaluate = function (_vm) {
        return exports.EVALUATED_EMPTY_POSITIONAL_ARGS;
    };
    class_1.prototype.toJSON = function () {
        return "<EMPTY>";
    };
    return class_1;
}(CompiledPositionalArgs)));
var EvaluatedPositionalArgs = (function () {
    function EvaluatedPositionalArgs(values) {
        this.values = values;
        this.tag = reference_1.combineTagged(values);
        this.length = values.length;
    }
    EvaluatedPositionalArgs.create = function (values) {
        return new this(values);
    };
    EvaluatedPositionalArgs.empty = function () {
        return exports.EVALUATED_EMPTY_POSITIONAL_ARGS;
    };
    EvaluatedPositionalArgs.prototype.at = function (index) {
        var _a = this, values = _a.values, length = _a.length;
        return (index < length) ? values[index] : references_1.UNDEFINED_REFERENCE;
    };
    EvaluatedPositionalArgs.prototype.value = function () {
        var _a = this, values = _a.values, length = _a.length;
        var ret = new Array(length);
        for (var i = 0; i < length; i++) {
            ret[i] = values[i].value();
        }
        return ret;
    };
    return EvaluatedPositionalArgs;
}());
exports.EvaluatedPositionalArgs = EvaluatedPositionalArgs;
exports.EVALUATED_EMPTY_POSITIONAL_ARGS = new ((function (_super) {
    __extends(class_2, _super);
    function class_2() {
        return _super.call(this, utils_1.EMPTY_ARRAY) || this;
    }
    class_2.prototype.at = function () {
        return references_1.UNDEFINED_REFERENCE;
    };
    class_2.prototype.value = function () {
        return this.values;
    };
    return class_2;
}(EvaluatedPositionalArgs)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb25hbC1hcmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvcG9zaXRpb25hbC1hcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLCtDQUF1RDtBQUd2RCxxQ0FBMEM7QUFDMUMsZ0RBQStFO0FBRy9FO0lBZUUsZ0NBQW1CLE1BQWlEO1FBQWpELFdBQU0sR0FBTixNQUFNLENBQTJDO1FBQ2xFLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBaEJNLDZCQUFNLEdBQWIsVUFBYyxNQUFvQztRQUNoRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLHNDQUE4QixDQUFDO1FBQ3hDLENBQUM7SUFDSCxDQUFDO0lBRU0sNEJBQUssR0FBWjtRQUNFLE1BQU0sQ0FBQyxzQ0FBOEIsQ0FBQztJQUN4QyxDQUFDO0lBUUQseUNBQVEsR0FBUixVQUFTLEVBQU07UUFDVCxJQUFBLFNBQXlCLEVBQXZCLGtCQUFNLEVBQUUsa0JBQU0sQ0FBVTtRQUM5QixJQUFJLFVBQVUsR0FBNEIsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNoQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBRUQsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsdUNBQU0sR0FBTjtRQUNFLE1BQU0sQ0FBQyxNQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFkLENBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBRyxDQUFDO0lBQ3BFLENBQUM7SUFDSCw2QkFBQztBQUFELENBQUMsQUFqQ0QsSUFpQ0M7QUFqQ1ksd0RBQXNCO0FBbUN0QixRQUFBLDhCQUE4QixHQUEyQixJQUFJO0lBQWUsMkJBQXNCO0lBQzdHO2VBQ0Usa0JBQU0sbUJBQVcsQ0FBQztJQUNwQixDQUFDO0lBRUQsMEJBQVEsR0FBUixVQUFTLEdBQU87UUFDZCxNQUFNLENBQUMsdUNBQStCLENBQUM7SUFDekMsQ0FBQztJQUVELHdCQUFNLEdBQU47UUFDRSxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFDSCxjQUFDO0FBQUQsQ0FBQyxBQVowRSxDQUFjLHNCQUFzQixHQVk3RyxDQUFDO0FBRUg7SUFZRSxpQ0FBbUIsTUFBNEM7UUFBNUMsV0FBTSxHQUFOLE1BQU0sQ0FBc0M7UUFDN0QsSUFBSSxDQUFDLEdBQUcsR0FBRyx5QkFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBZE0sOEJBQU0sR0FBYixVQUFjLE1BQTRDO1FBQ3hELE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLE1BQU0sQ0FBQyx1Q0FBK0IsQ0FBQztJQUN6QyxDQUFDO0lBVUQsb0NBQUUsR0FBRixVQUFHLEtBQWE7UUFDVixJQUFBLFNBQXlCLEVBQXZCLGtCQUFNLEVBQUUsa0JBQU0sQ0FBVTtRQUM5QixNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLGdDQUFtQixDQUFDO0lBQ2hFLENBQUM7SUFFRCx1Q0FBSyxHQUFMO1FBQ00sSUFBQSxTQUF5QixFQUF2QixrQkFBTSxFQUFFLGtCQUFNLENBQVU7UUFDOUIsSUFBSSxHQUFHLEdBQWEsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNoQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzdCLENBQUM7UUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0FBQyxBQWhDRCxJQWdDQztBQWhDWSwwREFBdUI7QUFrQ3ZCLFFBQUEsK0JBQStCLEdBQTRCLElBQUk7SUFBZSwyQkFBdUI7SUFDaEg7ZUFDRSxrQkFBTSxtQkFBVyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxvQkFBRSxHQUFGO1FBQ0UsTUFBTSxDQUFDLGdDQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRCx1QkFBSyxHQUFMO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBWjRFLENBQWMsdUJBQXVCLEdBWWhILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVTkRFRklORURfUkVGRVJFTkNFIH0gZnJvbSAnLi4vLi4vcmVmZXJlbmNlcyc7XG5pbXBvcnQgeyBDb21waWxlZEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5pbXBvcnQgVk0gZnJvbSAnLi4vLi4vdm0vYXBwZW5kJztcbmltcG9ydCB7IEVNUFRZX0FSUkFZIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSwgUmV2aXNpb25UYWcsIGNvbWJpbmVUYWdnZWQgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZFBvc2l0aW9uYWxBcmdzIHtcbiAgc3RhdGljIGNyZWF0ZSh2YWx1ZXM6IENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+W10pOiBDb21waWxlZFBvc2l0aW9uYWxBcmdzIHtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIG5ldyB0aGlzKHZhbHVlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGVtcHR5KCkge1xuICAgIHJldHVybiBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M7XG4gIH1cblxuICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHZhbHVlczogUmVhZG9ubHlBcnJheTxDb21waWxlZEV4cHJlc3Npb248T3BhcXVlPj4pIHtcbiAgICB0aGlzLmxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gICAgbGV0IHsgdmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgbGV0IHJlZmVyZW5jZXM6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPltdID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZWZlcmVuY2VzW2ldID0gdmFsdWVzW2ldLmV2YWx1YXRlKHZtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3MuY3JlYXRlKHJlZmVyZW5jZXMpO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBbJHt0aGlzLnZhbHVlcy5tYXAodmFsdWUgPT4gdmFsdWUudG9KU09OKCkpLmpvaW4oXCIsIFwiKX1dYDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTOiBDb21waWxlZFBvc2l0aW9uYWxBcmdzID0gbmV3IChjbGFzcyBleHRlbmRzIENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihFTVBUWV9BUlJBWSk7XG4gIH1cblxuICBldmFsdWF0ZShfdm06IFZNKTogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3Mge1xuICAgIHJldHVybiBFVkFMVUFURURfRU1QVFlfUE9TSVRJT05BTF9BUkdTO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGA8RU1QVFk+YDtcbiAgfVxufSk7XG5cbmV4cG9ydCBjbGFzcyBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gIHN0YXRpYyBjcmVhdGUodmFsdWVzOiBSZWFkb25seUFycmF5PFBhdGhSZWZlcmVuY2U8T3BhcXVlPj4pIHtcbiAgICByZXR1cm4gbmV3IHRoaXModmFsdWVzKTtcbiAgfVxuXG4gIHN0YXRpYyBlbXB0eSgpOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gICAgcmV0dXJuIEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M7XG4gIH1cblxuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZztcbiAgcHVibGljIGxlbmd0aDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8UGF0aFJlZmVyZW5jZTxPcGFxdWU+Pikge1xuICAgIHRoaXMudGFnID0gY29tYmluZVRhZ2dlZCh2YWx1ZXMpO1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcbiAgfVxuXG4gIGF0KGluZGV4OiBudW1iZXIpOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT4ge1xuICAgIGxldCB7IHZhbHVlcywgbGVuZ3RoIH0gPSB0aGlzO1xuICAgIHJldHVybiAoaW5kZXggPCBsZW5ndGgpID8gdmFsdWVzW2luZGV4XSA6IFVOREVGSU5FRF9SRUZFUkVOQ0U7XG4gIH1cblxuICB2YWx1ZSgpOiBSZWFkb25seUFycmF5PE9wYXF1ZT4ge1xuICAgIGxldCB7IHZhbHVlcywgbGVuZ3RoIH0gPSB0aGlzO1xuICAgIGxldCByZXQ6IE9wYXF1ZVtdID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSB2YWx1ZXNbaV0udmFsdWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFVkFMVUFURURfRU1QVFlfUE9TSVRJT05BTF9BUkdTOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyA9IG5ldyAoY2xhc3MgZXh0ZW5kcyBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKEVNUFRZX0FSUkFZKTtcbiAgfVxuXG4gIGF0KCk6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgcmV0dXJuIFVOREVGSU5FRF9SRUZFUkVOQ0U7XG4gIH1cblxuICB2YWx1ZSgpOiBSZWFkb25seUFycmF5PE9wYXF1ZT4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlcztcbiAgfVxufSk7XG4iXX0=