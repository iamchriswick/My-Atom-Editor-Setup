"use strict";
var util_1 = require("@glimmer/util");
function entryPoint(meta) {
    return new ProgramSymbolTable(meta);
}
exports.entryPoint = entryPoint;
function layout(meta, wireNamed, wireYields, hasPartials) {
    var _a = symbols(wireNamed, wireYields, hasPartials), named = _a.named, yields = _a.yields, partialSymbol = _a.partialSymbol, size = _a.size;
    return new ProgramSymbolTable(meta, named, yields, partialSymbol, size);
}
exports.layout = layout;
function block(parent, locals) {
    var localsMap = null;
    var program = parent['program'];
    if (locals.length !== 0) {
        var map_1 = localsMap = util_1.dict();
        locals.forEach(function (l) { return map_1[l] = program.size++; });
    }
    return new BlockSymbolTable(parent, program, localsMap);
}
exports.block = block;
function symbols(named, yields, hasPartials) {
    var yieldsMap = null;
    var namedMap = null;
    var size = 1;
    if (yields.length !== 0) {
        var map_2 = yieldsMap = util_1.dict();
        yields.forEach(function (y) { return map_2[y] = size++; });
    }
    if (named.length !== 0) {
        var map_3 = namedMap = util_1.dict();
        named.forEach(function (y) { return map_3[y] = size++; });
    }
    var partialSymbol = hasPartials ? size++ : null;
    return { named: namedMap, yields: yieldsMap, partialSymbol: partialSymbol, size: size };
}
var ProgramSymbolTable = (function () {
    function ProgramSymbolTable(meta, named, yields, partialArgs, size) {
        if (named === void 0) { named = null; }
        if (yields === void 0) { yields = null; }
        if (partialArgs === void 0) { partialArgs = null; }
        if (size === void 0) { size = 1; }
        this.meta = meta;
        this.named = named;
        this.yields = yields;
        this.partialArgs = partialArgs;
        this.size = size;
        this.program = this;
    }
    ProgramSymbolTable.prototype.getMeta = function () {
        return this.meta;
    };
    ProgramSymbolTable.prototype.getSymbols = function () {
        return {
            named: this.named,
            yields: this.yields,
            locals: null,
            partialArgs: this.partialArgs
        };
    };
    ProgramSymbolTable.prototype.getSymbol = function (kind, name) {
        if (kind === 'local')
            return null;
        return this[kind] && this[kind][name];
    };
    ProgramSymbolTable.prototype.getPartialArgs = function () {
        return this.partialArgs || 0;
    };
    return ProgramSymbolTable;
}());
exports.ProgramSymbolTable = ProgramSymbolTable;
var BlockSymbolTable = (function () {
    function BlockSymbolTable(parent, program, locals) {
        this.parent = parent;
        this.program = program;
        this.locals = locals;
    }
    BlockSymbolTable.prototype.getMeta = function () {
        return this.program.getMeta();
    };
    BlockSymbolTable.prototype.getSymbols = function () {
        return {
            named: null,
            yields: null,
            locals: this.locals,
            partialArgs: null
        };
    };
    BlockSymbolTable.prototype.getSymbol = function (kind, name) {
        if (kind === 'local') {
            return this.getLocal(name);
        }
        else {
            return this.program.getSymbol(kind, name);
        }
    };
    BlockSymbolTable.prototype.getLocal = function (name) {
        var _a = this, locals = _a.locals, parent = _a.parent;
        var symbol = locals && locals[name];
        if (!symbol && parent) {
            symbol = parent.getSymbol('local', name);
        }
        return symbol;
    };
    BlockSymbolTable.prototype.getPartialArgs = function () {
        return this.program.getPartialArgs();
    };
    return BlockSymbolTable;
}());
exports.BlockSymbolTable = BlockSymbolTable;
exports.EMPTY_SYMBOL_TABLE = {
    getMeta: function () {
        return null;
    },
    getSymbols: function () {
        return {
            named: null,
            yields: null,
            locals: null,
            partialArgs: null
        };
    },
    getSymbol: function (_kind, _name) {
        throw new Error("BUG: Calling getSymbol on EMPTY_SYMBOL_TABLE");
    },
    getPartialArgs: function () {
        return null;
    }
};
//# sourceMappingURL=data:application/json;base64,