"use strict";
var test_helpers_1 = require("@glimmer/test-helpers");
var runtime_1 = require("@glimmer/runtime");
var compiler_1 = require("@glimmer/compiler");
var env;
var serializedTemplate;
var serializedTemplateNoId;
QUnit.module("templateFactory", {
    setup: function () {
        env = new test_helpers_1.TestEnvironment();
        var templateJs = compiler_1.precompile("<div>{{name}}</div>", {
            meta: {
                version: 12,
                lang: 'es',
                moduleName: "template/module/name"
            }
        });
        serializedTemplate = JSON.parse(templateJs);
        serializedTemplate.id = 'server-id-1';
        serializedTemplateNoId = JSON.parse(templateJs);
        serializedTemplateNoId.id = null;
    }
});
QUnit.test("id of serialized template is exposed on the factory", function (assert) {
    var factory = runtime_1.templateFactory(serializedTemplate);
    assert.ok(factory.id, 'is present');
    assert.equal(factory.id, serializedTemplate.id, 'id matches serialized template id');
});
QUnit.test("generates id if no id is on the serialized template", function (assert) {
    var factory1 = runtime_1.templateFactory(serializedTemplateNoId);
    var factory2 = runtime_1.templateFactory(serializedTemplateNoId);
    assert.ok(factory1.id, 'is present');
    assert.ok(factory2.id, 'is present');
    assert.notEqual(factory1.id, factory2.id, 'factories without underlying id create new id per factory');
});
QUnit.test("id of template matches factory", function (assert) {
    var factory = runtime_1.templateFactory(serializedTemplate);
    var template = factory.create(env);
    assert.ok(template.id, 'is present');
    assert.equal(template.id, factory.id, 'template id matches factory id');
});
QUnit.test("meta is accessible from factory", function (assert) {
    var factory = runtime_1.templateFactory(serializedTemplate);
    assert.deepEqual(factory.meta, {
        version: 12,
        lang: 'es',
        moduleName: "template/module/name"
    });
});
QUnit.test("meta is accessible from template", function (assert) {
    var factory = runtime_1.templateFactory(serializedTemplate);
    var template = factory.create(env);
    assert.deepEqual(template.meta, {
        version: 12,
        lang: 'es',
        moduleName: "template/module/name"
    }, 'template has expected meta');
});
QUnit.test("can inject per environment things into meta", function (assert) {
    var owner = {};
    var factory = runtime_1.templateFactory(serializedTemplate);
    var template = factory.create(env, { owner: owner });
    assert.strictEqual(template.meta.owner, owner, 'is owner');
    assert.deepEqual(template.meta, {
        version: 12,
        lang: 'es',
        moduleName: "template/module/name",
        owner: owner
    }, 'template has expected meta');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvdGVzdHMvdGVtcGxhdGUtdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsc0RBQXdEO0FBQ3hELDRDQUFtRDtBQUNuRCw4Q0FBK0M7QUFHL0MsSUFBSSxHQUFvQixDQUFDO0FBWXpCLElBQUksa0JBQTZELENBQUM7QUFDbEUsSUFBSSxzQkFBaUUsQ0FBQztBQUV0RSxLQUFLLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFO0lBQzlCLEtBQUs7UUFDSCxHQUFHLEdBQUcsSUFBSSw4QkFBZSxFQUFFLENBQUM7UUFDNUIsSUFBSSxVQUFVLEdBQUcscUJBQVUsQ0FBVyxxQkFBcUIsRUFBRTtZQUMzRCxJQUFJLEVBQUU7Z0JBQ0osT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsVUFBVSxFQUFFLHNCQUFzQjthQUNuQztTQUNGLENBQUMsQ0FBQztRQUNILGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsa0JBQWtCLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUV0QyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hELHNCQUFzQixDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDbkMsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMscURBQXFELEVBQUUsVUFBQSxNQUFNO0lBQ3RFLElBQUksT0FBTyxHQUFHLHlCQUFlLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUNsRCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsRUFB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bWVyL3Rlc3QtaGVscGVyc1wiO1xuaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSBcIkBnbGltbWVyL3J1bnRpbWVcIjtcbmltcG9ydCB7IHByZWNvbXBpbGUgfSBmcm9tIFwiQGdsaW1tZXIvY29tcGlsZXJcIjtcbmltcG9ydCB7IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2sgfSBmcm9tIFwiQGdsaW1tZXIvd2lyZS1mb3JtYXRcIjtcblxubGV0IGVudjogVGVzdEVudmlyb25tZW50O1xuXG5pbnRlcmZhY2UgVGVzdE1ldGEge1xuICB2ZXJzaW9uOiBudW1iZXI7XG4gIGxhbmc6IHN0cmluZztcbiAgbW9kdWxlTmFtZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgT3duZXJNZXRhIHtcbiAgb3duZXI6IHt9O1xufVxuXG5sZXQgc2VyaWFsaXplZFRlbXBsYXRlOiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPFRlc3RNZXRhPjtcbmxldCBzZXJpYWxpemVkVGVtcGxhdGVOb0lkOiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPFRlc3RNZXRhPjtcblxuUVVuaXQubW9kdWxlKFwidGVtcGxhdGVGYWN0b3J5XCIsIHtcbiAgc2V0dXAoKSB7XG4gICAgZW52ID0gbmV3IFRlc3RFbnZpcm9ubWVudCgpO1xuICAgIGxldCB0ZW1wbGF0ZUpzID0gcHJlY29tcGlsZTxUZXN0TWV0YT4oXCI8ZGl2Pnt7bmFtZX19PC9kaXY+XCIsIHtcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdmVyc2lvbjogMTIsXG4gICAgICAgIGxhbmc6ICdlcycsXG4gICAgICAgIG1vZHVsZU5hbWU6IFwidGVtcGxhdGUvbW9kdWxlL25hbWVcIlxuICAgICAgfVxuICAgIH0pO1xuICAgIHNlcmlhbGl6ZWRUZW1wbGF0ZSA9IEpTT04ucGFyc2UodGVtcGxhdGVKcyk7XG4gICAgc2VyaWFsaXplZFRlbXBsYXRlLmlkID0gJ3NlcnZlci1pZC0xJztcblxuICAgIHNlcmlhbGl6ZWRUZW1wbGF0ZU5vSWQgPSBKU09OLnBhcnNlKHRlbXBsYXRlSnMpO1xuICAgIHNlcmlhbGl6ZWRUZW1wbGF0ZU5vSWQuaWQgPSBudWxsO1xuICB9XG59KTtcblxuUVVuaXQudGVzdChcImlkIG9mIHNlcmlhbGl6ZWQgdGVtcGxhdGUgaXMgZXhwb3NlZCBvbiB0aGUgZmFjdG9yeVwiLCBhc3NlcnQgPT4ge1xuICBsZXQgZmFjdG9yeSA9IHRlbXBsYXRlRmFjdG9yeShzZXJpYWxpemVkVGVtcGxhdGUpO1xuICBhc3NlcnQub2soZmFjdG9yeS5pZCwgJ2lzIHByZXNlbnQnKTtcbiAgYXNzZXJ0LmVxdWFsKGZhY3RvcnkuaWQsIHNlcmlhbGl6ZWRUZW1wbGF0ZS5pZCwgJ2lkIG1hdGNoZXMgc2VyaWFsaXplZCB0ZW1wbGF0ZSBpZCcpO1xufSk7XG5cblFVbml0LnRlc3QoXCJnZW5lcmF0ZXMgaWQgaWYgbm8gaWQgaXMgb24gdGhlIHNlcmlhbGl6ZWQgdGVtcGxhdGVcIiwgYXNzZXJ0ID0+IHtcbiAgbGV0IGZhY3RvcnkxID0gdGVtcGxhdGVGYWN0b3J5KHNlcmlhbGl6ZWRUZW1wbGF0ZU5vSWQpO1xuICBsZXQgZmFjdG9yeTIgPSB0ZW1wbGF0ZUZhY3Rvcnkoc2VyaWFsaXplZFRlbXBsYXRlTm9JZCk7XG4gIGFzc2VydC5vayhmYWN0b3J5MS5pZCwgJ2lzIHByZXNlbnQnKTtcbiAgYXNzZXJ0Lm9rKGZhY3RvcnkyLmlkLCAnaXMgcHJlc2VudCcpO1xuICBhc3NlcnQubm90RXF1YWwoZmFjdG9yeTEuaWQsIGZhY3RvcnkyLmlkLCAnZmFjdG9yaWVzIHdpdGhvdXQgdW5kZXJseWluZyBpZCBjcmVhdGUgbmV3IGlkIHBlciBmYWN0b3J5Jyk7XG59KTtcblxuUVVuaXQudGVzdChcImlkIG9mIHRlbXBsYXRlIG1hdGNoZXMgZmFjdG9yeVwiLCBhc3NlcnQgPT4ge1xuICBsZXQgZmFjdG9yeSA9IHRlbXBsYXRlRmFjdG9yeShzZXJpYWxpemVkVGVtcGxhdGUpO1xuICBsZXQgdGVtcGxhdGUgPSBmYWN0b3J5LmNyZWF0ZShlbnYpO1xuICBhc3NlcnQub2sodGVtcGxhdGUuaWQsICdpcyBwcmVzZW50Jyk7XG4gIGFzc2VydC5lcXVhbCh0ZW1wbGF0ZS5pZCwgZmFjdG9yeS5pZCwgJ3RlbXBsYXRlIGlkIG1hdGNoZXMgZmFjdG9yeSBpZCcpO1xufSk7XG5cblFVbml0LnRlc3QoXCJtZXRhIGlzIGFjY2Vzc2libGUgZnJvbSBmYWN0b3J5XCIsIGFzc2VydCA9PiB7XG4gIGxldCBmYWN0b3J5ID0gdGVtcGxhdGVGYWN0b3J5KHNlcmlhbGl6ZWRUZW1wbGF0ZSk7XG4gIGFzc2VydC5kZWVwRXF1YWwoZmFjdG9yeS5tZXRhLCB7XG4gICAgdmVyc2lvbjogMTIsXG4gICAgbGFuZzogJ2VzJyxcbiAgICBtb2R1bGVOYW1lOiBcInRlbXBsYXRlL21vZHVsZS9uYW1lXCJcbiAgfSk7XG59KTtcblxuUVVuaXQudGVzdChcIm1ldGEgaXMgYWNjZXNzaWJsZSBmcm9tIHRlbXBsYXRlXCIsIGFzc2VydCA9PiB7XG4gIGxldCBmYWN0b3J5ID0gdGVtcGxhdGVGYWN0b3J5KHNlcmlhbGl6ZWRUZW1wbGF0ZSk7XG4gIGxldCB0ZW1wbGF0ZSA9IGZhY3RvcnkuY3JlYXRlKGVudik7XG4gIGFzc2VydC5kZWVwRXF1YWwodGVtcGxhdGUubWV0YSwge1xuICAgIHZlcnNpb246IDEyLFxuICAgIGxhbmc6ICdlcycsXG4gICAgbW9kdWxlTmFtZTogXCJ0ZW1wbGF0ZS9tb2R1bGUvbmFtZVwiXG4gIH0sICd0ZW1wbGF0ZSBoYXMgZXhwZWN0ZWQgbWV0YScpO1xufSk7XG5cblFVbml0LnRlc3QoXCJjYW4gaW5qZWN0IHBlciBlbnZpcm9ubWVudCB0aGluZ3MgaW50byBtZXRhXCIsIGFzc2VydCA9PiB7XG4gIGxldCBvd25lciA9IHt9O1xuICBsZXQgZmFjdG9yeSA9IHRlbXBsYXRlRmFjdG9yeTxUZXN0TWV0YSwgT3duZXJNZXRhPihzZXJpYWxpemVkVGVtcGxhdGUpO1xuXG4gIGxldCB0ZW1wbGF0ZSA9IGZhY3RvcnkuY3JlYXRlKGVudiwgeyBvd25lciB9KTtcbiAgYXNzZXJ0LnN0cmljdEVxdWFsKHRlbXBsYXRlLm1ldGEub3duZXIsIG93bmVyLCAnaXMgb3duZXInKTtcbiAgYXNzZXJ0LmRlZXBFcXVhbCh0ZW1wbGF0ZS5tZXRhLCB7XG4gICAgdmVyc2lvbjogMTIsXG4gICAgbGFuZzogJ2VzJyxcbiAgICBtb2R1bGVOYW1lOiBcInRlbXBsYXRlL21vZHVsZS9uYW1lXCIsXG4gICAgb3duZXJcbiAgfSwgJ3RlbXBsYXRlIGhhcyBleHBlY3RlZCBtZXRhJyk7XG59KTtcbiJdfQ==