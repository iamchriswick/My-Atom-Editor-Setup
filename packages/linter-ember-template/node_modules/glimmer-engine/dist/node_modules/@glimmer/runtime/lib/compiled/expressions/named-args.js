"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var references_1 = require("../../references");
var utils_1 = require("../../utils");
var reference_1 = require("@glimmer/reference");
var util_1 = require("@glimmer/util");
var CompiledNamedArgs = (function () {
    function CompiledNamedArgs(keys, values) {
        this.keys = keys;
        this.values = values;
        this.length = keys.length;
        util_1.assert(keys.length === values.length, 'Keys and values do not have the same length');
    }
    CompiledNamedArgs.empty = function () {
        return exports.COMPILED_EMPTY_NAMED_ARGS;
    };
    CompiledNamedArgs.create = function (map) {
        var keys = Object.keys(map);
        var length = keys.length;
        if (length > 0) {
            var values = [];
            for (var i = 0; i < length; i++) {
                values[i] = map[keys[i]];
            }
            return new this(keys, values);
        }
        else {
            return exports.COMPILED_EMPTY_NAMED_ARGS;
        }
    };
    CompiledNamedArgs.prototype.evaluate = function (vm) {
        var _a = this, keys = _a.keys, values = _a.values, length = _a.length;
        var evaluated = new Array(length);
        for (var i = 0; i < length; i++) {
            evaluated[i] = values[i].evaluate(vm);
        }
        return new EvaluatedNamedArgs(keys, evaluated);
    };
    CompiledNamedArgs.prototype.toJSON = function () {
        var _a = this, keys = _a.keys, values = _a.values;
        var inner = keys.map(function (key, i) { return key + ": " + values[i].toJSON(); }).join(", ");
        return "{" + inner + "}";
    };
    return CompiledNamedArgs;
}());
exports.CompiledNamedArgs = CompiledNamedArgs;
exports.COMPILED_EMPTY_NAMED_ARGS = new ((function (_super) {
    __extends(class_1, _super);
    function class_1() {
        return _super.call(this, utils_1.EMPTY_ARRAY, utils_1.EMPTY_ARRAY) || this;
    }
    class_1.prototype.evaluate = function (_vm) {
        return exports.EVALUATED_EMPTY_NAMED_ARGS;
    };
    class_1.prototype.toJSON = function () {
        return "<EMPTY>";
    };
    return class_1;
}(CompiledNamedArgs)));
var EvaluatedNamedArgs = (function () {
    function EvaluatedNamedArgs(keys, values, _map) {
        if (_map === void 0) { _map = null; }
        this.keys = keys;
        this.values = values;
        this._map = _map;
        this.tag = reference_1.combineTagged(values);
        this.length = keys.length;
        util_1.assert(keys.length === values.length, 'Keys and values do not have the same length');
    }
    EvaluatedNamedArgs.create = function (map) {
        var keys = Object.keys(map);
        var length = keys.length;
        if (length > 0) {
            var values = new Array(length);
            for (var i = 0; i < length; i++) {
                values[i] = map[keys[i]];
            }
            return new this(keys, values, map);
        }
        else {
            return exports.EVALUATED_EMPTY_NAMED_ARGS;
        }
    };
    EvaluatedNamedArgs.empty = function () {
        return exports.EVALUATED_EMPTY_NAMED_ARGS;
    };
    Object.defineProperty(EvaluatedNamedArgs.prototype, "map", {
        get: function () {
            var map = this._map;
            if (map) {
                return map;
            }
            map = this._map = util_1.dict();
            var _a = this, keys = _a.keys, values = _a.values, length = _a.length;
            for (var i = 0; i < length; i++) {
                map[keys[i]] = values[i];
            }
            return map;
        },
        enumerable: true,
        configurable: true
    });
    EvaluatedNamedArgs.prototype.get = function (key) {
        var _a = this, keys = _a.keys, values = _a.values;
        var index = keys.indexOf(key);
        return (index === -1) ? references_1.UNDEFINED_REFERENCE : values[index];
    };
    EvaluatedNamedArgs.prototype.has = function (key) {
        return this.keys.indexOf(key) !== -1;
    };
    EvaluatedNamedArgs.prototype.value = function () {
        var _a = this, keys = _a.keys, values = _a.values;
        var out = util_1.dict();
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var ref = values[i];
            out[key] = ref.value();
        }
        return out;
    };
    return EvaluatedNamedArgs;
}());
exports.EvaluatedNamedArgs = EvaluatedNamedArgs;
exports.EVALUATED_EMPTY_NAMED_ARGS = new ((function (_super) {
    __extends(class_2, _super);
    function class_2() {
        return _super.call(this, utils_1.EMPTY_ARRAY, utils_1.EMPTY_ARRAY, utils_1.EMPTY_DICT) || this;
    }
    class_2.prototype.get = function () {
        return references_1.UNDEFINED_REFERENCE;
    };
    class_2.prototype.has = function (_key) {
        return false;
    };
    class_2.prototype.value = function () {
        return utils_1.EMPTY_DICT;
    };
    return class_2;
}(EvaluatedNamedArgs)));
//# sourceMappingURL=data:application/json;base64,