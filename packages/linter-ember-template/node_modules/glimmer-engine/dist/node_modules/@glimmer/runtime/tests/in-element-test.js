"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var test_helpers_1 = require("@glimmer/test-helpers");
var ember_component_test_1 = require("./ember-component-test");
var object_reference_1 = require("@glimmer/object-reference");
var view, env;
function rerender() {
    view.rerender();
}
function appendViewFor(template, context) {
    if (context === void 0) { context = {}; }
    var MyRootView = (function (_super) {
        __extends(MyRootView, _super);
        function MyRootView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.env = env;
            _this.template = env.compile(template);
            return _this;
        }
        return MyRootView;
    }(ember_component_test_1.EmberishRootView));
    view = new MyRootView(context);
    MyRootView[object_reference_1.CLASS_META].seal();
    env.begin();
    view.appendTo('#qunit-fixture');
    env.commit();
    return view;
}
QUnit.module('Targeting a remote element', {
    setup: function () {
        env = new test_helpers_1.TestEnvironment();
    }
});
QUnit.test('basic', function (assert) {
    var externalElement = document.createElement('div');
    appendViewFor((_a = ["{{#-in-element externalElement}}[{{foo}}]{{/-in-element}}"], _a.raw = ["{{#-in-element externalElement}}[{{foo}}]{{/-in-element}}"], test_helpers_1.stripTight(_a)), { externalElement: externalElement, foo: 'Yippie!' });
    test_helpers_1.equalsElement(externalElement, 'div', {}, (_b = ["[Yippie!]"], _b.raw = ["[Yippie!]"], test_helpers_1.stripTight(_b)));
    object_reference_1.setProperty(view, 'foo', 'Double Yips!');
    rerender();
    test_helpers_1.equalsElement(externalElement, 'div', {}, (_c = ["[Double Yips!]"], _c.raw = ["[Double Yips!]"], test_helpers_1.stripTight(_c)));
    object_reference_1.setProperty(view, 'foo', 'Yippie!');
    rerender();
    test_helpers_1.equalsElement(externalElement, 'div', {}, (_d = ["[Yippie!]"], _d.raw = ["[Yippie!]"], test_helpers_1.stripTight(_d)));
    var _a, _b, _c, _d;
});
QUnit.test('changing to falsey', function (assert) {
    var first = document.createElement('div');
    var second = document.createElement('div');
    appendViewFor((_a = ["\n      |{{foo}}|\n      {{#-in-element first}}[{{foo}}]{{/-in-element}}\n      {{#-in-element second}}[{{foo}}]{{/-in-element}}\n    "], _a.raw = ["\n      |{{foo}}|\n      {{#-in-element first}}[{{foo}}]{{/-in-element}}\n      {{#-in-element second}}[{{foo}}]{{/-in-element}}\n    "], test_helpers_1.stripTight(_a)), { first: first, second: null, foo: 'Yippie!' });
    test_helpers_1.equalsElement(first, 'div', {}, "[Yippie!]");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    ember_component_test_1.assertAppended('|Yippie!|<!----><!---->');
    object_reference_1.setProperty(view, 'foo', 'Double Yips!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "[Double Yips!]");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    ember_component_test_1.assertAppended('|Double Yips!|<!----><!---->');
    object_reference_1.setProperty(view, 'first', null);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    ember_component_test_1.assertAppended('|Double Yips!|<!----><!---->');
    object_reference_1.setProperty(view, 'second', second);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "");
    test_helpers_1.equalsElement(second, 'div', {}, "[Double Yips!]");
    ember_component_test_1.assertAppended('|Double Yips!|<!----><!---->');
    object_reference_1.setProperty(view, 'foo', 'Yippie!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "");
    test_helpers_1.equalsElement(second, 'div', {}, "[Yippie!]");
    ember_component_test_1.assertAppended('|Yippie!|<!----><!---->');
    object_reference_1.setProperty(view, 'first', first);
    object_reference_1.setProperty(view, 'second', null);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "[Yippie!]");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    ember_component_test_1.assertAppended('|Yippie!|<!----><!---->');
    var _a;
});
QUnit.test('with pre-existing content', function (assert) {
    var externalElement = document.createElement('div');
    var initialContent = externalElement.innerHTML = '<p>Hello there!</p>';
    appendViewFor((_a = ["{{#-in-element externalElement}}[{{foo}}]{{/-in-element}}"], _a.raw = ["{{#-in-element externalElement}}[{{foo}}]{{/-in-element}}"], test_helpers_1.stripTight(_a)), { externalElement: externalElement, foo: 'Yippie!' });
    ember_component_test_1.assertAppended('<!---->');
    test_helpers_1.equalsElement(externalElement, 'div', {}, initialContent + "[Yippie!]");
    object_reference_1.setProperty(view, 'foo', 'Double Yips!');
    rerender();
    ember_component_test_1.assertAppended('<!---->');
    test_helpers_1.equalsElement(externalElement, 'div', {}, initialContent + "[Double Yips!]");
    object_reference_1.setProperty(view, 'foo', 'Yippie!');
    rerender();
    ember_component_test_1.assertAppended('<!---->');
    test_helpers_1.equalsElement(externalElement, 'div', {}, initialContent + "[Yippie!]");
    object_reference_1.setProperty(view, 'externalElement', null);
    rerender();
    ember_component_test_1.assertAppended('<!---->');
    test_helpers_1.equalsElement(externalElement, 'div', {}, "" + initialContent);
    object_reference_1.setProperty(view, 'externalElement', externalElement);
    rerender();
    ember_component_test_1.assertAppended('<!---->');
    test_helpers_1.equalsElement(externalElement, 'div', {}, initialContent + "[Yippie!]");
    var _a;
});
QUnit.test('updating remote element', function (assert) {
    var first = document.createElement('div');
    var second = document.createElement('div');
    appendViewFor((_a = ["{{#-in-element targetElement}}[{{foo}}]{{/-in-element}}"], _a.raw = ["{{#-in-element targetElement}}[{{foo}}]{{/-in-element}}"], test_helpers_1.stripTight(_a)), {
        targetElement: first,
        foo: 'Yippie!'
    });
    test_helpers_1.equalsElement(first, 'div', {}, "[Yippie!]");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    object_reference_1.setProperty(view, 'foo', 'Double Yips!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "[Double Yips!]");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    object_reference_1.setProperty(view, 'foo', 'Yippie!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "[Yippie!]");
    test_helpers_1.equalsElement(second, 'div', {}, "");
    object_reference_1.setProperty(view, 'targetElement', second);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "");
    test_helpers_1.equalsElement(second, 'div', {}, "[Yippie!]");
    object_reference_1.setProperty(view, 'foo', 'Double Yips!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "");
    test_helpers_1.equalsElement(second, 'div', {}, "[Double Yips!]");
    object_reference_1.setProperty(view, 'foo', 'Yippie!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, "");
    test_helpers_1.equalsElement(second, 'div', {}, "[Yippie!]");
    var _a;
});
QUnit.test('inside an `{{if}}', function (assert) {
    var first = document.createElement('div');
    var second = document.createElement('div');
    appendViewFor((_a = ["\n      {{#if showFirst}}\n        {{#-in-element first}}[{{foo}}]{{/-in-element}}\n      {{/if}}\n      {{#if showSecond}}\n        {{#-in-element second}}[{{foo}}]{{/-in-element}}\n      {{/if}}\n    "], _a.raw = ["\n      {{#if showFirst}}\n        {{#-in-element first}}[{{foo}}]{{/-in-element}}\n      {{/if}}\n      {{#if showSecond}}\n        {{#-in-element second}}[{{foo}}]{{/-in-element}}\n      {{/if}}\n    "], test_helpers_1.stripTight(_a)), {
        first: first,
        second: second,
        showFirst: true,
        showSecond: false,
        foo: 'Yippie!'
    });
    test_helpers_1.equalsElement(first, 'div', {}, (_b = ["[Yippie!]"], _b.raw = ["[Yippie!]"], test_helpers_1.stripTight(_b)));
    test_helpers_1.equalsElement(second, 'div', {}, (_c = [""], _c.raw = [""], test_helpers_1.stripTight(_c)));
    object_reference_1.setProperty(view, 'showFirst', false);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, (_d = [""], _d.raw = [""], test_helpers_1.stripTight(_d)));
    test_helpers_1.equalsElement(second, 'div', {}, (_e = [""], _e.raw = [""], test_helpers_1.stripTight(_e)));
    object_reference_1.setProperty(view, 'showSecond', true);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, (_f = [""], _f.raw = [""], test_helpers_1.stripTight(_f)));
    test_helpers_1.equalsElement(second, 'div', {}, (_g = ["[Yippie!]"], _g.raw = ["[Yippie!]"], test_helpers_1.stripTight(_g)));
    object_reference_1.setProperty(view, 'foo', 'Double Yips!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, (_h = [""], _h.raw = [""], test_helpers_1.stripTight(_h)));
    test_helpers_1.equalsElement(second, 'div', {}, (_j = ["[Double Yips!]"], _j.raw = ["[Double Yips!]"], test_helpers_1.stripTight(_j)));
    object_reference_1.setProperty(view, 'showSecond', false);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, (_k = [""], _k.raw = [""], test_helpers_1.stripTight(_k)));
    test_helpers_1.equalsElement(second, 'div', {}, (_l = [""], _l.raw = [""], test_helpers_1.stripTight(_l)));
    object_reference_1.setProperty(view, 'showFirst', true);
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, (_m = ["[Double Yips!]"], _m.raw = ["[Double Yips!]"], test_helpers_1.stripTight(_m)));
    test_helpers_1.equalsElement(second, 'div', {}, (_o = [""], _o.raw = [""], test_helpers_1.stripTight(_o)));
    object_reference_1.setProperty(view, 'foo', 'Yippie!');
    rerender();
    test_helpers_1.equalsElement(first, 'div', {}, (_p = ["[Yippie!]"], _p.raw = ["[Yippie!]"], test_helpers_1.stripTight(_p)));
    test_helpers_1.equalsElement(second, 'div', {}, (_q = [""], _q.raw = [""], test_helpers_1.stripTight(_q)));
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
});
QUnit.test('multiple', function (assert) {
    var firstElement = document.createElement('div');
    var secondElement = document.createElement('div');
    appendViewFor((_a = ["\n      {{#-in-element firstElement}}\n        [{{foo}}]\n      {{/-in-element}}\n      {{#-in-element secondElement}}\n        [{{bar}}]\n      {{/-in-element}}\n      "], _a.raw = ["\n      {{#-in-element firstElement}}\n        [{{foo}}]\n      {{/-in-element}}\n      {{#-in-element secondElement}}\n        [{{bar}}]\n      {{/-in-element}}\n      "], test_helpers_1.stripTight(_a)), {
        firstElement: firstElement,
        secondElement: secondElement,
        foo: 'Hello!',
        bar: 'World!'
    });
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_b = ["[Hello!]"], _b.raw = ["[Hello!]"], test_helpers_1.stripTight(_b)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_c = ["[World!]"], _c.raw = ["[World!]"], test_helpers_1.stripTight(_c)));
    object_reference_1.setProperty(view, 'foo', 'GoodBye!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_d = ["[GoodBye!]"], _d.raw = ["[GoodBye!]"], test_helpers_1.stripTight(_d)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_e = ["[World!]"], _e.raw = ["[World!]"], test_helpers_1.stripTight(_e)));
    object_reference_1.setProperty(view, 'bar', 'Folks!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_f = ["[GoodBye!]"], _f.raw = ["[GoodBye!]"], test_helpers_1.stripTight(_f)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_g = ["[Folks!]"], _g.raw = ["[Folks!]"], test_helpers_1.stripTight(_g)));
    object_reference_1.setProperty(view, 'bar', 'World!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_h = ["[GoodBye!]"], _h.raw = ["[GoodBye!]"], test_helpers_1.stripTight(_h)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_j = ["[World!]"], _j.raw = ["[World!]"], test_helpers_1.stripTight(_j)));
    object_reference_1.setProperty(view, 'foo', 'Hello!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_k = ["[Hello!]"], _k.raw = ["[Hello!]"], test_helpers_1.stripTight(_k)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_l = ["[World!]"], _l.raw = ["[World!]"], test_helpers_1.stripTight(_l)));
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
});
QUnit.test('nesting', function (assert) {
    var firstElement = document.createElement('div');
    var secondElement = document.createElement('div');
    appendViewFor((_a = ["\n      {{#-in-element firstElement}}\n        [{{foo}}]\n        {{#-in-element secondElement}}\n          [{{bar}}]\n        {{/-in-element}}\n      {{/-in-element}}\n      "], _a.raw = ["\n      {{#-in-element firstElement}}\n        [{{foo}}]\n        {{#-in-element secondElement}}\n          [{{bar}}]\n        {{/-in-element}}\n      {{/-in-element}}\n      "], test_helpers_1.stripTight(_a)), {
        firstElement: firstElement,
        secondElement: secondElement,
        foo: 'Hello!',
        bar: 'World!'
    });
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_b = ["[Hello!]<!---->"], _b.raw = ["[Hello!]<!---->"], test_helpers_1.stripTight(_b)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_c = ["[World!]"], _c.raw = ["[World!]"], test_helpers_1.stripTight(_c)));
    object_reference_1.setProperty(view, 'foo', 'GoodBye!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_d = ["[GoodBye!]<!---->"], _d.raw = ["[GoodBye!]<!---->"], test_helpers_1.stripTight(_d)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_e = ["[World!]"], _e.raw = ["[World!]"], test_helpers_1.stripTight(_e)));
    object_reference_1.setProperty(view, 'bar', 'Folks!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_f = ["[GoodBye!]<!---->"], _f.raw = ["[GoodBye!]<!---->"], test_helpers_1.stripTight(_f)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_g = ["[Folks!]"], _g.raw = ["[Folks!]"], test_helpers_1.stripTight(_g)));
    object_reference_1.setProperty(view, 'bar', 'World!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_h = ["[GoodBye!]<!---->"], _h.raw = ["[GoodBye!]<!---->"], test_helpers_1.stripTight(_h)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_j = ["[World!]"], _j.raw = ["[World!]"], test_helpers_1.stripTight(_j)));
    object_reference_1.setProperty(view, 'foo', 'Hello!');
    rerender();
    test_helpers_1.equalsElement(firstElement, 'div', {}, (_k = ["[Hello!]<!---->"], _k.raw = ["[Hello!]<!---->"], test_helpers_1.stripTight(_k)));
    test_helpers_1.equalsElement(secondElement, 'div', {}, (_l = ["[World!]"], _l.raw = ["[World!]"], test_helpers_1.stripTight(_l)));
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
});
QUnit.test('components are destroyed', function (assert) {
    var destroyed = 0;
    var DestroyMeComponent = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            destroyed++;
        }
    });
    env.registerEmberishCurlyComponent('destroy-me', DestroyMeComponent, 'destroy me!');
    var externalElement = document.createElement('div');
    appendViewFor((_a = ["\n      {{#if showExternal}}\n        {{#-in-element externalElement}}[{{destroy-me}}]{{/-in-element}}\n      {{/if}}\n    "], _a.raw = ["\n      {{#if showExternal}}\n        {{#-in-element externalElement}}[{{destroy-me}}]{{/-in-element}}\n      {{/if}}\n    "], test_helpers_1.stripTight(_a)), {
        externalElement: externalElement,
        showExternal: false,
    });
    test_helpers_1.equalsElement(externalElement, 'div', {}, (_b = [""], _b.raw = [""], test_helpers_1.stripTight(_b)));
    assert.equal(destroyed, 0, 'component was destroyed');
    object_reference_1.setProperty(view, 'showExternal', true);
    rerender();
    ember_component_test_1.assertElementIsEmberishElement(externalElement.firstElementChild, 'div', {}, 'destroy me!');
    assert.equal(destroyed, 0, 'component was destroyed');
    object_reference_1.setProperty(view, 'showExternal', false);
    rerender();
    test_helpers_1.equalsElement(externalElement, 'div', {}, (_c = [""], _c.raw = [""], test_helpers_1.stripTight(_c)));
    assert.equal(destroyed, 1, 'component was destroyed');
    var _a, _b, _c;
});
//# sourceMappingURL=data:application/json;base64,