"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var util_1 = require("@glimmer/util");
var references_1 = require("./references");
function pretty(json) {
    return json.type + "(" + (json.args ? json.args.join(', ') : '') + ")";
}
exports.pretty = pretty;
function defaultToJSON(opcode) {
    return { type: opcode[0] };
}
exports.defaultToJSON = defaultToJSON;
var OpcodeName;
(function (OpcodeName) {
    OpcodeName[OpcodeName["PushChildScope"] = 0] = "PushChildScope";
    OpcodeName[OpcodeName["PopScope"] = 1] = "PopScope";
    OpcodeName[OpcodeName["PushDynamicScope"] = 2] = "PushDynamicScope";
    OpcodeName[OpcodeName["PopDynamicScope"] = 3] = "PopDynamicScope";
    OpcodeName[OpcodeName["Put"] = 4] = "Put";
    OpcodeName[OpcodeName["EvaluatePut"] = 5] = "EvaluatePut";
    OpcodeName[OpcodeName["PutArgs"] = 6] = "PutArgs";
    OpcodeName[OpcodeName["BindPositionalArgs"] = 7] = "BindPositionalArgs";
    OpcodeName[OpcodeName["BindNamedArgs"] = 8] = "BindNamedArgs";
    OpcodeName[OpcodeName["BindBlocks"] = 9] = "BindBlocks";
    OpcodeName[OpcodeName["BindPartialArgs"] = 10] = "BindPartialArgs";
    OpcodeName[OpcodeName["BindCallerScope"] = 11] = "BindCallerScope";
    OpcodeName[OpcodeName["BindDynamicScope"] = 12] = "BindDynamicScope";
    OpcodeName[OpcodeName["Enter"] = 13] = "Enter";
    OpcodeName[OpcodeName["Exit"] = 14] = "Exit";
    OpcodeName[OpcodeName["Evaluate"] = 15] = "Evaluate";
    OpcodeName[OpcodeName["Jump"] = 16] = "Jump";
    OpcodeName[OpcodeName["JumpIf"] = 17] = "JumpIf";
    OpcodeName[OpcodeName["JumpUnless"] = 18] = "JumpUnless";
    OpcodeName[OpcodeName["Test"] = 19] = "Test";
    OpcodeName[OpcodeName["OpenBlock"] = 20] = "OpenBlock";
    OpcodeName[OpcodeName["CloseBlock"] = 21] = "CloseBlock";
    OpcodeName[OpcodeName["PutDynamicComponent"] = 22] = "PutDynamicComponent";
    OpcodeName[OpcodeName["PutComponent"] = 23] = "PutComponent";
    OpcodeName[OpcodeName["OpenComponent"] = 24] = "OpenComponent";
    OpcodeName[OpcodeName["DidCreateElement"] = 25] = "DidCreateElement";
    OpcodeName[OpcodeName["ShadowAttributes"] = 26] = "ShadowAttributes";
    OpcodeName[OpcodeName["DidRenderLayout"] = 27] = "DidRenderLayout";
    OpcodeName[OpcodeName["CloseComponent"] = 28] = "CloseComponent";
    OpcodeName[OpcodeName["Text"] = 29] = "Text";
    OpcodeName[OpcodeName["Comment"] = 30] = "Comment";
    OpcodeName[OpcodeName["DynamicContent"] = 31] = "DynamicContent";
    OpcodeName[OpcodeName["OpenElement"] = 32] = "OpenElement";
    OpcodeName[OpcodeName["PushRemoteElement"] = 33] = "PushRemoteElement";
    OpcodeName[OpcodeName["PopRemoteElement"] = 34] = "PopRemoteElement";
    OpcodeName[OpcodeName["OpenComponentElement"] = 35] = "OpenComponentElement";
    OpcodeName[OpcodeName["OpenDynamicElement"] = 36] = "OpenDynamicElement";
    OpcodeName[OpcodeName["FlushElement"] = 37] = "FlushElement";
    OpcodeName[OpcodeName["CloseElement"] = 38] = "CloseElement";
    OpcodeName[OpcodeName["PopElement"] = 39] = "PopElement";
    OpcodeName[OpcodeName["StaticAttr"] = 40] = "StaticAttr";
    OpcodeName[OpcodeName["Modifier"] = 41] = "Modifier";
    OpcodeName[OpcodeName["DynamicAttrNS"] = 42] = "DynamicAttrNS";
    OpcodeName[OpcodeName["DynamicAttr"] = 43] = "DynamicAttr";
    OpcodeName[OpcodeName["PutIterator"] = 44] = "PutIterator";
    OpcodeName[OpcodeName["EnterList"] = 45] = "EnterList";
    OpcodeName[OpcodeName["ExitList"] = 46] = "ExitList";
    OpcodeName[OpcodeName["EnterWithKey"] = 47] = "EnterWithKey";
    OpcodeName[OpcodeName["NextIter"] = 48] = "NextIter";
    OpcodeName[OpcodeName["PutDynamicPartial"] = 49] = "PutDynamicPartial";
    OpcodeName[OpcodeName["PutPartial"] = 50] = "PutPartial";
    OpcodeName[OpcodeName["EvaluatePartial"] = 51] = "EvaluatePartial"; // (Other<SymbolTable>, Other<Dict<PartialBlock>>)
})(OpcodeName = exports.OpcodeName || (exports.OpcodeName = {}));
var Constants = (function () {
    function Constants() {
        // `0` means NULL
        this.references = [];
        this.strings = [];
        this.expressions = [];
        this.arrays = [];
        this.slices = [];
        this.blocks = [];
        this.functions = [];
        this.others = [];
        this.NULL_REFERENCE = this.reference(references_1.NULL_REFERENCE);
        this.UNDEFINED_REFERENCE = this.reference(references_1.UNDEFINED_REFERENCE);
    }
    Constants.prototype.getReference = function (value) {
        return this.references[value - 1];
    };
    Constants.prototype.reference = function (value) {
        var index = this.references.length;
        this.references.push(value);
        return index + 1;
    };
    Constants.prototype.getString = function (value) {
        return this.strings[value - 1];
    };
    Constants.prototype.string = function (value) {
        var index = this.strings.length;
        this.strings.push(value);
        return index + 1;
    };
    Constants.prototype.getExpression = function (value) {
        return this.expressions[value - 1];
    };
    Constants.prototype.expression = function (value) {
        var index = this.expressions.length;
        this.expressions.push(value);
        return index + 1;
    };
    Constants.prototype.getArray = function (value) {
        return this.arrays[value - 1];
    };
    Constants.prototype.array = function (values) {
        var index = this.arrays.length;
        this.arrays.push(values);
        return index + 1;
    };
    Constants.prototype.getSlice = function (value) {
        return this.slices[value - 1];
    };
    Constants.prototype.slice = function (slice) {
        // TODO: Put the entire program in one big array
        var index = this.slices.length;
        this.slices.push(slice);
        return index + 1;
    };
    Constants.prototype.getBlock = function (value) {
        return this.blocks[value - 1];
    };
    Constants.prototype.block = function (block) {
        var index = this.blocks.length;
        this.blocks.push(block);
        return index + 1;
    };
    Constants.prototype.getFunction = function (value) {
        return this.functions[value - 1];
    };
    Constants.prototype.function = function (f) {
        var index = this.functions.length;
        this.functions.push(f);
        return index + 1;
    };
    Constants.prototype.getOther = function (value) {
        return this.others[value - 1];
    };
    Constants.prototype.other = function (other) {
        var index = this.others.length;
        this.others.push(other);
        return index + 1;
    };
    return Constants;
}());
exports.Constants = Constants;
var AppendOpcodes = (function () {
    function AppendOpcodes() {
        this.evaluateOpcode = util_1.fillNulls(OpcodeName.EvaluatePartial + 1);
    }
    AppendOpcodes.prototype.add = function (name, evaluate) {
        this.evaluateOpcode[name] = evaluate;
    };
    AppendOpcodes.prototype.construct = function (name, _debug, op1, op2, op3) {
        return [name | 0, (op1 || 0) | 0, (op2 || 0) | 0, (op3 || 0) | 0];
    };
    AppendOpcodes.prototype.evaluate = function (vm, opcode) {
        util_1.LOGGER.debug("[VM] OPCODE: " + opcode.type);
        var func = this.evaluateOpcode[opcode.type];
        func(vm, opcode);
    };
    return AppendOpcodes;
}());
exports.AppendOpcodes = AppendOpcodes;
exports.APPEND_OPCODES = new AppendOpcodes();
var AbstractOpcode = (function () {
    function AbstractOpcode() {
        util_1.initializeGuid(this);
    }
    AbstractOpcode.prototype.toJSON = function () {
        return { guid: this._guid, type: this.type };
    };
    return AbstractOpcode;
}());
exports.AbstractOpcode = AbstractOpcode;
var UpdatingOpcode = (function (_super) {
    __extends(UpdatingOpcode, _super);
    function UpdatingOpcode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.next = null;
        _this.prev = null;
        return _this;
    }
    return UpdatingOpcode;
}(AbstractOpcode));
exports.UpdatingOpcode = UpdatingOpcode;
function inspect(opcodes) {
    var buffer = [];
    opcodes.forEach(function (opcode, i) {
        _inspect(opcode.toJSON(), buffer, 0, i);
    });
    return buffer.join('');
}
exports.inspect = inspect;
function _inspect(opcode, buffer, level, index) {
    var indentation = [];
    for (var i = 0; i < level; i++) {
        indentation.push('  ');
    }
    buffer.push.apply(buffer, indentation);
    buffer.push(index + ". " + opcode.type);
    if (opcode.args || opcode.details) {
        buffer.push('(');
        if (opcode.args) {
            buffer.push(opcode.args.join(', '));
        }
        if (opcode.details) {
            var keys = Object.keys(opcode.details);
            if (keys.length) {
                if (opcode.args && opcode.args.length) {
                    buffer.push(', ');
                }
                buffer.push(keys.map(function (key) { return key + "=" + (opcode.details && opcode.details[key]); }).join(', '));
            }
        }
        buffer.push(')');
    }
    buffer.push('\n');
    if (opcode.children && opcode.children.length) {
        for (var i = 0; i < opcode.children.length; i++) {
            _inspect(opcode.children[i], buffer, level + 1, i);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,