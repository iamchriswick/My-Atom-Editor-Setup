"use strict";
var runtime_1 = require("@glimmer/runtime");
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
var env, root, result, self;
function rootElement() {
    return env.getDOM().createElement('div');
}
function compile(template) {
    return env.compile(template);
}
function commonSetup() {
    env = new test_helpers_1.TestEnvironment(); // TODO: Support SimpleDOM
    root = rootElement();
}
function render(template, context) {
    if (context === void 0) { context = {}; }
    self = new object_reference_1.UpdatableReference(context);
    env.begin();
    result = template.render(self, root, new test_helpers_1.TestDynamicScope());
    env.commit();
    return result;
}
QUnit.module("Debugger", {
    setup: commonSetup,
    afterEach: function () {
        runtime_1.resetDebuggerCallback();
    }
});
QUnit.test('basic debugger statement', function (assert) {
    var template = compile("{{debugger}}");
    runtime_1.setDebuggerCallback(function (context, get) {
        assert.equal(context.foo, 'bar');
        assert.ok(context.a.b.c);
        assert.equal(get('foo'), 'bar');
        assert.ok(get('a.b.c'));
    });
    render(template, {
        foo: 'bar',
        a: {
            b: {
                c: true
            }
        }
    });
});
QUnit.test('can get locals', function (assert) {
    var template = compile("{{#with foo as |bar|}}{{debugger}}{{/with}}");
    runtime_1.setDebuggerCallback(function (context, get) {
        assert.equal(get('foo'), 'woot');
        assert.equal(get('bar'), 'woot');
        assert.deepEqual(get('this'), context);
    });
    render(template, {
        foo: 'woot'
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdnZXItdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvdGVzdHMvZGVidWdnZXItdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBTzBCO0FBQzFCLHNEQVMrQjtBQUMvQiw4REFBK0Q7QUFHL0QsSUFBSSxHQUFvQixFQUFFLElBQW9CLEVBQUUsTUFBb0IsRUFBRSxJQUFnQyxDQUFDO0FBRXZHO0lBQ0UsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELGlCQUFpQixRQUFnQjtJQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQ7SUFDRSxHQUFHLEdBQUcsSUFBSSw4QkFBZSxFQUFFLENBQUMsQ0FBQywwQkFBMEI7SUFDdkQsSUFBSSxHQUFHLFdBQVcsRUFBRSxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxnQkFBbUIsUUFBcUIsRUFBRSxPQUFVO0lBQVYsd0JBQUEsRUFBQSxZQUFVO0lBQ2xELElBQUksR0FBRyxJQUFJLHFDQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNaLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSwrQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDN0QsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2IsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUU7SUFDdkIsS0FBSyxFQUFFLFdBQVc7SUFDbEIsU0FBUztRQUNQLCtCQUFxQixFQUFFLENBQUM7SUFDMUIsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsVUFBQSxNQUFNO0lBQzNDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUV2Qyw2QkFBbUIsQ0FBQyxVQUFDLE9BQVksRUFBRSxHQUFrQjtRQUNuRCxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6QixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLFFBQVEsRUFBRTtRQUNmLEdBQUcsRUFBRSxLQUFLO1FBQ1YsQ0FBQyxFQUFFO1lBQ0QsQ0FBQyxFQUFFO2dCQUNELENBQUMsRUFBRSxJQUFJO2FBQ1I7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxVQUFBLE1BQU07SUFDakMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFFdEUsNkJBQW1CLENBQUMsVUFBQyxPQUFZLEVBQUUsR0FBa0I7UUFDbkQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsUUFBUSxFQUFFO1FBQ2YsR0FBRyxFQUFFLE1BQU07S0FDWixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFNpbXBsZSxcbiAgVGVtcGxhdGUsXG4gIFJlbmRlclJlc3VsdCxcbiAgc2V0RGVidWdnZXJDYWxsYmFjayxcbiAgcmVzZXREZWJ1Z2dlckNhbGxiYWNrLFxuICBkZWJ1Z0NhbGxiYWNrXG59IGZyb20gXCJAZ2xpbW1lci9ydW50aW1lXCI7XG5pbXBvcnQge1xuICBCYXNpY0NvbXBvbmVudCxcbiAgRW1iZXJpc2hDdXJseUNvbXBvbmVudCxcbiAgVGVzdEVudmlyb25tZW50LFxuICBUZXN0RHluYW1pY1Njb3BlLFxuICBlcXVhbFRva2VucyxcbiAgZXF1YWxTbmFwc2hvdHMsXG4gIGdlbmVyYXRlU25hcHNob3QsXG4gIHN0cmlwXG59IGZyb20gXCJAZ2xpbW1lci90ZXN0LWhlbHBlcnNcIjtcbmltcG9ydCB7IFVwZGF0YWJsZVJlZmVyZW5jZSB9IGZyb20gXCJAZ2xpbW1lci9vYmplY3QtcmVmZXJlbmNlXCI7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxubGV0IGVudjogVGVzdEVudmlyb25tZW50LCByb290OiBTaW1wbGUuRWxlbWVudCwgcmVzdWx0OiBSZW5kZXJSZXN1bHQsIHNlbGY6IFVwZGF0YWJsZVJlZmVyZW5jZTxPcGFxdWU+O1xuXG5mdW5jdGlvbiByb290RWxlbWVudCgpIHtcbiAgcmV0dXJuIGVudi5nZXRET00oKS5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbn1cblxuZnVuY3Rpb24gY29tcGlsZSh0ZW1wbGF0ZTogc3RyaW5nKSB7XG4gIHJldHVybiBlbnYuY29tcGlsZSh0ZW1wbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNvbW1vblNldHVwKCkge1xuICBlbnYgPSBuZXcgVGVzdEVudmlyb25tZW50KCk7IC8vIFRPRE86IFN1cHBvcnQgU2ltcGxlRE9NXG4gIHJvb3QgPSByb290RWxlbWVudCgpO1xufVxuXG5mdW5jdGlvbiByZW5kZXI8VD4odGVtcGxhdGU6IFRlbXBsYXRlPFQ+LCBjb250ZXh0PXt9KSB7XG4gIHNlbGYgPSBuZXcgVXBkYXRhYmxlUmVmZXJlbmNlKGNvbnRleHQpO1xuICBlbnYuYmVnaW4oKTtcbiAgcmVzdWx0ID0gdGVtcGxhdGUucmVuZGVyKHNlbGYsIHJvb3QsIG5ldyBUZXN0RHluYW1pY1Njb3BlKCkpO1xuICBlbnYuY29tbWl0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cblFVbml0Lm1vZHVsZShcIkRlYnVnZ2VyXCIsIHtcbiAgc2V0dXA6IGNvbW1vblNldHVwLFxuICBhZnRlckVhY2goKSB7XG4gICAgcmVzZXREZWJ1Z2dlckNhbGxiYWNrKCk7XG4gIH1cbn0pO1xuXG5RVW5pdC50ZXN0KCdiYXNpYyBkZWJ1Z2dlciBzdGF0ZW1lbnQnLCBhc3NlcnQgPT4ge1xuICBsZXQgdGVtcGxhdGUgPSBjb21waWxlKGB7e2RlYnVnZ2VyfX1gKTtcblxuICBzZXREZWJ1Z2dlckNhbGxiYWNrKChjb250ZXh0OiBhbnksIGdldDogZGVidWdDYWxsYmFjaykgPT4ge1xuICAgIGFzc2VydC5lcXVhbChjb250ZXh0LmZvbywgJ2JhcicpO1xuICAgIGFzc2VydC5vayhjb250ZXh0LmEuYi5jKTtcbiAgICBhc3NlcnQuZXF1YWwoZ2V0KCdmb28nKSwgJ2JhcicpO1xuICAgIGFzc2VydC5vayhnZXQoJ2EuYi5jJykpO1xuICB9KTtcblxuICByZW5kZXIodGVtcGxhdGUsIHtcbiAgICBmb286ICdiYXInLFxuICAgIGE6IHtcbiAgICAgIGI6IHtcbiAgICAgICAgYzogdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59KTtcblxuUVVuaXQudGVzdCgnY2FuIGdldCBsb2NhbHMnLCBhc3NlcnQgPT4ge1xuICBsZXQgdGVtcGxhdGUgPSBjb21waWxlKGB7eyN3aXRoIGZvbyBhcyB8YmFyfH19e3tkZWJ1Z2dlcn19e3svd2l0aH19YCk7XG5cbiAgc2V0RGVidWdnZXJDYWxsYmFjaygoY29udGV4dDogYW55LCBnZXQ6IGRlYnVnQ2FsbGJhY2spID0+IHtcbiAgICBhc3NlcnQuZXF1YWwoZ2V0KCdmb28nKSwgJ3dvb3QnKTtcbiAgICBhc3NlcnQuZXF1YWwoZ2V0KCdiYXInKSwgJ3dvb3QnKTtcbiAgICBhc3NlcnQuZGVlcEVxdWFsKGdldCgndGhpcycpLCBjb250ZXh0KTtcbiAgfSk7XG5cbiAgcmVuZGVyKHRlbXBsYXRlLCB7XG4gICAgZm9vOiAnd29vdCdcbiAgfSk7XG59KTtcbiJdfQ==