"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var expressions_1 = require("../expressions");
var references_1 = require("../../references");
var CompiledHasBlock = (function (_super) {
    __extends(CompiledHasBlock, _super);
    function CompiledHasBlock(inner) {
        var _this = _super.call(this) || this;
        _this.inner = inner;
        _this.type = "has-block";
        return _this;
    }
    CompiledHasBlock.prototype.evaluate = function (vm) {
        var block = this.inner.evaluate(vm);
        return references_1.PrimitiveReference.create(!!block);
    };
    CompiledHasBlock.prototype.toJSON = function () {
        return "has-block(" + this.inner.toJSON() + ")";
    };
    return CompiledHasBlock;
}(expressions_1.CompiledExpression));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = CompiledHasBlock;
var CompiledHasBlockParams = (function (_super) {
    __extends(CompiledHasBlockParams, _super);
    function CompiledHasBlockParams(inner) {
        var _this = _super.call(this) || this;
        _this.inner = inner;
        _this.type = "has-block-params";
        return _this;
    }
    CompiledHasBlockParams.prototype.evaluate = function (vm) {
        var block = this.inner.evaluate(vm);
        var hasLocals = block && block.symbolTable.getSymbols().locals;
        return references_1.PrimitiveReference.create(!!hasLocals);
    };
    CompiledHasBlockParams.prototype.toJSON = function () {
        return "has-block-params(" + this.inner.toJSON() + ")";
    };
    return CompiledHasBlockParams;
}(expressions_1.CompiledExpression));
exports.CompiledHasBlockParams = CompiledHasBlockParams;
var CompiledGetBlockBySymbol = (function () {
    function CompiledGetBlockBySymbol(symbol, debug) {
        this.symbol = symbol;
        this.debug = debug;
    }
    CompiledGetBlockBySymbol.prototype.evaluate = function (vm) {
        return vm.scope().getBlock(this.symbol);
    };
    CompiledGetBlockBySymbol.prototype.toJSON = function () {
        return "get-block($" + this.symbol + "(" + this.debug + "))";
    };
    return CompiledGetBlockBySymbol;
}());
exports.CompiledGetBlockBySymbol = CompiledGetBlockBySymbol;
var CompiledInPartialGetBlock = (function () {
    function CompiledInPartialGetBlock(symbol, name) {
        this.symbol = symbol;
        this.name = name;
    }
    CompiledInPartialGetBlock.prototype.evaluate = function (vm) {
        var _a = this, symbol = _a.symbol, name = _a.name;
        var args = vm.scope().getPartialArgs(symbol);
        return args.blocks[name];
    };
    CompiledInPartialGetBlock.prototype.toJSON = function () {
        return "get-block($" + this.symbol + "($ARGS)." + this.name + "))";
    };
    return CompiledInPartialGetBlock;
}());
exports.CompiledInPartialGetBlock = CompiledInPartialGetBlock;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLWJsb2NrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvaGFzLWJsb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLDhDQUFvRDtBQUNwRCwrQ0FBc0Q7QUFFdEQ7SUFBOEMsb0NBQTJCO0lBR3ZFLDBCQUFvQixLQUF1QjtRQUEzQyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsV0FBSyxHQUFMLEtBQUssQ0FBa0I7UUFGcEMsVUFBSSxHQUFHLFdBQVcsQ0FBQzs7SUFJMUIsQ0FBQztJQUVELG1DQUFRLEdBQVIsVUFBUyxFQUFNO1FBQ2IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLCtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGlDQUFNLEdBQU47UUFDRSxNQUFNLENBQUMsZUFBYSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFHLENBQUM7SUFDN0MsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQWZELENBQThDLGdDQUFrQixHQWUvRDs7O0FBRUQ7SUFBNEMsMENBQTJCO0lBR3JFLGdDQUFvQixLQUF1QjtRQUEzQyxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIsV0FBSyxHQUFMLEtBQUssQ0FBa0I7UUFGcEMsVUFBSSxHQUFHLGtCQUFrQixDQUFDOztJQUlqQyxDQUFDO0lBRUQseUNBQVEsR0FBUixVQUFTLEVBQU07UUFDYixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwQyxJQUFJLFNBQVMsR0FBRyxLQUFLLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDL0QsTUFBTSxDQUFDLCtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELHVDQUFNLEdBQU47UUFDRSxNQUFNLENBQUMsc0JBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQUcsQ0FBQztJQUNwRCxDQUFDO0lBQ0gsNkJBQUM7QUFBRCxDQUFDLEFBaEJELENBQTRDLGdDQUFrQixHQWdCN0Q7QUFoQlksd0RBQXNCO0FBdUJuQztJQUNFLGtDQUFvQixNQUFjLEVBQVUsS0FBYTtRQUFyQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUN6RCxDQUFDO0lBRUQsMkNBQVEsR0FBUixVQUFTLEVBQU07UUFDYixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELHlDQUFNLEdBQU47UUFDRSxNQUFNLENBQUMsZ0JBQWMsSUFBSSxDQUFDLE1BQU0sU0FBSSxJQUFJLENBQUMsS0FBSyxPQUFJLENBQUM7SUFDckQsQ0FBQztJQUNILCtCQUFDO0FBQUQsQ0FBQyxBQVhELElBV0M7QUFYWSw0REFBd0I7QUFhckM7SUFDRSxtQ0FBb0IsTUFBYyxFQUFVLElBQVk7UUFBcEMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFNBQUksR0FBSixJQUFJLENBQVE7SUFDeEQsQ0FBQztJQUVELDRDQUFRLEdBQVIsVUFBUyxFQUFNO1FBQ1QsSUFBQSxTQUF1QixFQUFyQixrQkFBTSxFQUFFLGNBQUksQ0FBVTtRQUM1QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCwwQ0FBTSxHQUFOO1FBQ0UsTUFBTSxDQUFDLGdCQUFjLElBQUksQ0FBQyxNQUFNLGdCQUFXLElBQUksQ0FBQyxJQUFJLE9BQUksQ0FBQztJQUMzRCxDQUFDO0lBQ0gsZ0NBQUM7QUFBRCxDQUFDLEFBYkQsSUFhQztBQWJZLDhEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgVk0gZnJvbSAnLi4vLi4vdm0vYXBwZW5kJztcbmltcG9ydCB7IElubGluZUJsb2NrIH0gZnJvbSAnLi4vLi4vc2Nhbm5lcic7XG5pbXBvcnQgeyBDb21waWxlZEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5pbXBvcnQgeyBQcmltaXRpdmVSZWZlcmVuY2UgfSBmcm9tICcuLi8uLi9yZWZlcmVuY2VzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsZWRIYXNCbG9jayBleHRlbmRzIENvbXBpbGVkRXhwcmVzc2lvbjxib29sZWFuPiB7XG4gIHB1YmxpYyB0eXBlID0gXCJoYXMtYmxvY2tcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBDb21waWxlZEdldEJsb2NrKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IFBhdGhSZWZlcmVuY2U8Ym9vbGVhbj4ge1xuICAgIGxldCBibG9jayA9IHRoaXMuaW5uZXIuZXZhbHVhdGUodm0pO1xuICAgIHJldHVybiBQcmltaXRpdmVSZWZlcmVuY2UuY3JlYXRlKCEhYmxvY2spO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBoYXMtYmxvY2soJHt0aGlzLmlubmVyLnRvSlNPTigpfSlgO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZEhhc0Jsb2NrUGFyYW1zIGV4dGVuZHMgQ29tcGlsZWRFeHByZXNzaW9uPGJvb2xlYW4+IHtcbiAgcHVibGljIHR5cGUgPSBcImhhcy1ibG9jay1wYXJhbXNcIjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBDb21waWxlZEdldEJsb2NrKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IFBhdGhSZWZlcmVuY2U8Ym9vbGVhbj4ge1xuICAgIGxldCBibG9jayA9IHRoaXMuaW5uZXIuZXZhbHVhdGUodm0pO1xuICAgIGxldCBoYXNMb2NhbHMgPSBibG9jayAmJiBibG9jay5zeW1ib2xUYWJsZS5nZXRTeW1ib2xzKCkubG9jYWxzO1xuICAgIHJldHVybiBQcmltaXRpdmVSZWZlcmVuY2UuY3JlYXRlKCEhaGFzTG9jYWxzKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgaGFzLWJsb2NrLXBhcmFtcygke3RoaXMuaW5uZXIudG9KU09OKCl9KWA7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21waWxlZEdldEJsb2NrIHtcbiAgZXZhbHVhdGUodm06IFZNKTogT3B0aW9uPElubGluZUJsb2NrPjtcbiAgdG9KU09OKCk6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkR2V0QmxvY2tCeVN5bWJvbCBpbXBsZW1lbnRzIENvbXBpbGVkR2V0QmxvY2sge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN5bWJvbDogbnVtYmVyLCBwcml2YXRlIGRlYnVnOiBzdHJpbmcpIHtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IElubGluZUJsb2NrIHtcbiAgICByZXR1cm4gdm0uc2NvcGUoKS5nZXRCbG9jayh0aGlzLnN5bWJvbCk7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGdldC1ibG9jaygkJHt0aGlzLnN5bWJvbH0oJHt0aGlzLmRlYnVnfSkpYDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tcGlsZWRJblBhcnRpYWxHZXRCbG9jayBpbXBsZW1lbnRzIENvbXBpbGVkR2V0QmxvY2sge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN5bWJvbDogbnVtYmVyLCBwcml2YXRlIG5hbWU6IHN0cmluZykge1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogSW5saW5lQmxvY2sge1xuICAgIGxldCB7IHN5bWJvbCwgbmFtZSB9ID0gdGhpcztcbiAgICBsZXQgYXJncyA9IHZtLnNjb3BlKCkuZ2V0UGFydGlhbEFyZ3Moc3ltYm9sKTtcbiAgICByZXR1cm4gYXJncy5ibG9ja3NbbmFtZV07XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGdldC1ibG9jaygkJHt0aGlzLnN5bWJvbH0oJEFSR1MpLiR7dGhpcy5uYW1lfSkpYDtcbiAgfVxufVxuIl19