"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var object_1 = require("@glimmer/object");
var test_helpers_1 = require("@glimmer/test-helpers");
var util_1 = require("@glimmer/util");
var object_reference_1 = require("@glimmer/object-reference");
var EmberishRootView = (function (_super) {
    __extends(EmberishRootView, _super);
    function EmberishRootView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmberishRootView.prototype.appendTo = function (selector) {
        var element = this.parent = document.querySelector(selector);
        var self = new object_reference_1.UpdatableReference(this);
        this._result = this.template.render(self, element, new test_helpers_1.TestDynamicScope());
        this.element = element.firstElementChild;
    };
    EmberishRootView.prototype.rerender = function (context) {
        if (context === void 0) { context = null; }
        if (context) {
            this.setProperties(context);
        }
        this.env.begin();
        this._result.rerender();
        this.env.commit();
        this.element = this.parent.firstElementChild;
    };
    EmberishRootView.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this._result) {
            this._result.destroy();
        }
    };
    return EmberishRootView;
}(object_1.default));
exports.EmberishRootView = EmberishRootView;
var view, env;
function module(name) {
    QUnit.module("[components] " + name, {
        setup: function () {
            env = new test_helpers_1.TestEnvironment();
        }
    });
}
module("Components - generic - props");
function appendViewFor(template, context) {
    if (context === void 0) { context = {}; }
    var MyRootView = (function (_super) {
        __extends(MyRootView, _super);
        function MyRootView() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.env = env;
            _this.template = env.compile(template);
            return _this;
        }
        return MyRootView;
    }(EmberishRootView));
    MyRootView[object_reference_1.CLASS_META].seal();
    view = new MyRootView(context);
    env.begin();
    view.appendTo('#qunit-fixture');
    env.commit();
    return view;
}
exports.appendViewFor = appendViewFor;
function assertAppended(content) {
    test_helpers_1.equalTokens(document.querySelector('#qunit-fixture'), content);
}
exports.assertAppended = assertAppended;
function assertText(expected) {
    var rawText = document.querySelector('#qunit-fixture').innerText;
    var text = rawText.split(/[\r\n]/g).map(function (part) {
        var p = part.replace(/\s+/g, ' ');
        return p.trim();
    }).filter(function (part) { return part !== ''; }).join(' ');
    QUnit.assert.strictEqual(text, expected, "#qunit-fixture content should be: `" + expected + "`");
}
function assertFired(component, name, count) {
    if (count === void 0) { count = 1; }
    var hooks = component['hooks'];
    if (!hooks) {
        throw new TypeError("Not hooked: " + component);
    }
    if (name in hooks) {
        strictEqual(hooks[name], count, "The " + name + " hook fired " + count + " " + (count === 1 ? 'time' : 'times'));
    }
    else {
        ok(false, "The " + name + " hook fired");
    }
}
function assertComponentElement() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var tagName, attrs, contents;
    if (args.length === 2) {
        if (typeof args[1] === 'string')
            _a = [args[0], {}, args[1]], tagName = _a[0], attrs = _a[1], contents = _a[2];
        else
            _b = [args[0], args[1], null], tagName = _b[0], attrs = _b[1], contents = _b[2];
    }
    else if (args.length === 1) {
        _c = [args[0], {}, null], tagName = _c[0], attrs = _c[1], contents = _c[2];
    }
    else {
        tagName = args[0], attrs = args[1], contents = args[2];
    }
    test_helpers_1.equalsElement(view.element, tagName, attrs, contents);
    var _a, _b, _c;
}
function assertEmberishElement() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var tagName, attrs, contents;
    if (args.length === 2) {
        if (typeof args[1] === 'string')
            _a = [args[0], {}, args[1]], tagName = _a[0], attrs = _a[1], contents = _a[2];
        else
            _b = [args[0], args[1], null], tagName = _b[0], attrs = _b[1], contents = _b[2];
    }
    else if (args.length === 1) {
        _c = [args[0], {}, null], tagName = _c[0], attrs = _c[1], contents = _c[2];
    }
    else {
        tagName = args[0], attrs = args[1], contents = args[2];
    }
    var fullAttrs = util_1.assign({ class: test_helpers_1.classes('ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, attrs);
    test_helpers_1.equalsElement(view.element, tagName, fullAttrs, contents);
    var _a, _b, _c;
}
function assertElementIsEmberishElement(element) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var tagName, attrs, contents;
    if (args.length === 2) {
        if (typeof args[1] === 'string')
            _a = [args[0], {}, args[1]], tagName = _a[0], attrs = _a[1], contents = _a[2];
        else
            _b = [args[0], args[1], null], tagName = _b[0], attrs = _b[1], contents = _b[2];
    }
    else if (args.length === 1) {
        _c = [args[0], {}, null], tagName = _c[0], attrs = _c[1], contents = _c[2];
    }
    else {
        tagName = args[0], attrs = args[1], contents = args[2];
    }
    var fullAttrs = util_1.assign({ class: test_helpers_1.classes('ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, attrs);
    test_helpers_1.equalsElement(element, tagName, fullAttrs, contents);
    var _a, _b, _c;
}
exports.assertElementIsEmberishElement = assertElementIsEmberishElement;
function rerender() {
    view.rerender();
}
;
function isExpected(expected) {
    return typeof expected === 'object';
}
// Glimmer                Curly
// foo="bar"              foo=(attr "bar")
// foo="{{bar}}"          foo=(attr bar)
// foo="bar{{baz}}bat"    foo=(attr "bar" baz "bat")
// foo="{{foo bar}}"      foo=(attr (foo bar))
// foo={{foo bar}}        foo=(foo bar)                        { glimmer: "foo bar", curly: "(foo bar)" }
// foo={{"bar"}}          foo="bar"                            '"bar"'
// foo={{bar}}            foo=bar                              "bar"
// foo={{null}}           foo=null                             "null"
// foo={{1}}              foo=1                                "1"
function testComponent(title, _a) {
    var kind = _a.kind, layout = _a.layout, _b = _a.invokeAs, invokeAs = _b === void 0 ? {} : _b, expected = _a.expected, skip = _a.skip, _c = _a.updates, updates = _c === void 0 ? [] : _c;
    if (skip === true)
        return;
    var _d = invokeAs.attributes, attributes = _d === void 0 ? {} : _d, _e = invokeAs.args, args = _e === void 0 ? {} : _e, context = invokeAs.context, blockParams = invokeAs.blockParams, template = invokeAs.template, inverse = invokeAs.inverse;
    if (!kind || kind === 'curly') {
        var test = skip === 'curly' ? QUnit.skip : QUnit.test;
        test("curly: " + title, function (assert) {
            if (typeof layout !== 'string')
                throw new Error('Only string layouts are supported for curly tests');
            env.registerEmberishCurlyComponent('test-component', test_helpers_1.EmberishCurlyComponent, layout);
            var list = ['test-component'];
            Object.keys(attributes).forEach(function (key) {
                throw new Error("Cannot use attrs in a curly component test");
                // list.push(`${key}="${attrs[key]}"`);
            });
            Object.keys(args).forEach(function (key) {
                list.push(key + "=" + toCurly(args[key]));
            });
            if (blockParams)
                list.push("as |" + blockParams.join(' ') + "|");
            var tag = list.join(' ');
            var syntax;
            if (typeof template === 'string') {
                var inv = typeof inverse === 'string' ? "{{else}}" + inverse : '';
                syntax = "{{#" + tag + "}}" + template + inv + "{{/test-component}}";
            }
            else {
                syntax = "{{" + tag + "}}";
            }
            assert.ok(true, "generated invocation: " + syntax);
            var view = appendViewFor(syntax, context || {});
            assertExpected('div', expected);
            updates.forEach(function (update) {
                view.rerender(update.context);
                assertExpected('div', update.expected);
            });
        });
    }
    if (!kind || kind === 'curly' || kind === 'dynamic') {
        var test = skip === 'dynamic' ? QUnit.skip : QUnit.test;
        test("curly - component helper: " + title, function (assert) {
            env.registerEmberishCurlyComponent('test-component', test_helpers_1.EmberishCurlyComponent, layout);
            env.registerEmberishCurlyComponent('test-component2', test_helpers_1.EmberishCurlyComponent, layout + " -- 2");
            var list = ['component', 'componentName'];
            Object.keys(attributes).forEach(function (key) {
                throw new Error("Cannot use attrs in a curly component test");
                // list.push(`${key}="${attrs[key]}"`);
            });
            Object.keys(args).forEach(function (key) {
                list.push(key + "=" + toCurly(args[key]));
            });
            if (blockParams)
                list.push("as |" + blockParams.join(' ') + "|");
            var tag = list.join(' ');
            var syntax;
            if (typeof template === 'string') {
                var inv = typeof inverse === 'string' ? "{{else}}" + inverse : '';
                syntax = "{{#" + tag + "}}" + template + inv + "{{/component}}";
            }
            else {
                syntax = "{{" + tag + "}}";
            }
            assert.ok(true, "generated invocation: " + syntax);
            var creation = util_1.assign(context || {}, { componentName: 'test-component' });
            var view = appendViewFor(syntax, creation);
            assertExpected('div', expected);
            view.rerender({ componentName: 'test-component2' });
            if (isExpected(expected)) {
                assertExpected('div', util_1.assign({}, expected, { content: expected.content + " -- 2" }));
            }
            else {
                assertExpected('div', expected + " -- 2");
            }
            updates.forEach(function (update) {
                var context = update.context, expected = update.expected;
                view.rerender(util_1.assign({}, context || {}, { componentName: 'test-component' }));
                assertExpected('div', expected);
                view.rerender({ componentName: 'test-component2' });
                if (isExpected(expected)) {
                    assertExpected('div', util_1.assign({}, expected, { content: expected.content + " -- 2" }));
                }
                else {
                    assertExpected('div', expected + " -- 2");
                }
            });
        });
    }
    if (!kind || kind === 'glimmer') {
        var test = skip === 'glimmer' ? QUnit.skip : QUnit.test;
        test("glimmer: " + title, function (assert) {
            var layoutOptions;
            if (typeof layout === 'string') {
                layoutOptions = { attributes: {}, args: {}, template: layout };
            }
            else {
                layoutOptions = layout;
            }
            var layoutBody = glimmerTag('aside', layoutOptions);
            env.registerEmberishGlimmerComponent('test-component', test_helpers_1.EmberishGlimmerComponent, " " + layoutBody + "<!-- hi -->");
            var invocation = glimmerTag('test-component', invokeAs);
            assert.ok(true, "generated layout: " + layoutBody);
            assert.ok(true, "generated invocation: " + invocation);
            appendViewFor(invocation, context || {});
            assertExpected('aside', expected, attributes);
            updates.forEach(function (update) {
                ok(true, "Updating with " + JSON.stringify(update));
                view.rerender(update.context);
                assertExpected('aside', update.expected, attributes);
            });
        });
    }
}
function glimmerTag(tagName, _a) {
    var _b = _a.blockParams, blockParams = _b === void 0 ? null : _b, _c = _a.attributes, attributes = _c === void 0 ? {} : _c, _d = _a.args, args = _d === void 0 ? {} : _d, _e = _a.template, template = _e === void 0 ? null : _e;
    var list = [tagName];
    Object.keys(attributes).forEach(function (key) {
        list.push(key + "=\"" + attributes[key] + "\"");
    });
    Object.keys(args).forEach(function (key) {
        list.push("@" + key + "={{" + toGlimmer(args[key]) + "}}");
    });
    if (blockParams)
        list.push("as |" + blockParams.join(' ') + "|");
    var tag = list.join(" ");
    if (typeof template === 'string') {
        return "<" + tag + ">" + template + "</" + tagName + ">";
    }
    else {
        return "<" + tag + " />";
    }
}
function assertExpected(tagName, expected, defaultAttrs) {
    if (defaultAttrs === void 0) { defaultAttrs = {}; }
    var attrs;
    var content;
    if (typeof expected === 'string') {
        attrs = defaultAttrs;
        content = expected;
    }
    else {
        attrs = expected.attrs;
        content = expected.content;
    }
    assertEmberishElement(tagName, attrs, content);
}
function toGlimmer(obj) {
    if (obj && obj.glimmer)
        return obj.glimmer;
    else
        return String(obj);
}
function toCurly(obj) {
    if (obj && obj.curly)
        return obj.curly;
    else
        return String(obj);
}
testComponent('non-block without properties', {
    layout: 'In layout',
    expected: 'In layout'
});
testComponent('block without properties', {
    layout: 'In layout -- {{yield}}',
    invokeAs: { template: 'In template' },
    expected: 'In layout -- In template'
});
testComponent('yield inside a conditional on the component', {
    layout: 'In layout -- {{#if @predicate}}{{yield}}{{/if}}',
    invokeAs: {
        template: 'In template',
        args: { predicate: 'predicate' },
        context: { predicate: true }
    },
    expected: {
        attrs: {},
        content: 'In layout -- In template'
    },
    updates: [{
            expected: 'In layout -- In template'
        }, {
            context: { predicate: false },
            expected: 'In layout -- <!---->'
        }, {
            context: { predicate: true },
            expected: 'In layout -- In template'
        }]
});
testComponent('non-block with properties on attrs', {
    layout: 'In layout - someProp: {{@someProp}}',
    invokeAs: { args: { someProp: '"something here"' } },
    expected: 'In layout - someProp: something here'
});
testComponent('block with properties on attrs', {
    layout: 'In layout - someProp: {{@someProp}} - {{yield}}',
    invokeAs: { template: 'In template', args: { someProp: '"something here"' } },
    expected: 'In layout - someProp: something here - In template',
});
testComponent('with ariaRole specified', {
    skip: true,
    kind: 'curly',
    layout: 'Here!',
    invokeAs: { attributes: { id: '"aria-test"', ariaRole: '"main"' } },
    expected: {
        content: 'Here!',
        attrs: { id: '"aria-test"', role: '"main"' }
    }
});
testComponent('with ariaRole and class specified', {
    skip: true,
    kind: 'curly',
    layout: 'Here!',
    invokeAs: { attributes: { id: '"aria-test"', class: '"foo"', ariaRole: '"main"' } },
    expected: {
        content: 'Here!',
        attrs: { id: '"aria-test"', class: test_helpers_1.classes('ember-view foo'), role: '"main"' }
    }
});
testComponent('with ariaRole specified as an outer binding', {
    skip: true,
    kind: 'curly',
    layout: 'Here!',
    invokeAs: {
        attributes: { id: '"aria-test"', class: '"foo"', ariaRole: 'ariaRole' },
        context: { ariaRole: 'main' },
    },
    expected: {
        content: 'Here!',
        attrs: { id: '"aria-test"', class: test_helpers_1.classes('ember-view foo'), role: '"main"' }
    }
});
testComponent('glimmer component with role specified as an outer binding and copied', {
    skip: true,
    kind: 'glimmer',
    layout: 'Here!',
    invokeAs: {
        attributes: { id: '"aria-test"', role: '"{{myRole}}"' },
        context: { myRole: 'main' }
    },
    expected: {
        content: 'Here!',
        attrs: { id: '"aria-test"', role: '"main"' }
    }
});
testComponent('yielding to an non-existent block', {
    layout: 'Before-{{yield}}-After',
    expected: 'Before--After'
});
testComponent('yield', {
    layout: '{{#if @predicate}}Yes:{{yield @someValue}}{{else}}No:{{yield to="inverse"}}{{/if}}',
    invokeAs: {
        args: { predicate: 'activated', someValue: '42' },
        context: { activated: true, outer: "outer" },
        blockParams: ['result'],
        template: 'Hello{{result}}{{outer}}',
        inverse: 'Goodbye{{outer}}'
    },
    expected: 'Yes:Hello42outer'
});
[
    {
        value: 'true',
        output: 'true'
    }, {
        value: 'false',
        output: 'false'
    }, {
        value: 'null',
        output: ''
    }, {
        value: 'undefined',
        output: ''
    }, {
        value: '1',
        output: '1'
    }, {
        value: '"foo"',
        output: 'foo'
    }
].forEach(function (_a) {
    var value = _a.value, output = _a.output;
    testComponent("yielding " + value, {
        layout: "{{yield " + value + "}}",
        invokeAs: {
            blockParams: ['yielded'],
            template: '{{yielded}}-{{yielded.foo.bar}}'
        },
        expected: output + "-"
    });
});
testComponent("yielding a string and rendering its length", {
    layout: "{{yield \"foo\"}}-{{yield \"\"}}",
    invokeAs: {
        blockParams: ['yielded'],
        template: '{{yielded}}-{{yielded.length}}'
    },
    expected: "foo-3--0"
});
testComponent('use a non-existent block param', {
    skip: 'glimmer',
    layout: '{{yield someValue}}',
    invokeAs: {
        args: { someValue: '42' },
        blockParams: ['val1', 'val2'],
        template: '{{val1}} - {{val2}}'
    },
    expected: '42 - '
});
testComponent('yield to inverse', {
    skip: 'glimmer',
    layout: '{{#if @predicate}}Yes:{{yield @someValue}}{{else}}No:{{yield to="inverse"}}{{/if}}',
    invokeAs: {
        args: { predicate: 'activated', someValue: '42' },
        context: { activated: false, outer: "outer" },
        blockParams: ['result'],
        template: 'Hello{{result}}{{outer}}',
        inverse: 'Goodbye{{outer}}'
    },
    expected: 'No:Goodbyeouter'
});
module('Components - has-block helper');
testComponent('parameterized has-block (subexpr, inverse) when inverse supplied', {
    kind: 'curly',
    layout: '{{#if (has-block "inverse")}}Yes{{else}}No{{/if}}',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: 'Yes'
});
testComponent('parameterized has-block (subexpr, inverse) when inverse not supplied', {
    layout: '{{#if (has-block "inverse")}}Yes{{else}}No{{/if}}',
    invokeAs: { template: 'block here' },
    expected: 'No'
});
testComponent('parameterized has-block (subexpr, default) when block supplied', {
    layout: '{{#if (has-block)}}Yes{{else}}No{{/if}}',
    invokeAs: { template: 'block here' },
    expected: 'Yes'
});
testComponent('parameterized has-block (subexpr, default) when block not supplied', {
    kind: 'curly',
    layout: '{{#if (has-block)}}Yes{{else}}No{{/if}}',
    expected: 'No'
});
testComponent('parameterized has-block (content, inverse) when inverse supplied', {
    kind: 'curly',
    layout: '{{has-block "inverse"}}',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: 'true'
});
testComponent('parameterized has-block (content, inverse) when inverse not supplied', {
    layout: '{{has-block "inverse"}}',
    invokeAs: { template: 'block here' },
    expected: 'false'
});
testComponent('parameterized has-block (content, default) when block supplied', {
    layout: '{{has-block}}',
    invokeAs: { template: 'block here' },
    expected: 'true'
});
testComponent('parameterized has-block (content, default) when block not supplied', {
    kind: 'curly',
    layout: '{{has-block}}',
    expected: 'false'
});
testComponent('parameterized has-block (prop, inverse) when inverse supplied', {
    kind: 'curly',
    layout: '<button name={{has-block "inverse"}}></button>',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: '<button name="true"></button>'
});
testComponent('parameterized has-block (prop, inverse) when inverse not supplied', {
    layout: '<button name={{has-block "inverse"}}></button>',
    invokeAs: { template: 'block here' },
    expected: '<button name="false"></button>'
});
testComponent('parameterized has-block (prop, default) when block supplied', {
    layout: '<button name={{has-block}}></button>',
    invokeAs: { template: 'block here' },
    expected: '<button name="true"></button>'
});
testComponent('parameterized has-block (prop, default) when block not supplied', {
    kind: 'curly',
    layout: '<button name={{has-block}}></button>',
    expected: '<button name="false"></button>'
});
testComponent('parameterized has-block (attr, inverse) when inverse supplied', {
    kind: 'curly',
    layout: '<button data-has-block="{{has-block "inverse"}}"></button>',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: '<button data-has-block="true"></button>'
});
testComponent('parameterized has-block (attr, inverse) when inverse not supplied', {
    layout: '<button data-has-block="{{has-block "inverse"}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block="false"></button>'
});
testComponent('parameterized has-block (attr, default) when block supplied', {
    layout: '<button data-has-block="{{has-block}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block="true"></button>'
});
testComponent('parameterized has-block (attr, default) when block not supplied', {
    kind: 'curly',
    layout: '<button data-has-block="{{has-block}}"></button>',
    expected: '<button data-has-block="false"></button>'
});
testComponent('parameterized has-block (concatted attr, inverse) when inverse supplied', {
    kind: 'curly',
    layout: '<button data-has-block="is-{{has-block "inverse"}}"></button>',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: '<button data-has-block="is-true"></button>'
});
testComponent('parameterized has-block (concatted attr, inverse) when inverse not supplied', {
    layout: '<button data-has-block="is-{{has-block "inverse"}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block="is-false"></button>'
});
testComponent('parameterized has-block (concatted attr, default) when block supplied', {
    layout: '<button data-has-block="is-{{has-block}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block="is-true"></button>'
});
testComponent('parameterized has-block (concatted attr, default) when block not supplied', {
    kind: 'curly',
    layout: '<button data-has-block="is-{{has-block}}"></button>',
    expected: '<button data-has-block="is-false"></button>'
});
module('Dynamically-scoped variable accessors');
testComponent('Can get and set dynamic variable', {
    layout: '{{#-with-dynamic-vars myKeyword=@value}}{{yield}}{{/-with-dynamic-vars}}',
    invokeAs: {
        template: '{{-get-dynamic-var "myKeyword"}}',
        context: { value: "hello" },
        args: { value: 'value' }
    },
    expected: 'hello',
    updates: [{
            expected: 'hello'
        }, {
            context: { value: 'goodbye' },
            expected: 'goodbye'
        }]
});
testComponent('Can get and set dynamic variable with bound names', {
    layout: '{{#-with-dynamic-vars myKeyword=@value1 secondKeyword=@value2}}{{yield}}{{/-with-dynamic-vars}}',
    invokeAs: {
        template: '{{-get-dynamic-var keyword}}',
        context: { value1: "hello", value2: "goodbye", keyword: "myKeyword" },
        args: { value1: "value1", value2: "value2" }
    },
    expected: 'hello',
    updates: [{
            expected: 'hello'
        }, {
            context: { keyword: 'secondKeyword' },
            expected: 'goodbye'
        }, {
            context: { value2: 'goodbye!' },
            expected: 'goodbye!'
        }, {
            context: { value1: "hello", value2: "goodbye", keyword: "myKeyword" },
            expected: 'hello'
        }]
});
testComponent('Can shadow existing dynamic variable', {
    layout: '{{#-with-dynamic-vars myKeyword=@outer}}<div>{{-get-dynamic-var "myKeyword"}}</div>{{#-with-dynamic-vars myKeyword=@inner}}{{yield}}{{/-with-dynamic-vars}}<div>{{-get-dynamic-var "myKeyword"}}</div>{{/-with-dynamic-vars}}',
    invokeAs: {
        template: '<div>{{-get-dynamic-var "myKeyword"}}</div>',
        context: { outer: 'original', inner: 'shadowed' },
        args: { outer: 'outer', inner: 'inner' }
    },
    expected: '<div>original</div><div>shadowed</div><div>original</div>',
    updates: [{
            expected: '<div>original</div><div>shadowed</div><div>original</div>'
        }, {
            context: { outer: 'original2', inner: 'shadowed' },
            expected: '<div>original2</div><div>shadowed</div><div>original2</div>'
        }, {
            context: { outer: 'original2', inner: 'shadowed2' },
            expected: '<div>original2</div><div>shadowed2</div><div>original2</div>'
        }]
});
module('Components - has-block-params helper');
testComponent('parameterized has-block-params (subexpr, inverse) when inverse supplied without block params', {
    kind: 'curly',
    layout: '{{#if (has-block-params "inverse")}}Yes{{else}}No{{/if}}',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: 'No'
});
testComponent('parameterized has-block-params (subexpr, inverse) when inverse not supplied', {
    layout: '{{#if (has-block-params "inverse")}}Yes{{else}}No{{/if}}',
    invokeAs: { template: 'block here' },
    expected: 'No'
});
testComponent('parameterized has-block-params (subexpr, default) when block supplied with block params', {
    kind: 'curly',
    layout: '{{#if (has-block-params)}}Yes{{else}}No{{/if}}',
    invokeAs: {
        blockParams: ['param'],
        template: 'block here'
    },
    expected: 'Yes'
});
testComponent('parameterized has-block-params (subexpr, default) when block supplied without block params', {
    layout: '{{#if (has-block-params)}}Yes{{else}}No{{/if}}',
    invokeAs: { template: 'block here' },
    expected: 'No'
});
testComponent('parameterized has-block-params (subexpr, default) when block not supplied', {
    kind: 'curly',
    layout: '{{#if (has-block-params)}}Yes{{else}}No{{/if}}',
    expected: 'No'
});
testComponent('parameterized has-block-params (content, inverse) when inverse supplied without block params', {
    kind: 'curly',
    layout: '{{has-block-params "inverse"}}',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: 'false'
});
testComponent('parameterized has-block-params (content, inverse) when inverse not supplied', {
    layout: '{{has-block-params "inverse"}}',
    invokeAs: { template: 'block here' },
    expected: 'false'
});
testComponent('parameterized has-block-params (content, default) when block supplied with block params', {
    kind: 'curly',
    layout: '{{has-block-params}}',
    invokeAs: {
        blockParams: ['param'],
        template: 'block here'
    },
    expected: 'true'
});
testComponent('parameterized has-block-params (content, default) when block supplied without block params', {
    layout: '{{has-block-params}}',
    invokeAs: { template: 'block here' },
    expected: 'false'
});
testComponent('parameterized has-block-params (content, default) when block not supplied', {
    kind: 'curly',
    layout: '{{has-block-params}}',
    expected: 'false'
});
testComponent('parameterized has-block-params (prop, inverse) when inverse supplied without block params', {
    kind: 'curly',
    layout: '<button name={{has-block-params "inverse"}}></button>',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: '<button name="false"></button>'
});
testComponent('parameterized has-block-params (prop, inverse) when inverse not supplied', {
    layout: '<button name={{has-block-params "inverse"}}></button>',
    invokeAs: { template: 'block here' },
    expected: '<button name="false"></button>'
});
testComponent('parameterized has-block-params (prop, default) when block supplied with block params', {
    kind: 'curly',
    layout: '<button name={{has-block-params}}></button>',
    invokeAs: {
        blockParams: ['param'],
        template: 'block here'
    },
    expected: '<button name="true"></button>'
});
testComponent('parameterized has-block-params (prop, default) when block supplied without block params', {
    layout: '<button name={{has-block-params}}></button>',
    invokeAs: { template: 'block here' },
    expected: '<button name="false"></button>'
});
testComponent('parameterized has-block-params (prop, default) when block not supplied', {
    kind: 'curly',
    layout: '<button name={{has-block-params}}></button>',
    expected: '<button name="false"></button>'
});
testComponent('parameterized has-block-params (attr, inverse) when inverse supplied without block params', {
    kind: 'curly',
    layout: '<button data-has-block-params="{{has-block-params "inverse"}}"></button>',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: '<button data-has-block-params="false"></button>'
});
testComponent('parameterized has-block-params (attr, inverse) when inverse not supplied', {
    layout: '<button data-has-block-params="{{has-block-params "inverse"}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block-params="false"></button>'
});
testComponent('parameterized has-block-params (attr, default) when block supplied with block params', {
    kind: 'curly',
    layout: '<button data-has-block-params="{{has-block-params}}"></button>',
    invokeAs: {
        blockParams: ['param'],
        template: 'block here'
    },
    expected: '<button data-has-block-params="true"></button>'
});
testComponent('parameterized has-block-params (attr, default) when block supplied without block params', {
    layout: '<button data-has-block-params="{{has-block-params}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block-params="false"></button>'
});
testComponent('parameterized has-block-params (attr, default) when block not supplied', {
    kind: 'curly',
    layout: '<button data-has-block-params="{{has-block-params}}"></button>',
    expected: '<button data-has-block-params="false"></button>'
});
testComponent('parameterized has-block-params (concatted attr, inverse) when inverse supplied without block params', {
    kind: 'curly',
    layout: '<button data-has-block-params="is-{{has-block-params "inverse"}}"></button>',
    invokeAs: {
        template: 'block here',
        inverse: 'inverse here'
    },
    expected: '<button data-has-block-params="is-false"></button>'
});
testComponent('parameterized has-block-params (concatted attr, inverse) when inverse not supplied', {
    layout: '<button data-has-block-params="is-{{has-block-params "inverse"}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block-params="is-false"></button>'
});
testComponent('parameterized has-block-params (concatted attr, default) when block supplied with block params', {
    kind: 'curly',
    layout: '<button data-has-block-params="is-{{has-block-params}}"></button>',
    invokeAs: {
        blockParams: ['param'],
        template: 'block here'
    },
    expected: '<button data-has-block-params="is-true"></button>'
});
testComponent('parameterized has-block-params (concatted attr, default) when block supplied without block params', {
    layout: '<button data-has-block-params="is-{{has-block-params}}"></button>',
    invokeAs: { template: 'block here' },
    expected: '<button data-has-block-params="is-false"></button>'
});
testComponent('parameterized has-block-params (concatted attr, default) when block not supplied', {
    kind: 'curly',
    layout: '<button data-has-block-params="is-{{has-block-params}}"></button>',
    expected: '<button data-has-block-params="is-false"></button>'
});
module("Components - curlies - dynamic component");
QUnit.test('initially missing, then present, then missing', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar(attrs) {
            var _this = _super.call(this, attrs) || this;
            _this.foo = 'foo';
            _this.bar = 'bar';
            _this.baz = null;
            _this.baz = attrs['baz'] || 'baz';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.BasicComponent));
    env.registerBasicComponent('foo-bar', FooBar, "<p>{{foo}} {{bar}} {{baz}}</p>");
    appendViewFor((_a = ["\n      <div>\n        {{component something}}\n      </div>"], _a.raw = ["\n      <div>\n        {{component something}}\n      </div>"], test_helpers_1.stripTight(_a)), {
        something: undefined
    });
    test_helpers_1.equalsElement(view.element, 'div', {}, '<!---->');
    object_reference_1.setProperty(view, 'something', 'foo-bar');
    rerender();
    test_helpers_1.equalsElement(view.element, 'div', {}, '<p>foo bar baz</p>');
    object_reference_1.setProperty(view, 'something', undefined);
    rerender();
    test_helpers_1.equalsElement(view.element, 'div', {}, '<!---->');
    var _a;
});
QUnit.test('initially present, then missing, then present', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar(attrs) {
            var _this = _super.call(this, attrs) || this;
            _this.foo = 'foo';
            _this.bar = 'bar';
            _this.baz = null;
            _this.baz = attrs['baz'] || 'baz';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.BasicComponent));
    env.registerBasicComponent('foo-bar', FooBar, "<p>{{foo}} {{bar}} {{baz}}</p>");
    appendViewFor((_a = ["\n      <div>\n        {{component something}}\n      </div>"], _a.raw = ["\n      <div>\n        {{component something}}\n      </div>"], test_helpers_1.stripTight(_a)), {
        something: "foo-bar"
    });
    test_helpers_1.equalsElement(view.element, 'div', {}, '<p>foo bar baz</p>');
    object_reference_1.setProperty(view, 'something', undefined);
    rerender();
    test_helpers_1.equalsElement(view.element, 'div', {}, '<!---->');
    object_reference_1.setProperty(view, 'something', 'foo-bar');
    rerender();
    test_helpers_1.equalsElement(view.element, 'div', {}, '<p>foo bar baz</p>');
    var _a;
});
module("Components - curlies - dynamic customizations");
QUnit.test('dynamic tagName', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = 'aside';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, "Hello. It's me.");
    appendViewFor("{{foo-bar}}");
    assertEmberishElement('aside', {}, "Hello. It's me.");
    rerender();
    assertEmberishElement('aside', {}, "Hello. It's me.");
});
QUnit.test('dynamic tagless component', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = '';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, "Michael Jordan says \"Go Tagless\"");
    appendViewFor("{{foo-bar}}");
    assertAppended('Michael Jordan says "Go Tagless"');
    rerender();
    assertAppended('Michael Jordan says "Go Tagless"');
});
QUnit.test('dynamic attribute bindings', function (assert) {
    var fooBarInstance = null;
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar(attrs) {
            var _this = _super.call(this, attrs) || this;
            _this.attributeBindings = ['style'];
            _this.style = null;
            _this.style = 'color: red;';
            fooBarInstance = _this;
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, "Hello. It's me.");
    appendViewFor("{{foo-bar}}");
    assertEmberishElement('div', { 'style': 'color: red;' }, "Hello. It's me.");
    rerender();
    assertEmberishElement('div', { 'style': 'color: red;' }, "Hello. It's me.");
    fooBarInstance.style = 'color: green;';
    rerender();
    assertEmberishElement('div', { 'style': 'color: green;' }, "Hello. It's me.");
    fooBarInstance.style = null;
    rerender();
    assertEmberishElement('div', {}, "Hello. It's me.");
    fooBarInstance.style = 'color: red;';
    rerender();
    assertEmberishElement('div', { 'style': 'color: red;' }, "Hello. It's me.");
});
module("Components - generic - attrs");
module("Components - integration - scope");
testComponent('correct scope - conflicting local names', {
    layout: (_a = ["{{#with @a as |item|}}{{@a}}: {{item}}, {{#with @b as |item|}}\n                     {{@b}}: {{item}}, {{#with @c as |item|}}{{@c}}: {{item}}{{/with}}{{/with}}{{/with}}"], _a.raw = ["{{#with @a as |item|}}{{@a}}: {{item}}, {{#with @b as |item|}}\n                     {{@b}}: {{item}}, {{#with @c as |item|}}{{@c}}: {{item}}{{/with}}{{/with}}{{/with}}"], test_helpers_1.stripTight(_a)),
    invokeAs: { args: { a: '"A"', b: '"B"', c: '"C"' } },
    expected: 'A: A, B: B, C: C'
});
testComponent('correct scope - conflicting block param and attr names', {
    layout: 'Outer: {{@conflict}} {{#with @item as |conflict|}}Inner: {{@conflict}} Block: {{conflict}}{{/with}}',
    invokeAs: { args: { item: '"from block"', conflict: '"from attr"' } },
    expected: 'Outer: from attr Inner: from attr Block: from block'
});
QUnit.test('correct scope - accessing local variable in yielded block (glimmer component)', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.BasicComponent));
    env.registerBasicComponent('foo-bar', FooBar, "[Layout: {{zomg}}][Layout: {{lol}}][Layout: {{@foo}}]{{yield}}");
    appendViewFor((_a = ["\n      <div>\n        [Outside: {{zomg}}]\n        {{#with zomg as |lol|}}\n          [Inside: {{zomg}}]\n          [Inside: {{lol}}]\n          <foo-bar @foo={{zomg}}>\n            [Block: {{zomg}}]\n            [Block: {{lol}}]\n          </foo-bar>\n        {{/with}}\n      </div>"], _a.raw = ["\n      <div>\n        [Outside: {{zomg}}]\n        {{#with zomg as |lol|}}\n          [Inside: {{zomg}}]\n          [Inside: {{lol}}]\n          <foo-bar @foo={{zomg}}>\n            [Block: {{zomg}}]\n            [Block: {{lol}}]\n          </foo-bar>\n        {{/with}}\n      </div>"], test_helpers_1.stripTight(_a)), { zomg: "zomg" });
    test_helpers_1.equalsElement(view.element, 'div', {}, (_b = ["\n        [Outside: zomg]\n        [Inside: zomg]\n        [Inside: zomg]\n        [Layout: ]\n        [Layout: ]\n        [Layout: zomg]\n        [Block: zomg]\n        [Block: zomg]"], _b.raw = ["\n        [Outside: zomg]\n        [Inside: zomg]\n        [Inside: zomg]\n        [Layout: ]\n        [Layout: ]\n        [Layout: zomg]\n        [Block: zomg]\n        [Block: zomg]"], test_helpers_1.stripTight(_b)));
    var _a, _b;
});
QUnit.test('correct scope - accessing local variable in yielded block (curly component)', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = '';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, "[Layout: {{zomg}}][Layout: {{lol}}][Layout: {{foo}}]{{yield}}");
    appendViewFor((_a = ["\n      <div>\n        [Outside: {{zomg}}]\n        {{#with zomg as |lol|}}\n          [Inside: {{zomg}}]\n          [Inside: {{lol}}]\n          {{#foo-bar foo=zomg}}\n            [Block: {{zomg}}]\n            [Block: {{lol}}]\n          {{/foo-bar}}\n        {{/with}}\n      </div>"], _a.raw = ["\n      <div>\n        [Outside: {{zomg}}]\n        {{#with zomg as |lol|}}\n          [Inside: {{zomg}}]\n          [Inside: {{lol}}]\n          {{#foo-bar foo=zomg}}\n            [Block: {{zomg}}]\n            [Block: {{lol}}]\n          {{/foo-bar}}\n        {{/with}}\n      </div>"], test_helpers_1.stripTight(_a)), { zomg: "zomg" });
    test_helpers_1.equalsElement(view.element, 'div', {}, (_b = ["\n        [Outside: zomg]\n        [Inside: zomg]\n        [Inside: zomg]\n        [Layout: ]\n        [Layout: ]\n        [Layout: zomg]\n        [Block: zomg]\n        [Block: zomg]"], _b.raw = ["\n        [Outside: zomg]\n        [Inside: zomg]\n        [Inside: zomg]\n        [Layout: ]\n        [Layout: ]\n        [Layout: zomg]\n        [Block: zomg]\n        [Block: zomg]"], test_helpers_1.stripTight(_b)));
    var _a, _b;
});
QUnit.test('correct scope - caller self can be threaded through (curly component)', function (assert) {
    // demonstrates ability for Ember to know the target object of curly component actions
    var Base = (function (_super) {
        __extends(Base, _super);
        function Base() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = '';
            return _this;
        }
        return Base;
    }(test_helpers_1.EmberishCurlyComponent));
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.name = 'foo-bar';
            return _this;
        }
        return FooBar;
    }(Base));
    var QuxDerp = (function (_super) {
        __extends(QuxDerp, _super);
        function QuxDerp() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.name = 'qux-derp';
            return _this;
        }
        return QuxDerp;
    }(Base));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, (_a = ["\n    [Name: {{name}} | Target: {{targetObject.name}}]\n    {{#qux-derp}}\n      [Name: {{name}} | Target: {{targetObject.name}}]\n    {{/qux-derp}}\n    [Name: {{name}} | Target: {{targetObject.name}}]\n  "], _a.raw = ["\n    [Name: {{name}} | Target: {{targetObject.name}}]\n    {{#qux-derp}}\n      [Name: {{name}} | Target: {{targetObject.name}}]\n    {{/qux-derp}}\n    [Name: {{name}} | Target: {{targetObject.name}}]\n  "], test_helpers_1.stripTight(_a)));
    env.registerEmberishCurlyComponent('qux-derp', QuxDerp, "[Name: {{name}} | Target: {{targetObject.name}}]{{yield}}");
    appendViewFor("<div>{{foo-bar}}</div>", {
        name: 'outer-scope'
    });
    test_helpers_1.equalsElement(view.element, 'div', {}, (_b = ["\n        [Name: foo-bar | Target: outer-scope]\n        [Name: qux-derp | Target: foo-bar]\n        [Name: foo-bar | Target: outer-scope]\n        [Name: foo-bar | Target: outer-scope]\n        "], _b.raw = ["\n        [Name: foo-bar | Target: outer-scope]\n        [Name: qux-derp | Target: foo-bar]\n        [Name: foo-bar | Target: outer-scope]\n        [Name: foo-bar | Target: outer-scope]\n        "], test_helpers_1.stripTight(_b)));
    var _a, _b;
});
QUnit.test('correct scope - self', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar(attrs) {
            var _this = _super.call(this, attrs) || this;
            _this.foo = 'foo';
            _this.bar = 'bar';
            _this.baz = null;
            _this.baz = attrs['baz'] || 'baz';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.BasicComponent));
    env.registerBasicComponent('foo-bar', FooBar, "<p>{{foo}} {{bar}} {{baz}}</p>");
    appendViewFor((_a = ["\n      <div>\n        <foo-bar />\n        <foo-bar @baz={{zomg}} />\n      </div>"], _a.raw = ["\n      <div>\n        <foo-bar />\n        <foo-bar @baz={{zomg}} />\n      </div>"], test_helpers_1.stripTight(_a)), { zomg: "zomg" });
    test_helpers_1.equalsElement(view.element, 'div', {}, (_b = ["\n        <p>foo bar baz</p>\n        <p>foo bar zomg</p>"], _b.raw = ["\n        <p>foo bar baz</p>\n        <p>foo bar zomg</p>"], test_helpers_1.stripTight(_b)));
    var _a, _b;
});
QUnit.test('`false` class name do not render', function (assert) {
    appendViewFor('<div class={{isFalse}}>FALSE</div>', { isFalse: false });
    assert.strictEqual(view.element.getAttribute('class'), null);
    assert.strictEqual(view.element.className, '');
});
QUnit.test('`null` class name do not render', function (assert) {
    appendViewFor('<div class={{isNull}}>NULL</div>', { isNull: null });
    assert.strictEqual(view.element.getAttribute('class'), null);
    assert.strictEqual(view.element.className, '');
});
QUnit.test('`undefined` class name do not render', function (assert) {
    appendViewFor('<div class={{isUndefined}}>UNDEFINED</div>', { isUndefined: undefined });
    assert.strictEqual(view.element.getAttribute('class'), null);
    assert.strictEqual(view.element.className, '');
});
QUnit.test('`0` class names do render', function (assert) {
    appendViewFor('<div class={{isZero}}>ZERO</div>', { isZero: 0 });
    assert.strictEqual(view.element.getAttribute('class'), '0');
    assert.strictEqual(view.element.className, '0');
});
QUnit.test('component with slashed name', function (assert) {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    env.registerEmberishCurlyComponent('fizz-bar/baz-bar', SampleComponent, '{{@hey}}');
    appendViewFor('{{fizz-bar/baz-bar hey="hello"}}');
    assert.equal(view.element.textContent, 'hello');
});
QUnit.test('correct scope - simple', function (assert) {
    env.registerBasicComponent('sub-item', test_helpers_1.BasicComponent, "<p>{{@name}}</p>");
    var subitemId = 0;
    var subitems = [];
    for (var i = 0; i < 1; i++) {
        subitems.push({
            id: subitemId++
        });
    }
    appendViewFor((_a = ["\n      {{#each items key=\"id\" as |item|}}\n        <sub-item @name={{item.id}} />\n      {{/each}}"], _a.raw = ["\n      {{#each items key=\"id\" as |item|}}\n        <sub-item @name={{item.id}} />\n      {{/each}}"], test_helpers_1.stripTight(_a)), { items: subitems });
    test_helpers_1.equalsElement(view.element, 'p', {}, '0');
    var _a;
});
QUnit.test('correct scope - complex', function (assert) {
    env.registerBasicComponent('sub-item', test_helpers_1.BasicComponent, "<p>{{@name}}</p>");
    env.registerBasicComponent('my-item', test_helpers_1.BasicComponent, (_a = ["\n      <aside>{{@item.id}}:\n        {{#if @item.visible}}\n          {{#each @item.subitems key=\"id\" as |subitem|}}\n             <sub-item @name={{subitem.id}} />\n          {{/each}}\n        {{/if}}\n      </aside>"], _a.raw = ["\n      <aside>{{@item.id}}:\n        {{#if @item.visible}}\n          {{#each @item.subitems key=\"id\" as |subitem|}}\n             <sub-item @name={{subitem.id}} />\n          {{/each}}\n        {{/if}}\n      </aside>"], test_helpers_1.stripTight(_a)));
    var itemId = 0;
    var items = [];
    for (var i = 0; i < 3; i++) {
        var subitems = [];
        var subitemId = 0;
        for (var j = 0; j < 2; j++) {
            subitems.push({
                id: itemId + "." + subitemId++
            });
        }
        items.push({
            id: String(itemId++),
            visible: i % 2 === 0,
            subitems: subitems
        });
    }
    appendViewFor((_b = ["\n        <article>{{#each items key=\"id\" as |item|}}\n          <my-item @item={{item}} />\n        {{/each}}</article>"], _b.raw = ["\n        <article>{{#each items key=\"id\" as |item|}}\n          <my-item @item={{item}} />\n        {{/each}}</article>"], test_helpers_1.stripTight(_b)), { items: items });
    test_helpers_1.equalsElement(view.element, 'article', {}, (_c = ["\n        <aside>0:<p>0.0</p><p>0.1</p></aside>\n        <aside>1:<!----></aside>\n        <aside>2:<p>2.0</p><p>2.1</p></aside>"], _c.raw = ["\n        <aside>0:<p>0.0</p><p>0.1</p></aside>\n        <aside>1:<!----></aside>\n        <aside>2:<p>2.0</p><p>2.1</p></aside>"], test_helpers_1.stripTight(_c)));
    var _a, _b, _c;
});
QUnit.test('correct scope - complex yield', function (assert) {
    env.registerEmberishCurlyComponent('item-list', test_helpers_1.EmberishCurlyComponent.extend(), (_a = ["\n      <ul>\n        {{#each items key=\"id\" as |item|}}\n          <li>{{item.id}}: {{yield item}}</li>\n        {{/each}}\n      </ul>"], _a.raw = ["\n      <ul>\n        {{#each items key=\"id\" as |item|}}\n          <li>{{item.id}}: {{yield item}}</li>\n        {{/each}}\n      </ul>"], test_helpers_1.stripTight(_a)));
    var items = [
        { id: '1', name: 'Foo', description: 'Foo!' },
        { id: '2', name: 'Bar', description: 'Bar!' },
        { id: '3', name: 'Baz', description: 'Baz!' }
    ];
    appendViewFor((_b = ["\n      {{#item-list items=items as |item|}}\n        {{item.name}}{{#if showDescription}} - {{item.description}}{{/if}}\n      {{/item-list}}"], _b.raw = ["\n      {{#item-list items=items as |item|}}\n        {{item.name}}{{#if showDescription}} - {{item.description}}{{/if}}\n      {{/item-list}}"], test_helpers_1.stripTight(_b)), { items: items, showDescription: false });
    assertEmberishElement('div', (_c = ["\n      <ul>\n        <li>1: Foo<!----></li>\n        <li>2: Bar<!----></li>\n        <li>3: Baz<!----></li>\n      </ul>"], _c.raw = ["\n      <ul>\n        <li>1: Foo<!----></li>\n        <li>2: Bar<!----></li>\n        <li>3: Baz<!----></li>\n      </ul>"], test_helpers_1.stripTight(_c)));
    view.rerender({ items: items, showDescription: true });
    assertEmberishElement('div', (_d = ["\n      <ul>\n        <li>1: Foo - Foo!</li>\n        <li>2: Bar - Bar!</li>\n        <li>3: Baz - Baz!</li>\n      </ul>"], _d.raw = ["\n      <ul>\n        <li>1: Foo - Foo!</li>\n        <li>2: Bar - Bar!</li>\n        <li>3: Baz - Baz!</li>\n      </ul>"], test_helpers_1.stripTight(_d)));
    var _a, _b, _c, _d;
});
QUnit.test('correct scope - self', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar(attrs) {
            var _this = _super.call(this, attrs) || this;
            _this.foo = 'foo';
            _this.bar = 'bar';
            _this.baz = null;
            _this.baz = attrs['baz'] || 'baz';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.BasicComponent));
    env.registerBasicComponent('foo-bar', FooBar, "<p>{{foo}} {{bar}} {{baz}}</p>");
    appendViewFor((_a = ["\n      <div>\n        <foo-bar />\n        <foo-bar @baz={{zomg}} />\n      </div>"], _a.raw = ["\n      <div>\n        <foo-bar />\n        <foo-bar @baz={{zomg}} />\n      </div>"], test_helpers_1.stripTight(_a)), { zomg: "zomg" });
    test_helpers_1.equalsElement(view.element, 'div', {}, (_b = ["\n        <p>foo bar baz</p>\n        <p>foo bar zomg</p>"], _b.raw = ["\n        <p>foo bar baz</p>\n        <p>foo bar zomg</p>"], test_helpers_1.stripTight(_b)));
    var _a, _b;
});
module('Curly Components - smoke test dynamicScope access');
QUnit.test('component has access to dynamic scope', function () {
    var SampleComponent = (function (_super) {
        __extends(SampleComponent, _super);
        function SampleComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SampleComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    SampleComponent.fromDynamicScope = ['theme'];
    SampleComponent[object_reference_1.CLASS_META].seal();
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{theme}}');
    appendViewFor('{{#-with-dynamic-vars theme="light"}}{{sample-component}}{{/-with-dynamic-vars}}');
    assertEmberishElement('div', 'light');
});
module('Curly Components - positional arguments');
QUnit.skip('static named positional parameters', function () {
    var SampleComponent = (function (_super) {
        __extends(SampleComponent, _super);
        function SampleComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SampleComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    SampleComponent.positionalParams = ['name', 'age'];
    SampleComponent[object_reference_1.CLASS_META].seal();
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{name}}{{age}}');
    appendViewFor('{{sample-component "Quint" 4}}');
    assertEmberishElement('div', 'Quint4');
});
QUnit.skip('dynamic named positional parameters', function () {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: ['name', 'age']
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{name}}{{age}}');
    appendViewFor('{{sample-component myName myAge}}', {
        myName: 'Quint',
        myAge: 4
    });
    assertEmberishElement('div', 'Quint4');
    object_reference_1.setProperty(view, 'myName', 'Edward');
    object_reference_1.setProperty(view, 'myAge', 5);
    rerender();
    assertEmberishElement('div', 'Edward5');
});
QUnit.skip('if a value is passed as a non-positional parameter, it takes precedence over the named one', function (assert) {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: ['name']
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{name}}');
    assert.throws(function () {
        appendViewFor('{{sample-component notMyName name=myName}}', {
            myName: 'Quint',
            notMyName: 'Sergio'
        });
    }, "You cannot specify both a positional param (at position 0) and the hash argument `name`.");
});
QUnit.skip('static arbitrary number of positional parameters', function () {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: 'names'
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{#each names as |name|}}{{name}}{{/each}}');
    appendViewFor((_a = ["<div>{{sample-component \"Foo\" 4 \"Bar\" id=\"args-3\"}}\n      {{sample-component \"Foo\" 4 \"Bar\" 5 \"Baz\" id=\"args-5\"}}\n      {{!sample-component \"Foo\" 4 \"Bar\" 5 \"Baz\" id=\"helper\"}}</div>"], _a.raw = ["<div>{{sample-component \"Foo\" 4 \"Bar\" id=\"args-3\"}}\n      {{sample-component \"Foo\" 4 \"Bar\" 5 \"Baz\" id=\"args-5\"}}\n      {{!sample-component \"Foo\" 4 \"Bar\" 5 \"Baz\" id=\"helper\"}}</div>"], test_helpers_1.stripTight(_a)));
    var first = view.element.firstChild;
    var second = first.nextSibling;
    // let third = <Element>second.nextSibling;
    assertElementIsEmberishElement(first, 'div', { id: 'args-3' }, 'Foo4Bar');
    assertElementIsEmberishElement(second, 'div', { id: 'args-5' }, 'Foo4Bar5Baz');
    var _a;
    // equalsElement(third, ...emberishElement('div', { id: 'helper' }, 'Foo4Bar5Baz'));
});
QUnit.skip('arbitrary positional parameter conflict with hash parameter is reported', function (assert) {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: 'names'
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{#each attrs.names as |name|}}{{name}}{{/each}}');
    assert.throws(function () {
        appendViewFor('{{sample-component "Foo" 4 "Bar" names=numbers id="args-3"}}', {
            numbers: [1, 2, 3]
        });
    }, "You cannot specify positional parameters and the hash argument `names`.");
});
QUnit.skip('can use hash parameter instead of arbitrary positional param [GH #12444]', function () {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: 'names'
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{#each names as |name|}}{{name}}{{/each}}');
    appendViewFor('{{sample-component names=things id="args-3"}}', {
        things: ['Foo', 4, 'Bar']
    });
    assertEmberishElement('div', { id: 'args-3' }, 'Foo4Bar');
});
QUnit.skip('can use hash parameter instead of positional param', function () {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: ['first', 'second']
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{first}} - {{second}}');
    appendViewFor("<div>\n    {{sample-component \"one\" \"two\" id=\"two-positional\"}}\n    {{sample-component \"one\" second=\"two\" id=\"one-positional\"}}\n    {{sample-component first=\"one\" second=\"two\" id=\"no-positional\"}}</div>\n  ", {
        things: ['Foo', 4, 'Bar']
    });
    var first = view.element.firstElementChild;
    var second = first.nextElementSibling;
    var third = second.nextElementSibling;
    assertElementIsEmberishElement(first, 'div', { id: 'two-positional' }, 'one - two');
    assertElementIsEmberishElement(second, 'div', { id: 'one-positional' }, 'one - two');
    assertElementIsEmberishElement(third, 'div', { id: 'no-positional' }, 'one - two');
});
QUnit.skip('dynamic arbitrary number of positional parameters', function () {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: 'n'
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, '{{#each attrs.n as |name|}}{{name}}{{/each}}');
    appendViewFor('<div>{{sample-component user1 user2 id="direct"}}{{!component "sample-component" user1 user2 id="helper"}}</div>', {
        user1: 'Foo',
        user2: 4
    });
    var first = view.element.firstElementChild;
    // let second = first.nextElementSibling;
    assertElementIsEmberishElement(first, 'div', { id: 'direct' }, 'Foo4');
    // assertElementIsEmberishElement(first, 'div', { id: 'helper' }, 'Foo4');
    object_reference_1.setProperty(view, 'user1', "Bar");
    object_reference_1.setProperty(view, 'user2', "5");
    rerender();
    assertElementIsEmberishElement(first, 'div', { id: 'direct' }, 'Bar5');
    // assertElementIsEmberishElement(second, 'div', { id: 'helper' }, 'Bar5');
    object_reference_1.setProperty(view, 'user2', '6');
    rerender();
    assertElementIsEmberishElement(first, 'div', { id: 'direct' }, 'Bar6');
    // assertElementIsEmberishElement(second, 'div', { id: 'helper' }, 'Bar6');
});
QUnit.test('{{component}} helper works with positional params', function () {
    var SampleComponent = test_helpers_1.EmberishCurlyComponent.extend();
    SampleComponent.reopenClass({
        positionalParams: ['name', 'age']
    });
    env.registerEmberishCurlyComponent('sample-component', SampleComponent, "{{attrs.name}}{{attrs.age}}");
    appendViewFor("{{component \"sample-component\" myName myAge}}", {
        myName: 'Quint',
        myAge: 4
    });
    assertEmberishElement('div', 'Quint4');
    object_reference_1.setProperty(view, 'myName', 'Edward');
    object_reference_1.setProperty(view, 'myAge', '5');
    rerender();
    assertEmberishElement('div', 'Edward5');
    object_reference_1.setProperty(view, 'myName', 'Quint');
    object_reference_1.setProperty(view, 'myAge', '4');
    rerender();
    assertEmberishElement('div', 'Quint4');
});
module('Emberish closure components');
QUnit.test('can handle aliased block components', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, 'Hello {{arg1}} {{yield}}');
    appendViewFor((_a = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/with}}\n    "], _a.raw = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/with}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test1 Test2');
    var _a;
});
QUnit.test('can handle aliased inline components', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, 'Hello {{arg1}}');
    appendViewFor((_a = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/with}}\n    "], _a.raw = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/with}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test');
    var _a;
});
QUnit.test('can handle higher order inline components', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello {{arg1}}');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test');
    var _a;
});
QUnit.test('can handle higher order block components', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello {{arg1}} {{yield}}');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test1 Test2');
    var _a;
});
module("Emberish Components - parentView");
QUnit.skip('components in template of a yielding component should have the proper parentView', function () {
    var outer, innerTemplate, innerLayout;
    var Outer = test_helpers_1.EmberishCurlyComponent.extend({
        init: function () {
            this._super.apply(this, arguments);
            outer = this;
        }
    });
    var InnerInTemplate = test_helpers_1.EmberishCurlyComponent.extend({
        init: function () {
            this._super.apply(this, arguments);
            innerTemplate = this;
        }
    });
    var InnerInLayout = test_helpers_1.EmberishCurlyComponent.extend({
        init: function () {
            this._super.apply(this, arguments);
            innerLayout = this;
        }
    });
    env.registerEmberishCurlyComponent('x-inner-in-layout', InnerInLayout, '');
    env.registerEmberishCurlyComponent('x-inner-in-template', InnerInTemplate, '');
    env.registerEmberishCurlyComponent('x-outer', Outer, "{{x-inner-in-layout}}{{yield}}");
    appendViewFor('{{#x-outer}}{{#x-inner-in-template}}{{/x-inner-in-template}}{{/x-outer}}');
    assertEmberishElement('div');
    equalObject(innerTemplate.parentView, outer, 'receives the wrapping component as its parentView in template blocks');
    equalObject(innerLayout.parentView, outer, 'receives the wrapping component as its parentView in layout');
    equalObject(outer.parentView, view, 'x-outer receives the ambient scope as its parentView');
});
function inspect(obj) {
    return obj && "<#Object:" + obj._guid + ">";
}
function equalObject(actual, expected, msg) {
    strictEqual(inspect(actual), inspect(expected), msg);
}
QUnit.skip('newly-added sub-components get correct parentView', function () {
    var outer, inner;
    var Outer = test_helpers_1.EmberishCurlyComponent.extend({
        init: function () {
            this._super.apply(this, arguments);
            outer = this;
        }
    });
    var Inner = test_helpers_1.EmberishCurlyComponent.extend({
        init: function () {
            this._super.apply(this, arguments);
            inner = this;
        }
    });
    env.registerEmberishCurlyComponent('x-outer', Outer, "{{yield}}");
    env.registerEmberishCurlyComponent('x-inner', Inner, '');
    appendViewFor('{{#x-outer}}{{#if showInner}}{{x-inner}}{{/if}}{{/x-outer}}', { showInner: false });
    equalObject(outer.parentView, view, 'x-outer receives the ambient scope as its parentView');
    object_reference_1.setProperty(view, 'showInner', true);
    rerender();
    equalObject(inner.parentView, outer, 'receives the wrapping component as its parentView in template blocks');
    equalObject(outer.parentView, view, 'x-outer receives the ambient scope as its parentView');
});
module('Emberish closure components');
QUnit.test('can handle aliased block components with args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, 'Hello {{arg1}} {{yield}}');
    appendViewFor((_a = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/with}}\n    "], _a.raw = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/with}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test1 Test2');
    var _a;
});
QUnit.test('can handle aliased block components without args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, 'Hello {{yield}}');
    appendViewFor((_a = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{#my.comp}}World!{{/my.comp}} Test\n      {{/with}}\n    "], _a.raw = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{#my.comp}}World!{{/my.comp}} Test\n      {{/with}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test');
    var _a;
});
QUnit.test('can handle aliased inline components with args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, 'Hello {{arg1}}');
    appendViewFor((_a = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/with}}\n    "], _a.raw = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/with}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test');
    var _a;
});
QUnit.test('can handle aliased inline components without args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, 'Hello');
    appendViewFor((_a = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{my.comp}} World!\n      {{/with}}\n    "], _a.raw = ["\n      {{#with (hash comp=(component 'foo-bar')) as |my|}}\n        {{my.comp}} World!\n      {{/with}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World!');
    var _a;
});
QUnit.test('can handle higher order block components with args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello {{arg1}} {{yield}}');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test1 Test2');
    var _a;
});
QUnit.test('can handle higher order block components without args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello {{arg1}} {{yield}}');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp}}World!{{/my.comp}} Test\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp}}World!{{/my.comp}} Test\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test');
    var _a;
});
QUnit.test('can handle higher order inline components with args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello {{arg1}}');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{my.comp arg1=\"World!\"}} Test\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test');
    var _a;
});
QUnit.test('can handle higher order inline components without args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{my.comp}} World!\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{my.comp}} World!\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World!');
    var _a;
});
QUnit.test('can handle higher order inline components without args', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{my.comp}} World!\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{my.comp}} World!\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World!');
    var _a;
});
QUnit.test('can handle higher order block components', function (assert) {
    env.registerHelper('hash', function (params, hash) {
        return hash;
    });
    env.registerEmberishCurlyComponent('foo-bar', null, '{{yield (hash comp=(component "baz-bar"))}}');
    env.registerEmberishCurlyComponent('baz-bar', null, 'Hello {{arg1}} {{yield}}');
    appendViewFor((_a = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/foo-bar}}\n    "], _a.raw = ["\n      {{#foo-bar as |my|}}\n        {{#my.comp arg1=\"World!\"}}Test1{{/my.comp}} Test2\n      {{/foo-bar}}\n    "], test_helpers_1.stripTight(_a)));
    assertText('Hello World! Test1 Test2');
    var _a;
});
module("Emberish Component - ids");
QUnit.test('emberish component should have unique IDs', function (assert) {
    env.registerEmberishCurlyComponent('x-curly', null, '');
    env.registerEmberishGlimmerComponent('x-glimmer', null, '<div></div>');
    appendViewFor((_a = ["\n      <div>\n        {{x-curly}}\n        {{x-curly}}\n        <x-glimmer />\n        <x-glimmer />\n        {{x-curly}}\n        <x-glimmer />\n      </div>"], _a.raw = ["\n      <div>\n        {{x-curly}}\n        {{x-curly}}\n        <x-glimmer />\n        <x-glimmer />\n        {{x-curly}}\n        <x-glimmer />\n      </div>"], test_helpers_1.stripTight(_a)));
    test_helpers_1.equalsElement(view.element.childNodes[0], 'div', { id: test_helpers_1.regex(/^ember\d*$/), class: 'ember-view' }, '');
    test_helpers_1.equalsElement(view.element.childNodes[1], 'div', { id: test_helpers_1.regex(/^ember\d*$/), class: 'ember-view' }, '');
    test_helpers_1.equalsElement(view.element.childNodes[2], 'div', { id: test_helpers_1.regex(/^ember\d*$/), class: 'ember-view' }, '');
    test_helpers_1.equalsElement(view.element.childNodes[3], 'div', { id: test_helpers_1.regex(/^ember\d*$/), class: 'ember-view' }, '');
    test_helpers_1.equalsElement(view.element.childNodes[4], 'div', { id: test_helpers_1.regex(/^ember\d*$/), class: 'ember-view' }, '');
    test_helpers_1.equalsElement(view.element.childNodes[5], 'div', { id: test_helpers_1.regex(/^ember\d*$/), class: 'ember-view' }, '');
    var IDs = {};
    function markAsSeen(element) {
        IDs[element.id] = (IDs[element.id] || 0) + 1;
    }
    markAsSeen(view.element.childNodes[0]);
    markAsSeen(view.element.childNodes[1]);
    markAsSeen(view.element.childNodes[2]);
    markAsSeen(view.element.childNodes[3]);
    markAsSeen(view.element.childNodes[4]);
    markAsSeen(view.element.childNodes[5]);
    equal(Object.keys(IDs).length, 6, "Expected the components to each have a unique IDs");
    for (var id in IDs) {
        equal(IDs[id], 1, "Expected ID " + id + " to be unique");
    }
    var _a;
});
// QUnit.skip('non-block with each rendering child components', function() {
//   expect(2);
//   registry.register(
//     'template:components/non-block',
//     compile('In layout. {{#each attrs.items as |item|}}[{{child-non-block item=item}}]{{/each}}')
//   );
//   registry.register('template:components/child-non-block', compile('Child: {{attrs.item}}.'));
//   let items = emberA(['Tom', 'Dick', 'Harry']);
//   view = EmberView.extend({
//     template: compile('{{non-block items=view.items}}'),
//     container: container,
//     items: items
//   }).create();
//   runAppend(view);
//   equal(jQuery('#qunit-fixture').text(), 'In layout. [Child: Tom.][Child: Dick.][Child: Harry.]');
//   run(function() {
//     items.pushObject('James');
//   });
//   equal(jQuery('#qunit-fixture').text(), 'In layout. [Child: Tom.][Child: Dick.][Child: Harry.][Child: James.]');
// });
// QUnit.skip('specifying classNames results in correct class', function(assert) {
//   expect(3);
//   let clickyThing;
//   registry.register('component:some-clicky-thing', Component.extend({
//     tagName: 'button',
//     classNames: ['foo', 'bar'],
//     init() {
//       this._super(...arguments);
//       clickyThing = this;
//     }
//   }));
//   view = EmberView.extend({
//     template: compile('{{#some-clicky-thing classNames="baz"}}Click Me{{/some-clicky-thing}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   let button = view.$('button');
//   ok(button.is('.foo.bar.baz.ember-view'), 'the element has the correct classes: ' + button.attr('class'));
//   let expectedClassNames = ['ember-view', 'foo', 'bar', 'baz'];
//   assert.deepEqual(clickyThing.get('classNames'),  expectedClassNames, 'classNames are properly combined');
//   let buttonClassNames = button.attr('class');
//   assert.deepEqual(buttonClassNames.split(' '), expectedClassNames, 'all classes are set 1:1 in DOM');
// });
// QUnit.skip('specifying custom concatenatedProperties avoids clobbering', function(assert) {
//   expect(1);
//   let clickyThing;
//   registry.register('component:some-clicky-thing', Component.extend({
//     concatenatedProperties: ['blahzz'],
//     blahzz: ['blark', 'pory'],
//     init() {
//       this._super(...arguments);
//       clickyThing = this;
//     }
//   }));
//   view = EmberView.extend({
//     template: compile('{{#some-clicky-thing blahzz="baz"}}Click Me{{/some-clicky-thing}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   assert.deepEqual(clickyThing.get('blahzz'),  ['blark', 'pory', 'baz'], 'property is properly combined');
// });
// // jscs:disable validateIndentation
// if (isEnabled('ember-glimmer-component-generation')) {
//   QUnit.module('component - invocation (angle brackets)', {
//     setup() {
//       commonSetup();
//     },
//     teardown() {
//       commonTeardown();
//     }
//   });
//   QUnit.skip('legacy components cannot be invoked with angle brackets', function() {
//     registry.register('template:components/non-block', compile('In layout'));
//     registry.register('component:non-block', Component.extend());
//     expectAssertion(function() {
//       view = appendViewFor('<non-block />');
//     }, /cannot invoke the 'non-block' component with angle brackets/);
//   });
//   QUnit.skip('using a text-fragment in a GlimmerComponent layout gives an error', function() {
//     registry.register('template:components/non-block', compile('In layout'));
//     expectAssertion(() => {
//       view = appendViewFor('<non-block />');
//     }, `The <non-block> template must have a single top-level element because it is a GlimmerComponent.`);
//   });
//   QUnit.skip('having multiple top-level elements in a GlimmerComponent layout gives an error', function() {
//     registry.register('template:components/non-block', compile('<div>This is a</div><div>fragment</div>'));
//     expectAssertion(() => {
//       view = appendViewFor('<non-block />');
//     }, `The <non-block> template must have a single top-level element because it is a GlimmerComponent.`);
//   });
//   QUnit.skip('using a modifier in a GlimmerComponent layout gives an error', function() {
//     registry.register('template:components/non-block', compile('<div {{action "foo"}}></div>'));
//     expectAssertion(() => {
//       view = appendViewFor('<non-block />');
//     }, `You cannot use {{action ...}} in the top-level element of the <non-block> template because it is a GlimmerComponent.`);
//   });
//   QUnit.skip('using triple-curlies in a GlimmerComponent layout gives an error', function() {
//     registry.register('template:components/non-block', compile('<div style={{{bar}}}>This is a</div>'));
//     expectAssertion(() => {
//       view = appendViewFor('<non-block />');
//     }, strip`You cannot use triple curlies (e.g. style={{{ ... }}})
//       in the top-level element of the <non-block> template because it is a GlimmerComponent.`
//     );
//   });
module("Glimmer Component - shadowing");
testComponent('shadowing: normal outer attributes are reflected', {
    kind: 'glimmer',
    layout: 'In layout - someProp: {{@someProp}}',
    invokeAs: { args: { someProp: '"something here"' } },
    expected: { attrs: {}, content: 'In layout - someProp: something here' }
});
testComponent('shadowing - normal outer attributes clobber inner attributes', {
    kind: 'glimmer',
    layout: { attributes: { 'data-name': 'Godfrey', 'data-foo': 'foo' } },
    invokeAs: { attributes: { 'data-name': 'Godhuda', 'data-bar': 'bar' } },
    expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo', 'data-bar': 'bar' }, content: '' }
});
testComponent('shadowing: outer attributes with concat are reflected', {
    kind: 'glimmer',
    layout: 'In layout - someProp: {{@someProp}}',
    invokeAs: {
        context: { someProp: 'something here' },
        args: { someProp: 'someProp' }
    },
    expected: { attrs: {}, content: 'In layout - someProp: something here' },
    updates: [{
            expected: { attrs: {}, content: 'In layout - someProp: something here' }
        }, {
            context: { someProp: 'something else' },
            expected: { attrs: {}, content: 'In layout - someProp: something else' }
        }, {
            context: { someProp: '' },
            expected: { attrs: {}, content: 'In layout - someProp: ' }
        }, {
            context: { someProp: 'something here' },
            expected: { attrs: {}, content: 'In layout - someProp: something here' }
        }]
});
testComponent('shadowing: outer attributes with concat clobber inner attributes', {
    kind: 'glimmer',
    layout: { attributes: { 'data-name': 'Godfrey', 'data-foo': 'foo' } },
    invokeAs: {
        context: { name: 'Godhuda', foo: 'foo' },
        attributes: { 'data-name': '{{name}}', 'data-foo': '{{foo}}-bar' }
    },
    expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' },
    updates: [{
            expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' }
        }, {
            context: { name: 'Yehuda', foo: 'baz' },
            expected: { attrs: { 'data-name': 'Yehuda', 'data-foo': 'baz-bar' }, content: '' }
        }, {
            context: { name: '', foo: '' },
            expected: { attrs: { 'data-name': '', 'data-foo': '-bar' }, content: '' }
        }, {
            context: { name: 'Godhuda', foo: 'foo' },
            expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' }
        }]
});
testComponent('shadowing: outer attributes clobber inner attributes with concat', {
    kind: 'glimmer',
    layout: { attributes: { 'data-name': '{{@name}}', 'data-foo': '{{@foo}}-bar' } },
    invokeAs: {
        context: { name: 'Godfrey', foo: 'foo' },
        args: { name: 'name', foo: 'foo' },
        attributes: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }
    },
    expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' },
    updates: [{
            expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' }
        }, {
            context: { name: 'Yehuda', foo: 'baz' },
            expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' }
        }, {
            context: { name: '', foo: '' },
            expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' }
        }, {
            context: { name: 'Godhuda', foo: 'foo' },
            expected: { attrs: { 'data-name': 'Godhuda', 'data-foo': 'foo-bar' }, content: '' }
        }]
});
module("Glimmer Component");
var styles = [{
        name: 'a div',
        tagName: 'div'
    },
    {
        name: 'a web component',
        tagName: 'not-an-ember-component'
    }];
styles.forEach(function (style) {
    QUnit.test("non-block without attributes replaced with " + style.name, function () {
        env.registerEmberishGlimmerComponent('non-block', null, "  <" + style.tagName + ">In layout</" + style.tagName + ">  ");
        appendViewFor('<non-block />');
        var node = view.element.firstChild;
        test_helpers_1.equalsElement(view.element, style.tagName, { class: 'ember-view', id: test_helpers_1.regex(/^ember\d*$/) }, 'In layout');
        rerender();
        strictEqual(node, view.element.firstChild, 'The inner element has not changed');
        test_helpers_1.equalsElement(view.element, style.tagName, { class: 'ember-view', id: test_helpers_1.regex(/^ember\d*$/) }, 'In layout');
    });
    QUnit.test("non-block with attributes replaced with " + style.name, function () {
        env.registerEmberishGlimmerComponent('non-block', null, "  <" + style.tagName + " such=\"{{@stability}}\">In layout</" + style.tagName + ">  ");
        appendViewFor('<non-block @stability={{stability}} />', { stability: 'stability' });
        var node = view.element;
        test_helpers_1.equalsElement(node, style.tagName, { such: 'stability', class: 'ember-view', id: test_helpers_1.regex(/^ember\d*$/) }, 'In layout');
        object_reference_1.setProperty(view, 'stability', 'changed!!!');
        rerender();
        strictEqual(node.firstElementChild, view.element.firstElementChild, 'The inner element has not changed');
        test_helpers_1.equalsElement(node, style.tagName, { such: 'changed!!!', class: 'ember-view', id: test_helpers_1.regex(/^ember\d*$/) }, 'In layout');
    });
    QUnit.skip("non-block replaced with " + style.name + " (regression with single element in the root element)", function () {
        env.registerEmberishGlimmerComponent('non-block', test_helpers_1.EmberishGlimmerComponent, "  <" + style.tagName + " such=\"{{attrs.stability}}\"><p>In layout</p></" + style.tagName + ">  ");
        appendViewFor('<non-block stability={{view.stability}} />', { stability: 'stability' });
        var node = view.element;
        test_helpers_1.equalsElement(node, style.tagName, { such: 'stability', class: 'ember-view', id: test_helpers_1.regex(/^ember\d*$/) }, '<p>In layout</p>');
        object_reference_1.setProperty(view, 'stability', 'changed!!!');
        rerender();
        strictEqual(node.firstElementChild, view.element.firstElementChild, 'The inner element has not changed');
        test_helpers_1.equalsElement(node, style.tagName, { such: 'changed!!!', class: 'ember-view', id: test_helpers_1.regex(/^ember\d*$/) }, '<p>In layout</p>');
    });
    QUnit.skip("non-block with class replaced with " + style.name + " merges classes", function () {
        env.registerEmberishGlimmerComponent('non-block', test_helpers_1.EmberishGlimmerComponent, "<" + style.tagName + " class=\"inner-class\" />");
        appendViewFor('<non-block class="{{outer}}" />', { outer: 'outer' });
        test_helpers_1.equalsElement(view.element, style.tagName, { class: test_helpers_1.classes('inner-class outer ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, '');
        object_reference_1.setProperty(view, 'outer', 'new-outer');
        rerender();
        test_helpers_1.equalsElement(view.element, style.tagName, { class: test_helpers_1.classes('inner-class new-outer ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, '');
    });
    QUnit.skip("non-block with outer attributes replaced with " + style.name + " shadows inner attributes", function () {
        var component;
        var MyComponent = (function (_super) {
            __extends(MyComponent, _super);
            function MyComponent(attrs) {
                var _this = _super.call(this, attrs) || this;
                component = _this;
                return _this;
            }
            return MyComponent;
        }(test_helpers_1.EmberishGlimmerComponent));
        MyComponent[object_reference_1.CLASS_META].seal();
        env.registerEmberishGlimmerComponent('non-block', MyComponent, "<" + style.tagName + " data-static=\"static\" data-dynamic=\"{{internal}}\" />");
        appendViewFor('<non-block data-static="outer" data-dynamic="outer" />');
        test_helpers_1.equalsElement(view.element, style.tagName, {
            class: test_helpers_1.classes('ember-view'),
            id: test_helpers_1.regex(/^ember\d*$/),
            'data-static': 'outer',
            'data-dynamic': 'outer'
        }, '');
        object_reference_1.setProperty(component, 'internal', 'changed');
        test_helpers_1.equalsElement(view.element, style.tagName, {
            class: test_helpers_1.classes('ember-view'),
            id: test_helpers_1.regex(/^ember\d*$/),
            'data-static': 'outer',
            'data-dynamic': 'outer'
        }, '');
    });
    QUnit.skip("non-block replaced with " + style.name + " should have correct scope", function () {
        var NonBlock = (function (_super) {
            __extends(NonBlock, _super);
            function NonBlock() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NonBlock.prototype.init = function () {
                this._super.apply(this, arguments);
                object_reference_1.setProperty(this, 'internal', 'stuff');
            };
            return NonBlock;
        }(test_helpers_1.EmberishGlimmerComponent));
        NonBlock[object_reference_1.CLASS_META].seal();
        env.registerEmberishGlimmerComponent('non-block', NonBlock, "<" + style.tagName + ">{{internal}}</" + style.tagName + ">");
        appendViewFor('<non-block />');
        test_helpers_1.equalsElement(view.element, style.tagName, { class: test_helpers_1.classes('ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, 'stuff');
    });
    QUnit.skip("non-block replaced with " + style.name + " should have correct 'element'", function () {
        var component;
        var MyComponent = (function (_super) {
            __extends(MyComponent, _super);
            function MyComponent(attrs) {
                var _this = _super.call(this, attrs) || this;
                component = _this;
                return _this;
            }
            return MyComponent;
        }(test_helpers_1.EmberishGlimmerComponent));
        MyComponent[object_reference_1.CLASS_META].seal();
        env.registerEmberishGlimmerComponent('non-block', MyComponent, "<" + style.tagName + " />");
        appendViewFor('<non-block />');
        test_helpers_1.equalsElement(view.element, style.tagName, { class: test_helpers_1.classes('ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, '');
    });
    QUnit.skip("non-block replaced with " + style.name + " should have inner attributes", function () {
        var NonBlock = (function (_super) {
            __extends(NonBlock, _super);
            function NonBlock() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            NonBlock.prototype.init = function () {
                this._super.apply(this, arguments);
                object_reference_1.setProperty(this, 'internal', 'stuff');
            };
            return NonBlock;
        }(test_helpers_1.EmberishGlimmerComponent));
        NonBlock[object_reference_1.CLASS_META].seal();
        env.registerEmberishGlimmerComponent('non-block', NonBlock, "<" + style.tagName + " data-static=\"static\" data-dynamic=\"{{internal}}\" />");
        appendViewFor('<non-block />');
        test_helpers_1.equalsElement(view.element, style.tagName, {
            class: test_helpers_1.classes('ember-view'),
            id: test_helpers_1.regex(/^ember\d*$/),
            'data-static': 'static',
            'data-dynamic': 'stuff'
        }, '');
    });
    QUnit.skip("only text attributes are reflected on the underlying DOM element (" + style.name + ")", function () {
        env.registerEmberishGlimmerComponent('non-block', test_helpers_1.EmberishGlimmerComponent, "<" + style.tagName + ">In layout</" + style.tagName + ">");
        appendViewFor('<non-block static-prop="static text" concat-prop="{{view.dynamic}} text" dynamic-prop={{view.dynamic}} />', {
            dynamic: 'dynamic'
        });
        test_helpers_1.equalsElement(view.element, style.tagName, {
            class: test_helpers_1.classes('ember-view'),
            id: test_helpers_1.regex(/^ember\d*$/),
            'static-prop': 'static text',
            'concat-prop': 'dynamic text'
        }, 'In layout');
    });
});
QUnit.test("Glimmer component with element modifier", function (assert) {
    env.registerEmberishGlimmerComponent('non-block', null, "  <div>In layout</div>  ");
    assert.throws(function () {
        appendViewFor('<non-block {{action}} />');
    }, new Error("Compile Error: Element modifiers are not allowed in components"), "should throw error");
});
QUnit.skip('block without properties', function () {
    env.registerEmberishGlimmerComponent('with-block', test_helpers_1.EmberishGlimmerComponent, '<with-block>In layout - {{yield}}</with-block>');
    appendViewFor('<with-block>In template</with-block>');
    test_helpers_1.equalsElement(view.element, 'with-block', { class: test_helpers_1.classes('ember-view'), id: test_helpers_1.regex(/^ember\d*$/) }, 'In layout - In template');
});
QUnit.skip('attributes are not installed on the top level', function () {
    var component;
    var NonBlock = (function (_super) {
        __extends(NonBlock, _super);
        function NonBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonBlock.prototype.init = function () {
            this._super.apply(this, arguments);
            component = this;
        };
        return NonBlock;
    }(test_helpers_1.EmberishGlimmerComponent));
    NonBlock[object_reference_1.CLASS_META].seal();
    // This is specifically attempting to trigger a 1.x-era heuristic that only copied
    // attrs that were present as defined properties on the component.
    NonBlock.prototype['text'] = null;
    NonBlock.prototype['dynamic'] = null;
    env.registerEmberishGlimmerComponent('non-block', NonBlock, '<non-block>In layout - {{attrs.text}} -- {{text}}</non-block>');
    appendViewFor('<non-block text="texting" dynamic={{dynamic}} />', {
        dynamic: 'dynamic'
    });
    test_helpers_1.equalsElement(view.element, 'non-block', {
        class: test_helpers_1.classes('ember-view'),
        id: test_helpers_1.regex(/^ember\d*$/),
        text: 'texting'
    }, 'In layout - texting -- null');
    equal(component.attrs['text'], 'texting');
    equal(component.attrs['dynamic'], 'dynamic');
    strictEqual(component['text'], null);
    strictEqual(component['dynamic'], null);
    rerender();
    test_helpers_1.equalsElement(view.element, 'non-block', {
        class: test_helpers_1.classes('ember-view'),
        id: test_helpers_1.regex(/^ember\d*$/),
        text: 'texting'
    }, 'In layout - texting -- <!---->');
    equal(component.attrs['text'], 'texting');
    equal(component.attrs['dynamic'], 'dynamic');
    strictEqual(component['text'], null);
    strictEqual(component['dynamic'], null);
});
QUnit.skip('non-block with properties on attrs and component class', function () {
    env.registerEmberishGlimmerComponent('non-block', test_helpers_1.EmberishGlimmerComponent, '<non-block>In layout - someProp: {{attrs.someProp}}</non-block>');
    appendViewFor('<non-block someProp="something here" />');
    assertEmberishElement('non-block', { someProp: 'something here' }, 'In layout - someProp: something here');
});
QUnit.skip('block with properties on attrs', function () {
    env.registerEmberishGlimmerComponent('with-block', test_helpers_1.EmberishGlimmerComponent, '<with-block>In layout - someProp: {{attrs.someProp}} - {{yield}}</with-block>');
    appendViewFor('<with-block someProp="something here">In template</with-block>');
    assertEmberishElement('with-block', { someProp: 'something here' }, 'In layout - someProp: something here - In template');
});
QUnit.skip('computed property alias on a static attr', function () {
    var ComputedAlias = test_helpers_1.EmberishGlimmerComponent.extend({
        otherProp: object_1.alias('attrs.someProp')
    });
    env.registerEmberishGlimmerComponent('computed-alias', ComputedAlias, '<computed-alias>{{otherProp}}</computed-alias>');
    appendViewFor('<computed-alias someProp="value"></computed-alias>', {
        someProp: 'value'
    });
    assertEmberishElement('computed-alias', { someProp: 'value' }, 'value');
});
QUnit.skip('computed property alias on a dynamic attr', function () {
    var ComputedAlias = test_helpers_1.EmberishGlimmerComponent.extend({
        otherProp: object_1.alias('attrs.someProp')
    });
    env.registerEmberishGlimmerComponent('computed-alias', ComputedAlias, '<computed-alias>{{otherProp}}</computed-alias>');
    appendViewFor('<computed-alias someProp="{{someProp}}"></computed-alias>', {
        someProp: 'value'
    });
    assertEmberishElement('computed-alias', { someProp: 'value' }, 'value');
    object_reference_1.setProperty(view, 'someProp', 'other value');
    rerender();
    assertEmberishElement('computed-alias', { someProp: 'other value' }, 'other value');
});
QUnit.skip('lookup of component takes priority over property', function () {
    expect(1);
    var MyComponent = (function (_super) {
        __extends(MyComponent, _super);
        function MyComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this['some-component'] = 'not-some-component';
            _this['some-prop'] = 'some-prop';
            return _this;
        }
        return MyComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    var SomeComponent = (function (_super) {
        __extends(SomeComponent, _super);
        function SomeComponent() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SomeComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('my-component', MyComponent, '{{some-prop}} {{some-component}}');
    env.registerEmberishCurlyComponent('some-component', SomeComponent, 'some-component');
    appendViewFor('{{my-component}}');
    assertAppended('<div>some-prop <div>some-component</div></div>');
});
QUnit.test('Curly component hooks (with attrs)', function () {
    var instance;
    var NonBlock = (function (_super) {
        __extends(NonBlock, _super);
        function NonBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonBlock.prototype.init = function () {
            instance = this;
        };
        return NonBlock;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('non-block', test_helpers_1.inspectHooks(NonBlock), 'In layout - someProp: {{@someProp}}');
    appendViewFor('{{non-block someProp=someProp}}', { someProp: 'wycats' });
    assertFired(instance, 'didReceiveAttrs');
    assertFired(instance, 'willRender');
    assertFired(instance, 'didInsertElement');
    assertFired(instance, 'didRender');
    assertEmberishElement('div', 'In layout - someProp: wycats');
    object_reference_1.setProperty(view, 'someProp', 'tomdale');
    rerender();
    assertEmberishElement('div', 'In layout - someProp: tomdale');
    assertFired(instance, 'didReceiveAttrs', 2);
    assertFired(instance, 'willUpdate');
    assertFired(instance, 'willRender', 2);
    assertFired(instance, 'didUpdate');
    assertFired(instance, 'didRender', 2);
    rerender();
    assertEmberishElement('div', 'In layout - someProp: tomdale');
    assertFired(instance, 'didReceiveAttrs', 3);
    assertFired(instance, 'willUpdate', 2);
    assertFired(instance, 'willRender', 3);
    assertFired(instance, 'didUpdate', 2);
    assertFired(instance, 'didRender', 3);
});
QUnit.test('Curly component hooks (attrs as self props)', function () {
    var instance;
    var NonBlock = (function (_super) {
        __extends(NonBlock, _super);
        function NonBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonBlock.prototype.init = function () {
            instance = this;
        };
        return NonBlock;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('non-block', test_helpers_1.inspectHooks(NonBlock), 'In layout - someProp: {{someProp}}');
    appendViewFor('{{non-block someProp=someProp}}', { someProp: 'wycats' });
    assertFired(instance, 'didReceiveAttrs');
    assertFired(instance, 'willRender');
    assertFired(instance, 'didInsertElement');
    assertFired(instance, 'didRender');
    assertEmberishElement('div', 'In layout - someProp: wycats');
    object_reference_1.setProperty(view, 'someProp', 'tomdale');
    rerender();
    assertEmberishElement('div', 'In layout - someProp: tomdale');
    assertFired(instance, 'didReceiveAttrs', 2);
    assertFired(instance, 'willUpdate');
    assertFired(instance, 'willRender', 2);
    assertFired(instance, 'didUpdate');
    assertFired(instance, 'didRender', 2);
    rerender();
    assertEmberishElement('div', 'In layout - someProp: tomdale');
    assertFired(instance, 'didReceiveAttrs', 3);
    assertFired(instance, 'willUpdate', 2);
    assertFired(instance, 'willRender', 3);
    assertFired(instance, 'didUpdate', 2);
    assertFired(instance, 'didRender', 3);
});
QUnit.test('Setting value attributeBinding to null results in empty string value', function (assert) {
    var instance;
    var InputComponent = (function (_super) {
        __extends(InputComponent, _super);
        function InputComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.tagName = 'input';
            _this.attributeBindings = ['value'];
            return _this;
        }
        InputComponent.prototype.init = function () {
            instance = this;
        };
        return InputComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('input-component', test_helpers_1.inspectHooks(InputComponent), 'input component');
    appendViewFor('{{input-component value=someProp}}', { someProp: null });
    assert.equal(instance.element.value, '');
    object_reference_1.setProperty(view, 'someProp', 'wycats');
    rerender();
    assert.equal(instance.element.value, 'wycats');
    object_reference_1.setProperty(view, 'someProp', null);
    rerender();
    assert.equal(instance.element.value, '');
});
QUnit.test('Setting class attributeBinding does not clobber ember-view', function (assert) {
    var instance;
    var FooBarComponent = (function (_super) {
        __extends(FooBarComponent, _super);
        function FooBarComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.attributeBindings = ['class'];
            return _this;
        }
        FooBarComponent.prototype.init = function () {
            instance = this;
        };
        return FooBarComponent;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBarComponent, 'FOO BAR');
    appendViewFor('{{foo-bar class=classes}}', { classes: "foo bar" });
    assertEmberishElement('div', { class: test_helpers_1.classes('ember-view foo bar') }, 'FOO BAR');
    rerender();
    assertEmberishElement('div', { class: test_helpers_1.classes('ember-view foo bar') }, 'FOO BAR');
    object_reference_1.setProperty(view, 'classes', 'foo bar baz');
    rerender();
    assertEmberishElement('div', { class: test_helpers_1.classes('ember-view foo bar baz') }, 'FOO BAR');
    object_reference_1.setProperty(view, 'classes', 'foo bar');
    rerender();
    assertEmberishElement('div', { class: test_helpers_1.classes('ember-view foo bar') }, 'FOO BAR');
});
QUnit.test('Curly component hooks (force recompute)', function () {
    var instance;
    var NonBlock = (function (_super) {
        __extends(NonBlock, _super);
        function NonBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonBlock.prototype.init = function () {
            instance = this;
        };
        return NonBlock;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('non-block', test_helpers_1.inspectHooks(NonBlock), 'In layout - someProp: {{@someProp}}');
    appendViewFor('{{non-block someProp="wycats"}}');
    assertFired(instance, 'didReceiveAttrs', 1);
    assertFired(instance, 'willRender', 1);
    assertFired(instance, 'didInsertElement', 1);
    assertFired(instance, 'didRender', 1);
    assertEmberishElement('div', 'In layout - someProp: wycats');
    rerender();
    assertEmberishElement('div', 'In layout - someProp: wycats');
    assertFired(instance, 'didReceiveAttrs', 1);
    assertFired(instance, 'willRender', 1);
    assertFired(instance, 'didRender', 1);
    instance.recompute();
    rerender();
    assertEmberishElement('div', 'In layout - someProp: wycats');
    assertFired(instance, 'didReceiveAttrs', 2);
    assertFired(instance, 'willUpdate', 1);
    assertFired(instance, 'willRender', 2);
    assertFired(instance, 'didUpdate', 1);
    assertFired(instance, 'didRender', 2);
});
QUnit.test('Glimmer component hooks', function () {
    var instance;
    var NonBlock = (function (_super) {
        __extends(NonBlock, _super);
        function NonBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonBlock.prototype.init = function () {
            instance = this;
        };
        return NonBlock;
    }(test_helpers_1.EmberishGlimmerComponent));
    env.registerEmberishGlimmerComponent('non-block', test_helpers_1.inspectHooks(NonBlock), '<div>In layout - someProp: {{@someProp}}</div>');
    appendViewFor('<non-block @someProp={{someProp}} />', { someProp: 'wycats' });
    assertFired(instance, 'didReceiveAttrs');
    assertFired(instance, 'willRender');
    assertFired(instance, 'didInsertElement');
    assertFired(instance, 'didRender');
    assertEmberishElement('div', 'In layout - someProp: wycats');
    object_reference_1.setProperty(view, 'someProp', 'tomdale');
    rerender();
    assertEmberishElement('div', 'In layout - someProp: tomdale');
    assertFired(instance, 'didReceiveAttrs', 2);
    assertFired(instance, 'willUpdate');
    assertFired(instance, 'willRender', 2);
    assertFired(instance, 'didUpdate');
    assertFired(instance, 'didRender', 2);
    rerender();
    assertEmberishElement('div', 'In layout - someProp: tomdale');
    assertFired(instance, 'didReceiveAttrs', 3);
    assertFired(instance, 'willUpdate', 2);
    assertFired(instance, 'willRender', 3);
    assertFired(instance, 'didUpdate', 2);
    assertFired(instance, 'didRender', 3);
});
QUnit.test('Glimmer component hooks (force recompute)', function () {
    var instance;
    var NonBlock = (function (_super) {
        __extends(NonBlock, _super);
        function NonBlock() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NonBlock.prototype.init = function () {
            instance = this;
        };
        return NonBlock;
    }(test_helpers_1.EmberishGlimmerComponent));
    env.registerEmberishGlimmerComponent('non-block', test_helpers_1.inspectHooks(NonBlock), '<div>In layout - someProp: {{@someProp}}</div>');
    appendViewFor('{{non-block someProp="wycats"}}');
    assertFired(instance, 'didReceiveAttrs', 1);
    assertFired(instance, 'willRender', 1);
    assertFired(instance, 'didInsertElement', 1);
    assertFired(instance, 'didRender', 1);
    assertEmberishElement('div', 'In layout - someProp: wycats');
    rerender();
    assertEmberishElement('div', 'In layout - someProp: wycats');
    assertFired(instance, 'didReceiveAttrs', 1);
    assertFired(instance, 'willRender', 1);
    assertFired(instance, 'didRender', 1);
    instance.recompute();
    rerender();
    assertEmberishElement('div', 'In layout - someProp: wycats');
    assertFired(instance, 'didReceiveAttrs', 2);
    assertFired(instance, 'willUpdate', 1);
    assertFired(instance, 'willRender', 2);
    assertFired(instance, 'didUpdate', 1);
    assertFired(instance, 'didRender', 2);
});
// QUnit.skip('[DEPRECATED] non-block with properties on self', function() {
//   // TODO: attrs
//   // expectDeprecation("You accessed the `someProp` attribute directly. Please use `attrs.someProp` instead.");
//   registry.register('template:components/non-block', compile('In layout - someProp: {{someProp}}'));
//   view = EmberView.extend({
//     template: compile('{{non-block someProp="something here"}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   equal(jQuery('#qunit-fixture').text(), 'In layout - someProp: something here');
// });
// QUnit.skip('[DEPRECATED] block with properties on self', function() {
//   // TODO: attrs
//   // expectDeprecation("You accessed the `someProp` attribute directly. Please use `attrs.someProp` instead.");
//   registry.register('template:components/with-block', compile('In layout - someProp: {{someProp}} - {{yield}}'));
//   view = EmberView.extend({
//     template: compile('{{#with-block someProp="something here"}}In template{{/with-block}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   equal(jQuery('#qunit-fixture').text(), 'In layout - someProp: something here - In template');
// });
//   QUnit.skip('moduleName is available on _renderNode when a layout is present', function() {
//     expect(1);
//     let layoutModuleName = 'my-app-name/templates/components/sample-component';
//     let sampleComponentLayout = compile('<sample-component>Sample Component - {{yield}}</sample-component>', {
//       moduleName: layoutModuleName
//     });
//     registry.register('template:components/sample-component', sampleComponentLayout);
//     registry.register('component:sample-component', GlimmerComponent.extend({
//       didInsertElement: function() {
//         equal(this._renderNode.lastResult.template.meta.moduleName, layoutModuleName);
//       }
//     }));
//     view = EmberView.extend({
//       layout: compile('<sample-component />'),
//       container
//     }).create();
//     runAppend(view);
//   });
//   QUnit.skip('moduleName is available on _renderNode when no layout is present', function() {
//     expect(1);
//     let templateModuleName = 'my-app-name/templates/application';
//     registry.register('component:sample-component', Component.extend({
//       didInsertElement: function() {
//         equal(this._renderNode.lastResult.template.meta.moduleName, templateModuleName);
//       }
//     }));
//     view = EmberView.extend({
//       layout: compile('{{#sample-component}}Derp{{/sample-component}}', {
//         moduleName: templateModuleName
//       }),
//       container
//     }).create();
//     runAppend(view);
//   });
// QUnit.skip('component without dash is not looked up', function() {
//   expect(1);
//   registry.register('template:components/somecomponent', compile('somecomponent'));
//   view = EmberView.extend({
//     template: compile('{{somecomponent}}'),
//     container: container,
//     context: {
//       'somecomponent': 'notsomecomponent'
//     }
//   }).create();
//   runAppend(view);
//   equal(jQuery('#qunit-fixture').text(), 'notsomecomponent');
// });
// QUnit.skip(`partials templates should not be treated like a component layout for ${style.name}`, function() {
//   registry.register('template:_zomg', compile(`<p>In partial</p>`));
//   registry.register('template:components/non-block', compile(`<${style.tagName}>{{partial "zomg"}}</${style.tagName}>`));
//   view = appendViewFor('<non-block />');
//   let el = view.$(style.tagName).find('p');
//   equal(el.length, 1, 'precond - the partial was rendered');
//   equal(el.text(), 'In partial');
//   strictEqual(el.attr('id'), undefined, 'the partial should not get an id');
//   strictEqual(el.attr('class'), undefined, 'the partial should not get a class');
// });
//   QUnit.skip('[FRAGMENT] non-block rendering a fragment', function() {
//     registry.register('template:components/non-block', compile('<p>{{attrs.first}}</p><p>{{attrs.second}}</p>'));
//     view = appendViewFor('<non-block first={{view.first}} second={{view.second}} />', {
//       first: 'first1',
//       second: 'second1'
//     });
//     equal(view.$().html(), '<p>first1</p><p>second1</p>', 'No wrapping element was created');
//     run(view, 'setProperties', {
//       first: 'first2',
//       second: 'second2'
//     });
//     equal(view.$().html(), '<p>first2</p><p>second2</p>', 'The fragment was updated');
//   });
// // TODO: When un-skipping, fix this so it handles all styles
// QUnit.skip('non-block recursive invocations with outer attributes replaced with a div shadows inner attributes', function() {
//   registry.register('template:components/non-block-wrapper', compile('<non-block />'));
//   registry.register('template:components/non-block', compile('<div data-static="static" data-dynamic="{{internal}}" />'));
//   view = appendViewFor('<non-block-wrapper data-static="outer" data-dynamic="outer" />');
//   equal(view.$('div').attr('data-static'), 'outer', 'the outer-most attribute wins');
//   equal(view.$('div').attr('data-dynamic'), 'outer', 'the outer-most attribute wins');
//   let component = view.childViews[0].childViews[0]; // HAX
//   run(() => component.set('internal', 'changed'));
//   equal(view.$('div').attr('data-static'), 'outer', 'the outer-most attribute wins');
//   equal(view.$('div').attr('data-dynamic'), 'outer', 'the outer-most attribute wins');
// });
// QUnit.skip('components should receive the viewRegistry from the parent view', function() {
//   let outer, innerTemplate, innerLayout;
//   let viewRegistry = {};
//   registry.register('component:x-outer', Component.extend({
//     init() {
//       this._super(...arguments);
//       outer = this;
//     }
//   }));
//   registry.register('component:x-inner-in-template', Component.extend({
//     init() {
//       this._super(...arguments);
//       innerTemplate = this;
//     }
//   }));
//   registry.register('component:x-inner-in-layout', Component.extend({
//     init() {
//       this._super(...arguments);
//       innerLayout = this;
//     }
//   }));
//   registry.register('template:components/x-outer', compile('{{x-inner-in-layout}}{{yield}}'));
//   view = EmberView.extend({
//     _viewRegistry: viewRegistry,
//     template: compile('{{#x-outer}}{{x-inner-in-template}}{{/x-outer}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   equal(innerTemplate._viewRegistry, viewRegistry);
//   equal(innerLayout._viewRegistry, viewRegistry);
//   equal(outer._viewRegistry, viewRegistry);
// });
// QUnit.skip('comopnent should rerender when a property is changed during children\'s rendering', function() {
//   expectDeprecation(/modified value twice in a single render/);
//   let outer, middle;
//   registry.register('component:x-outer', Component.extend({
//     value: 1,
//     grabReference: Ember.on('init', function() {
//       outer = this;
//     })
//   }));
//   registry.register('component:x-middle', Component.extend({
//     value: null,
//     grabReference: Ember.on('init', function() {
//       middle = this;
//     })
//   }));
//   registry.register('component:x-inner', Component.extend({
//     value: null,
//     pushDataUp: Ember.observer('value', function() {
//       middle.set('value', this.get('value'));
//     })
//   }));
//   registry.register('template:components/x-outer', compile('{{#x-middle}}{{x-inner value=value}}{{/x-middle}}'));
//   registry.register('template:components/x-middle', compile('<div id="middle-value">{{value}}</div>{{yield}}'));
//   registry.register('template:components/x-inner', compile('<div id="inner-value">{{value}}</div>'));
//   view = EmberView.extend({
//     template: compile('{{x-outer}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   equal(view.$('#inner-value').text(), '1', 'initial render of inner');
//   equal(view.$('#middle-value').text(), '', 'initial render of middle (observers do not run during init)');
//   run(() => outer.set('value', 2));
//   equal(view.$('#inner-value').text(), '2', 'second render of inner');
//   equal(view.$('#middle-value').text(), '2', 'second render of middle');
//   run(() => outer.set('value', 3));
//   equal(view.$('#inner-value').text(), '3', 'third render of inner');
//   equal(view.$('#middle-value').text(), '3', 'third render of middle');
// });
// QUnit.skip('moduleName is available on _renderNode when a layout is present', function() {
//   expect(1);
//   let layoutModuleName = 'my-app-name/templates/components/sample-component';
//   let sampleComponentLayout = compile('Sample Component - {{yield}}', {
//     moduleName: layoutModuleName
//   });
//   registry.register('template:components/sample-component', sampleComponentLayout);
//   registry.register('component:sample-component', Component.extend({
//     didInsertElement: function() {
//       equal(this._renderNode.lastResult.template.meta.moduleName, layoutModuleName);
//     }
//   }));
//   view = EmberView.extend({
//     layout: compile('{{sample-component}}'),
//     container
//   }).create();
//   runAppend(view);
// });
// QUnit.skip('moduleName is available on _renderNode when no layout is present', function() {
//   expect(1);
//   let templateModuleName = 'my-app-name/templates/application';
//   registry.register('component:sample-component', Component.extend({
//     didInsertElement: function() {
//       equal(this._renderNode.lastResult.template.meta.moduleName, templateModuleName);
//     }
//   }));
//   view = EmberView.extend({
//     layout: compile('{{#sample-component}}Derp{{/sample-component}}', {
//       moduleName: templateModuleName
//     }),
//     container
//   }).create();
//   runAppend(view);
// });
// QUnit.skip('`template` specified in a component is overridden by block', function() {
//   expect(1);
//   registry.register('component:with-block', Component.extend({
//     layout: compile('{{yield}}'),
//     template: compile('Oh, noes!')
//   }));
//   view = EmberView.extend({
//     template: compile('{{#with-block}}Whoop, whoop!{{/with-block}}'),
//     container: container
//   }).create();
//   runAppend(view);
//   equal(view.$().text(), 'Whoop, whoop!', 'block provided always overrides template property');
// });
module('Teardown');
QUnit.test('curly components are destroyed', function (assert) {
    var destroyed = 0;
    var DestroyMeComponent = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            destroyed++;
        }
    });
    env.registerEmberishCurlyComponent('destroy-me', DestroyMeComponent, 'destroy me!');
    appendViewFor("{{#if cond}}{{destroy-me}}{{/if}}", { cond: true });
    assert.strictEqual(destroyed, 0, 'destroy should not be called');
    view.rerender({ cond: false });
    assert.strictEqual(destroyed, 1, 'destroy should be called exactly one');
});
QUnit.test('glimmer components are destroyed', function (assert) {
    var destroyed = 0;
    var DestroyMeComponent = test_helpers_1.EmberishGlimmerComponent.extend({
        destroy: function () {
            this._super();
            destroyed++;
        }
    });
    env.registerEmberishGlimmerComponent('destroy-me', DestroyMeComponent, 'destroy me!');
    appendViewFor("{{#if cond}}<destroy-me />{{/if}}", { cond: true });
    assert.strictEqual(destroyed, 0, 'destroy should not be called');
    view.rerender({ cond: false });
    assert.strictEqual(destroyed, 1, 'destroy should be called exactly one');
});
QUnit.test('component helpers component are destroyed', function (assert) {
    var destroyed = 0;
    var DestroyMeComponent = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            destroyed++;
        }
    });
    env.registerEmberishCurlyComponent('destroy-me', DestroyMeComponent, 'destroy me!');
    var AnotherComponent = test_helpers_1.EmberishCurlyComponent.extend();
    env.registerEmberishCurlyComponent('another-component', AnotherComponent, 'another thing!');
    appendViewFor("{{component componentName}}", { componentName: 'destroy-me' });
    assert.strictEqual(destroyed, 0, 'destroy should not be called');
    view.rerender({ componentName: 'another-component' });
    assert.strictEqual(destroyed, 1, 'destroy should be called exactly one');
});
QUnit.test('components inside a list are destroyed', function (assert) {
    var destroyed = [];
    var DestroyMeComponent = test_helpers_1.EmberishGlimmerComponent.extend({
        destroy: function () {
            this._super();
            destroyed.push(this.attrs.item);
        }
    });
    env.registerEmberishGlimmerComponent('destroy-me', DestroyMeComponent, 'destroy me!');
    appendViewFor("{{#each list key='@primitive' as |item|}}<destroy-me @item={{item}} />{{/each}}", { list: [1, 2, 3, 4, 5] });
    assert.strictEqual(destroyed.length, 0, 'destroy should not be called');
    view.rerender({ list: [1, 2, 3] });
    assert.deepEqual(destroyed, [4, 5], 'destroy should be called exactly twice');
    view.rerender({ list: [3, 2, 1] });
    assert.deepEqual(destroyed, [4, 5], 'destroy should be called exactly twice');
    view.rerender({ list: [] });
    assert.deepEqual(destroyed, [4, 5, 3, 2, 1], 'destroy should be called for each item');
});
QUnit.test('components that are "destroyed twice" are destroyed once', function (assert) {
    var destroyed = [];
    var DestroyMeComponent = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            destroyed.push(this.attrs.from);
        }
    });
    var DestroyMe2Component = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            destroyed.push(this.attrs.from);
        }
    });
    env.registerEmberishCurlyComponent('destroy-me', DestroyMeComponent, '{{#if @cond}}{{destroy-me-inner from="inner"}}{{/if}}');
    env.registerEmberishCurlyComponent('destroy-me-inner', DestroyMe2Component, 'inner');
    appendViewFor("{{#if cond}}{{destroy-me from=\"root\" cond=child.cond}}{{/if}}", { cond: true, child: { cond: true } });
    assert.deepEqual(destroyed, [], 'destroy should not be called');
    view.rerender({ cond: false, child: { cond: false } });
    assert.deepEqual(destroyed, ['root', 'inner'], 'destroy should be called exactly once per component');
});
QUnit.test('deeply nested destructions', function (assert) {
    var destroyed = [];
    var DestroyMe1Component = test_helpers_1.EmberishGlimmerComponent.extend({
        destroy: function () {
            this._super();
            destroyed.push("destroy-me1: " + this.attrs.item);
        }
    });
    var DestroyMe2Component = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            destroyed.push("destroy-me2: " + this.attrs.from + " - " + this.attrs.item);
        }
    });
    env.registerEmberishGlimmerComponent('destroy-me1', DestroyMe1Component, '<div>{{#destroy-me2 item=@item from="destroy-me1"}}{{yield}}{{/destroy-me2}}</div>');
    env.registerEmberishCurlyComponent('destroy-me2', DestroyMe2Component, 'Destroy me! {{yield}}');
    appendViewFor("{{#each list key='@primitive' as |item|}}<destroy-me1 @item={{item}}>{{#destroy-me2 from=\"root\" item=item}}{{/destroy-me2}}</destroy-me1>{{/each}}", { list: [1, 2, 3, 4, 5] });
    assert.strictEqual(destroyed.length, 0, 'destroy should not be called');
    view.rerender({ list: [1, 2, 3] });
    assert.deepEqual(destroyed, [
        "destroy-me1: 4",
        "destroy-me2: destroy-me1 - 4",
        "destroy-me2: root - 4",
        "destroy-me1: 5",
        "destroy-me2: destroy-me1 - 5",
        "destroy-me2: root - 5"
    ], 'destroy should be called exactly twice');
    destroyed = [];
    view.rerender({ list: [3, 2, 1] });
    assert.deepEqual(destroyed, [], 'destroy should be called exactly twice');
    view.rerender({ list: [] });
    assert.deepEqual(destroyed, [
        "destroy-me1: 3",
        "destroy-me2: destroy-me1 - 3",
        "destroy-me2: root - 3",
        "destroy-me1: 2",
        "destroy-me2: destroy-me1 - 2",
        "destroy-me2: root - 2",
        "destroy-me1: 1",
        "destroy-me2: destroy-me1 - 1",
        "destroy-me2: root - 1"
    ], 'destroy should be called for each item');
});
QUnit.test('components inside the root are destroyed when the render result is destroyed', function (assert) {
    var glimmerDestroyed = false;
    var curlyDestroyed = false;
    var DestroyMe1Component = test_helpers_1.EmberishGlimmerComponent.extend({
        destroy: function () {
            this._super();
            glimmerDestroyed = true;
        }
    });
    var DestroyMe2Component = test_helpers_1.EmberishCurlyComponent.extend({
        destroy: function () {
            this._super();
            curlyDestroyed = true;
        }
    });
    env.registerEmberishGlimmerComponent('destroy-me1', DestroyMe1Component, '<div>Destry me!</div>');
    env.registerEmberishCurlyComponent('destroy-me2', DestroyMe2Component, 'Destroy me too!');
    appendViewFor("<destroy-me1 id=\"destroy-me1\"/>{{destroy-me2 id=\"destroy-me2\"}}");
    assert.strictEqual(glimmerDestroyed, false, 'the glimmer component should not be destroyed');
    assert.strictEqual(curlyDestroyed, false, 'the curly component should not be destroyed');
    view.destroy();
    assert.strictEqual(glimmerDestroyed, true, 'the glimmer component destroy hook was called');
    assert.strictEqual(curlyDestroyed, true, 'the glimmer component destroy hook was called');
    assert.strictEqual(document.querySelectorAll('#destroy-me1').length, 0, 'component DOM node was removed from DOM');
    assert.strictEqual(document.querySelectorAll('#destroy-me2').length, 0, 'component DOM node was removed from DOM');
    assert.strictEqual(document.querySelector('#qunit-fixture').childElementCount, 0, 'root view was removed from DOM');
});
QUnit.test('tagless components render properly', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.BasicComponent));
    env.registerStaticTaglessComponent('foo-bar', FooBar, "Michael Jordan says \"Go Tagless\"");
    appendViewFor("{{foo-bar}}");
    assertAppended('Michael Jordan says "Go Tagless"');
    rerender();
    assertAppended('Michael Jordan says "Go Tagless"');
});
module('late bound layout');
QUnit.test('can bind the layout late', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.layout = 'Swap - {{yield}}';
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, null);
    appendViewFor('{{#foo-bar}}YIELD{{/foo-bar}}');
    test_helpers_1.equalsElement(view.element, 'div', {
        class: test_helpers_1.classes('ember-view'),
        id: test_helpers_1.regex(/^ember\d*$/)
    }, 'Swap - YIELD');
});
module('appendable components');
QUnit.test('it does not work on optimized appends', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, 'foo bar');
    var definition = env.getComponentDefinition(['foo-bar']);
    appendViewFor('{{foo}}', { foo: definition });
    assertAppended('[object Object]');
    rerender();
    assertAppended('[object Object]');
    view.rerender({ foo: 'foo' });
    assertAppended('foo');
    view.rerender({ foo: definition });
    assertAppended('[object Object]');
});
QUnit.test('it works on unoptimized appends (dot paths)', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, 'foo bar');
    var definition = env.getComponentDefinition(['foo-bar']);
    appendViewFor('{{foo.bar}}', { foo: { bar: definition } });
    assertEmberishElement('div', {}, 'foo bar');
    rerender();
    assertEmberishElement('div', {}, 'foo bar');
    view.rerender({ foo: { bar: 'lol' } });
    assertAppended('lol');
    rerender();
    assertAppended('lol');
    view.rerender({ foo: { bar: 'omg' } });
    assertAppended('omg');
    view.rerender({ foo: { bar: definition } });
    assertEmberishElement('div', {}, 'foo bar');
});
QUnit.test('it works on unoptimized appends (this paths)', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, 'foo bar');
    var definition = env.getComponentDefinition(['foo-bar']);
    appendViewFor('{{this.foo}}', { foo: definition });
    assertEmberishElement('div', {}, 'foo bar');
    rerender();
    assertEmberishElement('div', {}, 'foo bar');
    view.rerender({ foo: 'lol' });
    assertAppended('lol');
    rerender();
    assertAppended('lol');
    view.rerender({ foo: 'omg' });
    assertAppended('omg');
    view.rerender({ foo: definition });
    assertEmberishElement('div', {}, 'foo bar');
});
QUnit.test('it works on unoptimized appends when initially not a component (dot paths)', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, 'foo bar');
    var definition = env.getComponentDefinition(['foo-bar']);
    appendViewFor('{{foo.bar}}', { foo: { bar: 'lol' } });
    assertAppended('lol');
    rerender();
    assertAppended('lol');
    view.rerender({ foo: { bar: definition } });
    assertEmberishElement('div', {}, 'foo bar');
    rerender();
    assertEmberishElement('div', {}, 'foo bar');
    view.rerender({ foo: { bar: 'lol' } });
    assertAppended('lol');
});
QUnit.test('it works on unoptimized appends when initially not a component (this paths)', function (assert) {
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, 'foo bar');
    var definition = env.getComponentDefinition(['foo-bar']);
    appendViewFor('{{this.foo}}', { foo: 'lol' });
    assertAppended('lol');
    rerender();
    assertAppended('lol');
    view.rerender({ foo: definition });
    assertEmberishElement('div', {}, 'foo bar');
    rerender();
    assertEmberishElement('div', {}, 'foo bar');
    view.rerender({ foo: 'lol' });
    assertAppended('lol');
});
module('bounds tracking');
QUnit.test('it works for wrapped (curly) components', function (assert) {
    var instance;
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super.call(this) || this;
            _this.tagName = 'span';
            instance = _this;
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, 'foo bar');
    appendViewFor('zomg {{foo-bar}} wow');
    assertEmberishElement('span', {}, 'foo bar');
    assert.equal(instance.bounds.parentElement(), document.querySelector('#qunit-fixture'));
    assert.equal(instance.bounds.firstNode(), instance.element);
    assert.equal(instance.bounds.lastNode(), instance.element);
});
QUnit.test('it works for tagless components', function (assert) {
    var instance;
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super.call(this) || this;
            _this.tagName = '';
            instance = _this;
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishCurlyComponent));
    env.registerEmberishCurlyComponent('foo-bar', FooBar, '<span id="first-node">foo</span> <span id="before-last-node">bar</span>!');
    appendViewFor('zomg {{foo-bar}} wow');
    assertAppended('zomg <span id="first-node">foo</span> <span id="before-last-node">bar</span>! wow');
    assert.equal(instance.bounds.parentElement(), document.querySelector('#qunit-fixture'));
    assert.equal(instance.bounds.firstNode(), document.querySelector('#first-node'));
    assert.equal(instance.bounds.lastNode(), document.querySelector('#before-last-node').nextSibling);
});
QUnit.test('it works for unwrapped components', function (assert) {
    var instance;
    var FooBar = (function (_super) {
        __extends(FooBar, _super);
        function FooBar() {
            var _this = _super.call(this) || this;
            instance = _this;
            return _this;
        }
        return FooBar;
    }(test_helpers_1.EmberishGlimmerComponent));
    env.registerEmberishGlimmerComponent('foo-bar', FooBar, '<!-- ohhh --><span>foo bar!</span>');
    appendViewFor('zomg <foo-bar /> wow');
    assertEmberishElement('span', {}, 'foo bar!');
    assert.equal(instance.bounds.parentElement(), document.querySelector('#qunit-fixture'));
    assert.equal(instance.bounds.firstNode(), instance.element.previousSibling);
    assert.equal(instance.bounds.lastNode(), instance.element);
});
var _a;
//# sourceMappingURL=data:application/json;base64,