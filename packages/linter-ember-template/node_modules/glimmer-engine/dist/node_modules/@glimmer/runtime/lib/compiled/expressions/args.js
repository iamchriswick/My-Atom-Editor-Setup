"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var positional_args_1 = require("./positional-args");
exports.COMPILED_EMPTY_POSITIONAL_ARGS = positional_args_1.COMPILED_EMPTY_POSITIONAL_ARGS;
exports.CompiledPositionalArgs = positional_args_1.CompiledPositionalArgs;
exports.EvaluatedPositionalArgs = positional_args_1.EvaluatedPositionalArgs;
var named_args_1 = require("./named-args");
exports.COMPILED_EMPTY_NAMED_ARGS = named_args_1.COMPILED_EMPTY_NAMED_ARGS;
exports.CompiledNamedArgs = named_args_1.CompiledNamedArgs;
exports.EvaluatedNamedArgs = named_args_1.EvaluatedNamedArgs;
var reference_1 = require("@glimmer/reference");
exports.EMPTY_BLOCKS = {
    default: null,
    inverse: null
};
var CompiledArgs = (function () {
    function CompiledArgs(positional, named, blocks) {
        this.positional = positional;
        this.named = named;
        this.blocks = blocks;
        this.type = "compiled-args";
    }
    CompiledArgs.create = function (positional, named, blocks) {
        if (positional === positional_args_1.COMPILED_EMPTY_POSITIONAL_ARGS && named === named_args_1.COMPILED_EMPTY_NAMED_ARGS && blocks === exports.EMPTY_BLOCKS) {
            return this.empty();
        }
        else {
            return new this(positional, named, blocks);
        }
    };
    CompiledArgs.empty = function () {
        return exports.COMPILED_EMPTY_ARGS;
    };
    CompiledArgs.prototype.evaluate = function (vm) {
        var _a = this, positional = _a.positional, named = _a.named, blocks = _a.blocks;
        return EvaluatedArgs.create(positional.evaluate(vm), named.evaluate(vm), blocks);
    };
    return CompiledArgs;
}());
exports.CompiledArgs = CompiledArgs;
exports.COMPILED_EMPTY_ARGS = new ((function (_super) {
    __extends(class_1, _super);
    function class_1() {
        return _super.call(this, positional_args_1.COMPILED_EMPTY_POSITIONAL_ARGS, named_args_1.COMPILED_EMPTY_NAMED_ARGS, exports.EMPTY_BLOCKS) || this;
    }
    class_1.prototype.evaluate = function (_vm) {
        return EMPTY_EVALUATED_ARGS;
    };
    return class_1;
}(CompiledArgs)));
var EvaluatedArgs = (function () {
    function EvaluatedArgs(positional, named, blocks) {
        this.positional = positional;
        this.named = named;
        this.blocks = blocks;
        this.tag = reference_1.combineTagged([positional, named]);
    }
    EvaluatedArgs.empty = function () {
        return EMPTY_EVALUATED_ARGS;
    };
    EvaluatedArgs.create = function (positional, named, blocks) {
        return new this(positional, named, blocks);
    };
    EvaluatedArgs.positional = function (values, blocks) {
        if (blocks === void 0) { blocks = exports.EMPTY_BLOCKS; }
        return new this(positional_args_1.EvaluatedPositionalArgs.create(values), named_args_1.EVALUATED_EMPTY_NAMED_ARGS, blocks);
    };
    EvaluatedArgs.named = function (map, blocks) {
        if (blocks === void 0) { blocks = exports.EMPTY_BLOCKS; }
        return new this(positional_args_1.EVALUATED_EMPTY_POSITIONAL_ARGS, named_args_1.EvaluatedNamedArgs.create(map), blocks);
    };
    return EvaluatedArgs;
}());
exports.EvaluatedArgs = EvaluatedArgs;
var EMPTY_EVALUATED_ARGS = new EvaluatedArgs(positional_args_1.EVALUATED_EMPTY_POSITIONAL_ARGS, named_args_1.EVALUATED_EMPTY_NAMED_ARGS, exports.EMPTY_BLOCKS);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2FyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EscURBQXFKO0FBTTVJLDBGQUE4QjtBQWdGOUIsMEVBQXNCO0FBQUUsNEVBQXVCO0FBckZ4RCwyQ0FBNEg7QUFLbkYsMkVBQXlCO0FBZ0ZSLDJEQUFpQjtBQUFFLDZEQUFrQjtBQXBGL0YsZ0RBQStFO0FBV2xFLFFBQUEsWUFBWSxHQUFXO0lBQ2xDLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLElBQUk7Q0FDZCxDQUFDO0FBRUY7SUFlRSxzQkFDUyxVQUFrQyxFQUNsQyxLQUF3QixFQUN4QixNQUFjO1FBRmQsZUFBVSxHQUFWLFVBQVUsQ0FBd0I7UUFDbEMsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFDeEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUxoQixTQUFJLEdBQUcsZUFBZSxDQUFDO0lBTzlCLENBQUM7SUFuQk0sbUJBQU0sR0FBYixVQUFjLFVBQWtDLEVBQUUsS0FBd0IsRUFBRSxNQUFjO1FBQ3hGLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxnREFBOEIsSUFBSSxLQUFLLEtBQUssc0NBQXlCLElBQUksTUFBTSxLQUFLLG9CQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3BILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0MsQ0FBQztJQUNILENBQUM7SUFFTSxrQkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLDJCQUFtQixDQUFDO0lBQzdCLENBQUM7SUFXRCwrQkFBUSxHQUFSLFVBQVMsRUFBTTtRQUNULElBQUEsU0FBb0MsRUFBbEMsMEJBQVUsRUFBRSxnQkFBSyxFQUFFLGtCQUFNLENBQVU7UUFDekMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUExQkQsSUEwQkM7QUExQlksb0NBQVk7QUE0QlosUUFBQSxtQkFBbUIsR0FBaUIsSUFBSTtJQUFlLDJCQUFZO0lBQzlFO2VBQ0Usa0JBQU0sZ0RBQThCLEVBQUUsc0NBQXlCLEVBQUUsb0JBQVksQ0FBQztJQUNoRixDQUFDO0lBRUQsMEJBQVEsR0FBUixVQUFTLEdBQU87UUFDZCxNQUFNLENBQUMsb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBUnFELENBQWMsWUFBWSxHQVE5RSxDQUFDO0FBRUg7SUFtQkUsdUJBQ1MsVUFBbUMsRUFDbkMsS0FBeUIsRUFDekIsTUFBYztRQUZkLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLFVBQUssR0FBTCxLQUFLLENBQW9CO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFFckIsSUFBSSxDQUFDLEdBQUcsR0FBRyx5QkFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQXhCTSxtQkFBSyxHQUFaO1FBQ0UsTUFBTSxDQUFDLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7SUFFTSxvQkFBTSxHQUFiLFVBQWMsVUFBbUMsRUFBRSxLQUF5QixFQUFFLE1BQWM7UUFDMUYsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLHdCQUFVLEdBQWpCLFVBQWtCLE1BQStCLEVBQUUsTUFBcUI7UUFBckIsdUJBQUEsRUFBQSw2QkFBcUI7UUFDdEUsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLHlDQUF1QixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSx1Q0FBMEIsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRU0sbUJBQUssR0FBWixVQUFhLEdBQWdDLEVBQUUsTUFBcUI7UUFBckIsdUJBQUEsRUFBQSw2QkFBcUI7UUFDbEUsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLGlEQUErQixFQUFFLCtCQUFrQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBV0gsb0JBQUM7QUFBRCxDQUFDLEFBMUJELElBMEJDO0FBMUJZLHNDQUFhO0FBNEIxQixJQUFNLG9CQUFvQixHQUFHLElBQUksYUFBYSxDQUFDLGlEQUErQixFQUFFLHVDQUEwQixFQUFFLG9CQUFZLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWTSBmcm9tICcuLi8uLi92bS9hcHBlbmQnO1xuaW1wb3J0IHsgQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBFVkFMVUFURURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBDb21waWxlZFBvc2l0aW9uYWxBcmdzLCBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB9IGZyb20gJy4vcG9zaXRpb25hbC1hcmdzJztcbmltcG9ydCB7IENPTVBJTEVEX0VNUFRZX05BTUVEX0FSR1MsIEVWQUxVQVRFRF9FTVBUWV9OQU1FRF9BUkdTLCBDb21waWxlZE5hbWVkQXJncywgRXZhbHVhdGVkTmFtZWRBcmdzIH0gZnJvbSAnLi9uYW1lZC1hcmdzJztcbmltcG9ydCB7IFJldmlzaW9uVGFnLCBQYXRoUmVmZXJlbmNlLCBjb21iaW5lVGFnZ2VkIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IElubGluZUJsb2NrIH0gZnJvbSAnLi4vLi4vc2Nhbm5lcic7XG5pbXBvcnQgeyBPcGFxdWUsIE9wdGlvbiwgRGljdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgeyBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIENPTVBJTEVEX0VNUFRZX05BTUVEX0FSR1MgfTtcblxuZXhwb3J0IGludGVyZmFjZSBCbG9ja3Mge1xuICBkZWZhdWx0OiBPcHRpb248SW5saW5lQmxvY2s+O1xuICBpbnZlcnNlOiBPcHRpb248SW5saW5lQmxvY2s+O1xufVxuXG5leHBvcnQgY29uc3QgRU1QVFlfQkxPQ0tTOiBCbG9ja3MgPSB7XG4gIGRlZmF1bHQ6IG51bGwsXG4gIGludmVyc2U6IG51bGxcbn07XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZEFyZ3Mge1xuICBzdGF0aWMgY3JlYXRlKHBvc2l0aW9uYWw6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsIG5hbWVkOiBDb21waWxlZE5hbWVkQXJncywgYmxvY2tzOiBCbG9ja3MpOiBDb21waWxlZEFyZ3Mge1xuICAgIGlmIChwb3NpdGlvbmFsID09PSBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MgJiYgbmFtZWQgPT09IENPTVBJTEVEX0VNUFRZX05BTUVEX0FSR1MgJiYgYmxvY2tzID09PSBFTVBUWV9CTE9DS1MpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtcHR5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyhwb3NpdGlvbmFsLCBuYW1lZCwgYmxvY2tzKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZW1wdHkoKTogQ29tcGlsZWRBcmdzIHtcbiAgICByZXR1cm4gQ09NUElMRURfRU1QVFlfQVJHUztcbiAgfVxuXG4gIHB1YmxpYyB0eXBlID0gXCJjb21waWxlZC1hcmdzXCI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBvc2l0aW9uYWw6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsXG4gICAgcHVibGljIG5hbWVkOiBDb21waWxlZE5hbWVkQXJncyxcbiAgICBwdWJsaWMgYmxvY2tzOiBCbG9ja3NcbiAgKSB7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBFdmFsdWF0ZWRBcmdzIHtcbiAgICBsZXQgeyBwb3NpdGlvbmFsLCBuYW1lZCwgYmxvY2tzIH0gPSB0aGlzO1xuICAgIHJldHVybiBFdmFsdWF0ZWRBcmdzLmNyZWF0ZShwb3NpdGlvbmFsLmV2YWx1YXRlKHZtKSwgbmFtZWQuZXZhbHVhdGUodm0pLCBibG9ja3MpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01QSUxFRF9FTVBUWV9BUkdTOiBDb21waWxlZEFyZ3MgPSBuZXcgKGNsYXNzIGV4dGVuZHMgQ29tcGlsZWRBcmdzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTLCBFTVBUWV9CTE9DS1MpO1xuICB9XG5cbiAgZXZhbHVhdGUoX3ZtOiBWTSk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBFTVBUWV9FVkFMVUFURURfQVJHUztcbiAgfVxufSk7XG5cbmV4cG9ydCBjbGFzcyBFdmFsdWF0ZWRBcmdzIHtcbiAgc3RhdGljIGVtcHR5KCk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBFTVBUWV9FVkFMVUFURURfQVJHUztcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUocG9zaXRpb25hbDogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3MsIG5hbWVkOiBFdmFsdWF0ZWROYW1lZEFyZ3MsIGJsb2NrczogQmxvY2tzKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHBvc2l0aW9uYWwsIG5hbWVkLCBibG9ja3MpO1xuICB9XG5cbiAgc3RhdGljIHBvc2l0aW9uYWwodmFsdWVzOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT5bXSwgYmxvY2tzID0gRU1QVFlfQkxPQ0tTKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzLmNyZWF0ZSh2YWx1ZXMpLCBFVkFMVUFURURfRU1QVFlfTkFNRURfQVJHUywgYmxvY2tzKTtcbiAgfVxuXG4gIHN0YXRpYyBuYW1lZChtYXA6IERpY3Q8UGF0aFJlZmVyZW5jZTxPcGFxdWU+PiwgYmxvY2tzID0gRU1QVFlfQkxPQ0tTKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIEV2YWx1YXRlZE5hbWVkQXJncy5jcmVhdGUobWFwKSwgYmxvY2tzKTtcbiAgfVxuXG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwb3NpdGlvbmFsOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyxcbiAgICBwdWJsaWMgbmFtZWQ6IEV2YWx1YXRlZE5hbWVkQXJncyxcbiAgICBwdWJsaWMgYmxvY2tzOiBCbG9ja3NcbiAgKSB7XG4gICAgdGhpcy50YWcgPSBjb21iaW5lVGFnZ2VkKFtwb3NpdGlvbmFsLCBuYW1lZF0pO1xuICB9XG59XG5cbmNvbnN0IEVNUFRZX0VWQUxVQVRFRF9BUkdTID0gbmV3IEV2YWx1YXRlZEFyZ3MoRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUywgRVZBTFVBVEVEX0VNUFRZX05BTUVEX0FSR1MsIEVNUFRZX0JMT0NLUyk7XG5cbmV4cG9ydCB7IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzLCBDb21waWxlZE5hbWVkQXJncywgRXZhbHVhdGVkTmFtZWRBcmdzIH07XG4iXX0=