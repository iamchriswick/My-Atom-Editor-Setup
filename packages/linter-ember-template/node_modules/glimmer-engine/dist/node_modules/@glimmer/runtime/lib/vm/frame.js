"use strict";
var util_1 = require("@glimmer/util");
var CapturedFrame = (function () {
    function CapturedFrame(operand, args, condition) {
        this.operand = operand;
        this.args = args;
        this.condition = condition;
    }
    return CapturedFrame;
}());
exports.CapturedFrame = CapturedFrame;
var Frame = (function () {
    function Frame(ops, component, manager, shadow) {
        if (component === void 0) { component = null; }
        if (manager === void 0) { manager = null; }
        if (shadow === void 0) { shadow = null; }
        this.ops = ops;
        this.component = component;
        this.manager = manager;
        this.shadow = shadow;
        this.operand = null;
        this.immediate = null;
        this.args = null;
        this.callerScope = null;
        this.blocks = null;
        this.condition = null;
        this.iterator = null;
        this.key = null;
        this.ip = ops[0];
    }
    Frame.prototype.capture = function () {
        return new CapturedFrame(this.operand, this.args, this.condition);
    };
    Frame.prototype.restore = function (frame) {
        this.operand = frame['operand'];
        this.args = frame['args'];
        this.condition = frame['condition'];
    };
    return Frame;
}());
var FrameStack = (function () {
    function FrameStack() {
        this.frames = [];
        this.frame = null;
    }
    Object.defineProperty(FrameStack.prototype, "currentFrame", {
        get: function () {
            return this.frames[util_1.unwrap(this.frame)];
        },
        enumerable: true,
        configurable: true
    });
    FrameStack.prototype.push = function (ops, component, manager, shadow) {
        if (component === void 0) { component = null; }
        if (manager === void 0) { manager = null; }
        if (shadow === void 0) { shadow = null; }
        var frame = (this.frame === null) ? (this.frame = 0) : ++this.frame;
        if (this.frames.length <= frame) {
            this.frames.push(null);
        }
        this.frames[frame] = new Frame(ops, component, manager, shadow);
    };
    FrameStack.prototype.pop = function () {
        var _a = this, frames = _a.frames, frame = _a.frame;
        frames[util_1.expect(frame, 'only pop after pushing')] = null;
        this.frame = frame === 0 ? null : frame - 1;
    };
    FrameStack.prototype.capture = function () {
        return this.currentFrame.capture();
    };
    FrameStack.prototype.restore = function (frame) {
        this.currentFrame.restore(frame);
    };
    FrameStack.prototype.getOps = function () {
        return this.currentFrame.ops;
    };
    FrameStack.prototype.getCurrent = function () {
        return this.currentFrame.ip;
    };
    FrameStack.prototype.setCurrent = function (ip) {
        return this.currentFrame.ip = ip;
    };
    FrameStack.prototype.getOperand = function () {
        return util_1.unwrap(this.currentFrame.operand);
    };
    FrameStack.prototype.setOperand = function (operand) {
        return this.currentFrame.operand = operand;
    };
    FrameStack.prototype.getImmediate = function () {
        return this.currentFrame.immediate;
    };
    FrameStack.prototype.setImmediate = function (value) {
        return this.currentFrame.immediate = value;
    };
    // FIXME: These options are required in practice by the existing code, but
    // figure out why.
    FrameStack.prototype.getArgs = function () {
        return this.currentFrame.args;
    };
    FrameStack.prototype.setArgs = function (args) {
        return this.currentFrame.args = args;
    };
    FrameStack.prototype.getCondition = function () {
        return util_1.unwrap(this.currentFrame.condition);
    };
    FrameStack.prototype.setCondition = function (condition) {
        return this.currentFrame.condition = condition;
    };
    FrameStack.prototype.getIterator = function () {
        return util_1.unwrap(this.currentFrame.iterator);
    };
    FrameStack.prototype.setIterator = function (iterator) {
        return this.currentFrame.iterator = iterator;
    };
    FrameStack.prototype.getKey = function () {
        return this.currentFrame.key;
    };
    FrameStack.prototype.setKey = function (key) {
        return this.currentFrame.key = key;
    };
    FrameStack.prototype.getBlocks = function () {
        return util_1.unwrap(this.currentFrame.blocks);
    };
    FrameStack.prototype.setBlocks = function (blocks) {
        return this.currentFrame.blocks = blocks;
    };
    FrameStack.prototype.getCallerScope = function () {
        return util_1.unwrap(this.currentFrame.callerScope);
    };
    FrameStack.prototype.setCallerScope = function (callerScope) {
        return this.currentFrame.callerScope = callerScope;
    };
    FrameStack.prototype.getComponent = function () {
        return util_1.unwrap(this.currentFrame.component);
    };
    FrameStack.prototype.getManager = function () {
        return util_1.unwrap(this.currentFrame.manager);
    };
    FrameStack.prototype.getShadow = function () {
        return this.currentFrame.shadow;
    };
    FrameStack.prototype.goto = function (ip) {
        this.setCurrent(ip);
    };
    FrameStack.prototype.hasOpcodes = function () {
        return this.frame !== null;
    };
    FrameStack.prototype.nextStatement = function (env) {
        var ip = this.frames[util_1.unwrap(this.frame)].ip;
        var ops = this.getOps();
        if (ip <= ops[1]) {
            var program = env.program;
            this.setCurrent(ip + 4);
            return program.opcode(ip);
        }
        else {
            this.pop();
            return null;
        }
    };
    return FrameStack;
}());
exports.FrameStack = FrameStack;
//# sourceMappingURL=data:application/json;base64,