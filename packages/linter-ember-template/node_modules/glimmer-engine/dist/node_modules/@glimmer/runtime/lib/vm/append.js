"use strict";
var environment_1 = require("../environment");
var util_1 = require("@glimmer/util");
var reference_1 = require("@glimmer/reference");
var vm_1 = require("../compiled/opcodes/vm");
var update_1 = require("./update");
var render_result_1 = require("./render-result");
var frame_1 = require("./frame");
var opcodes_1 = require("../opcodes");
var VM = (function () {
    function VM(env, scope, dynamicScope, elementStack) {
        this.env = env;
        this.elementStack = elementStack;
        this.dynamicScopeStack = new util_1.Stack();
        this.scopeStack = new util_1.Stack();
        this.updatingOpcodeStack = new util_1.Stack();
        this.cacheGroups = new util_1.Stack();
        this.listBlockStack = new util_1.Stack();
        this.frame = new frame_1.FrameStack();
        this.env = env;
        this.constants = env.constants;
        this.elementStack = elementStack;
        this.scopeStack.push(scope);
        this.dynamicScopeStack.push(dynamicScope);
    }
    VM.initial = function (env, self, dynamicScope, elementStack, size) {
        var scope = environment_1.Scope.root(self, size);
        return new VM(env, scope, dynamicScope, elementStack);
    };
    VM.prototype.capture = function () {
        return {
            env: this.env,
            scope: this.scope(),
            dynamicScope: this.dynamicScope(),
            frame: this.frame.capture()
        };
    };
    VM.prototype.goto = function (ip) {
        // assert(this.frame.getOps().contains(op), `Illegal jump to ${op.label}`);
        this.frame.goto(ip);
    };
    VM.prototype.beginCacheGroup = function () {
        this.cacheGroups.push(this.updating().tail());
    };
    VM.prototype.commitCacheGroup = function () {
        //        JumpIfNotModified(END)
        //        (head)
        //        (....)
        //        (tail)
        //        DidModify
        // END:   Noop
        var END = new vm_1.LabelOpcode("END");
        var opcodes = this.updating();
        var marker = this.cacheGroups.pop();
        var head = marker ? opcodes.nextNode(marker) : opcodes.head();
        var tail = opcodes.tail();
        var tag = reference_1.combineSlice(new util_1.ListSlice(head, tail));
        var guard = new vm_1.JumpIfNotModifiedOpcode(tag, END);
        opcodes.insertBefore(guard, head);
        opcodes.append(new vm_1.DidModifyOpcode(guard));
        opcodes.append(END);
    };
    VM.prototype.enter = function (sliceId) {
        var updating = new util_1.LinkedList();
        var tracker = this.stack().pushUpdatableBlock();
        var state = this.capture();
        var slice = this.constants.getSlice(sliceId);
        var tryOpcode = new update_1.TryOpcode(slice, state, tracker, updating);
        this.didEnter(tryOpcode, updating);
    };
    VM.prototype.enterWithKey = function (key, ops) {
        var updating = new util_1.LinkedList();
        var tracker = this.stack().pushUpdatableBlock();
        var state = this.capture();
        var tryOpcode = new update_1.TryOpcode(ops, state, tracker, updating);
        this.listBlock().map[key] = tryOpcode;
        this.didEnter(tryOpcode, updating);
    };
    VM.prototype.enterList = function (ops) {
        var updating = new util_1.LinkedList();
        var tracker = this.stack().pushBlockList(updating);
        var state = this.capture();
        var artifacts = this.frame.getIterator().artifacts;
        var opcode = new update_1.ListBlockOpcode(ops, state, tracker, updating, artifacts);
        this.listBlockStack.push(opcode);
        this.didEnter(opcode, updating);
    };
    VM.prototype.didEnter = function (opcode, updating) {
        this.updateWith(opcode);
        this.updatingOpcodeStack.push(updating);
    };
    VM.prototype.exit = function () {
        this.stack().popBlock();
        this.updatingOpcodeStack.pop();
        var parent = this.updating().tail();
        parent.didInitializeChildren();
    };
    VM.prototype.exitList = function () {
        this.exit();
        this.listBlockStack.pop();
    };
    VM.prototype.updateWith = function (opcode) {
        this.updating().append(opcode);
    };
    VM.prototype.listBlock = function () {
        return util_1.expect(this.listBlockStack.current, 'expected a list block');
    };
    VM.prototype.updating = function () {
        return util_1.expect(this.updatingOpcodeStack.current, 'expected updating opcode on the updating opcode stack');
    };
    VM.prototype.stack = function () {
        return this.elementStack;
    };
    VM.prototype.scope = function () {
        return util_1.expect(this.scopeStack.current, 'expected scope on the scope stack');
    };
    VM.prototype.dynamicScope = function () {
        return util_1.expect(this.dynamicScopeStack.current, 'expected dynamic scope on the dynamic scope stack');
    };
    VM.prototype.pushFrame = function (block, args, callerScope) {
        this.frame.push(block.slice);
        if (args)
            this.frame.setArgs(args);
        if (args && args.blocks)
            this.frame.setBlocks(args.blocks);
        if (callerScope)
            this.frame.setCallerScope(callerScope);
    };
    VM.prototype.pushComponentFrame = function (layout, args, callerScope, component, manager, shadow) {
        this.frame.push(layout.slice, component, manager, shadow);
        if (args)
            this.frame.setArgs(args);
        if (args && args.blocks)
            this.frame.setBlocks(args.blocks);
        if (callerScope)
            this.frame.setCallerScope(callerScope);
    };
    VM.prototype.pushEvalFrame = function (slice) {
        this.frame.push(slice);
    };
    VM.prototype.pushChildScope = function () {
        this.scopeStack.push(this.scope().child());
    };
    VM.prototype.pushCallerScope = function () {
        this.scopeStack.push(util_1.expect(this.scope().getCallerScope(), 'pushCallerScope is called when a caller scope is present'));
    };
    VM.prototype.pushDynamicScope = function () {
        var child = this.dynamicScope().child();
        this.dynamicScopeStack.push(child);
        return child;
    };
    VM.prototype.pushRootScope = function (self, size) {
        var scope = environment_1.Scope.root(self, size);
        this.scopeStack.push(scope);
        return scope;
    };
    VM.prototype.popScope = function () {
        this.scopeStack.pop();
    };
    VM.prototype.popDynamicScope = function () {
        this.dynamicScopeStack.pop();
    };
    VM.prototype.newDestroyable = function (d) {
        this.stack().newDestroyable(d);
    };
    /// SCOPE HELPERS
    VM.prototype.getSelf = function () {
        return this.scope().getSelf();
    };
    VM.prototype.referenceForSymbol = function (symbol) {
        return this.scope().getSymbol(symbol);
    };
    VM.prototype.getArgs = function () {
        return this.frame.getArgs();
    };
    /// EXECUTION
    VM.prototype.resume = function (opcodes, frame) {
        return this.execute(opcodes, function (vm) { return vm.frame.restore(frame); });
    };
    VM.prototype.execute = function (opcodes, initialize) {
        util_1.LOGGER.debug("[VM] Begin program execution");
        var _a = this, elementStack = _a.elementStack, frame = _a.frame, updatingOpcodeStack = _a.updatingOpcodeStack, env = _a.env;
        elementStack.pushSimpleBlock();
        updatingOpcodeStack.push(new util_1.LinkedList());
        frame.push(opcodes);
        if (initialize)
            initialize(this);
        var opcode;
        while (frame.hasOpcodes()) {
            if (opcode = frame.nextStatement(this.env)) {
                util_1.LOGGER.trace(opcode);
                opcodes_1.APPEND_OPCODES.evaluate(this, opcode);
            }
        }
        util_1.LOGGER.debug("[VM] Completed program execution");
        return new render_result_1.default(env, util_1.expect(updatingOpcodeStack.pop(), 'there should be a final updating opcode stack'), elementStack.popBlock());
    };
    VM.prototype.evaluateOpcode = function (opcode) {
        opcodes_1.APPEND_OPCODES.evaluate(this, opcode);
    };
    // Make sure you have opcodes that push and pop a scope around this opcode
    // if you need to change the scope.
    VM.prototype.invokeBlock = function (block, args) {
        var compiled = block.compile(this.env);
        this.pushFrame(compiled, args);
    };
    VM.prototype.invokePartial = function (block) {
        var compiled = block.compile(this.env);
        this.pushFrame(compiled);
    };
    VM.prototype.invokeLayout = function (args, layout, callerScope, component, manager, shadow) {
        this.pushComponentFrame(layout, args, callerScope, component, manager, shadow);
    };
    VM.prototype.evaluateOperand = function (expr) {
        this.frame.setOperand(expr.evaluate(this));
    };
    VM.prototype.evaluateArgs = function (args) {
        var evaledArgs = this.frame.setArgs(args.evaluate(this));
        this.frame.setOperand(evaledArgs.positional.at(0));
    };
    VM.prototype.bindPositionalArgs = function (symbols) {
        var args = util_1.expect(this.frame.getArgs(), 'bindPositionalArgs assumes a previous setArgs');
        var positional = args.positional;
        var scope = this.scope();
        for (var i = 0; i < symbols.length; i++) {
            scope.bindSymbol(symbols[i], positional.at(i));
        }
    };
    VM.prototype.bindNamedArgs = function (names, symbols) {
        var args = util_1.expect(this.frame.getArgs(), 'bindNamedArgs assumes a previous setArgs');
        var scope = this.scope();
        var named = args.named;
        for (var i = 0; i < names.length; i++) {
            var name = this.constants.getString(names[i]);
            scope.bindSymbol(symbols[i], named.get(name));
        }
    };
    VM.prototype.bindBlocks = function (names, symbols) {
        var blocks = this.frame.getBlocks();
        var scope = this.scope();
        for (var i = 0; i < names.length; i++) {
            var name = this.constants.getString(names[i]);
            scope.bindBlock(symbols[i], (blocks && blocks[name]) || null);
        }
    };
    VM.prototype.bindPartialArgs = function (symbol) {
        var args = util_1.expect(this.frame.getArgs(), 'bindPartialArgs assumes a previous setArgs');
        var scope = this.scope();
        util_1.assert(args, "Cannot bind named args");
        scope.bindPartialArgs(symbol, args);
    };
    VM.prototype.bindCallerScope = function () {
        var callerScope = this.frame.getCallerScope();
        var scope = this.scope();
        util_1.assert(callerScope, "Cannot bind caller scope");
        scope.bindCallerScope(callerScope);
    };
    VM.prototype.bindDynamicScope = function (names) {
        var args = util_1.expect(this.frame.getArgs(), 'bindDynamicScope assumes a previous setArgs');
        var scope = this.dynamicScope();
        util_1.assert(args, "Cannot bind dynamic scope");
        for (var i = 0; i < names.length; i++) {
            var name = this.constants.getString(names[i]);
            scope.set(name, args.named.get(name));
        }
    };
    return VM;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = VM;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvdm0vYXBwZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw4Q0FBMEU7QUFFMUUsc0NBQWtIO0FBQ2xILGdEQUFpRTtBQUtqRSw2Q0FBK0Y7QUFFL0YsbUNBQTRFO0FBQzVFLGlEQUEyQztBQUMzQyxpQ0FBb0Q7QUFFcEQsc0NBT29CO0FBVXBCO0lBb0JFLFlBQ1MsR0FBZ0IsRUFDdkIsS0FBWSxFQUNaLFlBQTBCLEVBQ2xCLFlBQTBCO1FBSDNCLFFBQUcsR0FBSCxHQUFHLENBQWE7UUFHZixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQXZCNUIsc0JBQWlCLEdBQUcsSUFBSSxZQUFLLEVBQWdCLENBQUM7UUFDOUMsZUFBVSxHQUFHLElBQUksWUFBSyxFQUFTLENBQUM7UUFDakMsd0JBQW1CLEdBQUcsSUFBSSxZQUFLLEVBQThCLENBQUM7UUFDOUQsZ0JBQVcsR0FBRyxJQUFJLFlBQUssRUFBMEIsQ0FBQztRQUNsRCxtQkFBYyxHQUFHLElBQUksWUFBSyxFQUFtQixDQUFDO1FBQzlDLFVBQUssR0FBRyxJQUFJLGtCQUFVLEVBQUUsQ0FBQztRQW9COUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBdEJNLFVBQU8sR0FBZCxVQUNFLEdBQWdCLEVBQ2hCLElBQTJCLEVBQzNCLFlBQTBCLEVBQzFCLFlBQTBCLEVBQzFCLElBQVk7UUFFWixJQUFJLEtBQUssR0FBRyxtQkFBSyxDQUFDLElB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SUFDdEMsQ0FBQztJQUVELDRCQUFlLEdBQWY7UUFDRSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzlDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUV6QixhQUFNLENBQUMsV0FBVyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFFaEQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsNkJBQWdCLEdBQWhCLFVBQWlCLEtBQXVCO1FBQ3RDLElBQUksSUFBSSxHQUFHLGFBQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLDZDQUE2QyxDQUFDLENBQUM7UUFDdkYsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRWhDLGFBQU0sQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUUxQyxHQUFHLENBQUEsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNuQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7SUFDSCxDQUFDO0lBQ0gsU0FBQztBQUFELENBQUMsQUFoWEQsSUFnWEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY29wZSwgRHluYW1pY1Njb3BlLCBFbnZpcm9ubWVudCwgT3Bjb2RlIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgRWxlbWVudFN0YWNrIH0gZnJvbSAnLi4vYnVpbGRlcic7XG5pbXBvcnQgeyBPcHRpb24sIERlc3Ryb3lhYmxlLCBTdGFjaywgTGlua2VkTGlzdCwgTGlzdFNsaWNlLCBMT0dHRVIsIE9wYXF1ZSwgYXNzZXJ0LCBleHBlY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UsIGNvbWJpbmVTbGljZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBDb21waWxlZEJsb2NrIH0gZnJvbSAnLi4vY29tcGlsZWQvYmxvY2tzJztcbmltcG9ydCB7IElubGluZUJsb2NrLCBQYXJ0aWFsQmxvY2sgfSBmcm9tICcuLi9zY2FubmVyJztcbmltcG9ydCB7IENvbXBpbGVkRXhwcmVzc2lvbiB9IGZyb20gJy4uL2NvbXBpbGVkL2V4cHJlc3Npb25zJztcbmltcG9ydCB7IENvbXBpbGVkQXJncywgRXZhbHVhdGVkQXJncyB9IGZyb20gJy4uL2NvbXBpbGVkL2V4cHJlc3Npb25zL2FyZ3MnO1xuaW1wb3J0IHsgTGFiZWxPcGNvZGUsIEp1bXBJZk5vdE1vZGlmaWVkT3Bjb2RlLCBEaWRNb2RpZnlPcGNvZGUgfSBmcm9tICcuLi9jb21waWxlZC9vcGNvZGVzL3ZtJztcbmltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50TWFuYWdlciB9IGZyb20gJy4uL2NvbXBvbmVudC9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFZNU3RhdGUsIExpc3RCbG9ja09wY29kZSwgVHJ5T3Bjb2RlLCBCbG9ja09wY29kZSB9IGZyb20gJy4vdXBkYXRlJztcbmltcG9ydCBSZW5kZXJSZXN1bHQgZnJvbSAnLi9yZW5kZXItcmVzdWx0JztcbmltcG9ydCB7IENhcHR1cmVkRnJhbWUsIEZyYW1lU3RhY2sgfSBmcm9tICcuL2ZyYW1lJztcblxuaW1wb3J0IHtcbiAgQVBQRU5EX09QQ09ERVMsXG4gIFNsaWNlLFxuICBVcGRhdGluZ09wY29kZSxcbiAgQ29uc3RhbnRzLFxuICBDb25zdGFudFN0cmluZyxcbiAgQ29uc3RhbnRTbGljZSxcbn0gZnJvbSAnLi4vb3Bjb2Rlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHVibGljVk0ge1xuICBlbnY6IEVudmlyb25tZW50O1xuICBnZXRBcmdzKCk6IE9wdGlvbjxFdmFsdWF0ZWRBcmdzPjtcbiAgZHluYW1pY1Njb3BlKCk6IER5bmFtaWNTY29wZTtcbiAgZ2V0U2VsZigpOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT47XG4gIG5ld0Rlc3Ryb3lhYmxlKGQ6IERlc3Ryb3lhYmxlKTogdm9pZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVk0gaW1wbGVtZW50cyBQdWJsaWNWTSB7XG4gIHByaXZhdGUgZHluYW1pY1Njb3BlU3RhY2sgPSBuZXcgU3RhY2s8RHluYW1pY1Njb3BlPigpO1xuICBwcml2YXRlIHNjb3BlU3RhY2sgPSBuZXcgU3RhY2s8U2NvcGU+KCk7XG4gIHB1YmxpYyB1cGRhdGluZ09wY29kZVN0YWNrID0gbmV3IFN0YWNrPExpbmtlZExpc3Q8VXBkYXRpbmdPcGNvZGU+PigpO1xuICBwdWJsaWMgY2FjaGVHcm91cHMgPSBuZXcgU3RhY2s8T3B0aW9uPFVwZGF0aW5nT3Bjb2RlPj4oKTtcbiAgcHVibGljIGxpc3RCbG9ja1N0YWNrID0gbmV3IFN0YWNrPExpc3RCbG9ja09wY29kZT4oKTtcbiAgcHVibGljIGZyYW1lID0gbmV3IEZyYW1lU3RhY2soKTtcbiAgcHVibGljIGNvbnN0YW50czogQ29uc3RhbnRzO1xuXG4gIHN0YXRpYyBpbml0aWFsKFxuICAgIGVudjogRW52aXJvbm1lbnQsXG4gICAgc2VsZjogUGF0aFJlZmVyZW5jZTxPcGFxdWU+LFxuICAgIGR5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlLFxuICAgIGVsZW1lbnRTdGFjazogRWxlbWVudFN0YWNrLFxuICAgIHNpemU6IG51bWJlclxuICApIHtcbiAgICBsZXQgc2NvcGUgPSBTY29wZS5yb290KHNlbGYsIHNpemUpO1xuICAgIHJldHVybiBuZXcgVk0oZW52LCBzY29wZSwgZHluYW1pY1Njb3BlLCBlbGVtZW50U3RhY2spO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGVudjogRW52aXJvbm1lbnQsXG4gICAgc2NvcGU6IFNjb3BlLFxuICAgIGR5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlLFxuICAgIHByaXZhdGUgZWxlbWVudFN0YWNrOiBFbGVtZW50U3RhY2ssXG4gICkge1xuICAgIHRoaXMuZW52ID0gZW52O1xuICAgIHRoaXMuY29uc3RhbnRzID0gZW52LmNvbnN0YW50cztcbiAgICB0aGlzLmVsZW1lbnRTdGFjayA9IGVsZW1lbnRTdGFjaztcbiAgICB0aGlzLnNjb3BlU3RhY2sucHVzaChzY29wZSk7XG4gICAgdGhpcy5keW5hbWljU2NvcGVTdGFjay5wdXNoKGR5bmFtaWNTY29wZSk7XG4gIH1cblxuICBjYXB0dXJlKCk6IFZNU3RhdGUge1xuICAgIHJldHVybiB7XG4gICAgICBlbnY6IHRoaXMuZW52LFxuICAgICAgc2NvcGU6IHRoaXMuc2NvcGUoKSxcbiAgICAgIGR5bmFtaWNTY29wZTogdGhpcy5keW5hbWljU2NvcGUoKSxcbiAgICAgIGZyYW1lOiB0aGlzLmZyYW1lLmNhcHR1cmUoKVxuICAgIH07XG4gIH1cblxuICBnb3RvKGlwOiBudW1iZXIpIHtcbiAgICAvLyBhc3NlcnQodGhpcy5mcmFtZS5nZXRPcHMoKS5jb250YWlucyhvcCksIGBJbGxlZ2FsIGp1bXAgdG8gJHtvcC5sYWJlbH1gKTtcbiAgICB0aGlzLmZyYW1lLmdvdG8oaXApO1xuICB9XG5cbiAgYmVnaW5DYWNoZUdyb3VwKCkge1xuICAgIHRoaXMuY2FjaGVHcm91cHMucHVzaCh0aGlzLnVwZGF0aW5nKCkudGFpbCgpKTtcbiAgfVxuXG4gIGNvbW1pdENhY2hlR3JvdXAoKSB7XG4gICAgLy8gICAgICAgIEp1bXBJZk5vdE1vZGlmaWVkKEVORClcbiAgICAvLyAgICAgICAgKGhlYWQpXG4gICAgLy8gICAgICAgICguLi4uKVxuICAgIC8vICAgICAgICAodGFpbClcbiAgICAvLyAgICAgICAgRGlkTW9kaWZ5XG4gICAgLy8gRU5EOiAgIE5vb3BcblxuICAgIGxldCBFTkQgPSBuZXcgTGFiZWxPcGNvZGUoXCJFTkRcIik7XG5cbiAgICBsZXQgb3Bjb2RlcyA9IHRoaXMudXBkYXRpbmcoKTtcbiAgICBsZXQgbWFya2VyID0gdGhpcy5jYWNoZUdyb3Vwcy5wb3AoKTtcbiAgICBsZXQgaGVhZCA9IG1hcmtlciA/IG9wY29kZXMubmV4dE5vZGUobWFya2VyKSA6IG9wY29kZXMuaGVhZCgpO1xuICAgIGxldCB0YWlsID0gb3Bjb2Rlcy50YWlsKCk7XG4gICAgbGV0IHRhZyA9IGNvbWJpbmVTbGljZShuZXcgTGlzdFNsaWNlKGhlYWQsIHRhaWwpKTtcblxuICAgIGxldCBndWFyZCA9IG5ldyBKdW1wSWZOb3RNb2RpZmllZE9wY29kZSh0YWcsIEVORCk7XG5cbiAgICBvcGNvZGVzLmluc2VydEJlZm9yZShndWFyZCwgaGVhZCk7XG4gICAgb3Bjb2Rlcy5hcHBlbmQobmV3IERpZE1vZGlmeU9wY29kZShndWFyZCkpO1xuICAgIG9wY29kZXMuYXBwZW5kKEVORCk7XG4gIH1cblxuICBlbnRlcihzbGljZUlkOiBDb25zdGFudFNsaWNlKSB7XG4gICAgbGV0IHVwZGF0aW5nID0gbmV3IExpbmtlZExpc3Q8VXBkYXRpbmdPcGNvZGU+KCk7XG5cbiAgICBsZXQgdHJhY2tlciA9IHRoaXMuc3RhY2soKS5wdXNoVXBkYXRhYmxlQmxvY2soKTtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNhcHR1cmUoKTtcblxuICAgIGxldCBzbGljZSA9IHRoaXMuY29uc3RhbnRzLmdldFNsaWNlKHNsaWNlSWQpO1xuICAgIGxldCB0cnlPcGNvZGUgPSBuZXcgVHJ5T3Bjb2RlKHNsaWNlLCBzdGF0ZSwgdHJhY2tlciwgdXBkYXRpbmcpO1xuXG4gICAgdGhpcy5kaWRFbnRlcih0cnlPcGNvZGUsIHVwZGF0aW5nKTtcbiAgfVxuXG4gIGVudGVyV2l0aEtleShrZXk6IHN0cmluZywgb3BzOiBTbGljZSkge1xuICAgIGxldCB1cGRhdGluZyA9IG5ldyBMaW5rZWRMaXN0PFVwZGF0aW5nT3Bjb2RlPigpO1xuXG4gICAgbGV0IHRyYWNrZXIgPSB0aGlzLnN0YWNrKCkucHVzaFVwZGF0YWJsZUJsb2NrKCk7XG4gICAgbGV0IHN0YXRlID0gdGhpcy5jYXB0dXJlKCk7XG5cbiAgICBsZXQgdHJ5T3Bjb2RlID0gbmV3IFRyeU9wY29kZShvcHMsIHN0YXRlLCB0cmFja2VyLCB1cGRhdGluZyk7XG5cbiAgICB0aGlzLmxpc3RCbG9jaygpLm1hcFtrZXldID0gdHJ5T3Bjb2RlO1xuXG4gICAgdGhpcy5kaWRFbnRlcih0cnlPcGNvZGUsIHVwZGF0aW5nKTtcbiAgfVxuXG4gIGVudGVyTGlzdChvcHM6IFNsaWNlKSB7XG4gICAgbGV0IHVwZGF0aW5nID0gbmV3IExpbmtlZExpc3Q8QmxvY2tPcGNvZGU+KCk7XG5cbiAgICBsZXQgdHJhY2tlciA9IHRoaXMuc3RhY2soKS5wdXNoQmxvY2tMaXN0KHVwZGF0aW5nKTtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNhcHR1cmUoKTtcbiAgICBsZXQgYXJ0aWZhY3RzID0gdGhpcy5mcmFtZS5nZXRJdGVyYXRvcigpLmFydGlmYWN0cztcblxuICAgIGxldCBvcGNvZGUgPSBuZXcgTGlzdEJsb2NrT3Bjb2RlKG9wcywgc3RhdGUsIHRyYWNrZXIsIHVwZGF0aW5nLCBhcnRpZmFjdHMpO1xuXG4gICAgdGhpcy5saXN0QmxvY2tTdGFjay5wdXNoKG9wY29kZSk7XG5cbiAgICB0aGlzLmRpZEVudGVyKG9wY29kZSwgdXBkYXRpbmcpO1xuICB9XG5cbiAgcHJpdmF0ZSBkaWRFbnRlcihvcGNvZGU6IEJsb2NrT3Bjb2RlLCB1cGRhdGluZzogTGlua2VkTGlzdDxVcGRhdGluZ09wY29kZT4pIHtcbiAgICB0aGlzLnVwZGF0ZVdpdGgob3Bjb2RlKTtcbiAgICB0aGlzLnVwZGF0aW5nT3Bjb2RlU3RhY2sucHVzaCh1cGRhdGluZyk7XG4gIH1cblxuICBleGl0KCkge1xuICAgIHRoaXMuc3RhY2soKS5wb3BCbG9jaygpO1xuICAgIHRoaXMudXBkYXRpbmdPcGNvZGVTdGFjay5wb3AoKTtcblxuICAgIGxldCBwYXJlbnQgPSB0aGlzLnVwZGF0aW5nKCkudGFpbCgpIGFzIEJsb2NrT3Bjb2RlO1xuXG4gICAgcGFyZW50LmRpZEluaXRpYWxpemVDaGlsZHJlbigpO1xuICB9XG5cbiAgZXhpdExpc3QoKSB7XG4gICAgdGhpcy5leGl0KCk7XG4gICAgdGhpcy5saXN0QmxvY2tTdGFjay5wb3AoKTtcbiAgfVxuXG4gIHVwZGF0ZVdpdGgob3Bjb2RlOiBVcGRhdGluZ09wY29kZSkge1xuICAgIHRoaXMudXBkYXRpbmcoKS5hcHBlbmQob3Bjb2RlKTtcbiAgfVxuXG4gIGxpc3RCbG9jaygpOiBMaXN0QmxvY2tPcGNvZGUge1xuICAgIHJldHVybiBleHBlY3QodGhpcy5saXN0QmxvY2tTdGFjay5jdXJyZW50LCAnZXhwZWN0ZWQgYSBsaXN0IGJsb2NrJyk7XG4gIH1cblxuICB1cGRhdGluZygpOiBMaW5rZWRMaXN0PFVwZGF0aW5nT3Bjb2RlPiB7XG4gICAgcmV0dXJuIGV4cGVjdCh0aGlzLnVwZGF0aW5nT3Bjb2RlU3RhY2suY3VycmVudCwgJ2V4cGVjdGVkIHVwZGF0aW5nIG9wY29kZSBvbiB0aGUgdXBkYXRpbmcgb3Bjb2RlIHN0YWNrJyk7XG4gIH1cblxuICBzdGFjaygpOiBFbGVtZW50U3RhY2sge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRTdGFjaztcbiAgfVxuXG4gIHNjb3BlKCk6IFNjb3BlIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuc2NvcGVTdGFjay5jdXJyZW50LCAnZXhwZWN0ZWQgc2NvcGUgb24gdGhlIHNjb3BlIHN0YWNrJyk7XG4gIH1cblxuICBkeW5hbWljU2NvcGUoKTogRHluYW1pY1Njb3BlIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuZHluYW1pY1Njb3BlU3RhY2suY3VycmVudCwgJ2V4cGVjdGVkIGR5bmFtaWMgc2NvcGUgb24gdGhlIGR5bmFtaWMgc2NvcGUgc3RhY2snKTtcbiAgfVxuXG4gIHB1c2hGcmFtZShcbiAgICBibG9jazogQ29tcGlsZWRCbG9jayxcbiAgICBhcmdzPzogT3B0aW9uPEV2YWx1YXRlZEFyZ3M+LFxuICAgIGNhbGxlclNjb3BlPzogU2NvcGVcbiAgKSB7XG4gICAgdGhpcy5mcmFtZS5wdXNoKGJsb2NrLnNsaWNlKTtcblxuICAgIGlmIChhcmdzKSB0aGlzLmZyYW1lLnNldEFyZ3MoYXJncyk7XG4gICAgaWYgKGFyZ3MgJiYgYXJncy5ibG9ja3MpIHRoaXMuZnJhbWUuc2V0QmxvY2tzKGFyZ3MuYmxvY2tzKTtcbiAgICBpZiAoY2FsbGVyU2NvcGUpIHRoaXMuZnJhbWUuc2V0Q2FsbGVyU2NvcGUoY2FsbGVyU2NvcGUpO1xuICB9XG5cbiAgcHVzaENvbXBvbmVudEZyYW1lKFxuICAgIGxheW91dDogQ29tcGlsZWRCbG9jayxcbiAgICBhcmdzOiBFdmFsdWF0ZWRBcmdzLFxuICAgIGNhbGxlclNjb3BlOiBTY29wZSxcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICBtYW5hZ2VyOiBDb21wb25lbnRNYW5hZ2VyPENvbXBvbmVudD4sXG4gICAgc2hhZG93OiBPcHRpb248SW5saW5lQmxvY2s+XG4gICkge1xuICAgIHRoaXMuZnJhbWUucHVzaChsYXlvdXQuc2xpY2UsIGNvbXBvbmVudCwgbWFuYWdlciwgc2hhZG93KTtcblxuICAgIGlmIChhcmdzKSB0aGlzLmZyYW1lLnNldEFyZ3MoYXJncyk7XG4gICAgaWYgKGFyZ3MgJiYgYXJncy5ibG9ja3MpIHRoaXMuZnJhbWUuc2V0QmxvY2tzKGFyZ3MuYmxvY2tzKTtcbiAgICBpZiAoY2FsbGVyU2NvcGUpIHRoaXMuZnJhbWUuc2V0Q2FsbGVyU2NvcGUoY2FsbGVyU2NvcGUpO1xuICB9XG5cbiAgcHVzaEV2YWxGcmFtZShzbGljZTogU2xpY2UpIHtcbiAgICB0aGlzLmZyYW1lLnB1c2goc2xpY2UpO1xuICB9XG5cbiAgcHVzaENoaWxkU2NvcGUoKSB7XG4gICAgdGhpcy5zY29wZVN0YWNrLnB1c2godGhpcy5zY29wZSgpLmNoaWxkKCkpO1xuICB9XG5cbiAgcHVzaENhbGxlclNjb3BlKCkge1xuICAgIHRoaXMuc2NvcGVTdGFjay5wdXNoKGV4cGVjdCh0aGlzLnNjb3BlKCkuZ2V0Q2FsbGVyU2NvcGUoKSwgJ3B1c2hDYWxsZXJTY29wZSBpcyBjYWxsZWQgd2hlbiBhIGNhbGxlciBzY29wZSBpcyBwcmVzZW50JykpO1xuICB9XG5cbiAgcHVzaER5bmFtaWNTY29wZSgpOiBEeW5hbWljU2NvcGUge1xuICAgIGxldCBjaGlsZCA9IHRoaXMuZHluYW1pY1Njb3BlKCkuY2hpbGQoKTtcbiAgICB0aGlzLmR5bmFtaWNTY29wZVN0YWNrLnB1c2goY2hpbGQpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIHB1c2hSb290U2NvcGUoc2VsZjogUGF0aFJlZmVyZW5jZTxhbnk+LCBzaXplOiBudW1iZXIpOiBTY29wZSB7XG4gICAgbGV0IHNjb3BlID0gU2NvcGUucm9vdChzZWxmLCBzaXplKTtcbiAgICB0aGlzLnNjb3BlU3RhY2sucHVzaChzY29wZSk7XG4gICAgcmV0dXJuIHNjb3BlO1xuICB9XG5cbiAgcG9wU2NvcGUoKSB7XG4gICAgdGhpcy5zY29wZVN0YWNrLnBvcCgpO1xuICB9XG5cbiAgcG9wRHluYW1pY1Njb3BlKCkge1xuICAgIHRoaXMuZHluYW1pY1Njb3BlU3RhY2sucG9wKCk7XG4gIH1cblxuICBuZXdEZXN0cm95YWJsZShkOiBEZXN0cm95YWJsZSkge1xuICAgIHRoaXMuc3RhY2soKS5uZXdEZXN0cm95YWJsZShkKTtcbiAgfVxuXG4gIC8vLyBTQ09QRSBIRUxQRVJTXG5cbiAgZ2V0U2VsZigpOiBQYXRoUmVmZXJlbmNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnNjb3BlKCkuZ2V0U2VsZigpO1xuICB9XG5cbiAgcmVmZXJlbmNlRm9yU3ltYm9sKHN5bWJvbDogbnVtYmVyKTogUGF0aFJlZmVyZW5jZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5zY29wZSgpLmdldFN5bWJvbChzeW1ib2wpO1xuICB9XG5cbiAgZ2V0QXJncygpOiBPcHRpb248RXZhbHVhdGVkQXJncz4ge1xuICAgIHJldHVybiB0aGlzLmZyYW1lLmdldEFyZ3MoKTtcbiAgfVxuXG4gIC8vLyBFWEVDVVRJT05cblxuICByZXN1bWUob3Bjb2RlczogU2xpY2UsIGZyYW1lOiBDYXB0dXJlZEZyYW1lKTogUmVuZGVyUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKG9wY29kZXMsIHZtID0+IHZtLmZyYW1lLnJlc3RvcmUoZnJhbWUpKTtcbiAgfVxuXG4gIGV4ZWN1dGUob3Bjb2RlczogU2xpY2UsIGluaXRpYWxpemU/OiAodm06IFZNKSA9PiB2b2lkKTogUmVuZGVyUmVzdWx0IHtcbiAgICBMT0dHRVIuZGVidWcoXCJbVk1dIEJlZ2luIHByb2dyYW0gZXhlY3V0aW9uXCIpO1xuXG4gICAgbGV0IHsgZWxlbWVudFN0YWNrLCBmcmFtZSwgdXBkYXRpbmdPcGNvZGVTdGFjaywgZW52IH0gPSB0aGlzO1xuXG4gICAgZWxlbWVudFN0YWNrLnB1c2hTaW1wbGVCbG9jaygpO1xuXG4gICAgdXBkYXRpbmdPcGNvZGVTdGFjay5wdXNoKG5ldyBMaW5rZWRMaXN0PFVwZGF0aW5nT3Bjb2RlPigpKTtcbiAgICBmcmFtZS5wdXNoKG9wY29kZXMpO1xuXG4gICAgaWYgKGluaXRpYWxpemUpIGluaXRpYWxpemUodGhpcyk7XG5cbiAgICBsZXQgb3Bjb2RlOiBPcHRpb248T3Bjb2RlPjtcblxuICAgIHdoaWxlIChmcmFtZS5oYXNPcGNvZGVzKCkpIHtcbiAgICAgIGlmIChvcGNvZGUgPSBmcmFtZS5uZXh0U3RhdGVtZW50KHRoaXMuZW52KSkge1xuICAgICAgICBMT0dHRVIudHJhY2Uob3Bjb2RlKTtcbiAgICAgICAgQVBQRU5EX09QQ09ERVMuZXZhbHVhdGUodGhpcywgb3Bjb2RlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBMT0dHRVIuZGVidWcoXCJbVk1dIENvbXBsZXRlZCBwcm9ncmFtIGV4ZWN1dGlvblwiKTtcblxuICAgIHJldHVybiBuZXcgUmVuZGVyUmVzdWx0KFxuICAgICAgZW52LFxuICAgICAgZXhwZWN0KHVwZGF0aW5nT3Bjb2RlU3RhY2sucG9wKCksICd0aGVyZSBzaG91bGQgYmUgYSBmaW5hbCB1cGRhdGluZyBvcGNvZGUgc3RhY2snKSxcbiAgICAgIGVsZW1lbnRTdGFjay5wb3BCbG9jaygpXG4gICAgKTtcbiAgfVxuXG4gIGV2YWx1YXRlT3Bjb2RlKG9wY29kZTogT3Bjb2RlKSB7XG4gICAgQVBQRU5EX09QQ09ERVMuZXZhbHVhdGUodGhpcywgb3Bjb2RlKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSB5b3UgaGF2ZSBvcGNvZGVzIHRoYXQgcHVzaCBhbmQgcG9wIGEgc2NvcGUgYXJvdW5kIHRoaXMgb3Bjb2RlXG4gIC8vIGlmIHlvdSBuZWVkIHRvIGNoYW5nZSB0aGUgc2NvcGUuXG4gIGludm9rZUJsb2NrKGJsb2NrOiBJbmxpbmVCbG9jaywgYXJnczogT3B0aW9uPEV2YWx1YXRlZEFyZ3M+KSB7XG4gICAgbGV0IGNvbXBpbGVkID0gYmxvY2suY29tcGlsZSh0aGlzLmVudik7XG4gICAgdGhpcy5wdXNoRnJhbWUoY29tcGlsZWQsIGFyZ3MpO1xuICB9XG5cbiAgaW52b2tlUGFydGlhbChibG9jazogUGFydGlhbEJsb2NrKSB7XG4gICAgbGV0IGNvbXBpbGVkID0gYmxvY2suY29tcGlsZSh0aGlzLmVudik7XG4gICAgdGhpcy5wdXNoRnJhbWUoY29tcGlsZWQpO1xuICB9XG5cbiAgaW52b2tlTGF5b3V0KFxuICAgIGFyZ3M6IEV2YWx1YXRlZEFyZ3MsXG4gICAgbGF5b3V0OiBDb21waWxlZEJsb2NrLFxuICAgIGNhbGxlclNjb3BlOiBTY29wZSxcbiAgICBjb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICBtYW5hZ2VyOiBDb21wb25lbnRNYW5hZ2VyPENvbXBvbmVudD4sXG4gICAgc2hhZG93OiBPcHRpb248SW5saW5lQmxvY2s+XG4gICkge1xuICAgIHRoaXMucHVzaENvbXBvbmVudEZyYW1lKGxheW91dCwgYXJncywgY2FsbGVyU2NvcGUsIGNvbXBvbmVudCwgbWFuYWdlciwgc2hhZG93KTtcbiAgfVxuXG4gIGV2YWx1YXRlT3BlcmFuZChleHByOiBDb21waWxlZEV4cHJlc3Npb248YW55Pikge1xuICAgIHRoaXMuZnJhbWUuc2V0T3BlcmFuZChleHByLmV2YWx1YXRlKHRoaXMpKTtcbiAgfVxuXG4gIGV2YWx1YXRlQXJncyhhcmdzOiBDb21waWxlZEFyZ3MpIHtcbiAgICBsZXQgZXZhbGVkQXJncyA9IHRoaXMuZnJhbWUuc2V0QXJncyhhcmdzLmV2YWx1YXRlKHRoaXMpKTtcbiAgICB0aGlzLmZyYW1lLnNldE9wZXJhbmQoZXZhbGVkQXJncy5wb3NpdGlvbmFsLmF0KDApKTtcbiAgfVxuXG4gIGJpbmRQb3NpdGlvbmFsQXJncyhzeW1ib2xzOiBudW1iZXJbXSkge1xuICAgIGxldCBhcmdzID0gZXhwZWN0KHRoaXMuZnJhbWUuZ2V0QXJncygpLCAnYmluZFBvc2l0aW9uYWxBcmdzIGFzc3VtZXMgYSBwcmV2aW91cyBzZXRBcmdzJyk7XG5cbiAgICBsZXQgeyBwb3NpdGlvbmFsIH0gPSBhcmdzO1xuXG4gICAgbGV0IHNjb3BlID0gdGhpcy5zY29wZSgpO1xuXG4gICAgZm9yKGxldCBpPTA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzY29wZS5iaW5kU3ltYm9sKHN5bWJvbHNbaV0sIHBvc2l0aW9uYWwuYXQoaSkpO1xuICAgIH1cbiAgfVxuXG4gIGJpbmROYW1lZEFyZ3MobmFtZXM6IENvbnN0YW50U3RyaW5nW10sIHN5bWJvbHM6IG51bWJlcltdKSB7XG4gICAgbGV0IGFyZ3MgPSBleHBlY3QodGhpcy5mcmFtZS5nZXRBcmdzKCksICdiaW5kTmFtZWRBcmdzIGFzc3VtZXMgYSBwcmV2aW91cyBzZXRBcmdzJyk7XG4gICAgbGV0IHNjb3BlID0gdGhpcy5zY29wZSgpO1xuXG4gICAgbGV0IHsgbmFtZWQgfSA9IGFyZ3M7XG5cbiAgICBmb3IobGV0IGk9MDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFtZSA9IHRoaXMuY29uc3RhbnRzLmdldFN0cmluZyhuYW1lc1tpXSk7XG4gICAgICBzY29wZS5iaW5kU3ltYm9sKHN5bWJvbHNbaV0sIG5hbWVkLmdldChuYW1lKSk7XG4gICAgfVxuICB9XG5cbiAgYmluZEJsb2NrcyhuYW1lczogQ29uc3RhbnRTdHJpbmdbXSwgc3ltYm9sczogbnVtYmVyW10pIHtcbiAgICBsZXQgYmxvY2tzID0gdGhpcy5mcmFtZS5nZXRCbG9ja3MoKTtcbiAgICBsZXQgc2NvcGUgPSB0aGlzLnNjb3BlKCk7XG5cbiAgICBmb3IobGV0IGk9MDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmFtZSA9IHRoaXMuY29uc3RhbnRzLmdldFN0cmluZyhuYW1lc1tpXSk7XG4gICAgICBzY29wZS5iaW5kQmxvY2soc3ltYm9sc1tpXSwgKGJsb2NrcyAmJiBibG9ja3NbbmFtZV0pIHx8IG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGJpbmRQYXJ0aWFsQXJncyhzeW1ib2w6IG51bWJlcikge1xuICAgIGxldCBhcmdzID0gZXhwZWN0KHRoaXMuZnJhbWUuZ2V0QXJncygpLCAnYmluZFBhcnRpYWxBcmdzIGFzc3VtZXMgYSBwcmV2aW91cyBzZXRBcmdzJyk7XG4gICAgbGV0IHNjb3BlID0gdGhpcy5zY29wZSgpO1xuXG4gICAgYXNzZXJ0KGFyZ3MsIFwiQ2Fubm90IGJpbmQgbmFtZWQgYXJnc1wiKTtcblxuICAgIHNjb3BlLmJpbmRQYXJ0aWFsQXJncyhzeW1ib2wsIGFyZ3MpO1xuICB9XG5cbiAgYmluZENhbGxlclNjb3BlKCkge1xuICAgIGxldCBjYWxsZXJTY29wZSA9IHRoaXMuZnJhbWUuZ2V0Q2FsbGVyU2NvcGUoKTtcbiAgICBsZXQgc2NvcGUgPSB0aGlzLnNjb3BlKCk7XG5cbiAgICBhc3NlcnQoY2FsbGVyU2NvcGUsIFwiQ2Fubm90IGJpbmQgY2FsbGVyIHNjb3BlXCIpO1xuXG4gICAgc2NvcGUuYmluZENhbGxlclNjb3BlKGNhbGxlclNjb3BlKTtcbiAgfVxuXG4gIGJpbmREeW5hbWljU2NvcGUobmFtZXM6IENvbnN0YW50U3RyaW5nW10pIHtcbiAgICBsZXQgYXJncyA9IGV4cGVjdCh0aGlzLmZyYW1lLmdldEFyZ3MoKSwgJ2JpbmREeW5hbWljU2NvcGUgYXNzdW1lcyBhIHByZXZpb3VzIHNldEFyZ3MnKTtcbiAgICBsZXQgc2NvcGUgPSB0aGlzLmR5bmFtaWNTY29wZSgpO1xuXG4gICAgYXNzZXJ0KGFyZ3MsIFwiQ2Fubm90IGJpbmQgZHluYW1pYyBzY29wZVwiKTtcblxuICAgIGZvcihsZXQgaT0wOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBuYW1lID0gdGhpcy5jb25zdGFudHMuZ2V0U3RyaW5nKG5hbWVzW2ldKTtcbiAgICAgIHNjb3BlLnNldChuYW1lLCBhcmdzLm5hbWVkLmdldChuYW1lKSk7XG4gICAgfVxuICB9XG59XG4iXX0=