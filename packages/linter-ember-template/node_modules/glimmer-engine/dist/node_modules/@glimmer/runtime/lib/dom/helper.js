"use strict";
var bounds_1 = require("../bounds");
var inner_html_fix_1 = require("../compat/inner-html-fix");
var svg_inner_html_fix_1 = require("../compat/svg-inner-html-fix");
var text_node_merging_fix_1 = require("../compat/text-node-merging-fix");
exports.SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
// http://www.w3.org/TR/html/syntax.html#html-integration-point
var SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };
// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
// TODO: Adjust SVG attributes
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
// TODO: Adjust SVG elements
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
exports.BLACKLIST_TABLE = Object.create(null);
([
    "b", "big", "blockquote", "body", "br", "center", "code", "dd", "div", "dl", "dt", "em", "embed",
    "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "i", "img", "li", "listing", "main", "meta", "nobr",
    "ol", "p", "pre", "ruby", "s", "small", "span", "strong", "strike", "sub", "sup", "table", "tt", "u",
    "ul", "var"
]).forEach(function (tag) { return exports.BLACKLIST_TABLE[tag] = 1; });
var WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
var doc = typeof document === 'undefined' ? null : document;
function isWhitespace(string) {
    return WHITESPACE.test(string);
}
exports.isWhitespace = isWhitespace;
function moveNodesBefore(source, target, nextSibling) {
    var first = source.firstChild;
    var last = null;
    var current = first;
    while (current) {
        last = current;
        current = current.nextSibling;
        target.insertBefore(last, nextSibling);
    }
    return [first, last];
}
exports.moveNodesBefore = moveNodesBefore;
var DOM;
(function (DOM) {
    var TreeConstruction = (function () {
        function TreeConstruction(document) {
            this.document = document;
            this.setupUselessElement();
        }
        TreeConstruction.prototype.setupUselessElement = function () {
            this.uselessElement = this.document.createElement('div');
        };
        TreeConstruction.prototype.createElement = function (tag, context) {
            var isElementInSVGNamespace, isHTMLIntegrationPoint;
            if (context) {
                isElementInSVGNamespace = context.namespaceURI === exports.SVG_NAMESPACE || tag === 'svg';
                isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];
            }
            else {
                isElementInSVGNamespace = tag === 'svg';
                isHTMLIntegrationPoint = false;
            }
            if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
                // FIXME: This does not properly handle <font> with color, face, or
                // size attributes, which is also disallowed by the spec. We should fix
                // this.
                if (exports.BLACKLIST_TABLE[tag]) {
                    throw new Error("Cannot create a " + tag + " inside an SVG context");
                }
                return this.document.createElementNS(exports.SVG_NAMESPACE, tag);
            }
            else {
                return this.document.createElement(tag);
            }
        };
        TreeConstruction.prototype.createElementNS = function (namespace, tag) {
            return this.document.createElementNS(namespace, tag);
        };
        TreeConstruction.prototype.setAttribute = function (element, name, value, namespace) {
            if (namespace) {
                element.setAttributeNS(namespace, name, value);
            }
            else {
                element.setAttribute(name, value);
            }
        };
        TreeConstruction.prototype.createTextNode = function (text) {
            return this.document.createTextNode(text);
        };
        TreeConstruction.prototype.createComment = function (data) {
            return this.document.createComment(data);
        };
        TreeConstruction.prototype.insertBefore = function (parent, node, reference) {
            parent.insertBefore(node, reference);
        };
        TreeConstruction.prototype.insertHTMLBefore = function (parent, html, reference) {
            return insertHTMLBefore(this.uselessElement, parent, reference, html);
        };
        ;
        return TreeConstruction;
    }());
    DOM.TreeConstruction = TreeConstruction;
    var appliedTreeContruction = TreeConstruction;
    appliedTreeContruction = text_node_merging_fix_1.treeConstruction(doc, appliedTreeContruction);
    appliedTreeContruction = inner_html_fix_1.treeConstruction(doc, appliedTreeContruction);
    appliedTreeContruction = svg_inner_html_fix_1.treeConstruction(doc, appliedTreeContruction, exports.SVG_NAMESPACE);
    DOM.DOMTreeConstruction = appliedTreeContruction;
})(DOM = exports.DOM || (exports.DOM = {}));
var DOMChanges = (function () {
    function DOMChanges(document) {
        this.document = document;
        this.namespace = null;
        this.uselessElement = this.document.createElement('div');
    }
    DOMChanges.prototype.setAttribute = function (element, name, value) {
        element.setAttribute(name, value);
    };
    DOMChanges.prototype.setAttributeNS = function (element, namespace, name, value) {
        element.setAttributeNS(namespace, name, value);
    };
    DOMChanges.prototype.removeAttribute = function (element, name) {
        element.removeAttribute(name);
    };
    DOMChanges.prototype.removeAttributeNS = function (element, namespace, name) {
        element.removeAttributeNS(namespace, name);
    };
    DOMChanges.prototype.createTextNode = function (text) {
        return this.document.createTextNode(text);
    };
    DOMChanges.prototype.createComment = function (data) {
        return this.document.createComment(data);
    };
    DOMChanges.prototype.createElement = function (tag, context) {
        var isElementInSVGNamespace, isHTMLIntegrationPoint;
        if (context) {
            isElementInSVGNamespace = context.namespaceURI === exports.SVG_NAMESPACE || tag === 'svg';
            isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];
        }
        else {
            isElementInSVGNamespace = tag === 'svg';
            isHTMLIntegrationPoint = false;
        }
        if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {
            // FIXME: This does not properly handle <font> with color, face, or
            // size attributes, which is also disallowed by the spec. We should fix
            // this.
            if (exports.BLACKLIST_TABLE[tag]) {
                throw new Error("Cannot create a " + tag + " inside an SVG context");
            }
            return this.document.createElementNS(exports.SVG_NAMESPACE, tag);
        }
        else {
            return this.document.createElement(tag);
        }
    };
    DOMChanges.prototype.insertHTMLBefore = function (_parent, nextSibling, html) {
        return insertHTMLBefore(this.uselessElement, _parent, nextSibling, html);
    };
    DOMChanges.prototype.insertNodeBefore = function (parent, node, reference) {
        if (isDocumentFragment(node)) {
            var firstChild = node.firstChild, lastChild = node.lastChild;
            this.insertBefore(parent, node, reference);
            return new bounds_1.ConcreteBounds(parent, firstChild, lastChild);
        }
        else {
            this.insertBefore(parent, node, reference);
            return new bounds_1.SingleNodeBounds(parent, node);
        }
    };
    DOMChanges.prototype.insertTextBefore = function (parent, nextSibling, text) {
        var textNode = this.createTextNode(text);
        this.insertBefore(parent, textNode, nextSibling);
        return textNode;
    };
    DOMChanges.prototype.insertBefore = function (element, node, reference) {
        element.insertBefore(node, reference);
    };
    DOMChanges.prototype.insertAfter = function (element, node, reference) {
        this.insertBefore(element, node, reference.nextSibling);
    };
    return DOMChanges;
}());
exports.DOMChanges = DOMChanges;
function insertHTMLBefore(_useless, _parent, _nextSibling, html) {
    // TypeScript vendored an old version of the DOM spec where `insertAdjacentHTML`
    // only exists on `HTMLElement` but not on `Element`. We actually work with the
    // newer version of the DOM API here (and monkey-patch this method in `./compat`
    // when we detect older browsers). This is a hack to work around this limitation.
    var parent = _parent;
    var useless = _useless;
    var nextSibling = _nextSibling;
    var prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
    var last;
    if (html === null || html === '') {
        return new bounds_1.ConcreteBounds(parent, null, null);
    }
    if (nextSibling === null) {
        parent.insertAdjacentHTML('beforeEnd', html);
        last = parent.lastChild;
    }
    else if (nextSibling instanceof HTMLElement) {
        nextSibling.insertAdjacentHTML('beforeBegin', html);
        last = nextSibling.previousSibling;
    }
    else {
        // Non-element nodes do not support insertAdjacentHTML, so add an
        // element and call it on that element. Then remove the element.
        //
        // This also protects Edge, IE and Firefox w/o the inspector open
        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
        parent.insertBefore(useless, nextSibling);
        useless.insertAdjacentHTML('beforeBegin', html);
        last = useless.previousSibling;
        parent.removeChild(useless);
    }
    var first = prev ? prev.nextSibling : parent.firstChild;
    return new bounds_1.ConcreteBounds(parent, first, last);
}
exports.insertHTMLBefore = insertHTMLBefore;
function isDocumentFragment(node) {
    return node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;
}
var helper = DOMChanges;
helper = text_node_merging_fix_1.domChanges(doc, helper);
helper = inner_html_fix_1.domChanges(doc, helper);
helper = svg_inner_html_fix_1.domChanges(doc, helper, exports.SVG_NAMESPACE);
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = helper;
exports.DOMTreeConstruction = DOM.DOMTreeConstruction;
var interfaces_1 = require("./interfaces");
exports.DOMNamespace = interfaces_1.Namespace;
//# sourceMappingURL=data:application/json;base64,