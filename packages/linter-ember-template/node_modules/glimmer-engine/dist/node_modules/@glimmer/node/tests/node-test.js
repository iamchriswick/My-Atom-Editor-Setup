"use strict";
var SimpleDOM = require("simple-dom");
var test_helpers_1 = require("@glimmer/test-helpers");
var compiler_1 = require("@glimmer/compiler");
var object_reference_1 = require("@glimmer/object-reference");
var node_1 = require("@glimmer/node");
var voidMap = SimpleDOM.voidMap;
var serializer = new SimpleDOM.HTMLSerializer(voidMap);
// const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
// const XLINK_NAMESPACE = 'http://www.w3.org/1999/xlink';
// const XHTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var env, root;
var helper;
var doc;
function compile(template) {
    return env.compile(template);
}
function rootElement() {
    return env.getAppendOperations().createElement('div');
}
function commonSetup() {
    doc = new SimpleDOM.Document();
    helper = new node_1.NodeDOMTreeConstruction(doc);
    env = new test_helpers_1.TestEnvironment({
        document: doc,
        appendOperations: helper
    });
    root = rootElement();
}
function render(template, self) {
    var result;
    env.begin();
    result = template.render(new object_reference_1.UpdatableReference(self), root, new test_helpers_1.TestDynamicScope());
    env.commit();
    return result;
}
function module(name) {
    return QUnit.module(name, {
        beforeEach: function () { commonSetup(); }
    });
}
module("Server-side rendering in Node.js");
QUnit.test("HTML text content", function (assert) {
    var template = compile("content");
    render(template, {});
    assert.equal(serializer.serializeChildren(root), 'content');
});
QUnit.test("HTML tags", function (assert) {
    var template = compile("<h1>hello!</h1><div>content</div>");
    render(template, {});
    assert.equal(serializer.serializeChildren(root), "<h1>hello!</h1><div>content</div>");
});
QUnit.test("HTML tags re-rendered", function (assert) {
    var template = compile("<h1>hello!</h1><div>content</div>");
    var result = render(template, {});
    env.begin();
    result.rerender();
    env.commit();
    assert.equal(serializer.serializeChildren(root), "<h1>hello!</h1><div>content</div>");
});
QUnit.test("HTML attributes", function (assert) {
    var template = compile("<div id='bar' class='foo'>content</div>");
    render(template, {});
    assert.equal(serializer.serializeChildren(root), '<div id="bar" class="foo">content</div>');
});
QUnit.test("HTML tag with empty attribute", function (assert) {
    var template = compile("<div class=''>content</div>");
    render(template, {});
    assert.equal(serializer.serializeChildren(root), "<div class>content</div>");
});
QUnit.test("HTML boolean attribute 'disabled'", function (assert) {
    var template = compile('<input disabled>');
    render(template, {});
    assert.equal(serializer.serializeChildren(root), '<input disabled>', 'disabled without value set as property is true');
});
QUnit.skip("Quoted attribute expression is coerced to a string", function (assert) {
    var template = compile('<input disabled="{{isDisabled}}">');
    render(template, { isDisabled: null });
    assert.equal(serializer.serializeChildren(root), '<input disabled="null">', 'string of "null" set as property');
});
QUnit.test("Unquoted attribute expression with null value is not coerced", function (assert) {
    var template = compile('<input disabled={{isDisabled}}>');
    render(template, { isDisabled: null });
    assert.equal(serializer.serializeChildren(root), '<input>');
});
QUnit.test("Attribute expression can be followed by another attribute", function (assert) {
    var template = compile('<div foo="{{funstuff}}" name="Alice"></div>');
    render(template, { funstuff: "oh my" });
    assert.equal(serializer.serializeChildren(root), '<div foo="oh my" name="Alice"></div>');
});
QUnit.test("HTML tag with data- attribute", function (assert) {
    var template = compile("<div data-some-data='foo'>content</div>");
    render(template, {});
    assert.ok(serializer.serializeChildren(root), '<div data-some-data="foo">content</div>');
});
QUnit.test("The compiler can handle nesting", function (assert) {
    var html = '<div class="foo"><p><span id="bar" data-foo="bar">hi!</span></p></div>&nbsp;More content';
    var template = compile(html);
    render(template, {});
    // Note that the space after the closing div tag is a non-breaking space (Unicode 0xA0)
    assert.equal(serializer.serializeChildren(root), '<div class="foo"><p><span id="bar" data-foo="bar">hi!</span></p></div>Â More content');
});
QUnit.test("The compiler can handle comments", function (assert) {
    var html = '<div><!-- Just passing through --></div>';
    var template = compile(html);
    render(template, {});
    assert.equal(serializer.serializeChildren(root), html);
});
QUnit.test("The compiler can handle HTML comments with mustaches in them", function (assert) {
    var template = compile('<div><!-- {{foo}} --></div>');
    render(template, { foo: 'bar' });
    assert.equal(serializer.serializeChildren(root), '<div><!-- {{foo}} --></div>');
});
QUnit.test("The compiler can handle HTML comments with complex mustaches in them", function (assert) {
    var template = compile('<div><!-- {{foo bar baz}} --></div>');
    render(template, { foo: 'bar' });
    assert.equal(serializer.serializeChildren(root), '<div><!-- {{foo bar baz}} --></div>');
});
QUnit.test("The compiler can handle HTML comments with multi-line mustaches in them", function (assert) {
    var html = '<div><!-- {{#each foo as |bar|}}\n{{bar}}\n\n{{/each}} --></div>';
    var template = compile(html);
    render(template, { foo: 'bar' });
    assert.equal(serializer.serializeChildren(root), html);
});
QUnit.test("The compiler can handle comments with no parent element", function (assert) {
    var html = '<!-- {{foo}} -->';
    var template = compile(html);
    render(template, { foo: 'bar' });
    assert.equal(serializer.serializeChildren(root), html);
});
QUnit.test("The compiler can handle simple handlebars", function (assert) {
    var template = compile('<div>{{title}}</div>');
    render(template, { title: 'hello' });
    assert.equal(serializer.serializeChildren(root), '<div>hello</div>');
});
QUnit.test("The compiler can handle escaping HTML", function (assert) {
    var template = compile('<div>{{title}}</div>');
    render(template, { title: '<strong>hello</strong>' });
    assert.equal(serializer.serializeChildren(root), '<div>&lt;strong&gt;hello&lt;/strong&gt;</div>');
});
QUnit.test("The compiler can handle unescaped HTML", function (assert) {
    var template = compile('<div>{{{title}}}</div>');
    render(template, { title: '<strong>hello</strong>' });
    assert.equal(serializer.serializeChildren(root), '<div><strong>hello</strong></div>');
});
QUnit.test("Unescaped helpers render correctly", function (assert) {
    env.registerHelper('testing-unescaped', function (params) {
        return params[0];
    });
    var escapedTemplate = compile('{{{testing-unescaped "<span>hi</span>"}}}');
    render(escapedTemplate, {});
    assert.equal(serializer.serialize(root), '<div><span>hi</span></div>');
});
QUnit.test('Null literals do not have representation in DOM', function (assert) {
    var template = compile('{{null}}');
    render(template, {});
    assert.equal(serializer.serialize(root), '<div></div>');
});
QUnit.test("Attributes can be populated with helpers that generate a string", function (assert) {
    env.registerHelper('testing', function (params) {
        return params[0];
    });
    var escapedTemplate = compile('<a href="{{testing url}}">linky</a>');
    render(escapedTemplate, { url: 'linky.html' });
    assert.equal(serializer.serialize(root), '<div><a href="linky.html">linky</a></div>');
});
QUnit.test("Elements inside a yielded block", function (assert) {
    var template = compile('{{#if true}}<div id="test">123</div>{{/if}}');
    render(template, {});
    assert.equal(serializer.serialize(root), '<div><div id="test">123</div></div>');
});
QUnit.test("A simple block helper can return text", function (assert) {
    var template = compile('{{#if true}}test{{else}}not shown{{/if}}');
    render(template, {});
    assert.equal(serializer.serialize(root), '<div>test</div>');
});
QUnit.test('can instantiate NodeDOMTreeConstruction without a document', function (assert) {
    // this emulates what happens in Ember when using `App.visit('/', { shouldRender: false });`
    helper = new node_1.NodeDOMTreeConstruction(null);
    assert.ok(!!helper, 'helper was instantiated without errors');
});
QUnit.test("SVG: basic element", function (assert) {
    var template = "\n    <svg xmlns=\"http://www.w3.org/2000/svg\">\n      <rect x=\"10\" y=\"10\" height=\"100\" width=\"100\" style=\"stroke:#ff0000; fill: #0000ff\"></rect>\n    </svg>\n  ";
    render(compile(template), {});
    assert.equal(serializer.serializeChildren(root), template);
});
QUnit.test("SVG: element with xlink:href", function (assert) {
    var template = "\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n      <rect x=\".01\" y=\".01\" width=\"4.98\" height=\"2.98\" fill=\"none\" stroke=\"blue\" stroke-width=\".03\"></rect>\n      <a xlink:href=\"http://www.w3.org\">\n        <ellipse cx=\"2.5\" cy=\"1.5\" rx=\"2\" ry=\"1\" fill=\"red\"></ellipse>\n      </a>\n    </svg>\n  ";
    render(compile(template), {});
    assert.equal(serializer.serializeChildren(root), template);
});
module('default template id');
QUnit.test('generates id in node', function (assert) {
    var template = compiler_1.precompile('hello');
    var obj = JSON.parse(template);
    assert.equal(obj.id, 'ZDHnvwb1', 'short sha of template source');
    template = compiler_1.precompile('hello', { meta: { moduleName: 'template/hello' } });
    obj = JSON.parse(template);
    assert.equal(obj.id, 'mQsxG3uR', 'short sha of template source and meta');
});
//# sourceMappingURL=data:application/json;base64,