"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var util_1 = require("@glimmer/util");
var util_2 = require("@glimmer/util");
var wire_format_1 = require("@glimmer/wire-format");
var Block = (function () {
    function Block() {
        this.type = "block";
        this.statements = [];
        this.positionals = [];
    }
    Block.prototype.toJSON = function () {
        return {
            statements: this.statements,
            locals: this.positionals
        };
    };
    Block.prototype.push = function (statement) {
        this.statements.push(statement);
    };
    return Block;
}());
exports.Block = Block;
var TemplateBlock = (function (_super) {
    __extends(TemplateBlock, _super);
    function TemplateBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "template";
        _this.yields = new util_2.DictSet();
        _this.named = new util_2.DictSet();
        _this.blocks = [];
        _this.hasPartials = false;
        return _this;
    }
    TemplateBlock.prototype.toJSON = function () {
        return {
            statements: this.statements,
            locals: this.positionals,
            named: this.named.toArray(),
            yields: this.yields.toArray(),
            hasPartials: this.hasPartials
        };
    };
    return TemplateBlock;
}(Block));
exports.TemplateBlock = TemplateBlock;
var ComponentBlock = (function (_super) {
    __extends(ComponentBlock, _super);
    function ComponentBlock() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "component";
        _this.attributes = [];
        _this.arguments = [];
        _this.inParams = true;
        return _this;
    }
    ComponentBlock.prototype.push = function (statement) {
        if (this.inParams) {
            if (wire_format_1.Statements.isFlushElement(statement)) {
                this.inParams = false;
            }
            else if (wire_format_1.Statements.isArgument(statement)) {
                this.arguments.push(statement);
            }
            else if (wire_format_1.Statements.isAttribute(statement)) {
                this.attributes.push(statement);
            }
            else if (wire_format_1.Statements.isModifier(statement)) {
                throw new Error('Compile Error: Element modifiers are not allowed in components');
            }
            else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        }
        else {
            this.statements.push(statement);
        }
    };
    ComponentBlock.prototype.toJSON = function () {
        var args = this.arguments;
        var keys = args.map(function (arg) { return arg[1]; });
        var values = args.map(function (arg) { return arg[2]; });
        return {
            attrs: this.attributes,
            args: [keys, values],
            locals: this.positionals,
            statements: this.statements
        };
    };
    return ComponentBlock;
}(Block));
exports.ComponentBlock = ComponentBlock;
var Template = (function () {
    function Template(meta) {
        this.meta = meta;
        this.block = new TemplateBlock();
    }
    Template.prototype.toJSON = function () {
        return {
            block: this.block.toJSON(),
            meta: this.meta
        };
    };
    return Template;
}());
exports.Template = Template;
var JavaScriptCompiler = (function () {
    function JavaScriptCompiler(opcodes, meta) {
        this.blocks = new util_2.Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(meta);
    }
    JavaScriptCompiler.process = function (opcodes, meta) {
        var compiler = new JavaScriptCompiler(opcodes, meta);
        return compiler.process();
    };
    JavaScriptCompiler.prototype.process = function () {
        var _this = this;
        this.opcodes.forEach(function (_a) {
            var opcode = _a[0], args = _a.slice(1);
            if (!_this[opcode]) {
                throw new Error("unimplemented " + opcode + " on JavaScriptCompiler");
            }
            _this[opcode].apply(_this, args);
        });
        return this.template;
    };
    /// Nesting
    JavaScriptCompiler.prototype.startBlock = function (_a) {
        var program = _a[0];
        var block = new Block();
        block.positionals = program.blockParams;
        this.blocks.push(block);
    };
    JavaScriptCompiler.prototype.endBlock = function () {
        var _a = this, template = _a.template, blocks = _a.blocks;
        template.block.blocks.push(blocks.pop().toJSON());
    };
    JavaScriptCompiler.prototype.startProgram = function () {
        this.blocks.push(this.template.block);
    };
    JavaScriptCompiler.prototype.endProgram = function () {
    };
    /// Statements
    JavaScriptCompiler.prototype.text = function (content) {
        this.push(['text', content]);
    };
    JavaScriptCompiler.prototype.append = function (trusted) {
        this.push(['append', this.popValue(), trusted]);
    };
    JavaScriptCompiler.prototype.comment = function (value) {
        this.push(['comment', value]);
    };
    JavaScriptCompiler.prototype.modifier = function (path) {
        var params = this.popValue();
        var hash = this.popValue();
        this.push(['modifier', path, params, hash]);
    };
    JavaScriptCompiler.prototype.block = function (path, template, inverse) {
        var params = this.popValue();
        var hash = this.popValue();
        var blocks = this.template.block.blocks;
        util_1.assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        util_1.assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');
        this.push(['block', path, params, hash, blocks[template], blocks[inverse]]);
    };
    JavaScriptCompiler.prototype.openElement = function (tag, blockParams) {
        if (tag.indexOf('-') !== -1) {
            this.startComponent(blockParams);
        }
        else {
            this.push(['open-element', tag, blockParams]);
        }
    };
    JavaScriptCompiler.prototype.flushElement = function () {
        this.push(['flush-element']);
    };
    JavaScriptCompiler.prototype.closeElement = function (tag) {
        if (tag.indexOf('-') !== -1) {
            var component = this.endComponent();
            this.push(['component', tag, component]);
        }
        else {
            this.push(['close-element']);
        }
    };
    JavaScriptCompiler.prototype.staticAttr = function (name, namespace) {
        var value = this.popValue();
        this.push(['static-attr', name, value, namespace]);
    };
    JavaScriptCompiler.prototype.dynamicAttr = function (name, namespace) {
        var value = this.popValue();
        this.push(['dynamic-attr', name, value, namespace]);
    };
    JavaScriptCompiler.prototype.trustingAttr = function (name, namespace) {
        var value = this.popValue();
        this.push(['trusting-attr', name, value, namespace]);
    };
    JavaScriptCompiler.prototype.staticArg = function (name) {
        var value = this.popValue();
        this.push(['static-arg', name.slice(1), value]);
    };
    JavaScriptCompiler.prototype.dynamicArg = function (name) {
        var value = this.popValue();
        this.push(['dynamic-arg', name.slice(1), value]);
    };
    JavaScriptCompiler.prototype.yield = function (to) {
        var params = this.popValue();
        this.push(['yield', to, params]);
        this.template.block.yields.add(to);
    };
    JavaScriptCompiler.prototype.debugger = function () {
        this.push(['debugger', null, null]);
    };
    JavaScriptCompiler.prototype.hasBlock = function (name) {
        this.pushValue(['has-block', name]);
        this.template.block.yields.add(name);
    };
    JavaScriptCompiler.prototype.hasBlockParams = function (name) {
        this.pushValue(['has-block-params', name]);
        this.template.block.yields.add(name);
    };
    JavaScriptCompiler.prototype.partial = function () {
        var params = this.popValue();
        this.push(['partial', params[0]]);
        this.template.block.hasPartials = true;
    };
    /// Expressions
    JavaScriptCompiler.prototype.literal = function (value) {
        if (value === undefined) {
            this.pushValue(['undefined']);
        }
        else {
            this.pushValue(value);
        }
    };
    JavaScriptCompiler.prototype.unknown = function (path) {
        this.pushValue(['unknown', path]);
    };
    JavaScriptCompiler.prototype.arg = function (path) {
        this.template.block.named.add(path[0]);
        this.pushValue(['arg', path]);
    };
    JavaScriptCompiler.prototype.get = function (path) {
        this.pushValue(['get', path]);
    };
    JavaScriptCompiler.prototype.concat = function () {
        this.pushValue(['concat', this.popValue()]);
    };
    JavaScriptCompiler.prototype.helper = function (path) {
        var params = this.popValue();
        var hash = this.popValue();
        this.pushValue(['helper', path, params, hash]);
    };
    /// Stack Management Opcodes
    JavaScriptCompiler.prototype.startComponent = function (blockParams) {
        var component = new ComponentBlock();
        component.positionals = blockParams;
        this.blocks.push(component);
    };
    JavaScriptCompiler.prototype.endComponent = function () {
        var component = this.blocks.pop();
        util_1.assert(component.type === 'component', "Compiler bug: endComponent() should end a component");
        return component.toJSON();
    };
    JavaScriptCompiler.prototype.prepareArray = function (size) {
        var values = [];
        for (var i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    };
    JavaScriptCompiler.prototype.prepareObject = function (size) {
        util_1.assert(this.values.length >= size, "Expected " + size + " values on the stack, found " + this.values.length);
        var keys = new Array(size);
        var values = new Array(size);
        for (var i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    };
    /// Utilities
    JavaScriptCompiler.prototype.push = function (args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.blocks.current.push(args);
    };
    JavaScriptCompiler.prototype.pushValue = function (val) {
        this.values.push(val);
    };
    JavaScriptCompiler.prototype.popValue = function () {
        util_1.assert(this.values.length, "No expression found on stack");
        return this.values.pop();
    };
    return JavaScriptCompiler;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = JavaScriptCompiler;
//# sourceMappingURL=data:application/json;base64,