"use strict";
var syntax_1 = require("@glimmer/syntax");
var compiler_1 = require("@glimmer/compiler");
function actionsEqual(input, expectedActions) {
    var ast = syntax_1.preprocess(input);
    var templateVisitor = new compiler_1.TemplateVisitor();
    templateVisitor.visit(ast);
    var actualActions = templateVisitor.actions;
    // Remove the AST node reference from the actions to keep tests leaner
    for (var i = 0; i < actualActions.length; i++) {
        actualActions[i][1].shift();
    }
    deepEqual(actualActions, expectedActions);
}
QUnit.module("TemplateVisitor");
test("empty", function () {
    var input = "";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['endProgram', [0]]
    ]);
});
test("basic", function () {
    var input = "foo{{bar}}<div></div>";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['text', [0, 3]],
        ['mustache', [1, 3]],
        ['openElement', [2, 3, 0, []]],
        ['closeElement', [2, 3]],
        ['endProgram', [0]]
    ]);
});
test("nested HTML", function () {
    var input = "<a></a><a><a><a></a></a></a>";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['openElement', [0, 2, 0, []]],
        ['closeElement', [0, 2]],
        ['openElement', [1, 2, 0, []]],
        ['openElement', [0, 1, 0, []]],
        ['openElement', [0, 1, 0, []]],
        ['closeElement', [0, 1]],
        ['closeElement', [0, 1]],
        ['closeElement', [1, 2]],
        ['endProgram', [0]]
    ]);
});
test("mustaches are counted correctly", function () {
    var input = "<a><a>{{foo}}</a><a {{foo}}><a>{{foo}}</a><a>{{foo}}</a></a></a>";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['openElement', [0, 1, 2, []]],
        ['openElement', [0, 2, 1, []]],
        ['mustache', [0, 1]],
        ['closeElement', [0, 2]],
        ['openElement', [1, 2, 3, []]],
        ['openElement', [0, 2, 1, []]],
        ['mustache', [0, 1]],
        ['closeElement', [0, 2]],
        ['openElement', [1, 2, 1, []]],
        ['mustache', [0, 1]],
        ['closeElement', [1, 2]],
        ['closeElement', [1, 2]],
        ['closeElement', [0, 1]],
        ['endProgram', [0]]
    ]);
});
test("empty block", function () {
    var input = "{{#a}}{{/a}}";
    actionsEqual(input, [
        ['startBlock', [0, []]],
        ['endBlock', [1]],
        ['startProgram', [1, []]],
        ['block', [0, 1]],
        ['endProgram', [0]]
    ]);
});
test("block with inverse", function () {
    var input = "{{#a}}b{{^}}{{/a}}";
    actionsEqual(input, [
        ['startBlock', [0, []]],
        ['endBlock', [1]],
        ['startBlock', [0, []]],
        ['text', [0, 1]],
        ['endBlock', [1]],
        ['startProgram', [2, []]],
        ['block', [0, 1]],
        ['endProgram', [0]]
    ]);
});
test("nested blocks", function () {
    var input = "{{#a}}{{#a}}<b></b>{{/a}}{{#a}}{{b}}{{/a}}{{/a}}{{#a}}b{{/a}}";
    actionsEqual(input, [
        ['startBlock', [0, []]],
        ['text', [0, 1]],
        ['endBlock', [1]],
        ['startBlock', [0, []]],
        ['mustache', [0, 1]],
        ['endBlock', [2]],
        ['startBlock', [0, []]],
        ['openElement', [0, 1, 0, []]],
        ['closeElement', [0, 1]],
        ['endBlock', [2]],
        ['startBlock', [2, []]],
        ['block', [0, 2]],
        ['block', [1, 2]],
        ['endBlock', [1]],
        ['startProgram', [2, []]],
        ['block', [0, 2]],
        ['block', [1, 2]],
        ['endProgram', [0]]
    ]);
});
test("comment", function () {
    var input = "<!-- some comment -->";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['comment', [0, 1]],
        ['endProgram', [0]]
    ]);
});
test("handlebars comment", function () {
    var input = "{{! some comment }}";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['endProgram', [0]]
    ]);
});
test("handlebars comment in element space", function () {
    var input = "<div {{! some comment }}></div>";
    actionsEqual(input, [
        ['startProgram', [0, []]],
        ['openElement', [0, 1, 0, []]],
        ['closeElement', [0, 1]],
        ['endProgram', [0]]
    ]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUtdmlzaXRvci1ub2RlLXRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9jb21waWxlci90ZXN0cy90ZW1wbGF0ZS12aXNpdG9yLW5vZGUtdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQTZDO0FBQzdDLDhDQUFvRDtBQUVwRCxzQkFBc0IsS0FBSyxFQUFFLGVBQWU7SUFDMUMsSUFBSSxHQUFHLEdBQUcsbUJBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1QixJQUFJLGVBQWUsR0FBRyxJQUFJLDBCQUFlLEVBQUUsQ0FBQztJQUM1QyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLElBQUksYUFBYSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFFNUMsc0VBQXNFO0lBQ3RFLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzlDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsU0FBUyxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRWhDLElBQUksQ0FBQyxPQUFPLEVBQUU7SUFDWixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDZixZQUFZLENBQUMsS0FBSyxFQUFFO1FBQ2xCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsT0FBTyxFQUFFO0lBQ1osSUFBSSxLQUFLLEdBQUcsdUJBQXVCLENBQUM7SUFDcEMsWUFBWSxDQUFDLEtBQUssRUFBRTtRQUNsQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNoQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsYUFBYSxFQUFFO0lBQ2xCLElBQUksS0FBSyxHQUFHLDhCQUE4QixDQUFDO0lBQzNDLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFDbEIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGlDQUFpQyxFQUFFO0lBQ3RDLElBQUksS0FBSyxHQUFHLGtFQUFrRSxDQUFDO0lBQy9FLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFDbEIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4QixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsYUFBYSxFQUFFO0lBQ2xCLElBQUksS0FBSyxHQUFHLGNBQWMsQ0FBQztJQUMzQixZQUFZLENBQUMsS0FBSyxFQUFFO1FBQ2xCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNwQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxvQkFBb0IsRUFBRTtJQUN6QixJQUFJLEtBQUssR0FBRyxvQkFBb0IsQ0FBQztJQUNqQyxZQUFZLENBQUMsS0FBSyxFQUFFO1FBQ2xCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDaEIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGVBQWUsRUFBRTtJQUNwQixJQUFJLEtBQUssR0FBRywrREFBK0QsQ0FBQztJQUM1RSxZQUFZLENBQUMsS0FBSyxFQUFFO1FBQ2xCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN2QixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdkIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQixDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFNBQVMsRUFBRTtJQUNkLElBQUksS0FBSyxHQUFHLHVCQUF1QixDQUFDO0lBQ3BDLFlBQVksQ0FBQyxLQUFLLEVBQUU7UUFDbEIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekIsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbkIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNwQixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxvQkFBb0IsRUFBRTtJQUN6QixJQUFJLEtBQUssR0FBRyxxQkFBcUIsQ0FBQztJQUNsQyxZQUFZLENBQUMsS0FBSyxFQUFFO1FBQ2xCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMscUNBQXFDLEVBQUU7SUFDMUMsSUFBSSxLQUFLLEdBQUcsaUNBQWlDLENBQUM7SUFDOUMsWUFBWSxDQUFDLEtBQUssRUFBRTtRQUNsQixDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QixDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmVwcm9jZXNzIH0gZnJvbSBcIkBnbGltbWVyL3N5bnRheFwiO1xuaW1wb3J0IHsgVGVtcGxhdGVWaXNpdG9yIH0gZnJvbSBcIkBnbGltbWVyL2NvbXBpbGVyXCI7XG5cbmZ1bmN0aW9uIGFjdGlvbnNFcXVhbChpbnB1dCwgZXhwZWN0ZWRBY3Rpb25zKSB7XG4gIGxldCBhc3QgPSBwcmVwcm9jZXNzKGlucHV0KTtcblxuICBsZXQgdGVtcGxhdGVWaXNpdG9yID0gbmV3IFRlbXBsYXRlVmlzaXRvcigpO1xuICB0ZW1wbGF0ZVZpc2l0b3IudmlzaXQoYXN0KTtcbiAgbGV0IGFjdHVhbEFjdGlvbnMgPSB0ZW1wbGF0ZVZpc2l0b3IuYWN0aW9ucztcblxuICAvLyBSZW1vdmUgdGhlIEFTVCBub2RlIHJlZmVyZW5jZSBmcm9tIHRoZSBhY3Rpb25zIHRvIGtlZXAgdGVzdHMgbGVhbmVyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYWN0dWFsQWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGFjdHVhbEFjdGlvbnNbaV1bMV0uc2hpZnQoKTtcbiAgfVxuXG4gIGRlZXBFcXVhbChhY3R1YWxBY3Rpb25zLCBleHBlY3RlZEFjdGlvbnMpO1xufVxuXG5RVW5pdC5tb2R1bGUoXCJUZW1wbGF0ZVZpc2l0b3JcIik7XG5cbnRlc3QoXCJlbXB0eVwiLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlucHV0ID0gXCJcIjtcbiAgYWN0aW9uc0VxdWFsKGlucHV0LCBbXG4gICAgWydzdGFydFByb2dyYW0nLCBbMCwgW11dXSxcbiAgICBbJ2VuZFByb2dyYW0nLCBbMF1dXG4gIF0pO1xufSk7XG5cbnRlc3QoXCJiYXNpY1wiLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlucHV0ID0gXCJmb297e2Jhcn19PGRpdj48L2Rpdj5cIjtcbiAgYWN0aW9uc0VxdWFsKGlucHV0LCBbXG4gICAgWydzdGFydFByb2dyYW0nLCBbMCwgW11dXSxcbiAgICBbJ3RleHQnLCBbMCwgM11dLFxuICAgIFsnbXVzdGFjaGUnLCBbMSwgM11dLFxuICAgIFsnb3BlbkVsZW1lbnQnLCBbMiwgMywgMCwgW11dXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFsyLCAzXV0sXG4gICAgWydlbmRQcm9ncmFtJywgWzBdXVxuICBdKTtcbn0pO1xuXG50ZXN0KFwibmVzdGVkIEhUTUxcIiwgZnVuY3Rpb24oKSB7XG4gIGxldCBpbnB1dCA9IFwiPGE+PC9hPjxhPjxhPjxhPjwvYT48L2E+PC9hPlwiO1xuICBhY3Rpb25zRXF1YWwoaW5wdXQsIFtcbiAgICBbJ3N0YXJ0UHJvZ3JhbScsIFswLCBbXV1dLFxuICAgIFsnb3BlbkVsZW1lbnQnLCBbMCwgMiwgMCwgW11dXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFswLCAyXV0sXG4gICAgWydvcGVuRWxlbWVudCcsIFsxLCAyLCAwLCBbXV1dLFxuICAgIFsnb3BlbkVsZW1lbnQnLCBbMCwgMSwgMCwgW11dXSxcbiAgICBbJ29wZW5FbGVtZW50JywgWzAsIDEsIDAsIFtdXV0sXG4gICAgWydjbG9zZUVsZW1lbnQnLCBbMCwgMV1dLFxuICAgIFsnY2xvc2VFbGVtZW50JywgWzAsIDFdXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFsxLCAyXV0sXG4gICAgWydlbmRQcm9ncmFtJywgWzBdXVxuICBdKTtcbn0pO1xuXG50ZXN0KFwibXVzdGFjaGVzIGFyZSBjb3VudGVkIGNvcnJlY3RseVwiLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlucHV0ID0gXCI8YT48YT57e2Zvb319PC9hPjxhIHt7Zm9vfX0+PGE+e3tmb299fTwvYT48YT57e2Zvb319PC9hPjwvYT48L2E+XCI7XG4gIGFjdGlvbnNFcXVhbChpbnB1dCwgW1xuICAgIFsnc3RhcnRQcm9ncmFtJywgWzAsIFtdXV0sXG4gICAgWydvcGVuRWxlbWVudCcsIFswLCAxLCAyLCBbXV1dLFxuICAgIFsnb3BlbkVsZW1lbnQnLCBbMCwgMiwgMSwgW11dXSxcbiAgICBbJ211c3RhY2hlJywgWzAsIDFdXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFswLCAyXV0sXG4gICAgWydvcGVuRWxlbWVudCcsIFsxLCAyLCAzLCBbXV1dLFxuICAgIFsnb3BlbkVsZW1lbnQnLCBbMCwgMiwgMSwgW11dXSxcbiAgICBbJ211c3RhY2hlJywgWzAsIDFdXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFswLCAyXV0sXG4gICAgWydvcGVuRWxlbWVudCcsIFsxLCAyLCAxLCBbXV1dLFxuICAgIFsnbXVzdGFjaGUnLCBbMCwgMV1dLFxuICAgIFsnY2xvc2VFbGVtZW50JywgWzEsIDJdXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFsxLCAyXV0sXG4gICAgWydjbG9zZUVsZW1lbnQnLCBbMCwgMV1dLFxuICAgIFsnZW5kUHJvZ3JhbScsIFswXV1cbiAgXSk7XG59KTtcblxudGVzdChcImVtcHR5IGJsb2NrXCIsIGZ1bmN0aW9uKCkge1xuICBsZXQgaW5wdXQgPSBcInt7I2F9fXt7L2F9fVwiO1xuICBhY3Rpb25zRXF1YWwoaW5wdXQsIFtcbiAgICBbJ3N0YXJ0QmxvY2snLCBbMCwgW11dXSxcbiAgICBbJ2VuZEJsb2NrJywgWzFdXSxcbiAgICBbJ3N0YXJ0UHJvZ3JhbScsIFsxLCBbXV1dLFxuICAgIFsnYmxvY2snLCBbMCwgMV1dLFxuICAgIFsnZW5kUHJvZ3JhbScsIFswXV1cbiAgXSk7XG59KTtcblxudGVzdChcImJsb2NrIHdpdGggaW52ZXJzZVwiLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlucHV0ID0gXCJ7eyNhfX1ie3tefX17ey9hfX1cIjtcbiAgYWN0aW9uc0VxdWFsKGlucHV0LCBbXG4gICAgWydzdGFydEJsb2NrJywgWzAsIFtdXV0sXG4gICAgWydlbmRCbG9jaycsIFsxXV0sXG4gICAgWydzdGFydEJsb2NrJywgWzAsIFtdXV0sXG4gICAgWyd0ZXh0JywgWzAsIDFdXSxcbiAgICBbJ2VuZEJsb2NrJywgWzFdXSxcbiAgICBbJ3N0YXJ0UHJvZ3JhbScsIFsyLCBbXV1dLFxuICAgIFsnYmxvY2snLCBbMCwgMV1dLFxuICAgIFsnZW5kUHJvZ3JhbScsIFswXV1cbiAgXSk7XG59KTtcblxudGVzdChcIm5lc3RlZCBibG9ja3NcIiwgZnVuY3Rpb24oKSB7XG4gIGxldCBpbnB1dCA9IFwie3sjYX19e3sjYX19PGI+PC9iPnt7L2F9fXt7I2F9fXt7Yn19e3svYX19e3svYX19e3sjYX19Ynt7L2F9fVwiO1xuICBhY3Rpb25zRXF1YWwoaW5wdXQsIFtcbiAgICBbJ3N0YXJ0QmxvY2snLCBbMCwgW11dXSxcbiAgICBbJ3RleHQnLCBbMCwgMV1dLFxuICAgIFsnZW5kQmxvY2snLCBbMV1dLFxuICAgIFsnc3RhcnRCbG9jaycsIFswLCBbXV1dLFxuICAgIFsnbXVzdGFjaGUnLCBbMCwgMV1dLFxuICAgIFsnZW5kQmxvY2snLCBbMl1dLFxuICAgIFsnc3RhcnRCbG9jaycsIFswLCBbXV1dLFxuICAgIFsnb3BlbkVsZW1lbnQnLCBbMCwgMSwgMCwgW11dXSxcbiAgICBbJ2Nsb3NlRWxlbWVudCcsIFswLCAxXV0sXG4gICAgWydlbmRCbG9jaycsIFsyXV0sXG4gICAgWydzdGFydEJsb2NrJywgWzIsIFtdXV0sXG4gICAgWydibG9jaycsIFswLCAyXV0sXG4gICAgWydibG9jaycsIFsxLCAyXV0sXG4gICAgWydlbmRCbG9jaycsIFsxXV0sXG4gICAgWydzdGFydFByb2dyYW0nLCBbMiwgW11dXSxcbiAgICBbJ2Jsb2NrJywgWzAsIDJdXSxcbiAgICBbJ2Jsb2NrJywgWzEsIDJdXSxcbiAgICBbJ2VuZFByb2dyYW0nLCBbMF1dXG4gIF0pO1xufSk7XG5cbnRlc3QoXCJjb21tZW50XCIsIGZ1bmN0aW9uKCkge1xuICBsZXQgaW5wdXQgPSBcIjwhLS0gc29tZSBjb21tZW50IC0tPlwiO1xuICBhY3Rpb25zRXF1YWwoaW5wdXQsIFtcbiAgICBbJ3N0YXJ0UHJvZ3JhbScsIFswLCBbXV1dLFxuICAgIFsnY29tbWVudCcsIFswLCAxXV0sXG4gICAgWydlbmRQcm9ncmFtJywgWzBdXVxuICBdKTtcbn0pO1xuXG50ZXN0KFwiaGFuZGxlYmFycyBjb21tZW50XCIsIGZ1bmN0aW9uKCkge1xuICBsZXQgaW5wdXQgPSBcInt7ISBzb21lIGNvbW1lbnQgfX1cIjtcbiAgYWN0aW9uc0VxdWFsKGlucHV0LCBbXG4gICAgWydzdGFydFByb2dyYW0nLCBbMCwgW11dXSxcbiAgICBbJ2VuZFByb2dyYW0nLCBbMF1dXG4gIF0pO1xufSk7XG5cbnRlc3QoXCJoYW5kbGViYXJzIGNvbW1lbnQgaW4gZWxlbWVudCBzcGFjZVwiLCBmdW5jdGlvbigpIHtcbiAgbGV0IGlucHV0ID0gXCI8ZGl2IHt7ISBzb21lIGNvbW1lbnQgfX0+PC9kaXY+XCI7XG4gIGFjdGlvbnNFcXVhbChpbnB1dCwgW1xuICAgIFsnc3RhcnRQcm9ncmFtJywgWzAsIFtdXV0sXG4gICAgWydvcGVuRWxlbWVudCcsIFswLCAxLCAwLCBbXV1dLFxuICAgIFsnY2xvc2VFbGVtZW50JywgWzAsIDFdXSxcbiAgICBbJ2VuZFByb2dyYW0nLCBbMF1dXG4gIF0pO1xufSk7XG4iXX0=