"use strict";
var template_visitor_1 = require("./template-visitor");
var javascript_compiler_1 = require("./javascript-compiler");
var util_1 = require("@glimmer/util");
var util_2 = require("@glimmer/util");
function isTrustedValue(value) {
    return value.escaped !== undefined && !value.escaped;
}
var TemplateCompiler = (function () {
    function TemplateCompiler(options) {
        this.templateId = 0;
        this.templateIds = [];
        this.symbols = null;
        this.opcodes = [];
        this.includeMeta = false;
        this.options = options || {};
    }
    TemplateCompiler.compile = function (options, ast) {
        var templateVisitor = new template_visitor_1.default();
        templateVisitor.visit(ast);
        var compiler = new TemplateCompiler(options);
        var opcodes = compiler.process(templateVisitor.actions);
        return javascript_compiler_1.default.process(opcodes, options.meta);
    };
    TemplateCompiler.prototype.process = function (actions) {
        var _this = this;
        actions.forEach(function (_a) {
            var name = _a[0], args = _a.slice(1);
            if (!_this[name]) {
                throw new Error("Unimplemented " + name + " on TemplateCompiler");
            }
            _this[name].apply(_this, args);
        });
        return this.opcodes;
    };
    TemplateCompiler.prototype.startProgram = function (program) {
        this.opcode('startProgram', program, program);
    };
    TemplateCompiler.prototype.endProgram = function () {
        this.opcode('endProgram', null);
    };
    TemplateCompiler.prototype.startBlock = function (program) {
        this.symbols = program[0].symbols;
        this.templateId++;
        this.opcode('startBlock', program, program);
    };
    TemplateCompiler.prototype.endBlock = function () {
        this.symbols = null;
        this.templateIds.push(this.templateId - 1);
        this.opcode('endBlock', null);
    };
    TemplateCompiler.prototype.text = function (_a) {
        var action = _a[0];
        this.opcode('text', action, action.chars);
    };
    TemplateCompiler.prototype.comment = function (_a) {
        var action = _a[0];
        this.opcode('comment', action, action.value);
    };
    TemplateCompiler.prototype.openElement = function (_a) {
        var action = _a[0];
        this.opcode('openElement', action, action.tag, action.blockParams);
        for (var i = 0; i < action.attributes.length; i++) {
            this.attribute([action.attributes[i]]);
        }
        for (var i = 0; i < action.modifiers.length; i++) {
            this.modifier([action.modifiers[i]]);
        }
        this.opcode('flushElement', null);
    };
    TemplateCompiler.prototype.closeElement = function (_a) {
        var action = _a[0];
        this.opcode('closeElement', null, action.tag);
    };
    TemplateCompiler.prototype.attribute = function (_a) {
        var action = _a[0];
        var name = action.name, value = action.value;
        var namespace = util_1.getAttrNamespace(name);
        var isStatic = this.prepareAttributeValue(value);
        if (name.charAt(0) === '@') {
            // Arguments
            if (isStatic) {
                this.opcode('staticArg', action, name);
            }
            else if (action.value.type === 'MustacheStatement') {
                this.opcode('dynamicArg', action, name);
            }
            else {
                this.opcode('dynamicArg', action, name);
            }
        }
        else {
            var isTrusting = isTrustedValue(value);
            if (isStatic) {
                this.opcode('staticAttr', action, name, namespace);
            }
            else if (isTrusting) {
                this.opcode('trustingAttr', action, name, namespace);
            }
            else if (action.value.type === 'MustacheStatement') {
                this.opcode('dynamicAttr', action, name);
            }
            else {
                this.opcode('dynamicAttr', action, name, namespace);
            }
        }
    };
    TemplateCompiler.prototype.modifier = function (_a) {
        var action = _a[0];
        var parts = action.path.parts;
        this.prepareHelper(action);
        this.opcode('modifier', action, parts);
    };
    TemplateCompiler.prototype.mustache = function (_a) {
        var action = _a[0];
        if (isYield(action)) {
            var to = assertValidYield(action);
            this.yield(to, action);
        }
        else if (isPartial(action)) {
            var params = assertValidPartial(action);
            this.partial(params, action);
        }
        else if (isDebugger(action)) {
            assertValidDebuggerUsage(action);
            this.debugger('debugger', action);
        }
        else {
            this.mustacheExpression(action);
            this.opcode('append', action, !action.escaped);
        }
    };
    TemplateCompiler.prototype.block = function (_a) {
        var action = _a[0] /*, index, count*/;
        this.prepareHelper(action);
        var templateId = this.templateIds.pop();
        var inverseId = action.inverse === null ? null : this.templateIds.pop();
        this.opcode('block', action, action.path.parts, templateId, inverseId);
    };
    /// Internal actions, not found in the original processed actions
    TemplateCompiler.prototype.arg = function (_a) {
        var path = _a[0];
        var parts = path.parts;
        this.opcode('arg', path, parts);
    };
    TemplateCompiler.prototype.mustacheExpression = function (expr) {
        if (isBuiltInHelper(expr)) {
            this.builtInHelper(expr);
        }
        else if (isLiteral(expr)) {
            this.opcode('literal', expr, expr.path.value);
        }
        else if (isArg(expr)) {
            this.arg([expr.path]);
        }
        else if (isHelperInvocation(expr)) {
            this.prepareHelper(expr);
            this.opcode('helper', expr, expr.path.parts);
        }
        else if (isSelfGet(expr) || isLocalVariable(expr, this.symbols)) {
            this.opcode('get', expr, expr.path.parts);
        }
        else {
            this.opcode('unknown', expr, expr.path.parts);
        }
    };
    /// Internal Syntax
    TemplateCompiler.prototype.yield = function (to, action) {
        this.prepareParams(action.params);
        this.opcode('yield', action, to);
    };
    TemplateCompiler.prototype.debugger = function (name, action) {
        this.opcode('debugger', null);
    };
    TemplateCompiler.prototype.hasBlock = function (name, action) {
        this.opcode('hasBlock', action, name);
    };
    TemplateCompiler.prototype.hasBlockParams = function (name, action) {
        this.opcode('hasBlockParams', action, name);
    };
    TemplateCompiler.prototype.partial = function (params, action) {
        this.prepareParams(action.params);
        this.opcode('partial', action);
    };
    TemplateCompiler.prototype.builtInHelper = function (expr) {
        if (isHasBlock(expr)) {
            var name = assertValidHasBlockUsage(expr.path.original, expr);
            this.hasBlock(name, expr);
        }
        else if (isHasBlockParams(expr)) {
            var name = assertValidHasBlockUsage(expr.path.original, expr);
            this.hasBlockParams(name, expr);
        }
    };
    /// Expressions, invoked recursively from prepareParams and prepareHash
    TemplateCompiler.prototype.SubExpression = function (expr) {
        if (isBuiltInHelper(expr)) {
            this.builtInHelper(expr);
        }
        else {
            this.prepareHelper(expr);
            this.opcode('helper', expr, expr.path.parts);
        }
    };
    TemplateCompiler.prototype.PathExpression = function (expr) {
        if (expr.data) {
            this.arg([expr]);
        }
        else {
            this.opcode('get', expr, expr.parts);
        }
    };
    TemplateCompiler.prototype.StringLiteral = function (action) {
        this.opcode('literal', null, action.value);
    };
    TemplateCompiler.prototype.BooleanLiteral = function (action) {
        this.opcode('literal', null, action.value);
    };
    TemplateCompiler.prototype.NumberLiteral = function (action) {
        this.opcode('literal', null, action.value);
    };
    TemplateCompiler.prototype.NullLiteral = function (action) {
        this.opcode('literal', null, action.value);
    };
    TemplateCompiler.prototype.UndefinedLiteral = function (action) {
        this.opcode('literal', null, action.value);
    };
    /// Utilities
    TemplateCompiler.prototype.opcode = function (name, action) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var opcode = [name].concat(args);
        if (this.includeMeta && action) {
            opcode.push(this.meta(action));
        }
        this.opcodes.push(opcode);
    };
    TemplateCompiler.prototype.prepareHelper = function (_a) {
        var params = _a.params, hash = _a.hash;
        this.prepareHash(hash);
        this.prepareParams(params);
    };
    TemplateCompiler.prototype.preparePath = function (path) {
        this.opcode('literal', path, path.parts);
    };
    TemplateCompiler.prototype.prepareParams = function (params) {
        if (!params.length) {
            this.opcode('literal', null, null);
            return;
        }
        for (var i = params.length - 1; i >= 0; i--) {
            var param = params[i];
            util_2.assert(this[param.type], "Unimplemented " + param.type + " on TemplateCompiler");
            this[param.type](param);
        }
        this.opcode('prepareArray', null, params.length);
    };
    TemplateCompiler.prototype.prepareHash = function (hash) {
        var pairs = hash.pairs;
        if (!pairs.length) {
            this.opcode('literal', null, null);
            return;
        }
        for (var i = pairs.length - 1; i >= 0; i--) {
            var _a = pairs[i], key = _a.key, value = _a.value;
            util_2.assert(this[value.type], "Unimplemented " + value.type + " on TemplateCompiler");
            this[value.type](value);
            this.opcode('literal', null, key);
        }
        this.opcode('prepareObject', null, pairs.length);
    };
    TemplateCompiler.prototype.prepareAttributeValue = function (value) {
        // returns the static value if the value is static
        switch (value.type) {
            case 'TextNode':
                this.opcode('literal', value, value.chars);
                return true;
            case 'MustacheStatement':
                this.attributeMustache([value]);
                return false;
            case 'ConcatStatement':
                this.prepareConcatParts(value.parts);
                this.opcode('concat', value);
                return false;
        }
    };
    TemplateCompiler.prototype.prepareConcatParts = function (parts) {
        for (var i = parts.length - 1; i >= 0; i--) {
            var part = parts[i];
            if (part.type === 'MustacheStatement') {
                this.attributeMustache([part]);
            }
            else if (part.type === 'TextNode') {
                this.opcode('literal', null, part.chars);
            }
        }
        this.opcode('prepareArray', null, parts.length);
    };
    TemplateCompiler.prototype.attributeMustache = function (_a) {
        var action = _a[0];
        this.mustacheExpression(action);
    };
    TemplateCompiler.prototype.meta = function (node) {
        var loc = node.loc;
        if (!loc) {
            return [];
        }
        var source = loc.source, start = loc.start, end = loc.end;
        return ['loc', [source || null, [start.line, start.column], [end.line, end.column]]];
    };
    return TemplateCompiler;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = TemplateCompiler;
function isHelperInvocation(mustache) {
    return (mustache.params && mustache.params.length > 0) ||
        (mustache.hash && mustache.hash.pairs.length > 0);
}
function isSelfGet(mustache) {
    var parts = mustache.path.parts;
    return parts[0] === null;
}
function isLocalVariable(mustache, symbols) {
    var parts = mustache.path.parts;
    return parts.length === 1 && symbols && symbols.hasLocalVariable(parts[0]);
}
function isYield(_a) {
    var path = _a.path;
    return path.original === 'yield';
}
function isPartial(_a) {
    var path = _a.path;
    return path.original === 'partial';
}
function isDebugger(_a) {
    var path = _a.path;
    return path.original === 'debugger';
}
function isArg(_a) {
    var path = _a.path;
    return path.data;
}
function isLiteral(_a) {
    var path = _a.path;
    return path.type === 'StringLiteral'
        || path.type === 'BooleanLiteral'
        || path.type === 'NumberLiteral'
        || path.type === 'NullLiteral'
        || path.type === 'UndefinedLiteral';
}
function isHasBlock(_a) {
    var path = _a.path;
    return path.original === 'has-block';
}
function isHasBlockParams(_a) {
    var path = _a.path;
    return path.original === 'has-block-params';
}
function isBuiltInHelper(expr) {
    return isHasBlock(expr)
        || isHasBlockParams(expr);
}
function assertValidYield(_a) {
    var hash = _a.hash;
    var pairs = hash.pairs;
    if ((pairs.length === 1 && pairs[0].key !== 'to') || pairs.length > 1) {
        throw new Error("yield only takes a single named argument: 'to'");
    }
    else if (pairs.length === 1 && pairs[0].value.type !== 'StringLiteral') {
        throw new Error("you can only yield to a literal value");
    }
    else if (pairs.length === 0) {
        return 'default';
    }
    else {
        return pairs[0].value.value;
    }
}
function assertValidPartial(_a) {
    var params = _a.params, hash = _a.hash, escaped = _a.escaped, loc = _a.loc;
    if (params && params.length !== 1) {
        throw new Error("Partial found with no arguments. You must specify a template name. (on line " + loc.start.line + ")");
    }
    else if (hash && hash.pairs.length > 0) {
        throw new Error("partial does not take any named arguments (on line " + loc.start.line + ")");
    }
    else if (!escaped) {
        throw new Error("{{{partial ...}}} is not supported, please use {{partial ...}} instead (on line " + loc.start.line + ")");
    }
    return params;
}
function assertValidHasBlockUsage(type, _a) {
    var params = _a.params, hash = _a.hash, loc = _a.loc;
    if (hash && hash.pairs.length > 0) {
        throw new Error(type + " does not take any named arguments");
    }
    if (params.length === 0) {
        return 'default';
    }
    else if (params.length === 1) {
        if (params[0].type === 'StringLiteral') {
            return params[0].value;
        }
        else {
            throw new Error("you can only yield to a literal value (on line " + loc.start.line + ")");
        }
    }
    else {
        throw new Error(type + " only takes a single positional argument (on line " + loc.start.line + ")");
    }
}
function assertValidDebuggerUsage(_a) {
    var params = _a.params, hash = _a.hash;
    if (hash && hash.pairs.length > 0) {
        throw new Error("debugger does not take any named arguments");
    }
    if (params.length === 0) {
        return 'default';
    }
    else {
        throw new Error("debugger does not take any positional arguments");
    }
}
//# sourceMappingURL=data:application/json;base64,