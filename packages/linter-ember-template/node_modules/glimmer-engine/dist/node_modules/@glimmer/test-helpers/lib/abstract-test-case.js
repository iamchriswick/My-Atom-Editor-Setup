"use strict";
var reference_1 = require("@glimmer/reference");
var environment_1 = require("./environment");
var helpers_1 = require("./helpers");
function skip(target, name, descriptor) {
    descriptor.value['skip'] = true;
}
exports.skip = skip;
var VersionedObject = (function () {
    function VersionedObject(value) {
        this.tag = new reference_1.DirtyableTag();
        helpers_1.assign(this, value);
    }
    VersionedObject.prototype.update = function (value) {
        helpers_1.assign(this, value);
        this.dirty();
    };
    VersionedObject.prototype.set = function (key, value) {
        this[key] = value;
        this.dirty();
    };
    VersionedObject.prototype.dirty = function () {
        this.tag.dirty();
    };
    return VersionedObject;
}());
exports.VersionedObject = VersionedObject;
var SimpleRootReference = (function () {
    function SimpleRootReference(object) {
        this.object = object;
        this.tag = object.tag;
    }
    SimpleRootReference.prototype.get = function (key) {
        return new SimplePathReference(this, key);
    };
    SimpleRootReference.prototype.value = function () {
        return this.object;
    };
    return SimpleRootReference;
}());
exports.SimpleRootReference = SimpleRootReference;
var SimplePathReference = (function () {
    function SimplePathReference(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = parent.tag;
    }
    SimplePathReference.prototype.get = function (key) {
        return new SimplePathReference(this, key);
    };
    SimplePathReference.prototype.value = function () {
        return this.parent.value()[this.key];
    };
    return SimplePathReference;
}());
function isMarker(node) {
    if (node instanceof Comment && node.textContent === '') {
        return true;
    }
    if (node instanceof Text && node.textContent === '') {
        return true;
    }
    return false;
}
var RenderingTest = (function () {
    function RenderingTest(env, template, appendTo) {
        if (env === void 0) { env = new environment_1.TestEnvironment(); }
        this.env = env;
        this.appendTo = appendTo;
        this.context = null;
        this.result = null;
        this.template = this.env.compile(template);
        this.assert = QUnit.config.current.assert;
    }
    RenderingTest.prototype.teardown = function () { };
    RenderingTest.prototype.render = function (context) {
        this.env.begin();
        var dynamicScope = new environment_1.TestDynamicScope();
        var appendTo = this.appendTo;
        var rootObject = new VersionedObject(context);
        var root = new SimpleRootReference(rootObject);
        this.context = rootObject;
        this.result = this.template.render(root, appendTo, dynamicScope);
        this.env.commit();
        this.element = document.getElementById('qunit-fixture').firstChild;
    };
    RenderingTest.prototype.assertContent = function (expected, message) {
        var actual = document.getElementById('qunit-fixture').innerHTML;
        QUnit.equal(actual, expected);
    };
    RenderingTest.prototype.takeSnapshot = function () {
        var snapshot = this.snapshot = [];
        var node = this.element.firstChild;
        while (node) {
            if (!isMarker(node)) {
                snapshot.push(node);
            }
            node = node.nextSibling;
        }
        return snapshot;
    };
    RenderingTest.prototype.assertStableRerender = function () {
        this.takeSnapshot();
        this.rerender();
        this.assertInvariants();
    };
    RenderingTest.prototype.rerender = function () {
        this.result.rerender();
    };
    RenderingTest.prototype.assertInvariants = function (oldSnapshot, newSnapshot) {
        oldSnapshot = oldSnapshot || this.snapshot;
        newSnapshot = newSnapshot || this.takeSnapshot();
        this.assert.strictEqual(newSnapshot.length, oldSnapshot.length, 'Same number of nodes');
        for (var i = 0; i < oldSnapshot.length; i++) {
            this.assertSameNode(newSnapshot[i], oldSnapshot[i]);
        }
    };
    RenderingTest.prototype.assertSameNode = function (actual, expected) {
        this.assert.strictEqual(actual, expected, 'DOM node stability');
    };
    RenderingTest.prototype.runTask = function (callback) {
        callback();
        this.env.begin();
        this.result.rerender();
        this.env.commit();
    };
    return RenderingTest;
}());
exports.RenderingTest = RenderingTest;
function testModule(description) {
    return function (TestClass) {
        var context;
        QUnit.module("[Browser] " + (description || TestClass.name), {
            afterEach: function () {
                context.teardown();
            }
        });
        var keys = Object.getOwnPropertyNames(TestClass.prototype);
        keys.forEach(function (key) {
            if (key === 'constructor')
                return;
            var value = Object.getOwnPropertyDescriptor(TestClass.prototype, key).value;
            var isSkipped = value.skip;
            if (typeof value === 'function' && !isSkipped) {
                QUnit.test(key, function (assert) {
                    var env = new environment_1.TestEnvironment();
                    context = new TestClass(env, value['template'], document.getElementById('qunit-fixture'));
                    value.call(context, assert);
                });
            }
            else if (isSkipped) {
                QUnit.skip(key, function () { });
            }
        });
    };
}
exports.testModule = testModule;
function template(t) {
    return function template(target, name, descriptor) {
        if (typeof descriptor.value !== 'function') {
            throw new Error("Can't decorator a non-function with the @template decorator");
        }
        descriptor.value['template'] = t;
    };
}
exports.template = template;
//# sourceMappingURL=data:application/json;base64,