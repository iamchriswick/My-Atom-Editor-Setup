"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var runtime_1 = require("@glimmer/runtime");
var helpers_1 = require("./helpers");
var util_1 = require("@glimmer/util");
var object_1 = require("@glimmer/object");
var reference_1 = require("@glimmer/reference");
var object_reference_1 = require("@glimmer/object-reference");
var ArrayIterator = (function () {
    function ArrayIterator(array, keyFor) {
        this.position = 0;
        this.array = array;
        this.keyFor = keyFor;
    }
    ArrayIterator.prototype.isEmpty = function () {
        return this.array.length === 0;
    };
    ArrayIterator.prototype.next = function () {
        var _a = this, position = _a.position, array = _a.array, keyFor = _a.keyFor;
        if (position >= array.length)
            return null;
        var value = array[position];
        var key = keyFor(value, position);
        var memo = position;
        this.position++;
        return { key: key, value: value, memo: memo };
    };
    return ArrayIterator;
}());
var ObjectKeysIterator = (function () {
    function ObjectKeysIterator(keys, values, keyFor) {
        this.position = 0;
        this.keys = keys;
        this.values = values;
        this.keyFor = keyFor;
    }
    ObjectKeysIterator.prototype.isEmpty = function () {
        return this.keys.length === 0;
    };
    ObjectKeysIterator.prototype.next = function () {
        var _a = this, position = _a.position, keys = _a.keys, values = _a.values, keyFor = _a.keyFor;
        if (position >= keys.length)
            return null;
        var value = values[position];
        var memo = keys[position];
        var key = keyFor(value, memo);
        this.position++;
        return { key: key, value: value, memo: memo };
    };
    return ObjectKeysIterator;
}());
var EmptyIterator = (function () {
    function EmptyIterator() {
    }
    EmptyIterator.prototype.isEmpty = function () {
        return true;
    };
    EmptyIterator.prototype.next = function () {
        throw new Error("Cannot call next() on an empty iterator");
    };
    return EmptyIterator;
}());
var EMPTY_ITERATOR = new EmptyIterator();
var Iterable = (function () {
    function Iterable(ref, keyFor) {
        this.tag = ref.tag;
        this.ref = ref;
        this.keyFor = keyFor;
    }
    Iterable.prototype.iterate = function () {
        var _a = this, ref = _a.ref, keyFor = _a.keyFor;
        var iterable = ref.value();
        if (Array.isArray(iterable)) {
            return iterable.length > 0 ? new ArrayIterator(iterable, keyFor) : EMPTY_ITERATOR;
        }
        else if (iterable === undefined || iterable === null) {
            return EMPTY_ITERATOR;
        }
        else if (iterable.forEach !== undefined) {
            var array_1 = [];
            iterable.forEach(function (item) {
                array_1.push(item);
            });
            return array_1.length > 0 ? new ArrayIterator(array_1, keyFor) : EMPTY_ITERATOR;
        }
        else if (typeof iterable === 'object') {
            var keys = Object.keys(iterable);
            return keys.length > 0 ? new ObjectKeysIterator(keys, keys.map(function (key) { return iterable[key]; }), keyFor) : EMPTY_ITERATOR;
        }
        else {
            throw new Error("Don't know how to {{#each " + iterable + "}}");
        }
    };
    Iterable.prototype.valueReferenceFor = function (item) {
        return new object_reference_1.UpdatableReference(item.value);
    };
    Iterable.prototype.updateValueReference = function (reference, item) {
        reference.update(item.value);
    };
    Iterable.prototype.memoReferenceFor = function (item) {
        return new object_reference_1.UpdatableReference(item.memo);
    };
    Iterable.prototype.updateMemoReference = function (reference, item) {
        reference.update(item.memo);
    };
    return Iterable;
}());
var BasicComponent = (function () {
    function BasicComponent(attrs) {
        this.attrs = attrs;
    }
    return BasicComponent;
}());
exports.BasicComponent = BasicComponent;
var EmberishCurlyComponent = (function (_super) {
    __extends(EmberishCurlyComponent, _super);
    function EmberishCurlyComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dirtinessTag = new reference_1.DirtyableTag();
        _this.tagName = null;
        _this.attributeBindings = null;
        _this.parentView = null;
        return _this;
    }
    EmberishCurlyComponent.create = function (args) {
        return _super.create.call(this, args);
    };
    EmberishCurlyComponent.prototype.recompute = function () {
        this.dirtinessTag.dirty();
    };
    EmberishCurlyComponent.prototype.didInitAttrs = function (options) { };
    EmberishCurlyComponent.prototype.didUpdateAttrs = function (diff) { };
    EmberishCurlyComponent.prototype.didReceiveAttrs = function (diff) { };
    EmberishCurlyComponent.prototype.willInsertElement = function () { };
    EmberishCurlyComponent.prototype.willUpdate = function () { };
    EmberishCurlyComponent.prototype.willRender = function () { };
    EmberishCurlyComponent.prototype.didInsertElement = function () { };
    EmberishCurlyComponent.prototype.didUpdate = function () { };
    EmberishCurlyComponent.prototype.didRender = function () { };
    return EmberishCurlyComponent;
}(object_1.default));
exports.EmberishCurlyComponent = EmberishCurlyComponent;
var EmberishGlimmerComponent = (function (_super) {
    __extends(EmberishGlimmerComponent, _super);
    function EmberishGlimmerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dirtinessTag = new reference_1.DirtyableTag();
        _this.parentView = null;
        return _this;
    }
    EmberishGlimmerComponent.create = function (args) {
        return _super.create.call(this, args);
    };
    EmberishGlimmerComponent.prototype.recompute = function () {
        this.dirtinessTag.dirty();
    };
    EmberishGlimmerComponent.prototype.didInitAttrs = function (options) { };
    EmberishGlimmerComponent.prototype.didUpdateAttrs = function (diff) { };
    EmberishGlimmerComponent.prototype.didReceiveAttrs = function (diff) { };
    EmberishGlimmerComponent.prototype.willInsertElement = function () { };
    EmberishGlimmerComponent.prototype.willUpdate = function () { };
    EmberishGlimmerComponent.prototype.willRender = function () { };
    EmberishGlimmerComponent.prototype.didInsertElement = function () { };
    EmberishGlimmerComponent.prototype.didUpdate = function () { };
    EmberishGlimmerComponent.prototype.didRender = function () { };
    return EmberishGlimmerComponent;
}(object_1.default));
exports.EmberishGlimmerComponent = EmberishGlimmerComponent;
var BasicComponentManager = (function () {
    function BasicComponentManager() {
    }
    BasicComponentManager.prototype.prepareArgs = function (definition, args) {
        return args;
    };
    BasicComponentManager.prototype.create = function (environment, definition, args) {
        var klass = definition.ComponentClass || BasicComponent;
        return new klass(args.named.value());
    };
    BasicComponentManager.prototype.layoutFor = function (definition, component, env) {
        var layout = env.compiledLayouts[definition.name];
        if (layout) {
            return layout;
        }
        return env.compiledLayouts[definition.name] = runtime_1.compileLayout(new BasicComponentLayoutCompiler(definition.layoutString), env);
    };
    BasicComponentManager.prototype.getSelf = function (component) {
        return new object_reference_1.UpdatableReference(component);
    };
    BasicComponentManager.prototype.didCreateElement = function (component, element) {
        component.element = element;
    };
    BasicComponentManager.prototype.didRenderLayout = function (component, bounds) {
        component.bounds = bounds;
    };
    BasicComponentManager.prototype.didCreate = function () { };
    BasicComponentManager.prototype.getTag = function () {
        return null;
    };
    BasicComponentManager.prototype.update = function (component, attrs) {
        component.attrs = attrs.named.value();
    };
    BasicComponentManager.prototype.didUpdateLayout = function () { };
    BasicComponentManager.prototype.didUpdate = function () { };
    BasicComponentManager.prototype.getDestructor = function () {
        return null;
    };
    return BasicComponentManager;
}());
var BASIC_COMPONENT_MANAGER = new BasicComponentManager();
var StaticTaglessComponentManager = (function (_super) {
    __extends(StaticTaglessComponentManager, _super);
    function StaticTaglessComponentManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StaticTaglessComponentManager.prototype.layoutFor = function (definition, component, env) {
        var layout = env.compiledLayouts[definition.name];
        if (layout) {
            return layout;
        }
        return env.compiledLayouts[definition.name] = runtime_1.compileLayout(new StaticTaglessComponentLayoutCompiler(definition.layoutString), env);
    };
    return StaticTaglessComponentManager;
}(BasicComponentManager));
var STATIC_TAGLESS_COMPONENT_MANAGER = new StaticTaglessComponentManager();
var BaseEmberishGlimmerComponent = EmberishGlimmerComponent.extend();
var EmberishGlimmerComponentManager = (function () {
    function EmberishGlimmerComponentManager() {
    }
    EmberishGlimmerComponentManager.prototype.prepareArgs = function (definition, args) {
        return args;
    };
    EmberishGlimmerComponentManager.prototype.create = function (environment, definition, args, dynamicScope, callerSelf, hasDefaultBlock) {
        var klass = definition.ComponentClass || BaseEmberishGlimmerComponent;
        var attrs = args.named.value();
        var component = klass.create({ attrs: attrs });
        component.didInitAttrs({ attrs: attrs });
        component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
        component.willInsertElement();
        component.willRender();
        return component;
    };
    EmberishGlimmerComponentManager.prototype.layoutFor = function (definition, component, env) {
        if (env.compiledLayouts[definition.name]) {
            return env.compiledLayouts[definition.name];
        }
        return env.compiledLayouts[definition.name] = runtime_1.compileLayout(new EmberishGlimmerComponentLayoutCompiler(definition.layoutString), env);
    };
    EmberishGlimmerComponentManager.prototype.getSelf = function (component) {
        return new object_reference_1.UpdatableReference(component);
    };
    EmberishGlimmerComponentManager.prototype.didCreateElement = function (component, element) {
        component.element = element;
    };
    EmberishGlimmerComponentManager.prototype.didRenderLayout = function (component, bounds) {
        component.bounds = bounds;
    };
    EmberishGlimmerComponentManager.prototype.didCreate = function (component) {
        component.didInsertElement();
        component.didRender();
    };
    EmberishGlimmerComponentManager.prototype.getTag = function (component) {
        return component.dirtinessTag;
    };
    EmberishGlimmerComponentManager.prototype.update = function (component, args) {
        var oldAttrs = component.attrs;
        var newAttrs = args.named.value();
        component.set('attrs', newAttrs);
        component.didUpdateAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
        component.didReceiveAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
        component.willUpdate();
        component.willRender();
    };
    EmberishGlimmerComponentManager.prototype.didUpdateLayout = function () { };
    EmberishGlimmerComponentManager.prototype.didUpdate = function (component) {
        component.didUpdate();
        component.didRender();
    };
    EmberishGlimmerComponentManager.prototype.getDestructor = function (component) {
        return {
            destroy: function () {
                component.destroy();
            }
        };
    };
    return EmberishGlimmerComponentManager;
}());
var ProcessedArgs = (function () {
    function ProcessedArgs(args, positionalParamsDefinition) {
        this.tag = args.tag;
        this.named = args.named;
        this.positional = args.positional;
        this.positionalParamNames = positionalParamsDefinition;
    }
    ProcessedArgs.prototype.value = function () {
        var _a = this, named = _a.named, positional = _a.positional, positionalParamNames = _a.positionalParamNames;
        var merged = Object.assign({}, named.value());
        if (positionalParamNames && positionalParamNames.length) {
            for (var i = 0; i < positionalParamNames.length; i++) {
                var name = positionalParamNames[i];
                var reference = positional.at(i);
                merged[name] = reference.value();
            }
        }
        return {
            attrs: merged,
            props: merged
        };
    };
    return ProcessedArgs;
}());
exports.ProcessedArgs = ProcessedArgs;
function processArgs(args, positionalParamsDefinition) {
    return new ProcessedArgs(args, positionalParamsDefinition);
}
var EMBERISH_GLIMMER_COMPONENT_MANAGER = new EmberishGlimmerComponentManager();
var BaseEmberishCurlyComponent = EmberishCurlyComponent.extend();
var EmberishCurlyComponentManager = (function () {
    function EmberishCurlyComponentManager() {
    }
    EmberishCurlyComponentManager.prototype.prepareArgs = function (definition, args, dynamicScope) {
        var dyn = definition.ComponentClass ? definition.ComponentClass['fromDynamicScope'] : null;
        if (dyn) {
            var map_1 = util_1.assign({}, args.named.map);
            dyn.forEach(function (name) { return map_1[name] = dynamicScope.get(name); });
            args = runtime_1.EvaluatedArgs.create(args.positional, runtime_1.EvaluatedNamedArgs.create(map_1), args.blocks);
        }
        return args;
    };
    EmberishCurlyComponentManager.prototype.create = function (environment, definition, args, dynamicScope, callerSelf) {
        var klass = definition.ComponentClass || BaseEmberishCurlyComponent;
        var processedArgs = processArgs(args, klass['positionalParams']);
        var attrs = processedArgs.value().attrs;
        var self = callerSelf.value();
        var merged = util_1.assign({}, attrs, { attrs: attrs }, { args: processedArgs }, { targetObject: self });
        var component = klass.create(merged);
        component.didInitAttrs({ attrs: attrs });
        component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
        component.willInsertElement();
        component.willRender();
        return component;
    };
    EmberishCurlyComponentManager.prototype.layoutFor = function (definition, component, env) {
        var layout = env.compiledLayouts[definition.name];
        if (layout) {
            return layout;
        }
        var layoutString = definition.layoutString;
        var lateBound = !layoutString;
        if (!layoutString && layoutString !== '') {
            layoutString = component['layout'];
        }
        layout = runtime_1.compileLayout(new EmberishCurlyComponentLayoutCompiler(layoutString), env);
        return lateBound ? layout : (env.compiledLayouts[definition.name] = layout);
    };
    EmberishCurlyComponentManager.prototype.getSelf = function (component) {
        return new object_reference_1.UpdatableReference(component);
    };
    EmberishCurlyComponentManager.prototype.didCreateElement = function (component, element, operations) {
        component.element = element;
        var bindings = component.attributeBindings;
        var rootRef = new object_reference_1.UpdatableReference(component);
        if (bindings) {
            for (var i = 0; i < bindings.length; i++) {
                var attribute = bindings[i];
                var reference = rootRef.get(attribute);
                operations.addDynamicAttribute(element, attribute, reference, false);
            }
        }
    };
    EmberishCurlyComponentManager.prototype.didRenderLayout = function (component, bounds) {
        component.bounds = bounds;
    };
    EmberishCurlyComponentManager.prototype.didCreate = function (component) {
        component.didInsertElement();
        component.didRender();
    };
    EmberishCurlyComponentManager.prototype.getTag = function (component) {
        return component.dirtinessTag;
    };
    EmberishCurlyComponentManager.prototype.update = function (component, args) {
        var oldAttrs = component.attrs;
        var newAttrs = component.args.value().attrs;
        var merged = util_1.assign({}, newAttrs, { attrs: newAttrs });
        component.setProperties(merged);
        component.didUpdateAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
        component.didReceiveAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
        component.willUpdate();
        component.willRender();
    };
    EmberishCurlyComponentManager.prototype.didUpdateLayout = function () { };
    EmberishCurlyComponentManager.prototype.didUpdate = function (component) {
        component.didUpdate();
        component.didRender();
    };
    EmberishCurlyComponentManager.prototype.getDestructor = function (component) {
        return {
            destroy: function () {
                component.destroy();
            }
        };
    };
    return EmberishCurlyComponentManager;
}());
var EMBERISH_CURLY_COMPONENT_MANAGER = new EmberishCurlyComponentManager();
function emberToBool(value) {
    if (Array.isArray(value)) {
        return value.length > 0;
    }
    else {
        return !!value;
    }
}
var EmberishConditionalReference = (function (_super) {
    __extends(EmberishConditionalReference, _super);
    function EmberishConditionalReference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmberishConditionalReference.prototype.toBool = function (value) {
        return emberToBool(value);
    };
    return EmberishConditionalReference;
}(runtime_1.ConditionalReference));
var SimplePathReference = (function () {
    function SimplePathReference(parent, property) {
        this.tag = reference_1.VOLATILE_TAG;
        this.parent = parent;
        this.property = property;
    }
    SimplePathReference.prototype.value = function () {
        return this.parent.value()[this.property];
    };
    SimplePathReference.prototype.get = function (prop) {
        return new SimplePathReference(this, prop);
    };
    return SimplePathReference;
}());
exports.SimplePathReference = SimplePathReference;
var HelperReference = (function () {
    function HelperReference(helper, args) {
        this.tag = reference_1.VOLATILE_TAG;
        this.helper = helper;
        this.args = args;
    }
    HelperReference.prototype.value = function () {
        var _a = this, helper = _a.helper, _b = _a.args, positional = _b.positional, named = _b.named;
        return helper(positional.value(), named.value());
    };
    HelperReference.prototype.get = function (prop) {
        return new SimplePathReference(this, prop);
    };
    return HelperReference;
}());
var InertModifierManager = (function () {
    function InertModifierManager() {
    }
    InertModifierManager.prototype.create = function () { };
    InertModifierManager.prototype.install = function (modifier) { };
    InertModifierManager.prototype.update = function (modifier) { };
    InertModifierManager.prototype.getDestructor = function (modifier) {
        return null;
    };
    return InertModifierManager;
}());
var TestModifier = (function () {
    function TestModifier(element, args, dom) {
        this.element = element;
        this.args = args;
        this.dom = dom;
    }
    return TestModifier;
}());
exports.TestModifier = TestModifier;
var TestModifierManager = (function () {
    function TestModifierManager() {
        this.installedElements = [];
        this.updatedElements = [];
        this.destroyedModifiers = [];
    }
    TestModifierManager.prototype.create = function (element, args, dynamicScope, dom) {
        return new TestModifier(element, args, dom);
    };
    TestModifierManager.prototype.install = function (_a) {
        var element = _a.element, args = _a.args, dom = _a.dom;
        this.installedElements.push(element);
        var param = args.positional.at(0).value();
        dom.setAttribute(element, 'data-modifier', "installed - " + param);
        return;
    };
    TestModifierManager.prototype.update = function (_a) {
        var element = _a.element, args = _a.args, dom = _a.dom;
        this.updatedElements.push(element);
        var param = args.positional.at(0).value();
        dom.setAttribute(element, 'data-modifier', "updated - " + param);
        return;
    };
    TestModifierManager.prototype.getDestructor = function (modifier) {
        var _this = this;
        return {
            destroy: function () {
                _this.destroyedModifiers.push(modifier);
                var element = modifier.element, dom = modifier.dom;
                dom.removeAttribute(element, 'data-modifier');
            }
        };
    };
    return TestModifierManager;
}());
exports.TestModifierManager = TestModifierManager;
var TestEnvironment = (function (_super) {
    __extends(TestEnvironment, _super);
    function TestEnvironment(options) {
        if (options === void 0) { options = {
            document: document,
            appendOperations: new runtime_1.DOMTreeConstruction(document)
        }; }
        var _this = _super.call(this, { appendOperations: options.appendOperations, updateOperations: new runtime_1.DOMChanges(options.document) }) || this;
        _this.helpers = util_1.dict();
        _this.modifiers = util_1.dict();
        _this.partials = util_1.dict();
        _this.components = util_1.dict();
        _this.compiledLayouts = util_1.dict();
        _this.uselessAnchor = options.document.createElement('a');
        _this.registerHelper("if", function (_a) {
            var cond = _a[0], yes = _a[1], no = _a[2];
            return cond ? yes : no;
        });
        _this.registerHelper("unless", function (_a) {
            var cond = _a[0], yes = _a[1], no = _a[2];
            return cond ? no : yes;
        });
        _this.registerInternalHelper("-get-dynamic-var", runtime_1.getDynamicVar);
        _this.registerModifier("action", new InertModifierManager());
        _this.registerInternalHelper("component", function (vm, args, symbolTable) {
            return new DynamicComponentReference(args.positional.at(0), vm.env, symbolTable);
        });
        _this.registerInternalHelper("hash", function (vm, args) { return args.named; });
        return _this;
    }
    TestEnvironment.prototype.protocolForURL = function (url) {
        this.uselessAnchor.href = url;
        return this.uselessAnchor.protocol;
    };
    TestEnvironment.prototype.registerHelper = function (name, helper) {
        this.helpers[name] = function (vm, args) { return new HelperReference(helper, args); };
    };
    TestEnvironment.prototype.registerInternalHelper = function (name, helper) {
        this.helpers[name] = helper;
    };
    TestEnvironment.prototype.registerModifier = function (name, modifier) {
        this.modifiers[name] = modifier;
    };
    TestEnvironment.prototype.registerPartial = function (name, source) {
        this.partials[name] = new runtime_1.PartialDefinition(name, helpers_1.compile(source, { env: this }));
    };
    TestEnvironment.prototype.registerComponent = function (name, definition) {
        this.components[name] = definition;
        return definition;
    };
    TestEnvironment.prototype.registerBasicComponent = function (name, Component, layout) {
        var definition = new BasicComponentDefinition(name, BASIC_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    };
    TestEnvironment.prototype.registerStaticTaglessComponent = function (name, Component, layout) {
        var definition = new StaticTaglessComponentDefinition(name, STATIC_TAGLESS_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    };
    TestEnvironment.prototype.registerEmberishCurlyComponent = function (name, Component, layout) {
        var definition = new EmberishCurlyComponentDefinition(name, EMBERISH_CURLY_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    };
    TestEnvironment.prototype.registerEmberishGlimmerComponent = function (name, Component, layout) {
        var definition = new EmberishGlimmerComponentDefinition(name, EMBERISH_GLIMMER_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    };
    TestEnvironment.prototype.toConditionalReference = function (reference) {
        if (reference_1.isConst(reference)) {
            return runtime_1.PrimitiveReference.create(emberToBool(reference.value()));
        }
        return new EmberishConditionalReference(reference);
    };
    TestEnvironment.prototype.macros = function () {
        var macros = _super.prototype.macros.call(this);
        populateBlocks(macros.blocks, macros.inlines);
        return macros;
    };
    TestEnvironment.prototype.hasHelper = function (helperName) {
        return helperName.length === 1 && (helperName[0] in this.helpers);
    };
    TestEnvironment.prototype.lookupHelper = function (helperParts) {
        var helperName = helperParts[0];
        var helper = this.helpers[helperName];
        if (!helper)
            throw new Error("Helper for " + helperParts.join('.') + " not found.");
        return helper;
    };
    TestEnvironment.prototype.hasPartial = function (partialName) {
        return partialName in this.partials;
    };
    TestEnvironment.prototype.lookupPartial = function (partialName) {
        var partial = this.partials[partialName];
        return partial;
    };
    TestEnvironment.prototype.hasComponentDefinition = function (name) {
        return !!this.components[name[0]];
    };
    TestEnvironment.prototype.getComponentDefinition = function (name, blockMeta) {
        return this.components[name[0]];
    };
    TestEnvironment.prototype.hasModifier = function (modifierName) {
        return modifierName.length === 1 && (modifierName[0] in this.modifiers);
    };
    TestEnvironment.prototype.lookupModifier = function (modifierName) {
        var name = modifierName[0];
        var modifier = this.modifiers[name];
        if (!modifier)
            throw new Error("Modifier for " + modifierName.join('.') + " not found.");
        return modifier;
    };
    TestEnvironment.prototype.compile = function (template) {
        return helpers_1.compile(template, { env: this });
    };
    TestEnvironment.prototype.compileLayout = function (template) {
        return helpers_1.compileLayout(template, { env: this });
    };
    TestEnvironment.prototype.iterableFor = function (ref, args) {
        var keyPath = args.named.get("key").value();
        var keyFor;
        if (!keyPath) {
            throw new Error('Must specify a key for #each');
        }
        switch (keyPath) {
            case '@index':
                keyFor = function (_, index) { return String(index); };
                break;
            case '@primitive':
                keyFor = function (item) { return String(item); };
                break;
            default:
                keyFor = function (item) { return item[keyPath]; };
                break;
        }
        return new Iterable(ref, keyFor);
    };
    return TestEnvironment;
}(runtime_1.Environment));
exports.TestEnvironment = TestEnvironment;
var TestDynamicScope = (function () {
    function TestDynamicScope(bucket) {
        if (bucket === void 0) { bucket = null; }
        if (bucket) {
            this.bucket = util_1.assign({}, bucket);
        }
        else {
            this.bucket = {};
        }
    }
    TestDynamicScope.prototype.get = function (key) {
        return this.bucket[key];
    };
    TestDynamicScope.prototype.set = function (key, reference) {
        return this.bucket[key] = reference;
    };
    TestDynamicScope.prototype.child = function () {
        return new TestDynamicScope(this.bucket);
    };
    return TestDynamicScope;
}());
exports.TestDynamicScope = TestDynamicScope;
var DynamicComponentReference = (function () {
    function DynamicComponentReference(nameRef, env, symbolTable) {
        this.nameRef = nameRef;
        this.env = env;
        this.symbolTable = symbolTable;
        this.tag = nameRef.tag;
    }
    DynamicComponentReference.prototype.value = function () {
        var _a = this, env = _a.env, nameRef = _a.nameRef;
        var nameOrDef = nameRef.value();
        if (typeof nameOrDef === 'string') {
            return env.getComponentDefinition([nameOrDef], this.symbolTable);
        }
        else if (runtime_1.isComponentDefinition(nameOrDef)) {
            return nameOrDef;
        }
        return null;
    };
    DynamicComponentReference.prototype.get = function () {
        return null;
    };
    return DynamicComponentReference;
}());
function dynamicComponentFor(vm, symbolTable) {
    var args = vm.getArgs();
    var nameRef = args.positional.at(0);
    var env = vm.env;
    return new DynamicComponentReference(nameRef, env, symbolTable);
}
;
var GenericComponentDefinition = (function (_super) {
    __extends(GenericComponentDefinition, _super);
    function GenericComponentDefinition(name, manager, ComponentClass, layout) {
        var _this = _super.call(this, name, manager, ComponentClass) || this;
        _this.layoutString = layout;
        return _this;
    }
    return GenericComponentDefinition;
}(runtime_1.ComponentDefinition));
exports.GenericComponentDefinition = GenericComponentDefinition;
var BasicComponentDefinition = (function (_super) {
    __extends(BasicComponentDefinition, _super);
    function BasicComponentDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BasicComponentDefinition;
}(GenericComponentDefinition));
exports.BasicComponentDefinition = BasicComponentDefinition;
var StaticTaglessComponentDefinition = (function (_super) {
    __extends(StaticTaglessComponentDefinition, _super);
    function StaticTaglessComponentDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return StaticTaglessComponentDefinition;
}(GenericComponentDefinition));
var EmberishCurlyComponentDefinition = (function (_super) {
    __extends(EmberishCurlyComponentDefinition, _super);
    function EmberishCurlyComponentDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EmberishCurlyComponentDefinition;
}(GenericComponentDefinition));
exports.EmberishCurlyComponentDefinition = EmberishCurlyComponentDefinition;
var EmberishGlimmerComponentDefinition = (function (_super) {
    __extends(EmberishGlimmerComponentDefinition, _super);
    function EmberishGlimmerComponentDefinition() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return EmberishGlimmerComponentDefinition;
}(GenericComponentDefinition));
exports.EmberishGlimmerComponentDefinition = EmberishGlimmerComponentDefinition;
var GenericComponentLayoutCompiler = (function () {
    function GenericComponentLayoutCompiler(layoutString) {
        this.layoutString = layoutString;
    }
    GenericComponentLayoutCompiler.prototype.compileLayout = function (env) {
        return helpers_1.compileLayout(this.layoutString, { env: env });
    };
    return GenericComponentLayoutCompiler;
}());
var BasicComponentLayoutCompiler = (function (_super) {
    __extends(BasicComponentLayoutCompiler, _super);
    function BasicComponentLayoutCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BasicComponentLayoutCompiler.prototype.compile = function (builder) {
        builder.fromLayout(this.compileLayout(builder.env));
    };
    return BasicComponentLayoutCompiler;
}(GenericComponentLayoutCompiler));
var StaticTaglessComponentLayoutCompiler = (function (_super) {
    __extends(StaticTaglessComponentLayoutCompiler, _super);
    function StaticTaglessComponentLayoutCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StaticTaglessComponentLayoutCompiler.prototype.compile = function (builder) {
        builder.wrapLayout(this.compileLayout(builder.env));
    };
    return StaticTaglessComponentLayoutCompiler;
}(GenericComponentLayoutCompiler));
function EmberTagName(vm) {
    var self = vm.getSelf().value();
    var tagName = self['tagName'];
    tagName = tagName === '' ? null : self['tagName'] || 'div';
    return runtime_1.PrimitiveReference.create(tagName);
}
function EmberID(vm) {
    var self = vm.getSelf().value();
    return runtime_1.PrimitiveReference.create("ember" + self._guid);
}
var EmberishCurlyComponentLayoutCompiler = (function (_super) {
    __extends(EmberishCurlyComponentLayoutCompiler, _super);
    function EmberishCurlyComponentLayoutCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmberishCurlyComponentLayoutCompiler.prototype.compile = function (builder) {
        builder.wrapLayout(this.compileLayout(builder.env));
        builder.tag.dynamic(EmberTagName);
        builder.attrs.static('class', 'ember-view');
        builder.attrs.dynamic('id', EmberID);
    };
    return EmberishCurlyComponentLayoutCompiler;
}(GenericComponentLayoutCompiler));
var EmberishGlimmerComponentLayoutCompiler = (function (_super) {
    __extends(EmberishGlimmerComponentLayoutCompiler, _super);
    function EmberishGlimmerComponentLayoutCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EmberishGlimmerComponentLayoutCompiler.prototype.compile = function (builder) {
        builder.fromLayout(this.compileLayout(builder.env));
        builder.attrs.static('class', 'ember-view');
        builder.attrs.dynamic('id', EmberID);
    };
    return EmberishGlimmerComponentLayoutCompiler;
}(GenericComponentLayoutCompiler));
function inspectHooks(ComponentClass) {
    return ComponentClass.extend({
        init: function () {
            this._super.apply(this, arguments);
            this.hooks = {
                didInitAttrs: 0,
                didUpdateAttrs: 0,
                didReceiveAttrs: 0,
                willInsertElement: 0,
                willUpdate: 0,
                willRender: 0,
                didInsertElement: 0,
                didUpdate: 0,
                didRender: 0
            };
        },
        didInitAttrs: function () {
            this._super.apply(this, arguments);
            this.hooks['didInitAttrs']++;
        },
        didUpdateAttrs: function () {
            this._super.apply(this, arguments);
            this.hooks['didUpdateAttrs']++;
        },
        didReceiveAttrs: function () {
            this._super.apply(this, arguments);
            this.hooks['didReceiveAttrs']++;
        },
        willInsertElement: function () {
            this._super.apply(this, arguments);
            this.hooks['willInsertElement']++;
        },
        willUpdate: function () {
            this._super.apply(this, arguments);
            this.hooks['willUpdate']++;
        },
        willRender: function () {
            this._super.apply(this, arguments);
            this.hooks['willRender']++;
        },
        didInsertElement: function () {
            this._super.apply(this, arguments);
            this.hooks['didInsertElement']++;
        },
        didUpdate: function () {
            this._super.apply(this, arguments);
            this.hooks['didUpdate']++;
        },
        didRender: function () {
            this._super.apply(this, arguments);
            this.hooks['didRender']++;
        }
    });
}
exports.inspectHooks = inspectHooks;
var _a = runtime_1.BaselineSyntax.NestedBlock, defaultBlock = _a.defaultBlock, inverseBlock = _a.inverseBlock, params = _a.params, hash = _a.hash;
function populateBlocks(blocks, inlines) {
    blocks.add('identity', function (sexp, builder) {
        builder.evaluate(sexp[4]);
    });
    blocks.add('render-inverse', function (sexp, builder) {
        builder.evaluate(sexp[5]);
    });
    blocks.add('-with-dynamic-vars', function (sexp, builder) {
        var block = defaultBlock(sexp);
        var args = runtime_1.compileArgs(params(sexp), hash(sexp), builder);
        builder.unit(function (b) {
            b.putArgs(args);
            b.pushDynamicScope();
            b.bindDynamicScope(args.named.keys);
            b.evaluate(util_1.unwrap(block));
            b.popDynamicScope();
        });
    });
    blocks.add('-in-element', function (sexp, builder) {
        var block = defaultBlock(sexp);
        var args = runtime_1.compileArgs(params(sexp), hash(sexp), builder);
        builder.putArgs(args);
        builder.test('simple');
        builder.labelled(null, function (b) {
            b.jumpUnless('END');
            b.pushRemoteElement();
            b.evaluate(util_1.unwrap(block));
            b.popRemoteElement();
        });
    });
    blocks.add('component', function (sexp, builder) {
        var path = sexp[1], params = sexp[2], hash = sexp[3], _default = sexp[4], inverse = sexp[5];
        var definitionArgs = [params.slice(0, 1), null, null, null];
        var args = [params.slice(1), hash, _default, inverse];
        builder.component.dynamic(definitionArgs, dynamicComponentFor, args, builder.symbolTable);
        return true;
    });
    blocks.addMissing(function (sexp, builder) {
        var path = sexp[1], params = sexp[2], hash = sexp[3], _default = sexp[4], inverse = sexp[5];
        var table = builder.symbolTable;
        if (!params) {
            params = [];
        }
        if (path.length > 1) {
            var definitionArgs = [[['get', path]], hash, _default, inverse];
            var args = [params, hash, _default, inverse];
            builder.component.dynamic(definitionArgs, dynamicComponentFor, args, table);
            return true;
        }
        var definition = builder.env.getComponentDefinition(path, builder.symbolTable);
        if (definition) {
            builder.component.static(definition, [params, hash, _default, inverse], table);
            return true;
        }
        return false;
    });
    inlines.add('component', function (path, params, hash, builder) {
        var definitionArgs = [params.slice(0, 1), null, null, null];
        var args = [params.slice(1), hash, null, null];
        builder.component.dynamic(definitionArgs, dynamicComponentFor, args, builder.symbolTable);
        return true;
    });
    inlines.addMissing(function (path, params, hash, builder) {
        var table = builder.symbolTable;
        var definition = builder.env.getComponentDefinition(path, builder.symbolTable);
        if (path.length > 1) {
            var definitionArgs = [[['get', path]], hash, null, null];
            var args = [params, hash, null, null];
            builder.component.dynamic(definitionArgs, dynamicComponentFor, args, table);
            return true;
        }
        if (definition) {
            builder.component.static(definition, [params, hash, null, null], table);
            return true;
        }
        return false;
    });
    return { blocks: blocks, inlines: inlines };
}
function equalsElement(element, tagName, attributes, content) {
    QUnit.push(element.tagName === tagName.toUpperCase(), element.tagName.toLowerCase(), tagName, "expect tagName to be " + tagName);
    var expectedAttrs = util_1.dict();
    var expectedCount = 0;
    for (var prop in attributes) {
        expectedCount++;
        var expected = attributes[prop];
        var matcher = typeof expected === 'object' && exports.MATCHER in expected ? expected : equalsAttr(expected);
        expectedAttrs[prop] = matcher;
        QUnit.push(expectedAttrs[prop].match(element.getAttribute(prop)), matcher.fail(element.getAttribute(prop)), matcher.fail(element.getAttribute(prop)), "Expected element's " + prop + " attribute " + matcher.expected());
    }
    var actualAttributes = {};
    for (var i = 0, l = element.attributes.length; i < l; i++) {
        actualAttributes[element.attributes[i].name] = element.attributes[i].value;
    }
    if (!(element instanceof HTMLElement)) {
        QUnit.push(element instanceof HTMLElement, null, null, "Element must be an HTML Element, not an SVG Element");
    }
    else {
        QUnit.push(element.attributes.length === expectedCount, element.attributes.length, expectedCount, "Expected " + expectedCount + " attributes; got " + element.outerHTML);
        if (content !== null) {
            QUnit.push(element.innerHTML === content, element.innerHTML, content, "The element had '" + content + "' as its content");
        }
    }
}
exports.equalsElement = equalsElement;
exports.MATCHER = "3d4ef194-13be-4ccf-8dc7-862eea02c93e";
function equalsAttr(expected) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match: function (actual) {
            return expected === actual;
        },
        expected: function () {
            return "to equal " + expected;
        },
        fail: function (actual) {
            return actual + " did not equal " + expected;
        }
    };
}
exports.equalsAttr = equalsAttr;
function equals(expected) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match: function (actual) {
            return expected === actual;
        },
        expected: function () {
            return "to equal " + expected;
        },
        fail: function (actual) {
            return actual + " did not equal " + expected;
        }
    };
}
exports.equals = equals;
function regex(r) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match: function (v) {
            return r.test(v);
        },
        expected: function () {
            return "to match " + r;
        },
        fail: function (actual) {
            return actual + " did not match " + r;
        }
    };
}
exports.regex = regex;
function classes(expected) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match: function (actual) {
            return actual && (expected.split(' ').sort().join(' ') === actual.split(' ').sort().join(' '));
        },
        expected: function () {
            return "to include '" + expected + "'";
        },
        fail: function (actual) {
            return "'" + actual + "'' did not match '" + expected + "'";
        }
    };
}
exports.classes = classes;
//# sourceMappingURL=data:application/json;base64,