"use strict";
var simple_html_tokenizer_1 = require("simple-html-tokenizer");
var runtime_1 = require("@glimmer/runtime");
var compiler_1 = require("@glimmer/compiler");
// For Phantom
function toObject(val) {
    if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined');
    }
    return Object(val);
}
if (typeof Object.assign !== 'function') {
    Object.assign = function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (var key in from) {
                if (Object.prototype.hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
            if (Object.getOwnPropertySymbols) {
                symbols = Object.getOwnPropertySymbols(from);
                for (var i = 0; i < symbols.length; i++) {
                    if (Object.prototype.propertyIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
}
exports.assign = Object.assign;
function isMarker(node) {
    var TextNode = window.Text;
    var Comment = window.Comment;
    if (node instanceof Comment && node.textContent === '') {
        return true;
    }
    if (node instanceof TextNode && node.textContent === '') {
        return true;
    }
    return false;
}
function compile(string, options) {
    var js = compiler_1.precompile(string, options);
    var factory = runtime_1.templateFactory(JSON.parse(js));
    return factory.create(options.env);
}
exports.compile = compile;
function compileLayout(string, options) {
    return compile(string, options).asLayout();
}
exports.compileLayout = compileLayout;
function equalInnerHTML(fragment, html, msg) {
    var actualHTML = normalizeInnerHTML(fragment.innerHTML);
    QUnit.push(actualHTML === html, actualHTML, html, msg);
}
exports.equalInnerHTML = equalInnerHTML;
function equalHTML(node, html) {
    var fragment;
    if (!node.nodeType && node.length) {
        fragment = document.createDocumentFragment();
        while (node[0]) {
            fragment.appendChild(node[0]);
        }
    }
    else {
        fragment = node;
    }
    var div = document.createElement("div");
    div.appendChild(fragment.cloneNode(true));
    equalInnerHTML(div, html);
}
exports.equalHTML = equalHTML;
function generateTokens(divOrHTML) {
    var div;
    if (typeof divOrHTML === 'string') {
        div = document.createElement("div");
        div.innerHTML = divOrHTML;
    }
    else {
        div = divOrHTML;
    }
    return { tokens: simple_html_tokenizer_1.tokenize(div.innerHTML), html: div.innerHTML };
}
function equalTokens(fragment, html, message) {
    if (message === void 0) { message = null; }
    if (fragment.fragment) {
        fragment = fragment.fragment;
    }
    if (html.fragment) {
        html = html.fragment;
    }
    var fragTokens = generateTokens(fragment);
    var htmlTokens = generateTokens(html);
    function normalizeTokens(token) {
        if (token.type === 'StartTag') {
            token.attributes = token.attributes.sort(function (a, b) {
                if (a[0] > b[0]) {
                    return 1;
                }
                if (a[0] < b[0]) {
                    return -1;
                }
                return 0;
            });
        }
    }
    fragTokens.tokens.forEach(normalizeTokens);
    htmlTokens.tokens.forEach(normalizeTokens);
    // let msg = "Expected: " + htmlTokens.html + "; Actual: " + fragTokens.html;
    // if (message) { msg += " (" + message + ")"; }
    var equiv = QUnit.equiv(fragTokens.tokens, htmlTokens.tokens);
    if (equiv && fragTokens.html !== htmlTokens.html) {
        QUnit.deepEqual(fragTokens.tokens, htmlTokens.tokens, message);
    }
    else {
        QUnit.push(QUnit.equiv(fragTokens.tokens, htmlTokens.tokens), fragTokens.html, htmlTokens.html, message);
    }
    // deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
}
exports.equalTokens = equalTokens;
function generateSnapshot(element) {
    var snapshot = [];
    var node = element.firstChild;
    while (node) {
        if (!isMarker(node)) {
            snapshot.push(node);
        }
        node = node.nextSibling;
    }
    return snapshot;
}
exports.generateSnapshot = generateSnapshot;
function equalSnapshots(a, b) {
    QUnit.strictEqual(a.length, b.length, 'Same number of nodes');
    for (var i = 0; i < b.length; i++) {
        QUnit.strictEqual(a[i], b[i], 'Nodes are the same');
    }
}
exports.equalSnapshots = equalSnapshots;
// detect side-effects of cloning svg elements in IE9-11
var ieSVGInnerHTML = (function () {
    if (typeof document === 'undefined' || !document.createElementNS) {
        return false;
    }
    var div = document.createElement('div');
    var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    div.appendChild(node);
    var clone = div.cloneNode(true);
    return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
})();
function normalizeInnerHTML(actualHTML) {
    if (ieSVGInnerHTML) {
        // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
        // drop namespace attribute
        actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
        // replace self-closing elements
        actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
            return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
        });
    }
    return actualHTML;
}
exports.normalizeInnerHTML = normalizeInnerHTML;
var isCheckedInputHTML;
exports.isCheckedInputHTML = isCheckedInputHTML;
if (typeof document === 'undefined') {
    exports.isCheckedInputHTML = isCheckedInputHTML = function (element) {
    };
}
else {
    // detect weird IE8 checked element string
    var checkedInput = document.createElement('input');
    checkedInput.setAttribute('checked', 'checked');
    var checkedInputString_1 = checkedInput.outerHTML;
    exports.isCheckedInputHTML = isCheckedInputHTML = function (element) {
        QUnit.equal(element.outerHTML, checkedInputString_1);
    };
}
// check which property has the node's text content
var textProperty = typeof document === 'object' && document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';
function getTextContent(el) {
    // textNode
    if (el.nodeType === 3) {
        return el.nodeValue;
    }
    else {
        return el[textProperty];
    }
}
exports.getTextContent = getTextContent;
function strip(strings) {
    return strings[0].split('\n').map(function (s) { return s.trim(); }).join(' ');
}
exports.strip = strip;
function stripTight(strings) {
    return strings[0].split('\n').map(function (s) { return s.trim(); }).join('');
}
exports.stripTight = stripTight;
function trimLines(strings) {
    return strings[0].trim().split('\n').map(function (s) { return s.trim(); }).join('\n');
}
exports.trimLines = trimLines;
//# sourceMappingURL=data:application/json;base64,