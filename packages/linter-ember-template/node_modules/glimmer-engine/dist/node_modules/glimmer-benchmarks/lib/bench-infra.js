"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bench_1 = require("./bench");
var stats_1 = require("./stats");
var TestReporter = (function (_super) {
    __extends(TestReporter, _super);
    function TestReporter() {
        var _this = _super.call(this) || this;
        _this.pre = document.createElement('pre');
        _this.cycle = document.createElement('pre');
        _this.cycle.id = "cycle";
        _this.pre.id = "benchmark-log";
        document.body.appendChild(_this.cycle);
        document.body.appendChild(_this.pre);
        return _this;
    }
    TestReporter.prototype.progress = function (count, elapsed, stats) {
        var error = stats.rme.toFixed(2);
        this.cycle.innerHTML = count + " samples in " + toHumanTime(elapsed) + " (" + toHumanTime(stats.mean) + " \u00B1 " + error + "%)";
    };
    TestReporter.prototype.error = function (error) {
        this.logln(error['stack']);
        this.cycle.innerHTML = "Errored";
    };
    TestReporter.prototype.complete = function (benchmark, event) {
        var rawStats = benchmark.stats;
        if (rawStats.sample.length === 0)
            return;
        var stats = new stats_1.default({ bucket_precision: rawStats.moe });
        stats.push(rawStats.sample);
        this.cycle.innerHTML = "Idle";
        var unit = humanUnitFor(stats.median(), stats.percentile(95), stats.percentile(99), stats.moe());
        this.logln('Samples:    ' + rawStats.sample.length);
        this.logln('Median:     ' + toHumanTime(stats.median(), unit, 4));
        this.logln('95%:        ' + toHumanTime(stats.percentile(95), unit, 4));
        this.logln('99%:        ' + toHumanTime(stats.percentile(99), unit, 4));
        this.logln('Confidence: ±' + toHumanTime(stats.moe(), unit, 4));
        this.logln('\n');
        this.logln('Distribution:');
        var div = document.createElement('div');
        div.className = 'histogram';
        var distribution = stats.iqr().distribution();
        var maxHeight = Math.max.apply(Math, distribution.filter(function (d) { return d; }).map(function (d) { return d.count; }));
        var widthPercentage = 100 / distribution.length;
        distribution.forEach(function (d, i) {
            var bar = document.createElement('div');
            bar.style.width = widthPercentage + "%";
            bar.style.height = 95 * d.count / maxHeight + "%";
            bar.style.bottom = '0px';
            bar.style.left = i * widthPercentage + "%";
            bar.className = 'bar';
            bar.title = d.count;
            div.appendChild(bar);
            var label = document.createElement('span');
            label.style.width = '100px';
            label.style.height = '20px';
            label.style.bottom = '-20px';
            label.style.left = i * widthPercentage + "%";
            label.style.transform = 'translateX(-50px)';
            label.style.textAlign = 'center';
            label.style.lineHeight = '20px';
            label.style.fontSize = '10px';
            label.className = 'label';
            label.innerText = toHumanTime(d.range[0], unit, 2, false);
            div.appendChild(label);
            var label2 = label.cloneNode(false);
            label2.style.left = (i + 1) * widthPercentage + "%";
            label2.innerText = toHumanTime(d.range[1], unit, 2, false);
            div.appendChild(label2);
        });
        document.body.appendChild(div);
        this.logln('\n');
    };
    TestReporter.prototype.logln = function (message) {
        var child = document.createElement('pre');
        child.innerText = message;
        this.pre.appendChild(child);
    };
    return TestReporter;
}(bench_1.BenchmarkReporter));
exports.TestReporter = TestReporter;
var TimeUnit;
(function (TimeUnit) {
    TimeUnit[TimeUnit["ns"] = 1000000000] = "ns";
    TimeUnit[TimeUnit["\u00B5s"] = 1000000] = "\u00B5s";
    TimeUnit[TimeUnit["ms"] = 1000] = "ms";
    TimeUnit[TimeUnit["s"] = 1] = "s";
})(TimeUnit || (TimeUnit = {}));
;
function humanUnitFor() {
    var seconds = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        seconds[_i] = arguments[_i];
    }
    var units = seconds.map(function (time) {
        if (time < (1 / 10000000)) {
            return TimeUnit.ns;
        }
        else if (time < (1 / 10000)) {
            return TimeUnit.µs;
        }
        else if (time < 1 / 10) {
            return TimeUnit.ms;
        }
        else {
            return TimeUnit.s;
        }
    });
    return Math.min.apply(Math, units);
}
function toHumanTime(seconds, base, precision, displayUnit) {
    if (base === void 0) { base = humanUnitFor(seconds); }
    if (precision === void 0) { precision = 2; }
    if (displayUnit === void 0) { displayUnit = true; }
    var number = (seconds * base).toFixed(precision);
    var unit = displayUnit ? TimeUnit[base] : '';
    return "" + number + unit;
}
var TestBenchmarkEnvironment = (function (_super) {
    __extends(TestBenchmarkEnvironment, _super);
    function TestBenchmarkEnvironment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TestBenchmarkEnvironment.prototype.elapsed = function (timestamp) {
        return Date.now() - timestamp;
    };
    return TestBenchmarkEnvironment;
}(bench_1.BenchmarkEnvironment));
exports.TestBenchmarkEnvironment = TestBenchmarkEnvironment;
//# sourceMappingURL=data:application/json;base64,