"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bench_1 = require("../bench");
var StaticPartialScenario = (function (_super) {
    __extends(StaticPartialScenario, _super);
    function StaticPartialScenario() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "static partial";
        _this.description = "`{{partial 'greeting'}}`";
        return _this;
    }
    StaticPartialScenario.prototype.start = function () {
        this.glimmerEnv.registerPartial('greeting', "Hi {{person1.name}} from a partial");
        _super.prototype.start.call(this);
    };
    StaticPartialScenario.prototype.template = function () {
        return "[{{partial 'greeting'}}]";
    };
    StaticPartialScenario.prototype.renderContext = function () {
        return {
            person1: { name: 'Alex Joyce' }
        };
    };
    StaticPartialScenario.prototype.test = function (render) {
        var result = render().outerHTML;
        if (result !== '<div>[Hi Alex Joyce from a partial]</div>') {
            throw new Error("Invalid render: " + result);
        }
    };
    return StaticPartialScenario;
}(bench_1.TemplateBenchmarkScenario));
var DynamicPartialScenario = (function (_super) {
    __extends(DynamicPartialScenario, _super);
    function DynamicPartialScenario() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "dynamic partial";
        _this.description = "`{{partial partialName}}`";
        return _this;
    }
    DynamicPartialScenario.prototype.start = function () {
        this.glimmerEnv.registerPartial('greeting', "Hi {{person1.name}} from a partial");
        _super.prototype.start.call(this);
    };
    DynamicPartialScenario.prototype.template = function () {
        return "[{{partial partialName}}]";
    };
    DynamicPartialScenario.prototype.renderContext = function () {
        return {
            partialName: 'greeting',
            person1: { name: 'Ben Joyce' }
        };
    };
    DynamicPartialScenario.prototype.test = function (render) {
        var result = render().outerHTML;
        if (result !== '<div>[Hi Ben Joyce from a partial]</div>') {
            throw new Error("Invalid render: " + result);
        }
    };
    return DynamicPartialScenario;
}(bench_1.TemplateBenchmarkScenario));
var BaselineScenario = (function (_super) {
    __extends(BaselineScenario, _super);
    function BaselineScenario() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "baseline";
        _this.description = "a template with no partial";
        return _this;
    }
    BaselineScenario.prototype.template = function () {
        return "[Hi {{person1.name}} from a template]";
    };
    BaselineScenario.prototype.renderContext = function () {
        return {
            person1: { name: 'Sarah Galvin' }
        };
    };
    BaselineScenario.prototype.test = function (render) {
        var result = render().outerHTML;
        if (result !== '<div>[Hi Sarah Galvin from a template]</div>') {
            throw new Error("Invalid render: " + result);
        }
    };
    return BaselineScenario;
}(bench_1.TemplateBenchmarkScenario));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = [
    StaticPartialScenario,
    DynamicPartialScenario,
    BaselineScenario
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlhbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLWJlbmNobWFya3MvbGliL2JlbmNobWFya3MvcGFydGlhbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0NBQXdFO0FBRXhFO0lBQW9DLHlDQUF5QjtJQUE3RDtRQUFBLHFFQXlCQztRQXhCQyxVQUFJLEdBQUcsZ0JBQWdCLENBQUM7UUFDeEIsaUJBQVcsR0FBRywwQkFBMEIsQ0FBQzs7SUF1QjNDLENBQUM7SUFyQkMscUNBQUssR0FBTDtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ2xGLGlCQUFNLEtBQUssV0FBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCx3Q0FBUSxHQUFSO1FBQ0UsTUFBTSxDQUFDLDBCQUEwQixDQUFDO0lBQ3BDLENBQUM7SUFFRCw2Q0FBYSxHQUFiO1FBQ0UsTUFBTSxDQUFDO1lBQ0wsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTtTQUNoQyxDQUFDO0lBQ0osQ0FBQztJQUVELG9DQUFJLEdBQUosVUFBSyxNQUF5QjtRQUM1QixJQUFJLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDaEMsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLDJDQUEyQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFtQixNQUFRLENBQUMsQ0FBQztRQUMvQyxDQUFDO0lBQ0gsQ0FBQztJQUNILDRCQUFDO0FBQUQsQ0FBQyxBQXpCRCxDQUFvQyxpQ0FBeUIsR0F5QjVEO0FBRUQ7SUFBcUMsMENBQXlCO0lBQTlEO1FBQUEscUVBMEJDO1FBekJDLFVBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUN6QixpQkFBVyxHQUFHLDJCQUEyQixDQUFDOztJQXdCNUMsQ0FBQztJQXRCQyxzQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFLG9DQUFvQyxDQUFDLENBQUM7UUFDbEYsaUJBQU0sS0FBSyxXQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELHlDQUFRLEdBQVI7UUFDRSxNQUFNLENBQUMsMkJBQTJCLENBQUM7SUFDckMsQ0FBQztJQUVELDhDQUFhLEdBQWI7UUFDRSxNQUFNLENBQUM7WUFDTCxXQUFXLEVBQUUsVUFBVTtZQUN2QixPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFO1NBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQscUNBQUksR0FBSixVQUFLLE1BQXlCO1FBQzVCLElBQUksTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQztRQUNoQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssMENBQTBDLENBQUMsQ0FBQyxDQUFDO1lBQzFELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQW1CLE1BQVEsQ0FBQyxDQUFDO1FBQy9DLENBQUM7SUFDSCxDQUFDO0lBQ0gsNkJBQUM7QUFBRCxDQUFDLEFBMUJELENBQXFDLGlDQUF5QixHQTBCN0Q7QUFFRDtJQUErQixvQ0FBeUI7SUFBeEQ7UUFBQSxxRUFvQkM7UUFuQkMsVUFBSSxHQUFHLFVBQVUsQ0FBQztRQUNsQixpQkFBVyxHQUFHLDRCQUE0QixDQUFDOztJQWtCN0MsQ0FBQztJQWhCQyxtQ0FBUSxHQUFSO1FBQ0UsTUFBTSxDQUFDLHVDQUF1QyxDQUFDO0lBQ2pELENBQUM7SUFFRCx3Q0FBYSxHQUFiO1FBQ0UsTUFBTSxDQUFDO1lBQ0wsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRTtTQUNsQyxDQUFDO0lBQ0osQ0FBQztJQUVELCtCQUFJLEdBQUosVUFBSyxNQUF5QjtRQUM1QixJQUFJLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUM7UUFDaEMsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLDhDQUE4QyxDQUFDLENBQUMsQ0FBQztZQUM5RCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFtQixNQUFRLENBQUMsQ0FBQztRQUMvQyxDQUFDO0lBQ0gsQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQXBCRCxDQUErQixpQ0FBeUIsR0FvQnZEOztBQUVELGtCQUEyQztJQUN6QyxxQkFBcUI7SUFDckIsc0JBQXNCO0lBQ3RCLGdCQUFnQjtDQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGVtcGxhdGVCZW5jaG1hcmtTY2VuYXJpbywgQmVuY2htYXJrU2NlbmFyaW8gfSBmcm9tICcuLi9iZW5jaCc7XG5cbmNsYXNzIFN0YXRpY1BhcnRpYWxTY2VuYXJpbyBleHRlbmRzIFRlbXBsYXRlQmVuY2htYXJrU2NlbmFyaW8ge1xuICBuYW1lID0gXCJzdGF0aWMgcGFydGlhbFwiO1xuICBkZXNjcmlwdGlvbiA9IFwiYHt7cGFydGlhbCAnZ3JlZXRpbmcnfX1gXCI7XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5nbGltbWVyRW52LnJlZ2lzdGVyUGFydGlhbCgnZ3JlZXRpbmcnLCBgSGkge3twZXJzb24xLm5hbWV9fSBmcm9tIGEgcGFydGlhbGApO1xuICAgIHN1cGVyLnN0YXJ0KCk7XG4gIH1cblxuICB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gYFt7e3BhcnRpYWwgJ2dyZWV0aW5nJ319XWA7XG4gIH1cblxuICByZW5kZXJDb250ZXh0KCk6IE9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBlcnNvbjE6IHsgbmFtZTogJ0FsZXggSm95Y2UnIH1cbiAgICB9O1xuICB9XG5cbiAgdGVzdChyZW5kZXI6ICgpID0+IEhUTUxFbGVtZW50KSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlbmRlcigpLm91dGVySFRNTDtcbiAgICBpZiAocmVzdWx0ICE9PSAnPGRpdj5bSGkgQWxleCBKb3ljZSBmcm9tIGEgcGFydGlhbF08L2Rpdj4nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVuZGVyOiAke3Jlc3VsdH1gKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgRHluYW1pY1BhcnRpYWxTY2VuYXJpbyBleHRlbmRzIFRlbXBsYXRlQmVuY2htYXJrU2NlbmFyaW8ge1xuICBuYW1lID0gXCJkeW5hbWljIHBhcnRpYWxcIjtcbiAgZGVzY3JpcHRpb24gPSBcImB7e3BhcnRpYWwgcGFydGlhbE5hbWV9fWBcIjtcblxuICBzdGFydCgpIHtcbiAgICB0aGlzLmdsaW1tZXJFbnYucmVnaXN0ZXJQYXJ0aWFsKCdncmVldGluZycsIGBIaSB7e3BlcnNvbjEubmFtZX19IGZyb20gYSBwYXJ0aWFsYCk7XG4gICAgc3VwZXIuc3RhcnQoKTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBgW3t7cGFydGlhbCBwYXJ0aWFsTmFtZX19XWA7XG4gIH1cblxuICByZW5kZXJDb250ZXh0KCk6IE9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcnRpYWxOYW1lOiAnZ3JlZXRpbmcnLFxuICAgICAgcGVyc29uMTogeyBuYW1lOiAnQmVuIEpveWNlJyB9XG4gICAgfTtcbiAgfVxuXG4gIHRlc3QocmVuZGVyOiAoKSA9PiBIVE1MRWxlbWVudCkge1xuICAgIGxldCByZXN1bHQgPSByZW5kZXIoKS5vdXRlckhUTUw7XG4gICAgaWYgKHJlc3VsdCAhPT0gJzxkaXY+W0hpIEJlbiBKb3ljZSBmcm9tIGEgcGFydGlhbF08L2Rpdj4nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVuZGVyOiAke3Jlc3VsdH1gKTtcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgQmFzZWxpbmVTY2VuYXJpbyBleHRlbmRzIFRlbXBsYXRlQmVuY2htYXJrU2NlbmFyaW8ge1xuICBuYW1lID0gXCJiYXNlbGluZVwiO1xuICBkZXNjcmlwdGlvbiA9IFwiYSB0ZW1wbGF0ZSB3aXRoIG5vIHBhcnRpYWxcIjtcblxuICB0ZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gYFtIaSB7e3BlcnNvbjEubmFtZX19IGZyb20gYSB0ZW1wbGF0ZV1gO1xuICB9XG5cbiAgcmVuZGVyQ29udGV4dCgpOiBPYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBwZXJzb24xOiB7IG5hbWU6ICdTYXJhaCBHYWx2aW4nIH1cbiAgICB9O1xuICB9XG5cbiAgdGVzdChyZW5kZXI6ICgpID0+IEhUTUxFbGVtZW50KSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlbmRlcigpLm91dGVySFRNTDtcbiAgICBpZiAocmVzdWx0ICE9PSAnPGRpdj5bSGkgU2FyYWggR2FsdmluIGZyb20gYSB0ZW1wbGF0ZV08L2Rpdj4nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgcmVuZGVyOiAke3Jlc3VsdH1gKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgPHR5cGVvZiBCZW5jaG1hcmtTY2VuYXJpb1tdPltcbiAgU3RhdGljUGFydGlhbFNjZW5hcmlvLFxuICBEeW5hbWljUGFydGlhbFNjZW5hcmlvLFxuICBCYXNlbGluZVNjZW5hcmlvXG5dO1xuIl19