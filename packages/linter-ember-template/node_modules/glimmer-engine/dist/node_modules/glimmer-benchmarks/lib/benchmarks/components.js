"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var bench_1 = require("../bench");
var NestedEmberishCurleyTaglessComponentsScenario = (function (_super) {
    __extends(NestedEmberishCurleyTaglessComponentsScenario, _super);
    function NestedEmberishCurleyTaglessComponentsScenario() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.name = "nested emberish curley tagless component";
        _this.description = "10 outer components, each with 10 inner components";
        return _this;
    }
    NestedEmberishCurleyTaglessComponentsScenario.prototype.start = function () {
        this.glimmerEnv.registerStaticTaglessComponent("parent-component", null, "<h1>{{parent.name}}</h1>\n        <ul>\n          {{#each parent.children key=\"@index\" as |child|}}\n            {{child-component child=child parent=parent}}\n          {{/each}}\n        </ul>");
        this.glimmerEnv.registerStaticTaglessComponent("child-component", null, "<li>{{child.name}} (from {{parent.name}})</li>");
        _super.prototype.start.call(this);
    };
    NestedEmberishCurleyTaglessComponentsScenario.prototype.template = function () {
        return "{{#each parents key=\"@index\" as |parent|}}\n              {{parent-component parent=parent}}\n            {{/each}}";
    };
    NestedEmberishCurleyTaglessComponentsScenario.prototype.renderContext = function () {
        var context = {
            parents: []
        };
        for (var i = 0; i < 10; i++) {
            var parent = { name: "Parent " + i, children: [] };
            context.parents.push(parent);
            for (var j = 0; j < 10; j++) {
                parent.children.push({ name: "Child " + j });
            }
        }
        return context;
    };
    NestedEmberishCurleyTaglessComponentsScenario.prototype.test = function (render) {
        var element = render();
        var has10Parents = element.getElementsByTagName('h1').length === 10;
        var hasParentText = element.getElementsByTagName('h1')[0].textContent === 'Parent 0';
        var has100Children = element.getElementsByTagName('li').length === 100;
        var hasChildText = element.getElementsByTagName('li')[0].textContent === 'Child 0 (from Parent 0)';
        if (!has10Parents || !hasParentText || !has100Children || !hasChildText) {
            throw new Error("Invalid render: " + element.outerHTML);
        }
    };
    return NestedEmberishCurleyTaglessComponentsScenario;
}(bench_1.TemplateBenchmarkScenario));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = [
    NestedEmberishCurleyTaglessComponentsScenario
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItYmVuY2htYXJrcy9saWIvYmVuY2htYXJrcy9jb21wb25lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtDQUF3RTtBQUV4RTtJQUE0RCxpRUFBeUI7SUFBckY7UUFBQSxxRUFvREM7UUFuREMsVUFBSSxHQUFHLDBDQUEwQyxDQUFDO1FBQ2xELGlCQUFXLEdBQUcsb0RBQW9ELENBQUM7O0lBa0RyRSxDQUFDO0lBaERDLDZEQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLGtCQUFrQixFQUFFLElBQUksRUFDckUsc01BS1EsQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyw4QkFBOEIsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLEVBQ3BFLGdEQUFnRCxDQUFDLENBQUM7UUFFcEQsaUJBQU0sS0FBSyxXQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELGdFQUFRLEdBQVI7UUFDRSxNQUFNLENBQUMsdUhBRVcsQ0FBQztJQUNyQixDQUFDO0lBRUQscUVBQWEsR0FBYjtRQUNFLElBQUksT0FBTyxHQUFHO1lBQ1osT0FBTyxFQUFFLEVBQUU7U0FDWixDQUFDO1FBRUYsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUN2QixJQUFJLE1BQU0sR0FBRyxFQUFFLElBQUksRUFBRSxZQUFVLENBQUcsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDbkQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDN0IsR0FBRyxDQUFBLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDdkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBUyxDQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQy9DLENBQUM7UUFDSCxDQUFDO1FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsNERBQUksR0FBSixVQUFLLE1BQXlCO1FBQzVCLElBQUksT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDO1FBRXZCLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDO1FBQ3BFLElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssVUFBVSxDQUFDO1FBQ3JGLElBQUksY0FBYyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDO1FBQ3ZFLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUsseUJBQXlCLENBQUM7UUFFbkcsRUFBRSxDQUFBLENBQUMsQ0FBQyxZQUFZLElBQUksQ0FBQyxhQUFhLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQW1CLE9BQU8sQ0FBQyxTQUFXLENBQUMsQ0FBQztRQUMxRCxDQUFDO0lBQ0gsQ0FBQztJQUNILG9EQUFDO0FBQUQsQ0FBQyxBQXBERCxDQUE0RCxpQ0FBeUIsR0FvRHBGOztBQUVELGtCQUEyQztJQUN6Qyw2Q0FBNkM7Q0FDOUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlQmVuY2htYXJrU2NlbmFyaW8sIEJlbmNobWFya1NjZW5hcmlvIH0gZnJvbSAnLi4vYmVuY2gnO1xuXG5jbGFzcyBOZXN0ZWRFbWJlcmlzaEN1cmxleVRhZ2xlc3NDb21wb25lbnRzU2NlbmFyaW8gZXh0ZW5kcyBUZW1wbGF0ZUJlbmNobWFya1NjZW5hcmlvIHtcbiAgbmFtZSA9IFwibmVzdGVkIGVtYmVyaXNoIGN1cmxleSB0YWdsZXNzIGNvbXBvbmVudFwiO1xuICBkZXNjcmlwdGlvbiA9IFwiMTAgb3V0ZXIgY29tcG9uZW50cywgZWFjaCB3aXRoIDEwIGlubmVyIGNvbXBvbmVudHNcIjtcblxuICBzdGFydCgpIHtcbiAgICB0aGlzLmdsaW1tZXJFbnYucmVnaXN0ZXJTdGF0aWNUYWdsZXNzQ29tcG9uZW50KFwicGFyZW50LWNvbXBvbmVudFwiLCBudWxsLFxuICAgICAgYDxoMT57e3BhcmVudC5uYW1lfX08L2gxPlxuICAgICAgICA8dWw+XG4gICAgICAgICAge3sjZWFjaCBwYXJlbnQuY2hpbGRyZW4ga2V5PVwiQGluZGV4XCIgYXMgfGNoaWxkfH19XG4gICAgICAgICAgICB7e2NoaWxkLWNvbXBvbmVudCBjaGlsZD1jaGlsZCBwYXJlbnQ9cGFyZW50fX1cbiAgICAgICAgICB7ey9lYWNofX1cbiAgICAgICAgPC91bD5gKTtcbiAgICB0aGlzLmdsaW1tZXJFbnYucmVnaXN0ZXJTdGF0aWNUYWdsZXNzQ29tcG9uZW50KFwiY2hpbGQtY29tcG9uZW50XCIsIG51bGwsXG4gICAgICBgPGxpPnt7Y2hpbGQubmFtZX19IChmcm9tIHt7cGFyZW50Lm5hbWV9fSk8L2xpPmApO1xuXG4gICAgc3VwZXIuc3RhcnQoKTtcbiAgfVxuXG4gIHRlbXBsYXRlKCkge1xuICAgIHJldHVybiBge3sjZWFjaCBwYXJlbnRzIGtleT1cIkBpbmRleFwiIGFzIHxwYXJlbnR8fX1cbiAgICAgICAgICAgICAge3twYXJlbnQtY29tcG9uZW50IHBhcmVudD1wYXJlbnR9fVxuICAgICAgICAgICAge3svZWFjaH19YDtcbiAgfVxuXG4gIHJlbmRlckNvbnRleHQoKTogT2JqZWN0IHtcbiAgICBsZXQgY29udGV4dCA9IHtcbiAgICAgIHBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIGZvcihsZXQgaT0wOyBpPDEwOyBpKyspIHtcbiAgICAgIGxldCBwYXJlbnQgPSB7IG5hbWU6IGBQYXJlbnQgJHtpfWAsIGNoaWxkcmVuOiBbXSB9O1xuICAgICAgY29udGV4dC5wYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIGZvcihsZXQgaj0wOyBqPDEwOyBqKyspIHtcbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2goeyBuYW1lOiBgQ2hpbGQgJHtqfWAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnRleHQ7XG4gIH1cblxuICB0ZXN0KHJlbmRlcjogKCkgPT4gSFRNTEVsZW1lbnQpIHtcbiAgICBsZXQgZWxlbWVudCA9IHJlbmRlcigpO1xuXG4gICAgbGV0IGhhczEwUGFyZW50cyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2gxJykubGVuZ3RoID09PSAxMDtcbiAgICBsZXQgaGFzUGFyZW50VGV4dCA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2gxJylbMF0udGV4dENvbnRlbnQgPT09ICdQYXJlbnQgMCc7XG4gICAgbGV0IGhhczEwMENoaWxkcmVuID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGknKS5sZW5ndGggPT09IDEwMDtcbiAgICBsZXQgaGFzQ2hpbGRUZXh0ID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnbGknKVswXS50ZXh0Q29udGVudCA9PT0gJ0NoaWxkIDAgKGZyb20gUGFyZW50IDApJztcblxuICAgIGlmKCFoYXMxMFBhcmVudHMgfHwgIWhhc1BhcmVudFRleHQgfHwgIWhhczEwMENoaWxkcmVuIHx8ICFoYXNDaGlsZFRleHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCByZW5kZXI6ICR7ZWxlbWVudC5vdXRlckhUTUx9YCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IDx0eXBlb2YgQmVuY2htYXJrU2NlbmFyaW9bXT5bXG4gIE5lc3RlZEVtYmVyaXNoQ3VybGV5VGFnbGVzc0NvbXBvbmVudHNTY2VuYXJpb1xuXTtcbiJdfQ==