// Goals:
//
// 1. ability to create new benchmark examples with templates etc. (ideally
//    in separate subclasses)
// 2. unit test the examples to make sure they actually work before benchmarking
// 3. clean up the UI of the report (post-MVP)
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var util_1 = require("@glimmer/util");
Benchmark.support.decompilation = false;
var BenchmarkScenario = (function () {
    function BenchmarkScenario(reporter, env) {
        this.reporter = reporter;
        this.env = env;
    }
    BenchmarkScenario.prototype.start = function () {
    };
    BenchmarkScenario.prototype.tick = function (target, event) {
        var stats = target.stats, times = target.times;
        this.moe = target.stats.moe;
        var elapsed = this.env.elapsed(times.timeStamp);
        this.reporter.progress(stats.sample.length, elapsed / 1000, stats);
    };
    BenchmarkScenario.prototype.error = function (error) {
        this.reporter.error(error);
    };
    BenchmarkScenario.prototype.complete = function (event) {
        this.reporter.complete(event.target, event);
    };
    return BenchmarkScenario;
}());
exports.BenchmarkScenario = BenchmarkScenario;
var BenchmarkEnvironment = (function () {
    function BenchmarkEnvironment() {
    }
    return BenchmarkEnvironment;
}());
exports.BenchmarkEnvironment = BenchmarkEnvironment;
var BenchmarkReporter = (function () {
    function BenchmarkReporter() {
    }
    return BenchmarkReporter;
}());
exports.BenchmarkReporter = BenchmarkReporter;
var BenchmarkSuite = (function () {
    function BenchmarkSuite() {
        this.scenarios = util_1.dict();
    }
    BenchmarkSuite.prototype.add = function (scenario) {
        var bench = new Benchmark({
            minSamples: 200,
            name: scenario.name,
            fn: scenario.run.bind(scenario),
            onStart: scenario.start.bind(scenario),
            onCycle: function (event) {
                if (event.target.aborted)
                    return;
                scenario.tick(event.target, event);
            },
            onError: function (error) {
                scenario.error(error.message);
            },
            onComplete: scenario.complete.bind(scenario)
        });
        this.scenarios[scenario.name] = bench;
    };
    BenchmarkSuite.prototype.run = function (name) {
        return this.scenarios[name].run({ async: true });
    };
    return BenchmarkSuite;
}());
exports.BenchmarkSuite = BenchmarkSuite;
var test_helpers_1 = require("@glimmer/test-helpers");
var object_reference_1 = require("@glimmer/object-reference");
var TemplateBenchmarkScenario = (function (_super) {
    __extends(TemplateBenchmarkScenario, _super);
    function TemplateBenchmarkScenario() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.compiled = null;
        _this.context = null;
        _this.glimmerEnv = new test_helpers_1.TestEnvironment();
        return _this;
    }
    TemplateBenchmarkScenario.prototype.start = function () {
        var _this = this;
        var glimmerEnv = this.glimmerEnv;
        this.compiled = test_helpers_1.compile(this.template(), { env: this.glimmerEnv });
        this.context = this.renderContext();
        try {
            this.test(function () {
                var parent = glimmerEnv.getDOM().createElement('div');
                var contextRef = new object_reference_1.UpdatableReference(_this.context);
                glimmerEnv.begin();
                _this.compiled.render(contextRef, parent, new test_helpers_1.TestDynamicScope());
                glimmerEnv.commit();
                return parent;
            });
        }
        catch (e) {
            // console.assert(e);
            this.error(e);
            throw e;
        }
    };
    TemplateBenchmarkScenario.prototype.run = function () {
        var _a = this, glimmerEnv = _a.glimmerEnv, compiled = _a.compiled;
        var parent = glimmerEnv.getDOM().createElement('div');
        var context = new object_reference_1.UpdatableReference(this.context);
        glimmerEnv.begin();
        compiled.render(context, parent, new test_helpers_1.TestDynamicScope());
        glimmerEnv.commit();
    };
    return TemplateBenchmarkScenario;
}(BenchmarkScenario));
exports.TemplateBenchmarkScenario = TemplateBenchmarkScenario;
//# sourceMappingURL=data:application/json;base64,