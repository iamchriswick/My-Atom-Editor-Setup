"use strict";
var bench_1 = require("./bench");
var bench_infra_1 = require("./bench-infra");
var bench_suites_1 = require("./bench-suites");
function init() {
    var options = getJsonFromUrl();
    if (!options['suite']) {
        document.writeln('<h1>Please select a benchmark suite</h1>');
        document.writeln('<ul>');
        Object.keys(bench_suites_1.default).forEach(function (id) {
            document.writeln(" <li><a href=\"?suite=" + id + "\">" + id + "</a></li>");
        });
        document.writeln('</ul>');
        return;
    }
    /* tslint:disable:no-require-imports */
    var scenarios = require('glimmer-benchmarks').Suites[options['suite']];
    /* tslint:enable:no-require-imports */
    var suite = new bench_1.BenchmarkSuite();
    var env = new bench_infra_1.TestBenchmarkEnvironment();
    var reporter = new bench_infra_1.TestReporter();
    scenarios.forEach(function (S) { return suite.add(new S(reporter, env)); });
    var div = document.createElement('div');
    div.id = "buttons";
    Object.keys(suite.scenarios).forEach(function (name) {
        var button = document.createElement('button');
        button.onclick = function () { return suite.run(name); };
        button.innerText = name;
        div.appendChild(button);
    });
    document.body.insertBefore(div, document.body.firstChild);
}
exports.init = init;
function getJsonFromUrl(hashBased) {
    var query;
    if (hashBased) {
        var pos = location.href.indexOf("?");
        if (pos === -1)
            return [];
        query = location.href.substr(pos + 1);
    }
    else {
        query = location.search.substr(1);
    }
    var result = {};
    query.split("&").forEach(function (part) {
        if (!part)
            return;
        part = part.split("+").join(" "); // replace every + with space, regexp-free version
        var eq = part.indexOf("=");
        var key = eq > -1 ? part.substr(0, eq) : part;
        var val = eq > -1 ? decodeURIComponent(part.substr(eq + 1)) : "";
        var from = key.indexOf("[");
        if (from === -1)
            result[decodeURIComponent(key)] = val;
        else {
            var to = key.indexOf("]");
            var index = decodeURIComponent(key.substring(from + 1, to));
            key = decodeURIComponent(key.substring(0, from));
            if (!result[key])
                result[key] = [];
            if (!index)
                result[key].push(val);
            else
                result[key][index] = val;
        }
    });
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVuY2gtaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsaW1tZXItYmVuY2htYXJrcy9saWIvYmVuY2gtaW5pdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUNBQXFHO0FBQ3JHLDZDQUF1RTtBQVF2RSwrQ0FBb0M7QUFFcEM7SUFDRSxJQUFJLE9BQU8sR0FBRyxjQUFjLEVBQUUsQ0FBQztJQUUvQixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsUUFBUSxDQUFDLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQzdELFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekIsTUFBTSxDQUFDLElBQUksQ0FBQyxzQkFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsRUFBRTtZQUM1QixRQUFRLENBQUMsT0FBTyxDQUFDLDJCQUF3QixFQUFFLFdBQUssRUFBRSxjQUFXLENBQUMsQ0FBQztRQUNqRSxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFMUIsTUFBTSxDQUFDO0lBQ1QsQ0FBQztJQUVELHVDQUF1QztJQUN2QyxJQUFJLFNBQVMsR0FBb0IsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLHNDQUFzQztJQUN0QyxJQUFJLEtBQUssR0FBRyxJQUFJLHNCQUFjLEVBQUUsQ0FBQztJQUNqQyxJQUFJLEdBQUcsR0FBRyxJQUFJLHNDQUF3QixFQUFFLENBQUM7SUFDekMsSUFBSSxRQUFRLEdBQUcsSUFBSSwwQkFBWSxFQUFFLENBQUM7SUFFbEMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcs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QyxDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNoRCxFQUFFLENBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ2xDLEVBQUUsQ0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakMsSUFBSTtnQkFBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ2hDLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlbmNobWFya1JlcG9ydGVyLCBCZW5jaG1hcmtFbnZpcm9ubWVudCwgQmVuY2htYXJrU2NlbmFyaW8sIEJlbmNobWFya1N1aXRlIH0gZnJvbSAnLi9iZW5jaCc7XG5pbXBvcnQgeyBUZXN0UmVwb3J0ZXIsIFRlc3RCZW5jaG1hcmtFbnZpcm9ubWVudCB9IGZyb20gJy4vYmVuY2gtaW5mcmEnO1xuXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUobW9kdWxlOiBzdHJpbmcpOiBhbnk7XG5cbmludGVyZmFjZSBTY2VuYXJpb0NsYXNzIHtcbiAgbmV3KHJlcG9ydGVyOiBCZW5jaG1hcmtSZXBvcnRlciwgZW52OiBCZW5jaG1hcmtFbnZpcm9ubWVudCk6IEJlbmNobWFya1NjZW5hcmlvO1xufVxuXG5pbXBvcnQgU3VpdGVzIGZyb20gJy4vYmVuY2gtc3VpdGVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGluaXQoKSB7XG4gIGxldCBvcHRpb25zID0gZ2V0SnNvbkZyb21VcmwoKTtcblxuICBpZiAoIW9wdGlvbnNbJ3N1aXRlJ10pIHtcbiAgICBkb2N1bWVudC53cml0ZWxuKCc8aDE+UGxlYXNlIHNlbGVjdCBhIGJlbmNobWFyayBzdWl0ZTwvaDE+Jyk7XG4gICAgZG9jdW1lbnQud3JpdGVsbignPHVsPicpO1xuXG4gICAgT2JqZWN0LmtleXMoU3VpdGVzKS5mb3JFYWNoKGlkID0+IHtcbiAgICAgIGRvY3VtZW50LndyaXRlbG4oYCA8bGk+PGEgaHJlZj1cIj9zdWl0ZT0ke2lkfVwiPiR7aWR9PC9hPjwvbGk+YCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC53cml0ZWxuKCc8L3VsPicpO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyogdHNsaW50OmRpc2FibGU6bm8tcmVxdWlyZS1pbXBvcnRzICovXG4gIGxldCBzY2VuYXJpb3M6IFNjZW5hcmlvQ2xhc3NbXSA9IHJlcXVpcmUoJ2dsaW1tZXItYmVuY2htYXJrcycpLlN1aXRlc1tvcHRpb25zWydzdWl0ZSddXTtcbiAgLyogdHNsaW50OmVuYWJsZTpuby1yZXF1aXJlLWltcG9ydHMgKi9cbiAgbGV0IHN1aXRlID0gbmV3IEJlbmNobWFya1N1aXRlKCk7XG4gIGxldCBlbnYgPSBuZXcgVGVzdEJlbmNobWFya0Vudmlyb25tZW50KCk7XG4gIGxldCByZXBvcnRlciA9IG5ldyBUZXN0UmVwb3J0ZXIoKTtcblxuICBzY2VuYXJpb3MuZm9yRWFjaChTID0+IHN1aXRlLmFkZChuZXcgUyhyZXBvcnRlciwgZW52KSkpO1xuXG4gIGxldCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmlkID0gXCJidXR0b25zXCI7XG5cbiAgT2JqZWN0LmtleXMoc3VpdGUuc2NlbmFyaW9zKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgIGxldCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBidXR0b24ub25jbGljayA9ICgpID0+IHN1aXRlLnJ1bihuYW1lKTtcbiAgICBidXR0b24uaW5uZXJUZXh0ID0gbmFtZTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgfSk7XG5cbiAgZG9jdW1lbnQuYm9keS5pbnNlcnRCZWZvcmUoZGl2LCBkb2N1bWVudC5ib2R5LmZpcnN0Q2hpbGQpO1xufVxuXG5mdW5jdGlvbiBnZXRKc29uRnJvbVVybChoYXNoQmFzZWQ/KSB7XG4gIGxldCBxdWVyeTtcbiAgaWYoaGFzaEJhc2VkKSB7XG4gICAgbGV0IHBvcyA9IGxvY2F0aW9uLmhyZWYuaW5kZXhPZihcIj9cIik7XG4gICAgaWYocG9zID09PSAtMSkgcmV0dXJuIFtdO1xuICAgIHF1ZXJ5ID0gbG9jYXRpb24uaHJlZi5zdWJzdHIocG9zKzEpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXJ5ID0gbG9jYXRpb24uc2VhcmNoLnN1YnN0cigxKTtcbiAgfVxuICBsZXQgcmVzdWx0ID0ge307XG4gIHF1ZXJ5LnNwbGl0KFwiJlwiKS5mb3JFYWNoKGZ1bmN0aW9uKHBhcnQpIHtcbiAgICBpZighcGFydCkgcmV0dXJuO1xuICAgIHBhcnQgPSBwYXJ0LnNwbGl0KFwiK1wiKS5qb2luKFwiIFwiKTsgLy8gcmVwbGFjZSBldmVyeSArIHdpdGggc3BhY2UsIHJlZ2V4cC1mcmVlIHZlcnNpb25cbiAgICBsZXQgZXEgPSBwYXJ0LmluZGV4T2YoXCI9XCIpO1xuICAgIGxldCBrZXkgPSBlcT4tMSA/IHBhcnQuc3Vic3RyKDAsZXEpIDogcGFydDtcbiAgICBsZXQgdmFsID0gZXE+LTEgPyBkZWNvZGVVUklDb21wb25lbnQocGFydC5zdWJzdHIoZXErMSkpIDogXCJcIjtcbiAgICBsZXQgZnJvbSA9IGtleS5pbmRleE9mKFwiW1wiKTtcbiAgICBpZiAoZnJvbSA9PT0gLTEpIHJlc3VsdFtkZWNvZGVVUklDb21wb25lbnQoa2V5KV0gPSB2YWw7XG4gICAgZWxzZSB7XG4gICAgICBsZXQgdG8gPSBrZXkuaW5kZXhPZihcIl1cIik7XG4gICAgICBsZXQgaW5kZXggPSBkZWNvZGVVUklDb21wb25lbnQoa2V5LnN1YnN0cmluZyhmcm9tKzEsdG8pKTtcbiAgICAgIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChrZXkuc3Vic3RyaW5nKDAsZnJvbSkpO1xuICAgICAgaWYoIXJlc3VsdFtrZXldKSByZXN1bHRba2V5XSA9IFtdO1xuICAgICAgaWYoIWluZGV4KSByZXN1bHRba2V5XS5wdXNoKHZhbCk7XG4gICAgICBlbHNlIHJlc3VsdFtrZXldW2luZGV4XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIl19