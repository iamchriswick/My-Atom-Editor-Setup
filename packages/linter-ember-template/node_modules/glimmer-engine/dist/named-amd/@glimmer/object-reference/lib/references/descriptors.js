enifed('@glimmer/object-reference/lib/references/descriptors', ['exports', '@glimmer/object-reference/lib/meta', '@glimmer/reference'], function (exports, _glimmerObjectReferenceLibMeta, _glimmerReference) {
    'use strict';

    exports.ComputedReferenceBlueprint = ComputedReferenceBlueprint;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var PropertyReference = (function () {
        function PropertyReference(object, property, outer) {
            _classCallCheck(this, PropertyReference);

            this.tag = _glimmerReference.VOLATILE_TAG;
            this.object = object;
            this.property = property;
        }

        PropertyReference.prototype.value = function value() {
            return this.object[this.property];
        };

        PropertyReference.prototype.label = function label() {
            return '[reference Property]';
        };

        return PropertyReference;
    })();

    exports.PropertyReference = PropertyReference;

    function ComputedReferenceBlueprint(property, dependencies) {
        return (function () {
            function ComputedReference(object, property, outer) {
                _classCallCheck(this, ComputedReference);

                this.installed = false;
                this.tag = _glimmerReference.VOLATILE_TAG;
                this.object = object;
                this.property = property;
                this.dependencies = dependencies;
                this.outer = outer;
            }

            ComputedReference.prototype.value = function value() {
                var _this = this;

                if (!this.installed) {
                    (function () {
                        var root = _glimmerObjectReferenceLibMeta.default.for(_this.object).root();
                        _this.dependencies.forEach(function (dep) {
                            var ref = root.referenceFromParts(dep);
                            ref.value();
                        });
                        _this.installed = true;
                    })();
                }
                return this.object[this.property];
            };

            ComputedReference.prototype.label = function label() {
                return '[reference Computed]';
            };

            return ComputedReference;
        })();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1yZWZlcmVuY2UvbGliL3JlZmVyZW5jZXMvZGVzY3JpcHRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztRQVFNLGlCQUFBO0FBS0osaUJBTEksaUJBQUEsQ0FLUSxNQUFXLEVBQUUsUUFBZ0IsRUFBRSxLQUE2QixFQUFBO2tDQUxwRSxpQkFBQTs7QUFHRyxnQkFBQSxDQUFBLEdBQUcscUJBVlEsWUFBWSxBQVVRLENBQUM7QUFHckMsZ0JBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLGdCQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMxQjs7QUFSRyx5QkFBQSxXQVVKLEtBQUssR0FBQSxpQkFBQTtBQUFLLG1CQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQUU7O0FBVjFDLHlCQUFBLFdBWUosS0FBSyxHQUFBLGlCQUFBO0FBQ0gsbUJBQU8sc0JBQXNCLENBQUM7U0FDL0I7O2VBZEcsaUJBQUE7Ozs7O0FBaUJBLGFBQUEsMEJBQUEsQ0FBd0MsUUFBUSxFQUFFLFlBQVksRUFBQTtBQUNsRTtBQVFFLHFCQVJLLGlCQUFBLENBUU8sTUFBVyxFQUFFLFFBQWdCLEVBQUUsS0FBNkIsRUFBQTtzQ0FSbkUsaUJBQUE7O0FBS0csb0JBQUEsQ0FBQSxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ25CLG9CQUFBLENBQUEsR0FBRyxxQkEvQk0sWUFBWSxBQStCVSxDQUFDO0FBR3JDLG9CQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUNyQixvQkFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDekIsb0JBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBQ2pDLG9CQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQzthQUNwQjs7QUFiSSw2QkFBQSxXQWVMLEtBQUssR0FBQSxpQkFBQTs7O0FBQ0gsb0JBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFOztBQUNuQiw0QkFBSSxJQUFJLEdBQUcsdUNBQUssR0FBRyxDQUFDLE1BQUssTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFFeEMsOEJBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUcsRUFBQTtBQUMzQixnQ0FBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3ZDLCtCQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7eUJBQ2IsQ0FBQyxDQUFDO0FBRUgsOEJBQUssU0FBUyxHQUFHLElBQUksQ0FBQzs7aUJBQ3ZCO0FBRUQsdUJBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDbkM7O0FBNUJJLDZCQUFBLFdBOEJMLEtBQUssR0FBQSxpQkFBQTtBQUNILHVCQUFPLHNCQUFzQixDQUFDO2FBQy9COzttQkFoQ0ksaUJBQUE7YUFpQ0w7S0FDSCIsImZpbGUiOiJkZXNjcmlwdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNZXRhIGZyb20gJy4uL21ldGEnO1xuaW1wb3J0IHsgUmVmZXJlbmNlLCBWT0xBVElMRV9UQUcsIFJldmlzaW9uVGFnIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IE5vdGlmaWFibGVSZWZlcmVuY2UgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5uZXJSZWZlcmVuY2VGYWN0b3J5PFQ+IHtcbiAgbmV3IChvYmplY3Q6IGFueSwgcHJvcGVydHk6IHN0cmluZywgb3V0ZXI6IE5vdGlmaWFibGVSZWZlcmVuY2U8YW55Pik6IFJlZmVyZW5jZTxUPjtcbn1cblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5UmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgUmVmZXJlbmNlPFQ+IHtcbiAgcHJpdmF0ZSBvYmplY3Q6IGFueTtcbiAgcHJpdmF0ZSBwcm9wZXJ0eTogc3RyaW5nO1xuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZyA9IFZPTEFUSUxFX1RBRztcblxuICBjb25zdHJ1Y3RvcihvYmplY3Q6IGFueSwgcHJvcGVydHk6IHN0cmluZywgb3V0ZXI6IE5vdGlmaWFibGVSZWZlcmVuY2U8VD4pIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gIH1cblxuICB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMub2JqZWN0W3RoaXMucHJvcGVydHldOyB9XG5cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdbcmVmZXJlbmNlIFByb3BlcnR5XSc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENvbXB1dGVkUmVmZXJlbmNlQmx1ZXByaW50PFQ+KHByb3BlcnR5LCBkZXBlbmRlbmNpZXMpOiBJbm5lclJlZmVyZW5jZUZhY3Rvcnk8VD4ge1xuICByZXR1cm4gY2xhc3MgQ29tcHV0ZWRSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBSZWZlcmVuY2U8VD4ge1xuICAgIHByaXZhdGUgb2JqZWN0OiBhbnk7XG4gICAgcHJpdmF0ZSBwcm9wZXJ0eTogc3RyaW5nO1xuICAgIHByaXZhdGUgZGVwZW5kZW5jaWVzOiBzdHJpbmdbXVtdO1xuICAgIHByaXZhdGUgb3V0ZXI6IE5vdGlmaWFibGVSZWZlcmVuY2U8VD47XG4gICAgcHJpdmF0ZSBpbnN0YWxsZWQgPSBmYWxzZTtcbiAgICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZyA9IFZPTEFUSUxFX1RBRztcblxuICAgIGNvbnN0cnVjdG9yKG9iamVjdDogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZTxUPikge1xuICAgICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gICAgICB0aGlzLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICAgIHRoaXMub3V0ZXIgPSBvdXRlcjtcbiAgICB9XG5cbiAgICB2YWx1ZSgpOiBUIHtcbiAgICAgIGlmICghdGhpcy5pbnN0YWxsZWQpIHtcbiAgICAgICAgbGV0IHJvb3QgPSBNZXRhLmZvcih0aGlzLm9iamVjdCkucm9vdCgpO1xuXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jaWVzLmZvckVhY2goZGVwID0+IHtcbiAgICAgICAgICBsZXQgcmVmID0gcm9vdC5yZWZlcmVuY2VGcm9tUGFydHMoZGVwKTtcbiAgICAgICAgICByZWYudmFsdWUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5pbnN0YWxsZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5vYmplY3RbdGhpcy5wcm9wZXJ0eV07XG4gICAgfVxuXG4gICAgbGFiZWwoKSB7XG4gICAgICByZXR1cm4gJ1tyZWZlcmVuY2UgQ29tcHV0ZWRdJztcbiAgICB9XG4gIH07XG59XG4iXX0=