enifed('@glimmer/object-reference/lib/meta', ['exports', '@glimmer/object-reference/lib/references/descriptors', '@glimmer/object-reference/lib/references/root', '@glimmer/util', '@glimmer/reference'], function (exports, _glimmerObjectReferenceLibReferencesDescriptors, _glimmerObjectReferenceLibReferencesRoot, _glimmerUtil, _glimmerReference) {
    'use strict';

    exports.metaFor = metaFor;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var NOOP_DESTROY = { destroy: function () {} };

    var ConstPath = (function () {
        function ConstPath(parent, property) {
            _classCallCheck(this, ConstPath);

            this.tag = _glimmerReference.VOLATILE_TAG;
            this.parent = parent;
        }

        ConstPath.prototype.chain = function chain() {
            return NOOP_DESTROY;
        };

        ConstPath.prototype.notify = function notify() {};

        ConstPath.prototype.value = function value() {
            return this.parent[this.property];
        };

        ConstPath.prototype.get = function get(prop) {
            return new ConstPath(this.parent[this.property], prop);
        };

        return ConstPath;
    })();

    var ConstRoot = (function () {
        function ConstRoot(value) {
            _classCallCheck(this, ConstRoot);

            this.tag = _glimmerReference.VOLATILE_TAG;
            this.inner = value;
        }

        ConstRoot.prototype.update = function update(inner) {
            this.inner = inner;
        };

        ConstRoot.prototype.chain = function chain() {
            return NOOP_DESTROY;
        };

        ConstRoot.prototype.notify = function notify() {};

        ConstRoot.prototype.value = function value() {
            return this.inner;
        };

        ConstRoot.prototype.referenceFromParts = function referenceFromParts(parts) {
            throw new Error("Not implemented");
        };

        ConstRoot.prototype.chainFor = function chainFor(prop) {
            throw new Error("Not implemented");
        };

        ConstRoot.prototype.get = function get(prop) {
            return new ConstPath(this.inner, prop);
        };

        return ConstRoot;
    })();

    var ConstMeta /*implements IMeta*/ = (function () {
        function ConstMeta(object) {
            _classCallCheck(this, ConstMeta);

            this.object = object;
        }

        ConstMeta.prototype.root = function root() {
            return new ConstRoot(this.object);
        };

        return ConstMeta;
    })();

    var CLASS_META = "df8be4c8-4e89-44e2-a8f9-550c8dacdca7";
    exports.CLASS_META = CLASS_META;
    var hasOwnProperty = Object.hasOwnProperty;

    var Meta = (function () {
        function Meta(object, _ref) {
            var RootReferenceFactory = _ref.RootReferenceFactory;
            var DefaultPathReferenceFactory = _ref.DefaultPathReferenceFactory;

            _classCallCheck(this, Meta);

            this.references = null;
            this.slots = null;
            this.referenceTypes = null;
            this.propertyMetadata = null;
            this.object = object;
            this.RootReferenceFactory = RootReferenceFactory || _glimmerObjectReferenceLibReferencesRoot.default;
            this.DefaultPathReferenceFactory = DefaultPathReferenceFactory || _glimmerObjectReferenceLibReferencesDescriptors.PropertyReference;
        }

        Meta.for = function _for(obj) {
            if (obj === null || obj === undefined) return new Meta(obj, {});
            if (hasOwnProperty.call(obj, '_meta') && obj._meta) return obj._meta;
            if (!Object.isExtensible(obj)) return new ConstMeta(obj);
            var MetaToUse = Meta;
            if (obj.constructor && obj.constructor[CLASS_META]) {
                var classMeta = obj.constructor[CLASS_META];
                MetaToUse = classMeta.InstanceMetaConstructor;
            } else if (obj[CLASS_META]) {
                MetaToUse = obj[CLASS_META].InstanceMetaConstructor;
            }
            return obj._meta = new MetaToUse(obj, {});
        };

        Meta.exists = function exists(obj) {
            return typeof obj === 'object' && obj._meta;
        };

        Meta.metadataForProperty = function metadataForProperty(key) {
            return null;
        };

        Meta.prototype.addReference = function addReference(property, reference) {
            var refs = this.references = this.references || _glimmerUtil.dict();
            var set = refs[property] = refs[property] || new _glimmerUtil.DictSet();
            set.add(reference);
        };

        Meta.prototype.addReferenceTypeFor = function addReferenceTypeFor(property, type) {
            this.referenceTypes = this.referenceTypes || _glimmerUtil.dict();
            this.referenceTypes[property] = type;
        };

        Meta.prototype.referenceTypeFor = function referenceTypeFor(property) {
            if (!this.referenceTypes) return _glimmerObjectReferenceLibReferencesDescriptors.PropertyReference;
            return this.referenceTypes[property] || _glimmerObjectReferenceLibReferencesDescriptors.PropertyReference;
        };

        Meta.prototype.removeReference = function removeReference(property, reference) {
            if (!this.references) return;
            var set = this.references[property];
            set.delete(reference);
        };

        Meta.prototype.getReferenceTypes = function getReferenceTypes() {
            this.referenceTypes = this.referenceTypes || _glimmerUtil.dict();
            return this.referenceTypes;
        };

        Meta.prototype.referencesFor = function referencesFor(property) {
            if (!this.references) return;
            return this.references[property];
        };

        Meta.prototype.getSlots = function getSlots() {
            return this.slots = this.slots || _glimmerUtil.dict();
        };

        Meta.prototype.root = function root() {
            return this.rootCache = this.rootCache || new this.RootReferenceFactory(this.object);
        };

        return Meta;
    })();

    exports.default = Meta;

    function metaFor(obj) {
        return Meta.for(obj);
    }
});
//# sourceMappingURL=data:application/json;base64,