enifed('@glimmer/object-reference/lib/references/root', ['exports', '@glimmer/util', '@glimmer/object-reference/lib/references/path', '@glimmer/reference'], function (exports, _glimmerUtil, _glimmerObjectReferenceLibReferencesPath, _glimmerReference) {
    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var RootReference = (function () {
        function RootReference(object) {
            _classCallCheck(this, RootReference);

            this.chains = _glimmerUtil.dict();
            this.tag = _glimmerReference.VOLATILE_TAG;
            this.object = object;
        }

        RootReference.prototype.value = function value() {
            return this.object;
        };

        RootReference.prototype.update = function update(object) {
            this.object = object;
            // this.notify();
        };

        RootReference.prototype.get = function get(prop) {
            var chains = this.chains;
            if (prop in chains) return chains[prop];
            return chains[prop] = new _glimmerObjectReferenceLibReferencesPath.PathReference(this, prop);
        };

        RootReference.prototype.chainFor = function chainFor(prop) {
            var chains = this.chains;
            if (prop in chains) return chains[prop];
            return null;
        };

        RootReference.prototype.path = function path(string) {
            return string.split('.').reduce(function (ref, part) {
                return ref.get(part);
            }, this);
        };

        RootReference.prototype.referenceFromParts = function referenceFromParts(parts) {
            return parts.reduce(function (ref, part) {
                return ref.get(part);
            }, this);
        };

        RootReference.prototype.label = function label() {
            return '[reference Root]';
        };

        return RootReference;
    })();

    exports.default = RootReference;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1yZWZlcmVuY2UvbGliL3JlZmVyZW5jZXMvcm9vdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQUtjLGFBQUE7QUFLWixpQkFMWSxhQUFBLENBS0EsTUFBUyxFQUFBO2tDQUxULGFBQUE7O0FBRUosZ0JBQUEsQ0FBQSxNQUFNLEdBQUcsYUFQRixJQUFJLEVBT3dCLENBQUM7QUFDckMsZ0JBQUEsQ0FBQSxHQUFHLHFCQUxILFlBQVksQUFLbUIsQ0FBQztBQUdyQyxnQkFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDdEI7O0FBUFcscUJBQUEsV0FTWixLQUFLLEdBQUEsaUJBQUE7QUFBUSxtQkFBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1NBQUU7O0FBVHRCLHFCQUFBLFdBV1osTUFBTSxHQUFBLGdCQUFDLE1BQVMsRUFBQTtBQUNkLGdCQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQzs7U0FFdEI7O0FBZFcscUJBQUEsV0FnQlosR0FBRyxHQUFBLGFBQUksSUFBWSxFQUFBO0FBQ2pCLGdCQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3pCLGdCQUFZLElBQUksSUFBSSxNQUFNLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEQsbUJBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLDZDQXZCbEIsYUFBYSxDQXVCdUIsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFFO1NBQ3ZEOztBQXBCVyxxQkFBQSxXQXNCWixRQUFRLEdBQUEsa0JBQUksSUFBWSxFQUFBO0FBQ3RCLGdCQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3pCLGdCQUFZLElBQUksSUFBSSxNQUFNLEVBQUUsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEQsbUJBQU8sSUFBSSxDQUFDO1NBQ2I7O0FBMUJXLHFCQUFBLFdBNEJaLElBQUksR0FBQSxjQUFDLE1BQU0sRUFBQTtBQUNULG1CQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLElBQUk7dUJBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7YUFBQSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3JFOztBQTlCVyxxQkFBQSxXQWdDWixrQkFBa0IsR0FBQSw0QkFBQyxLQUFlLEVBQUE7QUFDaEMsbUJBQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxJQUFJO3VCQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUEyQjthQUFBLEVBQUUsSUFBOEIsQ0FBQyxDQUFDO1NBQzdHOztBQWxDVyxxQkFBQSxXQW9DWixLQUFLLEdBQUEsaUJBQUE7QUFDSCxtQkFBTyxrQkFBa0IsQ0FBQztTQUMzQjs7ZUF0Q1csYUFBQTs7O3NCQUFBLGFBQUEiLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wYXF1ZSwgZGljdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSB9IGZyb20gJy4vcGF0aCc7XG5pbXBvcnQgeyBSb290UmVmZXJlbmNlIGFzIElSb290UmVmZXJlbmNlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVk9MQVRJTEVfVEFHLCBQYXRoUmVmZXJlbmNlIGFzIElQYXRoUmVmZXJlbmNlLCBSZXZpc2lvblRhZyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb3RSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBJUm9vdFJlZmVyZW5jZTxUPiwgSVBhdGhSZWZlcmVuY2U8VD4ge1xuICBwcml2YXRlIG9iamVjdDogVDtcbiAgcHJpdmF0ZSBjaGFpbnMgPSBkaWN0PFBhdGhSZWZlcmVuY2U8YW55Pj4oKTtcbiAgcHVibGljIHRhZzogUmV2aXNpb25UYWcgPSBWT0xBVElMRV9UQUc7XG5cbiAgY29uc3RydWN0b3Iob2JqZWN0OiBUKSB7XG4gICAgdGhpcy5vYmplY3QgPSBvYmplY3Q7XG4gIH1cblxuICB2YWx1ZSgpOiBUIHsgcmV0dXJuIHRoaXMub2JqZWN0OyB9XG5cbiAgdXBkYXRlKG9iamVjdDogVCkge1xuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgIC8vIHRoaXMubm90aWZ5KCk7XG4gIH1cblxuICBnZXQ8VT4ocHJvcDogc3RyaW5nKTogSVBhdGhSZWZlcmVuY2U8VT4ge1xuICAgIGxldCBjaGFpbnMgPSB0aGlzLmNoYWlucztcbiAgICBpZiAoPHN0cmluZz5wcm9wIGluIGNoYWlucykgcmV0dXJuIGNoYWluc1twcm9wXTtcbiAgICByZXR1cm4gKGNoYWluc1twcm9wXSA9IG5ldyBQYXRoUmVmZXJlbmNlKHRoaXMsIHByb3ApKTtcbiAgfVxuXG4gIGNoYWluRm9yPFU+KHByb3A6IHN0cmluZyk6IElQYXRoUmVmZXJlbmNlPFU+IHtcbiAgICBsZXQgY2hhaW5zID0gdGhpcy5jaGFpbnM7XG4gICAgaWYgKDxzdHJpbmc+cHJvcCBpbiBjaGFpbnMpIHJldHVybiBjaGFpbnNbcHJvcF07XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwYXRoKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJy4nKS5yZWR1Y2UoKHJlZiwgcGFydCkgPT4gcmVmLmdldChwYXJ0KSwgdGhpcyk7XG4gIH1cblxuICByZWZlcmVuY2VGcm9tUGFydHMocGFydHM6IHN0cmluZ1tdKTogSVBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgcmV0dXJuIHBhcnRzLnJlZHVjZSgocmVmLCBwYXJ0KSA9PiByZWYuZ2V0KHBhcnQpIGFzIElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4sIHRoaXMgYXMgSVBhdGhSZWZlcmVuY2U8T3BhcXVlPik7XG4gIH1cblxuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ1tyZWZlcmVuY2UgUm9vdF0nO1xuICB9XG59XG4iXX0=