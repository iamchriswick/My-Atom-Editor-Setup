enifed('@glimmer/object-reference/lib/references/path', ['exports', '@glimmer/object-reference/lib/utils', '@glimmer/util', '@glimmer/object-reference/lib/meta', '@glimmer/object-reference/lib/references/descriptors', '@glimmer/reference'], function (exports, _glimmerObjectReferenceLibUtils, _glimmerUtil, _glimmerObjectReferenceLibMeta, _glimmerObjectReferenceLibReferencesDescriptors, _glimmerReference) {
    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var UnchainFromPath = (function () {
        function UnchainFromPath(set, child) {
            _classCallCheck(this, UnchainFromPath);

            this.set = set;
            this.child = child;
        }

        UnchainFromPath.prototype.destroy = function destroy() {
            this.set.delete(this.child);
        };

        return UnchainFromPath;
    })();

    var PathReference = (function () {
        function PathReference(parent, property) {
            _classCallCheck(this, PathReference);

            this.cache = _glimmerObjectReferenceLibUtils.EMPTY_CACHE;
            this.inner = null;
            this.chains = null;
            this.lastParentValue = _glimmerObjectReferenceLibUtils.EMPTY_CACHE;
            this._guid = null;
            this.tag = _glimmerReference.VOLATILE_TAG;
            this.parent = parent;
            this.property = property;
        }

        PathReference.prototype.value = function value() {
            var lastParentValue = this.lastParentValue;
            var property = this.property;
            var inner = this.inner;

            var parentValue = this._parentValue();
            if (parentValue === null || parentValue === undefined) {
                return this.cache = undefined;
            }
            if (lastParentValue === parentValue) {
                inner = this.inner;
            } else {
                var ReferenceType = typeof parentValue === 'object' ? _glimmerObjectReferenceLibMeta.default.for(parentValue).referenceTypeFor(property) : _glimmerObjectReferenceLibReferencesDescriptors.PropertyReference;
                inner = this.inner = new ReferenceType(parentValue, property, this);
            }
            // if (typeof parentValue === 'object') {
            //   Meta.for(parentValue).addReference(property, this);
            // }
            return this.cache = inner.value();
        };

        PathReference.prototype.get = function get(prop) {
            var chains = this._getChains();
            if (prop in chains) return chains[prop];
            return chains[prop] = new PathReference(this, prop);
        };

        PathReference.prototype.label = function label() {
            return '[reference Direct]';
        };

        PathReference.prototype._getChains = function _getChains() {
            if (this.chains) return this.chains;
            return this.chains = _glimmerUtil.dict();
        };

        PathReference.prototype._parentValue = function _parentValue() {
            var parent = this.parent.value();
            this.lastParentValue = parent;
            return parent;
        };

        return PathReference;
    })();

    exports.default = PathReference;
    exports.PathReference = PathReference;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1yZWZlcmVuY2UvbGliL3JlZmVyZW5jZXMvcGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQU9BLGVBQUE7QUFJRSxpQkFKRixlQUFBLENBSWMsR0FBMEMsRUFBRSxLQUFtQyxFQUFBO2tDQUo3RixlQUFBOztBQUtJLGdCQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNmLGdCQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNwQjs7QUFQSCx1QkFBQSxXQVNFLE9BQU8sR0FBQSxtQkFBQTtBQUNMLGdCQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7O2VBWEgsZUFBQTs7O1FBY2MsYUFBQTtBQVVaLGlCQVZZLGFBQUEsQ0FVQSxNQUF5QixFQUFFLFFBQWdCLEVBQUE7a0NBVjNDLGFBQUE7O0FBR0YsZ0JBQUEsQ0FBQSxLQUFLLG1DQXhCUixXQUFXLEFBd0JnQixDQUFDO0FBQzNCLGdCQUFBLENBQUEsS0FBSyxHQUFpQixJQUFJLENBQUM7QUFDM0IsZ0JBQUEsQ0FBQSxNQUFNLEdBQTZCLElBQUksQ0FBQztBQUN4QyxnQkFBQSxDQUFBLGVBQWUsbUNBM0JoQixXQUFXLEFBMkJ3QixDQUFDO0FBQ3BDLGdCQUFBLENBQUEsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNiLGdCQUFBLENBQUEsR0FBRyxxQkF6QkgsWUFBWSxBQXlCbUIsQ0FBQztBQUdyQyxnQkFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsZ0JBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1NBQzFCOztBQWJXLHFCQUFBLFdBZVosS0FBSyxHQUFBLGlCQUFBO2dCQUNHLGVBQWUsR0FBc0IsSUFBSSxDQUF6QyxlQUFlO2dCQUFFLFFBQVEsR0FBWSxJQUFJLENBQXhCLFFBQVE7Z0JBQUUsS0FBSyxHQUFLLElBQUksQ0FBZCxLQUFLOztBQUN0QyxnQkFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBRXRDLGdCQUFJLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtBQUNyRCx1QkFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBRTthQUNqQztBQUVELGdCQUFJLGVBQWUsS0FBSyxXQUFXLEVBQUU7QUFDbkMscUJBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3BCLE1BQU07QUFDTCxvQkFBSSxhQUFhLEdBQUcsT0FBTyxXQUFXLEtBQUssUUFBUSxHQUFHLHVDQUFLLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsbURBNUNuRyxpQkFBaUIsQUE0Q3NHLENBQUM7QUFDM0gscUJBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksYUFBYSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDckU7Ozs7QUFNRCxtQkFBUSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBRTtTQUNyQzs7QUFuQ1cscUJBQUEsV0FxQ1osR0FBRyxHQUFBLGFBQUMsSUFBWSxFQUFBO0FBQ2QsZ0JBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMvQixnQkFBWSxJQUFJLElBQUksTUFBTSxFQUFFLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hELG1CQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUU7U0FDdkQ7O0FBekNXLHFCQUFBLFdBMkNaLEtBQUssR0FBQSxpQkFBQTtBQUNILG1CQUFPLG9CQUFvQixDQUFDO1NBQzdCOztBQTdDVyxxQkFBQSxXQStDSixVQUFVLEdBQUEsc0JBQUE7QUFDaEIsZ0JBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDcEMsbUJBQVEsSUFBSSxDQUFDLE1BQU0sR0FBRyxhQXJFUixJQUFJLEVBcUU4QixDQUFFO1NBQ25EOztBQWxEVyxxQkFBQSxXQW9ESixZQUFZLEdBQUEsd0JBQUE7QUFDbEIsZ0JBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakMsZ0JBQUksQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO0FBQzlCLG1CQUFPLE1BQU0sQ0FBQztTQUNmOztlQXhEVyxhQUFBOzs7c0JBQUEsYUFBQTtZQTJETCxhQUFhLEdBQWIsYUFBYSIsImZpbGUiOiJwYXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRU1QVFlfQ0FDSEUgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBEaWN0U2V0LCBkaWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgTWV0YSBmcm9tICcuLi9tZXRhJztcbmltcG9ydCB7IFByb3BlcnR5UmVmZXJlbmNlIH0gZnJvbSAnLi9kZXNjcmlwdG9ycyc7XG5pbXBvcnQgeyBWT0xBVElMRV9UQUcsIFBhdGhSZWZlcmVuY2UgYXMgSVBhdGhSZWZlcmVuY2UsIFJlZmVyZW5jZSwgUmV2aXNpb25UYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgRGljdCwgSGFzR3VpZCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5jbGFzcyBVbmNoYWluRnJvbVBhdGgge1xuICBwcml2YXRlIHNldDogRGljdFNldDxQYXRoUmVmZXJlbmNlPGFueT4gJiBIYXNHdWlkPjtcbiAgcHJpdmF0ZSBjaGlsZDogUGF0aFJlZmVyZW5jZTxhbnk+ICYgSGFzR3VpZDtcblxuICBjb25zdHJ1Y3RvcihzZXQ6IERpY3RTZXQ8UGF0aFJlZmVyZW5jZTxhbnk+ICYgSGFzR3VpZD4sIGNoaWxkOiBQYXRoUmVmZXJlbmNlPGFueT4gJiBIYXNHdWlkKSB7XG4gICAgdGhpcy5zZXQgPSBzZXQ7XG4gICAgdGhpcy5jaGlsZCA9IGNoaWxkO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnNldC5kZWxldGUodGhpcy5jaGlsZCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF0aFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIElQYXRoUmVmZXJlbmNlPFQ+LCBIYXNHdWlkIHtcbiAgcHJpdmF0ZSBwYXJlbnQ6IElQYXRoUmVmZXJlbmNlPGFueT47XG4gIHByaXZhdGUgcHJvcGVydHk6IHN0cmluZztcbiAgcHJvdGVjdGVkIGNhY2hlOiBhbnkgPSBFTVBUWV9DQUNIRTtcbiAgcHJpdmF0ZSBpbm5lcjogUmVmZXJlbmNlPFQ+ID0gbnVsbDtcbiAgcHJpdmF0ZSBjaGFpbnM6IERpY3Q8UGF0aFJlZmVyZW5jZTxhbnk+PiA9IG51bGw7XG4gIHByaXZhdGUgbGFzdFBhcmVudFZhbHVlOiBhbnkgPSBFTVBUWV9DQUNIRTtcbiAgcHVibGljIF9ndWlkID0gbnVsbDtcbiAgcHVibGljIHRhZzogUmV2aXNpb25UYWcgPSBWT0xBVElMRV9UQUc7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBJUGF0aFJlZmVyZW5jZTxUPiwgcHJvcGVydHk6IHN0cmluZykge1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgfVxuXG4gIHZhbHVlKCk6IGFueSB7XG4gICAgbGV0IHsgbGFzdFBhcmVudFZhbHVlLCBwcm9wZXJ0eSwgaW5uZXIgfSA9IHRoaXM7XG4gICAgbGV0IHBhcmVudFZhbHVlID0gdGhpcy5fcGFyZW50VmFsdWUoKTtcblxuICAgIGlmIChwYXJlbnRWYWx1ZSA9PT0gbnVsbCB8fCBwYXJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gKHRoaXMuY2FjaGUgPSB1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIGlmIChsYXN0UGFyZW50VmFsdWUgPT09IHBhcmVudFZhbHVlKSB7XG4gICAgICBpbm5lciA9IHRoaXMuaW5uZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBSZWZlcmVuY2VUeXBlID0gdHlwZW9mIHBhcmVudFZhbHVlID09PSAnb2JqZWN0JyA/IE1ldGEuZm9yKHBhcmVudFZhbHVlKS5yZWZlcmVuY2VUeXBlRm9yKHByb3BlcnR5KSA6IFByb3BlcnR5UmVmZXJlbmNlO1xuICAgICAgaW5uZXIgPSB0aGlzLmlubmVyID0gbmV3IFJlZmVyZW5jZVR5cGUocGFyZW50VmFsdWUsIHByb3BlcnR5LCB0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBpZiAodHlwZW9mIHBhcmVudFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgIC8vICAgTWV0YS5mb3IocGFyZW50VmFsdWUpLmFkZFJlZmVyZW5jZShwcm9wZXJ0eSwgdGhpcyk7XG4gICAgLy8gfVxuXG4gICAgcmV0dXJuICh0aGlzLmNhY2hlID0gaW5uZXIudmFsdWUoKSk7XG4gIH1cblxuICBnZXQocHJvcDogc3RyaW5nKTogSVBhdGhSZWZlcmVuY2U8YW55PiB7XG4gICAgbGV0IGNoYWlucyA9IHRoaXMuX2dldENoYWlucygpO1xuICAgIGlmICg8c3RyaW5nPnByb3AgaW4gY2hhaW5zKSByZXR1cm4gY2hhaW5zW3Byb3BdO1xuICAgIHJldHVybiAoY2hhaW5zW3Byb3BdID0gbmV3IFBhdGhSZWZlcmVuY2UodGhpcywgcHJvcCkpO1xuICB9XG5cbiAgbGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJ1tyZWZlcmVuY2UgRGlyZWN0XSc7XG4gIH1cblxuICBwcml2YXRlIF9nZXRDaGFpbnMoKTogRGljdDxQYXRoUmVmZXJlbmNlPGFueT4+IHtcbiAgICBpZiAodGhpcy5jaGFpbnMpIHJldHVybiB0aGlzLmNoYWlucztcbiAgICByZXR1cm4gKHRoaXMuY2hhaW5zID0gZGljdDxQYXRoUmVmZXJlbmNlPGFueT4+KCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcGFyZW50VmFsdWUoKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50LnZhbHVlKCk7XG4gICAgdGhpcy5sYXN0UGFyZW50VmFsdWUgPSBwYXJlbnQ7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxufVxuXG5leHBvcnQgeyBQYXRoUmVmZXJlbmNlIH07XG4iXX0=