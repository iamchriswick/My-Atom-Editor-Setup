enifed('@glimmer/object-model/lib/blueprint', ['exports', '@glimmer/object-model/lib/reference'], function (exports, _glimmerObjectModelLibReference) {
    'use strict';

    exports.computed = computed;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var Blueprint = function Blueprint(key) {
        _classCallCheck(this, Blueprint);

        this.key = key;
    };

    exports.Blueprint = Blueprint;

    var VALUE_DESCRIPTOR = {
        enumerable: true,
        configurable: true,
        writable: true,
        value: undefined
    };
    var ACCESSOR_DESCRIPTOR = {
        enumerable: true,
        configurable: true,
        get: undefined,
        set: undefined
    };

    var ValueBlueprint = (function (_Blueprint) {
        _inherits(ValueBlueprint, _Blueprint);

        function ValueBlueprint(key, value) {
            _classCallCheck(this, ValueBlueprint);

            _Blueprint.call(this, key);
            this.value = value;
        }

        ValueBlueprint.prototype.define = function define(home) {
            VALUE_DESCRIPTOR.value = this.value;
            Object.defineProperty(home, this.key, VALUE_DESCRIPTOR);
        };

        return ValueBlueprint;
    })(Blueprint);

    exports.ValueBlueprint = ValueBlueprint;

    var GlimmerDescriptor = function GlimmerDescriptor() {
        _classCallCheck(this, GlimmerDescriptor);
    };

    exports.GlimmerDescriptor = GlimmerDescriptor;

    var Computed = (function (_GlimmerDescriptor) {
        _inherits(Computed, _GlimmerDescriptor);

        function Computed(dependentKeys, accessor) {
            _classCallCheck(this, Computed);

            _GlimmerDescriptor.call(this);
            this.dependentKeys = dependentKeys;
            this.accessor = accessor;
        }

        Computed.prototype.blueprint = function blueprint(key) {
            return new ComputedBlueprint(key, this);
        };

        Computed.prototype.reference = function reference(root, key) {};

        Computed.prototype.define = function define(home, key) {
            _glimmerObjectModelLibReference.classMeta(home).defineComputed(key, this);
            ACCESSOR_DESCRIPTOR.get = this.accessor.get;
            ACCESSOR_DESCRIPTOR.set = this.accessor.set;
            Object.defineProperty(home, key, ACCESSOR_DESCRIPTOR);
        };

        return Computed;
    })(GlimmerDescriptor);

    exports.Computed = Computed;

    function computed() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        var depKeys = args.slice(0, -1);
        var accessor = args[args.length - 1];
        return new Computed(depKeys, accessor);
    }

    var ComputedBlueprint = (function (_Blueprint2) {
        _inherits(ComputedBlueprint, _Blueprint2);

        function ComputedBlueprint(key, computed) {
            _classCallCheck(this, ComputedBlueprint);

            _Blueprint2.call(this, key);
            this.computed = computed;
        }

        ComputedBlueprint.prototype.define = function define(home) {
            this.computed.define(home, this.key);
        };

        return ComputedBlueprint;
    })(Blueprint);

    exports.ComputedBlueprint = ComputedBlueprint;

    var DescriptorBlueprint = (function (_Blueprint3) {
        _inherits(DescriptorBlueprint, _Blueprint3);

        function DescriptorBlueprint(key, descriptor) {
            _classCallCheck(this, DescriptorBlueprint);

            _Blueprint3.call(this, key);
            this.descriptor = descriptor;
        }

        DescriptorBlueprint.prototype.define = function define(home) {
            Object.defineProperty(home, this.key, this.descriptor);
        };

        return DescriptorBlueprint;
    })(Blueprint);

    exports.DescriptorBlueprint = DescriptorBlueprint;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1tb2RlbC9saWIvYmx1ZXByaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBSU0sU0FBQSxHQUNKLFNBREksU0FBQSxDQUNrQixHQUFnQixFQUFBOzhCQURsQyxTQUFBOztBQUNrQixZQUFBLENBQUEsR0FBRyxHQUFILEdBQUcsQ0FBYTtLQUFJOzs7O0FBSTVDLFFBQU0sZ0JBQWdCLEdBQXVCO0FBQzNDLGtCQUFVLEVBQUUsSUFBSTtBQUNoQixvQkFBWSxFQUFFLElBQUk7QUFDbEIsZ0JBQVEsRUFBRSxJQUFJO0FBQ2QsYUFBSyxFQUFFLFNBQVM7S0FDakIsQ0FBQztBQUVGLFFBQU0sbUJBQW1CLEdBQXVCO0FBQzlDLGtCQUFVLEVBQUUsSUFBSTtBQUNoQixvQkFBWSxFQUFFLElBQUk7QUFDbEIsV0FBRyxFQUFFLFNBQVM7QUFDZCxXQUFHLEVBQUUsU0FBUztLQUNmLENBQUM7O1FBRUksY0FBc0I7a0JBQXRCLGNBQXNCOztBQUMxQixpQkFESSxjQUFzQixDQUNkLEdBQWdCLEVBQVUsS0FBYSxFQUFBO2tDQUQvQyxjQUFzQjs7QUFFeEIsa0NBQU0sR0FBRyxDQUFDLENBQUM7QUFEeUIsZ0JBQUEsQ0FBQSxLQUFLLEdBQUwsS0FBSyxDQUFRO1NBRWxEOztBQUhHLHNCQUFzQixXQUsxQixNQUFNLEdBQUEsZ0JBQUMsSUFBWSxFQUFBO0FBQ2pCLDRCQUFnQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3BDLGtCQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7U0FDekQ7O2VBUkcsY0FBc0I7T0FBUSxTQUFTOzs7O1FBZ0J2QyxpQkFBQSxZQUFBLGlCQUFBOzhCQUFBLGlCQUFBOzs7OztRQUtBLFFBQW1CO2tCQUFuQixRQUFtQjs7QUFDdkIsaUJBREksUUFBbUIsQ0FDSixhQUF1QixFQUFVLFFBQXFCLEVBQUE7a0NBRHJFLFFBQW1COztBQUVyQix5Q0FBTyxDQUFDO0FBRFMsZ0JBQUEsQ0FBQSxhQUFhLEdBQWIsYUFBYSxDQUFVO0FBQVUsZ0JBQUEsQ0FBQSxRQUFRLEdBQVIsUUFBUSxDQUFhO1NBRXhFOztBQUhHLGdCQUFtQixXQUt2QixTQUFTLEdBQUEsbUJBQUMsR0FBZ0IsRUFBQTtBQUN4QixtQkFBTyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN6Qzs7QUFQRyxnQkFBbUIsV0FTdkIsU0FBUyxHQUFBLG1CQUFDLElBQW1CLEVBQUUsR0FBZ0IsRUFBQSxFQUU5Qzs7QUFYRyxnQkFBbUIsV0FhdkIsTUFBTSxHQUFBLGdCQUFDLElBQVksRUFBRSxHQUFnQixFQUFBO0FBQ25DLDRDQXpESyxTQUFTLENBeURKLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFFMUMsK0JBQW1CLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO0FBQzVDLCtCQUFtQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztBQUM1QyxrQkFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUM7U0FDdkQ7O2VBbkJHLFFBQW1CO09BQVEsaUJBQWlCOzs7O0FBMkI1QyxhQUFBLFFBQUEsR0FBaUM7MENBQVgsSUFBVztBQUFYLGdCQUFXOzs7QUFDckMsWUFBSSxPQUFPLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxZQUFJLFFBQVEsR0FBcUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFdkQsZUFBTyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDeEM7O1FBRUssaUJBQXlCO2tCQUF6QixpQkFBeUI7O0FBQzdCLGlCQURJLGlCQUF5QixDQUNqQixHQUFnQixFQUFVLFFBQTBCLEVBQUE7a0NBRDVELGlCQUF5Qjs7QUFFM0IsbUNBQU0sR0FBRyxDQUFDLENBQUM7QUFEeUIsZ0JBQUEsQ0FBQSxRQUFRLEdBQVIsUUFBUSxDQUFrQjtTQUUvRDs7QUFIRyx5QkFBeUIsV0FLN0IsTUFBTSxHQUFBLGdCQUFDLElBQVksRUFBQTtBQUNqQixnQkFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN0Qzs7ZUFQRyxpQkFBeUI7T0FBUSxTQUFTOzs7O1FBVTFDLG1CQUEyQjtrQkFBM0IsbUJBQTJCOztBQUMvQixpQkFESSxtQkFBMkIsQ0FDbkIsR0FBZ0IsRUFBVSxVQUE4QixFQUFBO2tDQURoRSxtQkFBMkI7O0FBRTdCLG1DQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRHlCLGdCQUFBLENBQUEsVUFBVSxHQUFWLFVBQVUsQ0FBb0I7U0FFbkU7O0FBSEcsMkJBQTJCLFdBSy9CLE1BQU0sR0FBQSxnQkFBQyxJQUFZLEVBQUE7QUFDakIsa0JBQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3hEOztlQVBHLG1CQUEyQjtPQUFRLFNBQVMiLCJmaWxlIjoiYmx1ZXByaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XHJcbmltcG9ydCB7IGNsYXNzTWV0YSB9IGZyb20gJy4vcmVmZXJlbmNlJztcclxuaW1wb3J0IEdsaW1tZXJPYmplY3QgZnJvbSAnLi9vYmplY3QnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJsdWVwcmludCB7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGtleTogUHJvcGVydHlLZXkpIHt9XHJcbiAgYWJzdHJhY3QgZGVmaW5lKGhvbWU6IE9iamVjdCk7XHJcbn1cclxuXHJcbmNvbnN0IFZBTFVFX0RFU0NSSVBUT1I6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcclxuICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICB3cml0YWJsZTogdHJ1ZSxcclxuICB2YWx1ZTogdW5kZWZpbmVkXHJcbn07XHJcblxyXG5jb25zdCBBQ0NFU1NPUl9ERVNDUklQVE9SOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgZ2V0OiB1bmRlZmluZWQsXHJcbiAgc2V0OiB1bmRlZmluZWRcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBWYWx1ZUJsdWVwcmludCBleHRlbmRzIEJsdWVwcmludCB7XHJcbiAgY29uc3RydWN0b3Ioa2V5OiBQcm9wZXJ0eUtleSwgcHJpdmF0ZSB2YWx1ZTogT3BhcXVlKSB7XHJcbiAgICBzdXBlcihrZXkpO1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKGhvbWU6IE9iamVjdCkge1xyXG4gICAgVkFMVUVfREVTQ1JJUFRPUi52YWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaG9tZSwgdGhpcy5rZXksIFZBTFVFX0RFU0NSSVBUT1IpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBY2Nlc3NvcjxUPiB7XHJcbiAgZ2V0KCk6IFQ7XHJcbiAgc2V0KHZhbDogVCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBHbGltbWVyRGVzY3JpcHRvciB7XHJcbiAgYWJzdHJhY3QgYmx1ZXByaW50KGtleTogUHJvcGVydHlLZXkpOiBCbHVlcHJpbnQ7XHJcbiAgYWJzdHJhY3QgZGVmaW5lKGhvbWU6IE9iamVjdCwga2V5OiBQcm9wZXJ0eUtleSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb21wdXRlZDxUPiBleHRlbmRzIEdsaW1tZXJEZXNjcmlwdG9yIHtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGVwZW5kZW50S2V5czogc3RyaW5nW10sIHByaXZhdGUgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgYmx1ZXByaW50KGtleTogUHJvcGVydHlLZXkpOiBDb21wdXRlZEJsdWVwcmludCB7XHJcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkQmx1ZXByaW50KGtleSwgdGhpcyk7XHJcbiAgfVxyXG5cclxuICByZWZlcmVuY2Uocm9vdDogR2xpbW1lck9iamVjdCwga2V5OiBQcm9wZXJ0eUtleSkge1xyXG5cclxuICB9XHJcblxyXG4gIGRlZmluZShob21lOiBPYmplY3QsIGtleTogUHJvcGVydHlLZXkpIHtcclxuICAgIGNsYXNzTWV0YShob21lKS5kZWZpbmVDb21wdXRlZChrZXksIHRoaXMpO1xyXG5cclxuICAgIEFDQ0VTU09SX0RFU0NSSVBUT1IuZ2V0ID0gdGhpcy5hY2Nlc3Nvci5nZXQ7XHJcbiAgICBBQ0NFU1NPUl9ERVNDUklQVE9SLnNldCA9IHRoaXMuYWNjZXNzb3Iuc2V0O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGhvbWUsIGtleSwgQUNDRVNTT1JfREVTQ1JJUFRPUik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQ8VD4oZGVwMTogc3RyaW5nLCBhY2Nlc3NvcjogQWNjZXNzb3I8VD4pOiBUO1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQ8VD4oZGVwMTogc3RyaW5nLCBkZXAyOiBzdHJpbmcsIGFjY2Vzc29yOiBBY2Nlc3NvcjxUPik6IFQ7XHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZDxUPihkZXAxOiBzdHJpbmcsIGRlcDI6IHN0cmluZywgZGVwMzogc3RyaW5nLCBhY2Nlc3NvcjogQWNjZXNzb3I8VD4pOiBUO1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQ8VD4oZGVwMTogc3RyaW5nLCBkZXAyOiBzdHJpbmcsIGRlcDM6IHN0cmluZywgZGVwNDogc3RyaW5nLCBhY2Nlc3NvcjogQWNjZXNzb3I8VD4pOiBUO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkKC4uLmFyZ3M6IGFueVtdKTogT3BhcXVlIHtcclxuICBsZXQgZGVwS2V5czogc3RyaW5nW10gPSBhcmdzLnNsaWNlKDAsIC0xKTtcclxuICBsZXQgYWNjZXNzb3I6IEFjY2Vzc29yPE9wYXF1ZT4gPSBhcmdzW2FyZ3MubGVuZ3RoIC0gMV07XHJcblxyXG4gIHJldHVybiBuZXcgQ29tcHV0ZWQoZGVwS2V5cywgYWNjZXNzb3IpO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcHV0ZWRCbHVlcHJpbnQgZXh0ZW5kcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKGtleTogUHJvcGVydHlLZXksIHByaXZhdGUgY29tcHV0ZWQ6IENvbXB1dGVkPE9wYXF1ZT4pIHtcclxuICAgIHN1cGVyKGtleSk7XHJcbiAgfVxyXG5cclxuICBkZWZpbmUoaG9tZTogT2JqZWN0KSB7XHJcbiAgICB0aGlzLmNvbXB1dGVkLmRlZmluZShob21lLCB0aGlzLmtleSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGVzY3JpcHRvckJsdWVwcmludCBleHRlbmRzIEJsdWVwcmludCB7XHJcbiAgY29uc3RydWN0b3Ioa2V5OiBQcm9wZXJ0eUtleSwgcHJpdmF0ZSBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcclxuICAgIHN1cGVyKGtleSk7XHJcbiAgfVxyXG5cclxuICBkZWZpbmUoaG9tZTogT2JqZWN0KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaG9tZSwgdGhpcy5rZXksIHRoaXMuZGVzY3JpcHRvcik7XHJcbiAgfVxyXG59XHJcbiJdfQ==