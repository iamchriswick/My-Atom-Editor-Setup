enifed('@glimmer/object-model/lib/reference', ['exports', '@glimmer/object-model/lib/meta', '@glimmer/reference', '@glimmer/util'], function (exports, _glimmerObjectModelLibMeta, _glimmerReference, _glimmerUtil) {
    'use strict';

    exports.set = set;
    exports.root = root;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var classMeta = undefined;
    exports.classMeta = classMeta;
    var meta = undefined;
    exports.meta = meta;
    if (_glimmerUtil.HAS_NATIVE_WEAKMAP) {
        (function () {
            var META = new WeakMap();
            var CLASS_META = new WeakMap();
            exports.classMeta = classMeta = function _classMetaNative(object) {
                var m = CLASS_META.get(object);
                if (m === undefined) {
                    m = new _glimmerObjectModelLibMeta.ClassMeta();
                    CLASS_META.set(object, m);
                }
                return m;
            };
            exports.meta = meta = function _metaNative(object) {
                var m = META.get(object);
                if (m === undefined) {
                    m = new _glimmerObjectModelLibMeta.default();
                    META.set(object, m);
                }
                return m;
            };
        })();
    } else {
        (function () {
            var GLIMMER_META = 'META__glimmer__1484170086860394543206811';
            var GLIMMER_CLASS_META = 'CLASS_META__glimmer__14841708559821468834708062';
            exports.classMeta = classMeta = function _classMetaFaux(object) {
                var m = object[GLIMMER_CLASS_META];
                if (m === undefined) {
                    m = new _glimmerObjectModelLibMeta.ClassMeta();
                    object[GLIMMER_CLASS_META] = m;
                }
                return m;
            };
            exports.meta = meta = function _metaFaux(object) {
                var m = object[GLIMMER_META];
                if (m === undefined) {
                    m = new _glimmerObjectModelLibMeta.default();
                    object[GLIMMER_META] = m;
                }
                return m;
            };
        })();
    }

    function set(object, key, value) {
        object[key] = value;
        meta(object).dirty(key);
    }

    function root(object) {
        return new VersionedRootReference(object);
    }

    var VersionedRootReference = (function () {
        function VersionedRootReference(inner) {
            _classCallCheck(this, VersionedRootReference);

            this.inner = inner;
            this.tag = _glimmerReference.CONSTANT_TAG;
        }

        VersionedRootReference.prototype.value = function value() {
            return this.inner;
        };

        VersionedRootReference.prototype.get = function get(key) {
            return new VersionedObjectReference(this, key);
        };

        return VersionedRootReference;
    })();

    exports.VersionedRootReference = VersionedRootReference;

    var VersionedObjectReference = (function () {
        function VersionedObjectReference(parent, key) {
            _classCallCheck(this, VersionedObjectReference);

            this.parent = parent;
            this.key = key;
            this.tag = _glimmerReference.CURRENT_TAG;
        }

        VersionedObjectReference.prototype.value = function value() {
            var _this = this;

            var parent = this.parent;
            var key = this.key;

            var parentObject = this.parent.value();
            var computed = classMeta(Object.getPrototypeOf(parentObject)).getComputed(key);
            var tags = [meta(parentObject).tag(key)];
            if (computed) {
                tags.push.apply(tags, computed.dependentKeys.map(function (key) {
                    return path(_this, key).tag;
                }));
            }
            this.tag = _glimmerReference.combine(tags);
            return parentObject[key];
        };

        VersionedObjectReference.prototype.get = function get(key) {
            return new VersionedObjectReference(this, key);
        };

        return VersionedObjectReference;
    })();

    exports.VersionedObjectReference = VersionedObjectReference;

    function path(parent, key) {
        return key.split('.').reduce(function (ref, part) {
            return ref.get(part);
        }, parent);
    }
});
//# sourceMappingURL=data:application/json;base64,