enifed('@glimmer/test-helpers/lib/abstract-test-case', ['exports', '@glimmer/reference', '@glimmer/test-helpers/lib/environment', '@glimmer/test-helpers/lib/helpers'], function (exports, _glimmerReference, _glimmerTestHelpersLibEnvironment, _glimmerTestHelpersLibHelpers) {
    'use strict';

    exports.skip = skip;
    exports.testModule = testModule;
    exports.template = template;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function skip(target, name, descriptor) {
        descriptor.value['skip'] = true;
    }

    var VersionedObject = (function () {
        function VersionedObject(value) {
            _classCallCheck(this, VersionedObject);

            this.tag = new _glimmerReference.DirtyableTag();
            _glimmerTestHelpersLibHelpers.assign(this, value);
        }

        VersionedObject.prototype.update = function update(value) {
            _glimmerTestHelpersLibHelpers.assign(this, value);
            this.dirty();
        };

        VersionedObject.prototype.set = function set(key, value) {
            this[key] = value;
            this.dirty();
        };

        VersionedObject.prototype.dirty = function dirty() {
            this.tag.dirty();
        };

        return VersionedObject;
    })();

    exports.VersionedObject = VersionedObject;

    var SimpleRootReference = (function () {
        function SimpleRootReference(object) {
            _classCallCheck(this, SimpleRootReference);

            this.object = object;
            this.tag = object.tag;
        }

        SimpleRootReference.prototype.get = function get(key) {
            return new SimplePathReference(this, key);
        };

        SimpleRootReference.prototype.value = function value() {
            return this.object;
        };

        return SimpleRootReference;
    })();

    exports.SimpleRootReference = SimpleRootReference;

    var SimplePathReference = (function () {
        function SimplePathReference(parent, key) {
            _classCallCheck(this, SimplePathReference);

            this.parent = parent;
            this.key = key;
            this.tag = parent.tag;
        }

        SimplePathReference.prototype.get = function get(key) {
            return new SimplePathReference(this, key);
        };

        SimplePathReference.prototype.value = function value() {
            return this.parent.value()[this.key];
        };

        return SimplePathReference;
    })();

    function isMarker(node) {
        if (node instanceof Comment && node.textContent === '') {
            return true;
        }
        if (node instanceof Text && node.textContent === '') {
            return true;
        }
        return false;
    }

    var RenderingTest = (function () {
        function RenderingTest(env, template, appendTo) {
            if (env === undefined) env = new _glimmerTestHelpersLibEnvironment.TestEnvironment();

            _classCallCheck(this, RenderingTest);

            this.env = env;
            this.appendTo = appendTo;
            this.context = null;
            this.result = null;
            this.template = this.env.compile(template);
            this.assert = QUnit.config.current.assert;
        }

        RenderingTest.prototype.teardown = function teardown() {};

        RenderingTest.prototype.render = function render(context) {
            this.env.begin();
            var dynamicScope = new _glimmerTestHelpersLibEnvironment.TestDynamicScope();
            var appendTo = this.appendTo;
            var rootObject = new VersionedObject(context);
            var root = new SimpleRootReference(rootObject);
            this.context = rootObject;
            this.result = this.template.render(root, appendTo, dynamicScope);
            this.env.commit();
            this.element = document.getElementById('qunit-fixture').firstChild;
        };

        RenderingTest.prototype.assertContent = function assertContent(expected, message) {
            var actual = document.getElementById('qunit-fixture').innerHTML;
            QUnit.equal(actual, expected);
        };

        RenderingTest.prototype.takeSnapshot = function takeSnapshot() {
            var snapshot = this.snapshot = [];
            var node = this.element.firstChild;
            while (node) {
                if (!isMarker(node)) {
                    snapshot.push(node);
                }
                node = node.nextSibling;
            }
            return snapshot;
        };

        RenderingTest.prototype.assertStableRerender = function assertStableRerender() {
            this.takeSnapshot();
            this.rerender();
            this.assertInvariants();
        };

        RenderingTest.prototype.rerender = function rerender() {
            this.result.rerender();
        };

        RenderingTest.prototype.assertInvariants = function assertInvariants(oldSnapshot, newSnapshot) {
            oldSnapshot = oldSnapshot || this.snapshot;
            newSnapshot = newSnapshot || this.takeSnapshot();
            this.assert.strictEqual(newSnapshot.length, oldSnapshot.length, 'Same number of nodes');
            for (var i = 0; i < oldSnapshot.length; i++) {
                this.assertSameNode(newSnapshot[i], oldSnapshot[i]);
            }
        };

        RenderingTest.prototype.assertSameNode = function assertSameNode(actual, expected) {
            this.assert.strictEqual(actual, expected, 'DOM node stability');
        };

        RenderingTest.prototype.runTask = function runTask(callback) {
            callback();
            this.env.begin();
            this.result.rerender();
            this.env.commit();
        };

        return RenderingTest;
    })();

    exports.RenderingTest = RenderingTest;

    function testModule(description) {
        return function (TestClass) {
            var context = undefined;
            QUnit.module('[Browser] ' + (description || TestClass.name), {
                afterEach: function () {
                    context.teardown();
                }
            });
            var keys = Object.getOwnPropertyNames(TestClass.prototype);
            keys.forEach(function (key) {
                if (key === 'constructor') return;
                var value = Object.getOwnPropertyDescriptor(TestClass.prototype, key).value;
                var isSkipped = value.skip;
                if (typeof value === 'function' && !isSkipped) {
                    QUnit.test(key, function (assert) {
                        var env = new _glimmerTestHelpersLibEnvironment.TestEnvironment();
                        context = new TestClass(env, value['template'], document.getElementById('qunit-fixture'));
                        value.call(context, assert);
                    });
                } else if (isSkipped) {
                    QUnit.skip(key, function () {});
                }
            });
        };
    }

    function template(t) {
        return function template(target, name, descriptor) {
            if (typeof descriptor.value !== 'function') {
                throw new Error("Can't decorator a non-function with the @template decorator");
            }
            descriptor.value['template'] = t;
        };
    }
});
//# sourceMappingURL=data:application/json;base64,