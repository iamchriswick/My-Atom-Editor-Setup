enifed("@glimmer/test-helpers/lib/helpers", ["exports", "simple-html-tokenizer", "@glimmer/runtime", "@glimmer/compiler"], function (exports, _simpleHtmlTokenizer, _glimmerRuntime, _glimmerCompiler) {
    "use strict";

    exports.compile = compile;
    exports.compileLayout = compileLayout;
    exports.equalInnerHTML = equalInnerHTML;
    exports.equalHTML = equalHTML;
    exports.equalTokens = equalTokens;
    exports.generateSnapshot = generateSnapshot;
    exports.equalSnapshots = equalSnapshots;
    exports.normalizeInnerHTML = normalizeInnerHTML;
    exports.getTextContent = getTextContent;
    exports.strip = strip;
    exports.stripTight = stripTight;
    exports.trimLines = trimLines;

    // For Phantom
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
        return Object(val);
    }
    if (typeof Object.assign !== 'function') {
        Object.assign = function (target, source) {
            var from = undefined;
            var to = toObject(target);
            var symbols = undefined;
            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                    if (Object.prototype.hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }
                if (Object.getOwnPropertySymbols) {
                    symbols = Object.getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (Object.prototype.propertyIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }
            return to;
        };
    }
    var assign = Object.assign;
    exports.assign = assign;
    function isMarker(node) {
        var TextNode = window.Text;
        var Comment = window.Comment;
        if (node instanceof Comment && node.textContent === '') {
            return true;
        }
        if (node instanceof TextNode && node.textContent === '') {
            return true;
        }
        return false;
    }

    function compile(string, options) {
        var js = _glimmerCompiler.precompile(string, options);
        var factory = _glimmerRuntime.templateFactory(JSON.parse(js));
        return factory.create(options.env);
    }

    function compileLayout(string, options) {
        return compile(string, options).asLayout();
    }

    function equalInnerHTML(fragment, html, msg) {
        var actualHTML = normalizeInnerHTML(fragment.innerHTML);
        QUnit.push(actualHTML === html, actualHTML, html, msg);
    }

    function equalHTML(node, html) {
        var fragment = undefined;
        if (!node.nodeType && node.length) {
            fragment = document.createDocumentFragment();
            while (node[0]) {
                fragment.appendChild(node[0]);
            }
        } else {
            fragment = node;
        }
        var div = document.createElement("div");
        div.appendChild(fragment.cloneNode(true));
        equalInnerHTML(div, html);
    }

    function generateTokens(divOrHTML) {
        var div = undefined;
        if (typeof divOrHTML === 'string') {
            div = document.createElement("div");
            div.innerHTML = divOrHTML;
        } else {
            div = divOrHTML;
        }
        return { tokens: _simpleHtmlTokenizer.tokenize(div.innerHTML), html: div.innerHTML };
    }

    function equalTokens(fragment, html) {
        var message = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

        if (fragment.fragment) {
            fragment = fragment.fragment;
        }
        if (html.fragment) {
            html = html.fragment;
        }
        var fragTokens = generateTokens(fragment);
        var htmlTokens = generateTokens(html);
        function normalizeTokens(token) {
            if (token.type === 'StartTag') {
                token.attributes = token.attributes.sort(function (a, b) {
                    if (a[0] > b[0]) {
                        return 1;
                    }
                    if (a[0] < b[0]) {
                        return -1;
                    }
                    return 0;
                });
            }
        }
        fragTokens.tokens.forEach(normalizeTokens);
        htmlTokens.tokens.forEach(normalizeTokens);
        // let msg = "Expected: " + htmlTokens.html + "; Actual: " + fragTokens.html;
        // if (message) { msg += " (" + message + ")"; }
        var equiv = QUnit.equiv(fragTokens.tokens, htmlTokens.tokens);
        if (equiv && fragTokens.html !== htmlTokens.html) {
            QUnit.deepEqual(fragTokens.tokens, htmlTokens.tokens, message);
        } else {
            QUnit.push(QUnit.equiv(fragTokens.tokens, htmlTokens.tokens), fragTokens.html, htmlTokens.html, message);
        }
        // deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
    }

    function generateSnapshot(element) {
        var snapshot = [];
        var node = element.firstChild;
        while (node) {
            if (!isMarker(node)) {
                snapshot.push(node);
            }
            node = node.nextSibling;
        }
        return snapshot;
    }

    function equalSnapshots(a, b) {
        QUnit.strictEqual(a.length, b.length, 'Same number of nodes');
        for (var i = 0; i < b.length; i++) {
            QUnit.strictEqual(a[i], b[i], 'Nodes are the same');
        }
    }

    // detect side-effects of cloning svg elements in IE9-11
    var ieSVGInnerHTML = (function () {
        if (typeof document === 'undefined' || !document.createElementNS) {
            return false;
        }
        var div = document.createElement('div');
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        div.appendChild(node);
        var clone = div.cloneNode(true);
        return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
    })();

    function normalizeInnerHTML(actualHTML) {
        if (ieSVGInnerHTML) {
            // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
            // drop namespace attribute
            actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
            // replace self-closing elements
            actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
                return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
            });
        }
        return actualHTML;
    }

    var isCheckedInputHTML = undefined;
    if (typeof document === 'undefined') {
        exports.isCheckedInputHTML = isCheckedInputHTML = function (element) {};
    } else {
        (function () {
            // detect weird IE8 checked element string
            var checkedInput = document.createElement('input');
            checkedInput.setAttribute('checked', 'checked');
            var checkedInputString = checkedInput.outerHTML;
            exports.isCheckedInputHTML = isCheckedInputHTML = function (element) {
                QUnit.equal(element.outerHTML, checkedInputString);
            };
        })();
    }
    exports.isCheckedInputHTML = isCheckedInputHTML;

    // check which property has the node's text content
    var textProperty = typeof document === 'object' && document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';

    function getTextContent(el) {
        // textNode
        if (el.nodeType === 3) {
            return el.nodeValue;
        } else {
            return el[textProperty];
        }
    }

    function strip(strings) {
        return strings[0].split('\n').map(function (s) {
            return s.trim();
        }).join(' ');
    }

    function stripTight(strings) {
        return strings[0].split('\n').map(function (s) {
            return s.trim();
        }).join('');
    }

    function trimLines(strings) {
        return strings[0].trim().split('\n').map(function (s) {
            return s.trim();
        }).join('\n');
    }
});
//# sourceMappingURL=data:application/json;base64,