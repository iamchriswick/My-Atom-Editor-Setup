enifed('@glimmer/object/lib/computed', ['exports', '@glimmer/object-reference', '@glimmer/object/lib/object', '@glimmer/object/lib/mixin'], function (exports, _glimmerObjectReference, _glimmerObjectLibObject, _glimmerObjectLibMixin) {
    'use strict';

    exports.computed = computed;
    exports.observer = observer;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    var ComputedBlueprint = (function (_Blueprint) {
        _inherits(ComputedBlueprint, _Blueprint);

        function ComputedBlueprint(accessor) {
            var deps = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

            _classCallCheck(this, ComputedBlueprint);

            _Blueprint.call(this);
            this.metadata = {};
            this.accessor = accessor;
            this.deps = deps;
        }

        ComputedBlueprint.prototype.descriptor = function descriptor(target, key, classMeta) {
            classMeta.addReferenceTypeFor(key, _glimmerObjectReference.ComputedReferenceBlueprint(key, this.deps));
            classMeta.addPropertyMetadata(key, this.metadata);
            classMeta.addSlotFor(key);
            return new Computed(this.accessor);
        };

        ComputedBlueprint.prototype.property = function property() {
            for (var _len = arguments.length, paths = Array(_len), _key = 0; _key < _len; _key++) {
                paths[_key] = arguments[_key];
            }

            this.deps = paths.map(function (d) {
                return d.split('.');
            });
            return this;
        };

        ComputedBlueprint.prototype.meta = function meta(object) {
            this.metadata = object;
            return this;
        };

        ComputedBlueprint.prototype.volatile = function volatile() {
            return this;
        };

        return ComputedBlueprint;
    })(_glimmerObjectLibMixin.Blueprint);

    exports.ComputedBlueprint = ComputedBlueprint;

    var Computed = (function () {
        function Computed(accessor) {
            _classCallCheck(this, Computed);

            this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
            this.accessor = accessor;
        }

        Computed.prototype.define = function define(prototype, key, home) {
            Object.defineProperty(prototype, key, wrapAccessor(home, key, this.accessor));
        };

        return Computed;
    })();

    function wrapAccessor(home, accessorName, _desc) {
        var superDesc = getPropertyDescriptor(home, accessorName);
        var originalGet = undefined;
        var originalSet = undefined;
        var desc = {
            enumerable: true,
            configurable: true
        };
        if (_desc.get && _desc.get.length > 0) {
            originalGet = function () {
                return _desc.get.call(this, accessorName);
            };
        } else {
            originalGet = _desc.get;
        }
        if (_desc.set && _desc.set.length > 1) {
            originalSet = function (value) {
                return _desc.set.call(this, accessorName, value);
            };
        } else {
            originalSet = _desc.set;
        }
        var cacheGet = function () {
            if (_glimmerObjectReference.Meta.exists(this)) {
                var slot = _glimmerObjectReference.Meta.for(this).getSlots()[accessorName];
                if (slot !== _glimmerObjectLibObject.EMPTY_CACHE) return slot;
            }
            return originalGet.call(this);
        };
        var cacheSet = undefined;
        if (originalSet) {
            cacheSet = function (value) {
                var meta = _glimmerObjectReference.Meta.for(this);
                var slots = meta.getSlots();
                var ret = originalSet.call(this, value);
                if (ret !== undefined) {
                    slots[accessorName] = ret;
                }
            };
        } else {
            cacheSet = function (value) {
                var meta = _glimmerObjectReference.Meta.for(this);
                var slots = meta.getSlots();
                if (value !== undefined) slots[accessorName] = value;
            };
        }
        if (!superDesc || 'value' in superDesc) {
            desc.get = cacheGet;
            desc.set = cacheSet;
            return desc;
        }
        desc.get = function () {
            var lastSuper = this._super;
            this._super = function () {
                return superDesc.get.call(this);
            };
            try {
                return cacheGet.call(this);
            } finally {
                this._super = lastSuper;
            }
        };
        desc.set = function (val) {
            var lastSuper = this._super;
            this._super = function () {
                return superDesc.set.call(this, val);
            };
            try {
                return cacheSet.call(this, val);
            } finally {
                this._super = lastSuper;
            }
        };
        return desc;
    }
    function getPropertyDescriptor(subject, name) {
        var pd = Object.getOwnPropertyDescriptor(subject, name);
        var proto = Object.getPrototypeOf(subject);
        while (typeof pd === 'undefined' && proto !== null) {
            pd = Object.getOwnPropertyDescriptor(proto, name);
            proto = Object.getPrototypeOf(proto);
        }
        return pd;
    }

    function computed() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
        }

        var last = args.pop();
        var deps = args;
        if (typeof last === 'function') {
            var _ref;

            return (_ref = new ComputedBlueprint({
                get: last
            })).property.apply(_ref, deps);
        } else if (typeof last === 'object') {
            var _ref2;

            return (_ref2 = new ComputedBlueprint(last)).property.apply(_ref2, deps);
        } else {
            throw new TypeError("computed expects a function or an object as last argument");
        }
    }

    function observer() {}
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC9saWIvY29tcHV0ZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O1FBMkJNLGlCQUF5QjtrQkFBekIsaUJBQXlCOztBQUs3QixpQkFMSSxpQkFBeUIsQ0FLakIsUUFBNEIsRUFBdUI7Z0JBQXJCLElBQUEseURBQW1CLEVBQUU7O2tDQUwzRCxpQkFBeUI7O0FBTTNCLGlDQUFPLENBQUM7QUFIRixnQkFBQSxDQUFBLFFBQVEsR0FBVyxFQUFFLENBQUM7QUFJNUIsZ0JBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0FBQ3pCLGdCQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjs7QUFURyx5QkFBeUIsV0FXN0IsVUFBVSxHQUFBLG9CQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsU0FBb0IsRUFBQTtBQUMxRCxxQkFBUyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSx3QkF2QzlCLDBCQUEwQixDQXVDK0IsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQy9FLHFCQUFTLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNsRCxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixtQkFBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDcEM7O0FBaEJHLHlCQUF5QixXQWtCN0IsUUFBUSxHQUFBLG9CQUFtQjs4Q0FBZixLQUFlO0FBQWYscUJBQWU7OztBQUN6QixnQkFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQzt1QkFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzthQUFBLENBQUMsQ0FBQztBQUN6QyxtQkFBTyxJQUFJLENBQUM7U0FDYjs7QUFyQkcseUJBQXlCLFdBdUI3QixJQUFJLEdBQUEsY0FBQyxNQUFj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QUEsUUFBSSxJQUFJLENBQUMsQ0FBQztTQUMxRSxNQUFNO0FBQ0wsa0JBQU0sSUFBSSxTQUFTLENBQUMsMkRBQTJELENBQUMsQ0FBQztTQUNsRjtLQUNGOztBQUVLLGFBQUEsUUFBQSxHQUEwQixFQUUvQiIsImZpbGUiOiJjb21wdXRlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXB1dGVkUmVmZXJlbmNlQmx1ZXByaW50LCBNZXRhIH0gZnJvbSAnQGdsaW1tZXIvb2JqZWN0LXJlZmVyZW5jZSc7XG5pbXBvcnQgeyBFTVBUWV9DQUNIRSwgQ2xhc3NNZXRhIH0gZnJvbSAnLi9vYmplY3QnO1xuaW1wb3J0IHsgRGVzY3JpcHRvciwgQmx1ZXByaW50IH0gZnJvbSAnLi9taXhpbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHV0ZWRHZXRDYWxsYmFjayB7XG4gICgpOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVnYWN5Q29tcHV0ZWRHZXRDYWxsYmFjayB7XG4gIChrZXk6IHN0cmluZyk6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wdXRlZFNldENhbGxiYWNrIHtcbiAgKHZhbDogYW55KTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZWdhY3lDb21wdXRlZFNldENhbGxiYWNrIHtcbiAgKGtleTogc3RyaW5nLCB2YWw6IGFueSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHV0ZWREZXNjcmlwdG9yIHtcbiAgZ2V0PzogQ29tcHV0ZWRHZXRDYWxsYmFjayB8IExlZ2FjeUNvbXB1dGVkR2V0Q2FsbGJhY2s7XG4gIHNldD86IENvbXB1dGVkU2V0Q2FsbGJhY2sgfCBMZWdhY3lDb21wdXRlZFNldENhbGxiYWNrO1xufVxuXG50eXBlIENvbXB1dGVkQXJndW1lbnQgPSBDb21wdXRlZEdldENhbGxiYWNrIHwgQ29tcHV0ZWREZXNjcmlwdG9yO1xuXG5leHBvcnQgY2xhc3MgQ29tcHV0ZWRCbHVlcHJpbnQgZXh0ZW5kcyBCbHVlcHJpbnQge1xuICBwcml2YXRlIGFjY2Vzc29yOiBDb21wdXRlZERlc2NyaXB0b3I7XG4gIHByaXZhdGUgZGVwczogc3RyaW5nW11bXTtcbiAgcHJpdmF0ZSBtZXRhZGF0YTogT2JqZWN0ID0ge307XG5cbiAgY29uc3RydWN0b3IoYWNjZXNzb3I6IENvbXB1dGVkRGVzY3JpcHRvciwgZGVwczogc3RyaW5nW11bXSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gICAgdGhpcy5kZXBzID0gZGVwcztcbiAgfVxuXG4gIGRlc2NyaXB0b3IodGFyZ2V0OiBPYmplY3QsIGtleTogc3RyaW5nLCBjbGFzc01ldGE6IENsYXNzTWV0YSk6IERlc2NyaXB0b3Ige1xuICAgIGNsYXNzTWV0YS5hZGRSZWZlcmVuY2VUeXBlRm9yKGtleSwgQ29tcHV0ZWRSZWZlcmVuY2VCbHVlcHJpbnQoa2V5LCB0aGlzLmRlcHMpKTtcbiAgICBjbGFzc01ldGEuYWRkUHJvcGVydHlNZXRhZGF0YShrZXksIHRoaXMubWV0YWRhdGEpO1xuICAgIGNsYXNzTWV0YS5hZGRTbG90Rm9yKGtleSk7XG4gICAgcmV0dXJuIG5ldyBDb21wdXRlZCh0aGlzLmFjY2Vzc29yKTtcbiAgfVxuXG4gIHByb3BlcnR5KC4uLnBhdGhzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuZGVwcyA9IHBhdGhzLm1hcChkID0+IGQuc3BsaXQoJy4nKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtZXRhKG9iamVjdDogT2JqZWN0KSB7XG4gICAgdGhpcy5tZXRhZGF0YSA9IG9iamVjdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZvbGF0aWxlKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmNsYXNzIENvbXB1dGVkIGltcGxlbWVudHMgRGVzY3JpcHRvciB7XG4gIGVudW1lcmFibGU6IGJvb2xlYW47XG4gIGNvbmZpZ3VyYWJsZTogYm9vbGVhbjtcblxuICBwcml2YXRlIGFjY2Vzc29yOiBDb21wdXRlZERlc2NyaXB0b3I7XG4gIFwiNWQ5MGY4NGYtOTA4ZS00YTQyLTk3NDktM2QwZjUyM2MyNjJjXCIgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKGFjY2Vzc29yOiBDb21wdXRlZERlc2NyaXB0b3IpIHtcbiAgICB0aGlzLmFjY2Vzc29yID0gYWNjZXNzb3I7XG4gIH1cblxuICBkZWZpbmUocHJvdG90eXBlOiBPYmplY3QsIGtleTogc3RyaW5nLCBob21lOiBPYmplY3QpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCBrZXksIHdyYXBBY2Nlc3Nvcihob21lLCBrZXksIHRoaXMuYWNjZXNzb3IpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB3cmFwQWNjZXNzb3IoaG9tZTogT2JqZWN0LCBhY2Nlc3Nvck5hbWU6IHN0cmluZywgX2Rlc2M6IENvbXB1dGVkRGVzY3JpcHRvcik6IFByb3BlcnR5RGVzY3JpcHRvciB7XG4gIGxldCBzdXBlckRlc2MgPSBnZXRQcm9wZXJ0eURlc2NyaXB0b3IoaG9tZSwgYWNjZXNzb3JOYW1lKTtcblxuICBsZXQgb3JpZ2luYWxHZXQ6IENvbXB1dGVkR2V0Q2FsbGJhY2s7XG4gIGxldCBvcmlnaW5hbFNldDogQ29tcHV0ZWRTZXRDYWxsYmFjaztcblxuICBsZXQgZGVzYzogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICB9O1xuXG4gIGlmIChfZGVzYy5nZXQgJiYgX2Rlc2MuZ2V0Lmxlbmd0aCA+IDApIHtcbiAgICBvcmlnaW5hbEdldCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gX2Rlc2MuZ2V0LmNhbGwodGhpcywgYWNjZXNzb3JOYW1lKTsgfTtcbiAgfSBlbHNlIHtcbiAgICBvcmlnaW5hbEdldCA9IDxDb21wdXRlZEdldENhbGxiYWNrPl9kZXNjLmdldDtcbiAgfVxuXG4gIGlmIChfZGVzYy5zZXQgJiYgX2Rlc2Muc2V0Lmxlbmd0aCA+IDEpIHtcbiAgICBvcmlnaW5hbFNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gX2Rlc2Muc2V0LmNhbGwodGhpcywgYWNjZXNzb3JOYW1lLCB2YWx1ZSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBvcmlnaW5hbFNldCA9IDxDb21wdXRlZEdldENhbGxiYWNrPl9kZXNjLnNldDtcbiAgfVxuXG4gIGxldCBjYWNoZUdldCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChNZXRhLmV4aXN0cyh0aGlzKSkge1xuICAgICAgbGV0IHNsb3QgPSBNZXRhLmZvcih0aGlzKS5nZXRTbG90cygpW2FjY2Vzc29yTmFtZV07XG4gICAgICBpZiAoc2xvdCAhPT0gRU1QVFlfQ0FDSEUpIHJldHVybiBzbG90O1xuICAgIH1cblxuICAgIHJldHVybiBvcmlnaW5hbEdldC5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIGxldCBjYWNoZVNldDtcblxuICBpZiAob3JpZ2luYWxTZXQpIHtcbiAgICBjYWNoZVNldCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBsZXQgbWV0YSA9IE1ldGEuZm9yKHRoaXMpO1xuICAgICAgbGV0IHNsb3RzID0gbWV0YS5nZXRTbG90cygpO1xuXG4gICAgICBsZXQgcmV0ID0gb3JpZ2luYWxTZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG5cbiAgICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzbG90c1thY2Nlc3Nvck5hbWVdID0gcmV0O1xuICAgICAgfVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgY2FjaGVTZXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbGV0IG1ldGEgPSBNZXRhLmZvcih0aGlzKTtcbiAgICAgIGxldCBzbG90cyA9IG1ldGEuZ2V0U2xvdHMoKTtcbiAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBzbG90c1thY2Nlc3Nvck5hbWVdID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGlmICghc3VwZXJEZXNjIHx8ICd2YWx1ZScgaW4gc3VwZXJEZXNjKSB7XG4gICAgZGVzYy5nZXQgPSBjYWNoZUdldDtcbiAgICBkZXNjLnNldCA9IGNhY2hlU2V0O1xuICAgIHJldHVybiBkZXNjO1xuICB9XG5cbiAgZGVzYy5nZXQgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgbGFzdFN1cGVyID0gdGhpcy5fc3VwZXI7XG4gICAgdGhpcy5fc3VwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzdXBlckRlc2MuZ2V0LmNhbGwodGhpcyk7XG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FjaGVHZXQuY2FsbCh0aGlzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fc3VwZXIgPSBsYXN0U3VwZXI7XG4gICAgfVxuICB9O1xuXG4gIGRlc2Muc2V0ID0gZnVuY3Rpb24odmFsKSB7XG4gICAgbGV0IGxhc3RTdXBlciA9IHRoaXMuX3N1cGVyO1xuICAgIHRoaXMuX3N1cGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3VwZXJEZXNjLnNldC5jYWxsKHRoaXMsIHZhbCk7XG4gICAgfTtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY2FjaGVTZXQuY2FsbCh0aGlzLCB2YWwpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9zdXBlciA9IGxhc3RTdXBlcjtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGRlc2M7XG59XG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5RGVzY3JpcHRvcihzdWJqZWN0LCBuYW1lKSB7XG4gIGxldCBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3ViamVjdCwgbmFtZSk7XG4gIGxldCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzdWJqZWN0KTtcbiAgd2hpbGUgKHR5cGVvZiBwZCA9PT0gJ3VuZGVmaW5lZCcgJiYgcHJvdG8gIT09IG51bGwpIHtcbiAgICBwZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG8sIG5hbWUpO1xuICAgIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgfVxuICByZXR1cm4gcGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZChkZXNjOiBDb21wdXRlZERlc2NyaXB0b3IpOiBDb21wdXRlZEJsdWVwcmludDtcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZChnZXR0ZXI6IENvbXB1dGVkR2V0Q2FsbGJhY2sgfCBMZWdhY3lDb21wdXRlZEdldENhbGxiYWNrKTogQ29tcHV0ZWRCbHVlcHJpbnQ7XG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQoLi4uYXJncyk6IENvbXB1dGVkQmx1ZXByaW50O1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQoLi4uYXJncykge1xuICBsZXQgbGFzdDogQ29tcHV0ZWRBcmd1bWVudCA9IGFyZ3MucG9wKCk7XG4gIGxldCBkZXBzID0gYXJncztcblxuICBpZiAodHlwZW9mIGxhc3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkQmx1ZXByaW50KHtcbiAgICAgIGdldDogPENvbXB1dGVkR2V0Q2FsbGJhY2sgfCBMZWdhY3lDb21wdXRlZEdldENhbGxiYWNrPmxhc3RcbiAgICB9KS5wcm9wZXJ0eSguLi5kZXBzKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgbGFzdCA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbmV3IENvbXB1dGVkQmx1ZXByaW50KDxDb21wdXRlZERlc2NyaXB0b3I+bGFzdCkucHJvcGVydHkoLi4uZGVwcyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNvbXB1dGVkIGV4cGVjdHMgYSBmdW5jdGlvbiBvciBhbiBvYmplY3QgYXMgbGFzdCBhcmd1bWVudFwiKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZXIoLi4uYXJncykge1xuXG59XG4iXX0=