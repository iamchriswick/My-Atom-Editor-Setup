enifed('@glimmer/object/lib/descriptors', ['exports', '@glimmer/object/lib/mixin', '@glimmer/object/lib/computed'], function (exports, _glimmerObjectLibMixin, _glimmerObjectLibComputed) {
    'use strict';

    exports.aliasMethod = aliasMethod;
    exports.alias = alias;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    var AliasMethodDescriptor = (function (_Descriptor) {
        _inherits(AliasMethodDescriptor, _Descriptor);

        function AliasMethodDescriptor(name) {
            _classCallCheck(this, AliasMethodDescriptor);

            _Descriptor.call(this);
            this.name = name;
        }

        AliasMethodDescriptor.prototype.define = function define(target, key, home) {
            var name = this.name;
            Object.defineProperty(target, key, {
                enumerable: true,
                configurable: true,
                get: function () {
                    return this[name];
                }
            });
        };

        return AliasMethodDescriptor;
    })(_glimmerObjectLibMixin.Descriptor);

    var AliasMethodBlueprint = (function (_Blueprint) {
        _inherits(AliasMethodBlueprint, _Blueprint);

        function AliasMethodBlueprint(name) {
            _classCallCheck(this, AliasMethodBlueprint);

            _Blueprint.call(this);
            this.name = name;
        }

        AliasMethodBlueprint.prototype.descriptor = function descriptor(target, key, meta) {
            return new AliasMethodDescriptor(this.name);
        };

        return AliasMethodBlueprint;
    })(_glimmerObjectLibMixin.Blueprint);

    function aliasMethod(name) {
        return new AliasMethodBlueprint(name);
    }

    var AliasBlueprint = (function (_ComputedBlueprint) {
        _inherits(AliasBlueprint, _ComputedBlueprint);

        function AliasBlueprint(name) {
            _classCallCheck(this, AliasBlueprint);

            var parent = name.slice(0, -1);
            var last = name[name.length - 1];
            var get = function () {
                return name.reduce(function (obj, n) {
                    return obj[n];
                }, this);
            };
            var set = function (value) {
                var p = parent.reduce(function (obj, n) {
                    return obj[n];
                }, this);
                p[last] = value;
            };
            _ComputedBlueprint.call(this, { get: get, set: set }, [name]);
            this.name = name;
        }

        AliasBlueprint.prototype.descriptor = function descriptor(target, key, meta) {
            if (this.name[0] === key) throw new Error('Setting alias \'' + key + '\' on self');
            return _ComputedBlueprint.prototype.descriptor.call(this, target, key, meta);
        };

        return AliasBlueprint;
    })(_glimmerObjectLibComputed.ComputedBlueprint);

    function alias(name) {
        return new AliasBlueprint(name.split('.'));
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC9saWIvZGVzY3JpcHRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O1FBSUEscUJBQTRCO2tCQUE1QixxQkFBNEI7O0FBRzFCLGlCQUhGLHFCQUE0QixDQUdkLElBQVksRUFBQTtrQ0FIMUIscUJBQTRCOztBQUl4QixrQ0FBTyxDQUFDO0FBQ1IsZ0JBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ2xCOztBQU5ILDZCQUE0QixXQVExQixNQUFNLEdBQUEsZ0JBQUMsTUFBYyxFQUFFLEdBQVcsRUFBRSxJQUFZLEVBQUE7QUFDOUMsZ0JBQUksSUFBSSxHQUFXLElBQUksQ0FBQyxJQUFJLENBQUM7QUFFN0Isa0JBQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNqQywwQkFBVSxFQUFFLElBQUk7QUFDaEIsNEJBQVksRUFBRSxJQUFJO0FBQ2xCLG1CQUFHLEVBQUEsWUFBQTtBQUNELDJCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDbkI7YUFDRixDQUFDLENBQUM7U0FDSjs7ZUFsQkgscUJBQTRCOzhCQUpSLFVBQVU7O1FBeUI5QixvQkFBMkI7a0JBQTNCLG9CQUEyQjs7QUFHekIsaUJBSEYsb0JBQTJCLENBR2IsSUFBWSxFQUFBO2tDQUgxQixvQkFBMkI7O0FBSXZCLGlDQUFPLENBQUM7QUFDUixnQkFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7O0FBTkgsNEJBQTJCLFdBUXpCLFVBQVUsR0FBQSxvQkFBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLElBQWUsRUFBQTtBQUNyRCxtQkFBTyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3Qzs7ZUFWSCxvQkFBMkI7OEJBekJsQixTQUFTOztBQXNDWixhQUFBLFdBQUEsQ0FBc0IsSUFBWSxFQUFBO0FBQ3RDLGVBQU8sSUFBSSxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2Qzs7UUFFRCxjQUFxQjtrQkFBckIsY0FBcUI7O0FBR25CLGlCQUhGLGNBQXFCLENBR1AsSUFBYyxFQUFBO2tDQUg1QixjQUFxQjs7QUFJakIsZ0JBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsZ0JBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBRWpDLGdCQUFJLEdBQUcsR0FBRyxZQUFBO0FBQ1IsdUJBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLEdBQUcsRUFBRSxDQUFDOzJCQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQUEsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUM5QyxDQUFDO0FBRUYsZ0JBQUksR0FBRyxHQUFHLFVBQVMsS0FBSyxFQUFBO0FBQ3RCLG9CQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLENBQUM7MkJBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFBQSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2hELGlCQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQ2pCLENBQUM7QUFFRiwwQ0FBTSxFQUFFLEdBQUcsRUFBSCxHQUFHLEVBQUUsR0FBRyxFQUFILEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM1QixnQkFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7O0FBbEJILHNCQUFxQixXQW9CbkIsVUFBVSxHQUFBLG9CQUFDLE1BQWMsRUFBRSxHQUFXLEVBQUUsSUFBZSxFQUFBO0FBQ3JELGdCQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLE1BQU0sSUFBSSxLQUFLLHNCQUFtQixHQUFHLGdCQUFZLENBQUM7QUFDNUUsbUJBQU8sNkJBQU0sVUFBVSxLQUFBLE9BQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1Qzs7ZUF2QkgsY0FBcUI7aUNBeENaLGlCQUFpQjs7QUFrRXBCLGFBQUEsS0FBQSxDQUFnQixJQUFZLEVBQUE7QUFDaEMsZUFBTyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDNUMiLCJmaWxlIjoiZGVzY3JpcHRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCbHVlcHJpbnQsIERlc2NyaXB0b3IgfSBmcm9tICcuL21peGluJztcbmltcG9ydCB7IENsYXNzTWV0YSB9IGZyb20gJy4vb2JqZWN0JztcbmltcG9ydCB7IENvbXB1dGVkQmx1ZXByaW50IH0gZnJvbSAnLi9jb21wdXRlZCc7XG5cbmNsYXNzIEFsaWFzTWV0aG9kRGVzY3JpcHRvciBleHRlbmRzIERlc2NyaXB0b3Ige1xuICBwcml2YXRlIG5hbWU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gIH1cblxuICBkZWZpbmUodGFyZ2V0OiBPYmplY3QsIGtleTogc3RyaW5nLCBob21lOiBPYmplY3QpIHtcbiAgICBsZXQgbmFtZSA9IDxzdHJpbmc+dGhpcy5uYW1lO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5jbGFzcyBBbGlhc01ldGhvZEJsdWVwcmludCBleHRlbmRzIEJsdWVwcmludCB7XG4gIHByaXZhdGUgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIGRlc2NyaXB0b3IodGFyZ2V0OiBPYmplY3QsIGtleTogc3RyaW5nLCBtZXRhOiBDbGFzc01ldGEpOiBEZXNjcmlwdG9yIHtcbiAgICByZXR1cm4gbmV3IEFsaWFzTWV0aG9kRGVzY3JpcHRvcih0aGlzLm5hbWUpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGlhc01ldGhvZChuYW1lOiBzdHJpbmcpOiBCbHVlcHJpbnQge1xuICByZXR1cm4gbmV3IEFsaWFzTWV0aG9kQmx1ZXByaW50KG5hbWUpO1xufVxuXG5jbGFzcyBBbGlhc0JsdWVwcmludCBleHRlbmRzIENvbXB1dGVkQmx1ZXByaW50IHtcbiAgcHJpdmF0ZSBuYW1lOiBzdHJpbmdbXTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmdbXSkge1xuICAgIGxldCBwYXJlbnQgPSBuYW1lLnNsaWNlKDAsIC0xKTtcbiAgICBsZXQgbGFzdCA9IG5hbWVbbmFtZS5sZW5ndGggLSAxXTtcblxuICAgIGxldCBnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuYW1lLnJlZHVjZSgob2JqLCBuKSA9PiBvYmpbbl0sIHRoaXMpO1xuICAgIH07XG5cbiAgICBsZXQgc2V0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGxldCBwID0gcGFyZW50LnJlZHVjZSgob2JqLCBuKSA9PiBvYmpbbl0sIHRoaXMpO1xuICAgICAgcFtsYXN0XSA9IHZhbHVlO1xuICAgIH07XG5cbiAgICBzdXBlcih7IGdldCwgc2V0IH0sIFtuYW1lXSk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuXG4gIGRlc2NyaXB0b3IodGFyZ2V0OiBPYmplY3QsIGtleTogc3RyaW5nLCBtZXRhOiBDbGFzc01ldGEpOiBEZXNjcmlwdG9yIHtcbiAgICBpZiAodGhpcy5uYW1lWzBdID09PSBrZXkpIHRocm93IG5ldyBFcnJvcihgU2V0dGluZyBhbGlhcyAnJHtrZXl9JyBvbiBzZWxmYCk7XG4gICAgcmV0dXJuIHN1cGVyLmRlc2NyaXB0b3IodGFyZ2V0LCBrZXksIG1ldGEpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGlhcyhuYW1lOiBzdHJpbmcpOiBCbHVlcHJpbnQge1xuICByZXR1cm4gbmV3IEFsaWFzQmx1ZXByaW50KG5hbWUuc3BsaXQoJy4nKSk7XG59XG4iXX0=