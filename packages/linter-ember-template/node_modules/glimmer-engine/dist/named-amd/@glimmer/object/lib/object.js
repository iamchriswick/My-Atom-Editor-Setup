enifed('@glimmer/object/lib/object', ['exports', '@glimmer/object-reference', '@glimmer/util', '@glimmer/object/lib/mixin', '@glimmer/object/lib/utils'], function (exports, _glimmerObjectReference, _glimmerUtil, _glimmerObjectLibMixin, _glimmerObjectLibUtils) {
    'use strict';

    exports.turbocharge = turbocharge;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    var isArray = Array.isArray;
    var EMPTY_CACHE = function EMPTY_CACHE() {};
    exports.EMPTY_CACHE = EMPTY_CACHE;
    var CLASS_META = "df8be4c8-4e89-44e2-a8f9-550c8dacdca7";

    function turbocharge(obj) {
        // function Dummy() {}
        // Dummy.prototype = obj;
        return obj;
    }

    var SealedMeta = (function (_Meta) {
        _inherits(SealedMeta, _Meta);

        function SealedMeta() {
            _classCallCheck(this, SealedMeta);

            _Meta.apply(this, arguments);
        }

        SealedMeta.prototype.addReferenceTypeFor = function addReferenceTypeFor() {
            throw new Error("Cannot modify reference types on a sealed meta");
        };

        return SealedMeta;
    })(_glimmerObjectReference.Meta);

    var ClassMeta = (function () {
        function ClassMeta() {
            _classCallCheck(this, ClassMeta);

            this.referenceTypes = _glimmerUtil.dict();
            this.propertyMetadata = _glimmerUtil.dict();
            this.concatenatedProperties = _glimmerUtil.dict();
            this.hasConcatenatedProperties = false;
            this.mergedProperties = _glimmerUtil.dict();
            this.hasMergedProperties = false;
            this.mixins = [];
            this.appliedMixins = [];
            this.staticMixins = [];
            this.subclasses = [];
            this.slots = [];
            this.InstanceMetaConstructor = null;
        }

        ClassMeta.fromParent = function fromParent(parent) {
            var meta = new this();
            meta.reset(parent);
            return meta;
        };

        ClassMeta.for = function _for(object) {
            if (CLASS_META in object) return object[CLASS_META];else if (object.constructor) return object.constructor[CLASS_META] || null;else return null;
        };

        ClassMeta.prototype.init = function init(object, attrs) {
            if (typeof attrs !== 'object' || attrs === null) return;
            if (this.hasConcatenatedProperties) {
                var concatProps = this.concatenatedProperties;
                for (var prop in concatProps) {
                    if (prop in attrs) {
                        var concat = concatProps[prop].slice();
                        object[prop] = concat.concat(attrs[prop]);
                    }
                }
            }
            if (this.hasMergedProperties) {
                var mergedProps = this.mergedProperties;
                for (var prop in mergedProps) {
                    if (prop in attrs) {
                        var merged = _glimmerUtil.assign({}, mergedProps[prop]);
                        object[prop] = _glimmerUtil.assign(merged, attrs[prop]);
                    }
                }
            }
        };

        ClassMeta.prototype.addStaticMixin = function addStaticMixin(mixin) {
            this.staticMixins.push(mixin);
        };

        ClassMeta.prototype.addMixin = function addMixin(mixin) {
            this.mixins.push(mixin);
        };

        ClassMeta.prototype.getStaticMixins = function getStaticMixins() {
            return this.staticMixins;
        };

        ClassMeta.prototype.getMixins = function getMixins() {
            return this.mixins;
        };

        ClassMeta.prototype.addAppliedMixin = function addAppliedMixin(mixin) {
            this.appliedMixins.push(mixin);
        };

        ClassMeta.prototype.hasAppliedMixin = function hasAppliedMixin(mixin) {
            return this.appliedMixins.indexOf(mixin) !== -1;
        };

        ClassMeta.prototype.getAppliedMixins = function getAppliedMixins() {
            return this.appliedMixins;
        };

        ClassMeta.prototype.hasStaticMixin = function hasStaticMixin(mixin) {
            return this.staticMixins.indexOf(mixin) !== -1;
        };

        ClassMeta.applyAllMixins = function applyAllMixins(Subclass, Parent) {
            Subclass[CLASS_META].getMixins().forEach(function (m) {
                return m.extendPrototypeOnto(Subclass, Parent);
            });
            Subclass[CLASS_META].getStaticMixins().forEach(function (m) {
                return m.extendStatic(Subclass);
            });
            Subclass[CLASS_META].seal();
        };

        ClassMeta.prototype.addSubclass = function addSubclass(constructor) {
            this.subclasses.push(constructor);
        };

        ClassMeta.prototype.getSubclasses = function getSubclasses() {
            return this.subclasses;
        };

        ClassMeta.prototype.addPropertyMetadata = function addPropertyMetadata(property, value) {
            this.propertyMetadata[property] = value;
        };

        ClassMeta.prototype.metadataForProperty = function metadataForProperty(property) {
            return this.propertyMetadata[property];
        };

        ClassMeta.prototype.addReferenceTypeFor = function addReferenceTypeFor(property, type) {
            this.referenceTypes[property] = type;
        };

        ClassMeta.prototype.addSlotFor = function addSlotFor(property) {
            this.slots.push(property);
        };

        ClassMeta.prototype.hasConcatenatedProperty = function hasConcatenatedProperty(property) {
            if (!this.hasConcatenatedProperties) return false;
            return property in this.concatenatedProperties;
        };

        ClassMeta.prototype.getConcatenatedProperty = function getConcatenatedProperty(property) {
            return this.concatenatedProperties[property];
        };

        ClassMeta.prototype.getConcatenatedProperties = function getConcatenatedProperties() {
            return Object.keys(this.concatenatedProperties);
        };

        ClassMeta.prototype.addConcatenatedProperty = function addConcatenatedProperty(property, value) {
            this.hasConcatenatedProperties = true;
            if (property in this.concatenatedProperties) {
                var val = this.concatenatedProperties[property].concat(value);
                this.concatenatedProperties[property] = val;
            } else {
                this.concatenatedProperties[property] = value;
            }
        };

        ClassMeta.prototype.hasMergedProperty = function hasMergedProperty(property) {
            if (!this.hasMergedProperties) return false;
            return property in this.mergedProperties;
        };

        ClassMeta.prototype.getMergedProperty = function getMergedProperty(property) {
            return this.mergedProperties[property];
        };

        ClassMeta.prototype.getMergedProperties = function getMergedProperties() {
            return Object.keys(this.mergedProperties);
        };

        ClassMeta.prototype.addMergedProperty = function addMergedProperty(property, value) {
            this.hasMergedProperties = true;
            if (isArray(value)) {
                throw new Error('You passed in `' + JSON.stringify(value) + '` as the value for `foo` but `foo` cannot be an Array');
            }
            if (property in this.mergedProperties && this.mergedProperties[property] && value) {
                this.mergedProperties[property] = mergeMergedProperties(value, this.mergedProperties[property]);
            } else {
                value = value === null ? value : value || {};
                this.mergedProperties[property] = value;
            }
        };

        ClassMeta.prototype.getReferenceTypes = function getReferenceTypes() {
            return this.referenceTypes;
        };

        ClassMeta.prototype.getPropertyMetadata = function getPropertyMetadata() {
            return this.propertyMetadata;
        };

        ClassMeta.prototype.reset = function reset(parent) {
            this.referenceTypes = _glimmerUtil.dict();
            this.propertyMetadata = _glimmerUtil.dict();
            this.concatenatedProperties = _glimmerUtil.dict();
            this.mergedProperties = _glimmerUtil.dict();
            if (parent) {
                this.hasConcatenatedProperties = parent.hasConcatenatedProperties;
                for (var prop in parent.concatenatedProperties) {
                    this.concatenatedProperties[prop] = parent.concatenatedProperties[prop].slice();
                }
                this.hasMergedProperties = parent.hasMergedProperties;
                for (var prop in parent.mergedProperties) {
                    this.mergedProperties[prop] = _glimmerUtil.assign({}, parent.mergedProperties[prop]);
                }
                _glimmerUtil.assign(this.referenceTypes, parent.referenceTypes);
                _glimmerUtil.assign(this.propertyMetadata, parent.propertyMetadata);
            }
        };

        ClassMeta.prototype.reseal = function reseal(obj) {
            var meta = _glimmerObjectReference.Meta.for(obj);
            var fresh = new this.InstanceMetaConstructor(obj, {});
            var referenceTypes = meta.getReferenceTypes();
            var slots = meta.getSlots();
            turbocharge(_glimmerUtil.assign(referenceTypes, this.referenceTypes));
            turbocharge(_glimmerUtil.assign(slots, fresh.getSlots()));
        };

        ClassMeta.prototype.seal = function seal() {
            var referenceTypes = turbocharge(_glimmerUtil.assign({}, this.referenceTypes));
            turbocharge(this.concatenatedProperties);
            turbocharge(this.mergedProperties);
            if (!this.hasMergedProperties && !this.hasConcatenatedProperties) {
                this.init = function () {};
            }
            var slots = this.slots;

            var Slots = function Slots() {
                var _this = this;

                _classCallCheck(this, Slots);

                slots.forEach(function (name) {
                    _this[name] = EMPTY_CACHE;
                });
            };

            this.InstanceMetaConstructor = (function (_SealedMeta) {
                _inherits(_class, _SealedMeta);

                function _class() {
                    _classCallCheck(this, _class);

                    _SealedMeta.apply(this, arguments);
                    this.slots = new Slots();
                    this.referenceTypes = referenceTypes;
                }

                _class.prototype.getReferenceTypes = function getReferenceTypes() {
                    return this.referenceTypes;
                };

                _class.prototype.referenceTypeFor = function referenceTypeFor(property) {
                    return this.referenceTypes[property] || _glimmerObjectReference.PropertyReference;
                };

                _class.prototype.getSlots = function getSlots() {
                    return this.slots;
                };

                return _class;
            })(SealedMeta);
            turbocharge(this);
        };

        return ClassMeta;
    })();

    exports.ClassMeta = ClassMeta;

    function mergeMergedProperties(attrs, parent) {
        var merged = _glimmerUtil.assign({}, parent);
        for (var prop in attrs) {
            if (prop in parent && typeof parent[prop] === 'function' && typeof attrs[prop] === 'function') {
                var wrapped = _glimmerObjectLibMixin.wrapMethod(parent, prop, attrs[prop]);
                merged[prop] = wrapped;
            } else {
                merged[prop] = attrs[prop];
            }
        }
        return merged;
    }

    var InstanceMeta = (function (_ClassMeta) {
        _inherits(InstanceMeta, _ClassMeta);

        function InstanceMeta() {
            _classCallCheck(this, InstanceMeta);

            _ClassMeta.apply(this, arguments);
            this["df8be4c8-4e89-44e2-a8f9-550c8dacdca7"] = ClassMeta.fromParent(null);
        }

        InstanceMeta.fromParent = function fromParent(parent) {
            return _ClassMeta.fromParent.call(this, parent);
        };

        InstanceMeta.prototype.reset = function reset(parent) {
            _ClassMeta.prototype.reset.call(this, parent);
            if (parent) this[CLASS_META].reset(parent[CLASS_META]);
        };

        InstanceMeta.prototype.seal = function seal() {
            _ClassMeta.prototype.seal.call(this);
            this[CLASS_META].seal();
        };

        return InstanceMeta;
    })(ClassMeta);

    exports.InstanceMeta = InstanceMeta;

    var GlimmerObject = (function () {
        function GlimmerObject(attrs) {
            _classCallCheck(this, GlimmerObject);

            this._super = _glimmerObjectLibUtils.ROOT;
            this._meta = null;
            if (attrs) _glimmerUtil.assign(this, attrs);
            this.constructor[CLASS_META].init(this, attrs);
            this._super = _glimmerObjectLibUtils.ROOT;
            _glimmerUtil.initializeGuid(this);
            this.init();
        }

        GlimmerObject.extend = function extend() {
            for (var _len = arguments.length, extensions = Array(_len), _key = 0; _key < _len; _key++) {
                extensions[_key] = arguments[_key];
            }

            return _glimmerObjectLibMixin.extend.apply(undefined, [this].concat(extensions));
        };

        GlimmerObject.create = function create(attrs) {
            return new this(attrs);
        };

        GlimmerObject.reopen = function reopen(extensions) {
            _glimmerObjectLibMixin.toMixin(extensions).extendPrototype(this);
            this[CLASS_META].seal();
            _glimmerObjectLibMixin.relinkSubclasses(this);
        };

        GlimmerObject.reopenClass = function reopenClass(extensions) {
            _glimmerObjectLibMixin.toMixin(extensions).extendStatic(this);
            this[CLASS_META].seal();
        };

        GlimmerObject.metaForProperty = function metaForProperty(property) {
            var value = this[CLASS_META].metadataForProperty(property);
            if (!value) throw new Error('metaForProperty() could not find a computed property with key \'' + property + '\'.');
            return value;
        };

        GlimmerObject.eachComputedProperty = function eachComputedProperty(callback) {
            var metadata = this[CLASS_META].getPropertyMetadata();
            if (!metadata) return;
            for (var prop in metadata) {
                callback(prop, metadata[prop]);
            }
        };

        GlimmerObject.prototype.init = function init() {};

        GlimmerObject.prototype.get = function get(key) {
            return this[key];
        };

        GlimmerObject.prototype.set = function set(key, value) {
            this[key] = value;
        };

        GlimmerObject.prototype.setProperties = function setProperties(attrs) {
            _glimmerUtil.assign(this, attrs);
        };

        GlimmerObject.prototype.destroy = function destroy() {};

        return GlimmerObject;
    })();

    exports.default = GlimmerObject;

    GlimmerObject["df8be4c8-4e89-44e2-a8f9-550c8dacdca7"] = InstanceMeta.fromParent(null);
    GlimmerObject.isClass = true;
});
//# sourceMappingURL=data:application/json;base64,