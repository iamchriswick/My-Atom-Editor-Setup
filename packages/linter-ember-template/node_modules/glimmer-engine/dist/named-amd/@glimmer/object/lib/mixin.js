enifed('@glimmer/object/lib/mixin', ['exports', '@glimmer/object-reference', '@glimmer/util', '@glimmer/object/lib/object', '@glimmer/object/lib/utils'], function (exports, _glimmerObjectReference, _glimmerUtil, _glimmerObjectLibObject, _glimmerObjectLibUtils) {
    'use strict';

    exports.extend = extend;
    exports.relinkSubclasses = relinkSubclasses;
    exports.toMixin = toMixin;
    exports.wrapMethod = wrapMethod;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var isArray = Array.isArray;
    var DESCRIPTOR = "5d90f84f-908e-4a42-9749-3d0f523c262c";
    exports.DESCRIPTOR = DESCRIPTOR;
    var BLUEPRINT = "8d97cf5f-db9e-48d8-a6b2-7a75b7170805";
    exports.BLUEPRINT = BLUEPRINT;

    var Descriptor = function Descriptor() {
        _classCallCheck(this, Descriptor);

        this["5d90f84f-908e-4a42-9749-3d0f523c262c"] = true;
    };

    exports.Descriptor = Descriptor;

    var Blueprint = function Blueprint() {
        _classCallCheck(this, Blueprint);

        this["8d97cf5f-db9e-48d8-a6b2-7a75b7170805"] = true;
    };

    exports.Blueprint = Blueprint;

    var Mixin = (function () {
        function Mixin(extensions, mixins) {
            var _dependencies;

            _classCallCheck(this, Mixin);

            this.extensions = null;
            this.concatenatedProperties = [];
            this.mergedProperties = [];
            this.dependencies = [];
            this.reopen(extensions);
            (_dependencies = this.dependencies).push.apply(_dependencies, mixins);
        }

        Mixin.create = function create() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            var extensions = args[args.length - 1];
            if (args.length === 0) {
                return new this({}, []);
            } else if (extensions instanceof Mixin) {
                return new this({}, args);
            } else {
                var deps = args.slice(0, -1).map(toMixin);
                return new this(extensions, deps);
            }
        };

        Mixin.mixins = function mixins(obj) {
            if (typeof obj !== 'object' || obj === null) return [];
            var meta = _glimmerObjectLibObject.ClassMeta.for(obj);
            if (!meta) return [];
            return meta.getAppliedMixins();
        };

        Mixin.prototype.detect = function detect(obj) {
            if (typeof obj !== 'object' || obj === null) return false;
            if (obj instanceof Mixin) {
                return obj.dependencies.indexOf(this) !== -1;
            }
            var meta = _glimmerObjectLibObject.ClassMeta.for(obj);
            return !!meta && meta.hasAppliedMixin(this);
        };

        Mixin.prototype.reopen = function reopen(extensions) {
            if (this.extensions) {
                this.dependencies.push(toMixin(this.extensions));
            }
            if (typeof extensions === 'object' && 'concatenatedProperties' in extensions) {
                var concat = undefined;
                var rawConcat = extensions.concatenatedProperties;
                if (isArray(rawConcat)) {
                    concat = rawConcat.slice();
                } else if (rawConcat === null || rawConcat === undefined) {
                    concat = [];
                } else {
                    concat = [rawConcat];
                }
                delete extensions.concatenatedProperties;
                this.concatenatedProperties = concat;
            }
            if (typeof extensions === 'object' && 'mergedProperties' in extensions) {
                var merged = undefined;
                var rawMerged = extensions.mergedProperties;
                if (isArray(rawMerged)) {
                    merged = rawMerged.slice();
                } else if (rawMerged === null || rawMerged === undefined) {
                    merged = [];
                } else {
                    merged = [rawMerged];
                }
                delete extensions.mergedProperties;
                this.mergedProperties = merged;
            }
            var normalized = Object.keys(extensions).reduce(function (obj, key) {
                var value = extensions[key];
                switch (typeof value) {
                    case 'function':
                        obj[key] = new MethodBlueprint({ value: value });
                        break;
                    case 'object':
                        if (value && BLUEPRINT in value) {
                            obj[key] = value;
                            break;
                        }
                    /* falls through */
                    default:
                        obj[key] = new DataBlueprint({ value: value });
                }
                return obj;
            }, _glimmerUtil.dict());
            this.extensions = _glimmerUtil.dict();
            _glimmerUtil.assign(this.extensions, _glimmerObjectLibObject.turbocharge(normalized));
        };

        Mixin.prototype.apply = function apply(target) {
            var meta = target[_glimmerObjectReference.CLASS_META] = target[_glimmerObjectReference.CLASS_META] || new _glimmerObjectLibObject.ClassMeta();
            this.dependencies.forEach(function (m) {
                return m.apply(target);
            });
            this.mergeProperties(target, target, meta);
            meta.addMixin(this);
            meta.seal();
            meta.reseal(target);
            return target;
        };

        Mixin.prototype.extendPrototype = function extendPrototype(Original) {
            Original.prototype = Object.create(Original.prototype);
            this.dependencies.forEach(function (m) {
                return m.extendPrototype(Original);
            });
            this.extendPrototypeOnto(Original, Original);
        };

        Mixin.prototype.extendPrototypeOnto = function extendPrototypeOnto(Subclass, Parent) {
            this.dependencies.forEach(function (m) {
                return m.extendPrototypeOnto(Subclass, Parent);
            });
            this.mergeProperties(Subclass.prototype, Parent.prototype, Subclass[_glimmerObjectReference.CLASS_META]);
            Subclass[_glimmerObjectReference.CLASS_META].addMixin(this);
        };

        Mixin.prototype.extendStatic = function extendStatic(Target) {
            this.dependencies.forEach(function (m) {
                return m.extendStatic(Target);
            });
            this.mergeProperties(Target, Object.getPrototypeOf(Target), Target[_glimmerObjectReference.CLASS_META][_glimmerObjectReference.CLASS_META]);
            Target[_glimmerObjectReference.CLASS_META].addStaticMixin(this);
        };

        Mixin.prototype.mergeProperties = function mergeProperties(target, parent, meta) {
            var _this = this;

            if (meta.hasAppliedMixin(this)) return;
            meta.addAppliedMixin(this);
            this.mergedProperties.forEach(function (k) {
                return meta.addMergedProperty(k, parent[k]);
            });
            this.concatenatedProperties.forEach(function (k) {
                return meta.addConcatenatedProperty(k, []);
            });
            new ValueDescriptor({ value: meta.getConcatenatedProperties() }).define(target, 'concatenatedProperties', null);
            new ValueDescriptor({ value: meta.getMergedProperties() }).define(target, 'mergedProperties', null);
            Object.keys(this.extensions).forEach(function (key) {
                var extension = _this.extensions[key];
                var desc = extension.descriptor(target, key, meta);
                desc.define(target, key, parent);
            });
            new ValueDescriptor({ value: _glimmerObjectLibUtils.ROOT }).define(target, '_super', null);
        };

        return Mixin;
    })();

    exports.Mixin = Mixin;

    function extend(Parent) {
        for (var _len2 = arguments.length, extensions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            extensions[_key2 - 1] = arguments[_key2];
        }

        var Super = Parent;
        var Subclass = (function (_Super) {
            _inherits(Subclass, _Super);

            function Subclass() {
                _classCallCheck(this, Subclass);

                _Super.apply(this, arguments);
            }

            return Subclass;
        })(Super);
        Subclass[_glimmerObjectReference.CLASS_META] = _glimmerObjectLibObject.InstanceMeta.fromParent(Parent[_glimmerObjectReference.CLASS_META]);
        var mixins = extensions.map(toMixin);
        Parent[_glimmerObjectReference.CLASS_META].addSubclass(Subclass);
        mixins.forEach(function (m) {
            return Subclass[_glimmerObjectReference.CLASS_META].addMixin(m);
        });
        _glimmerObjectLibObject.ClassMeta.applyAllMixins(Subclass, Parent);
        return Subclass;
    }

    function relinkSubclasses(Parent) {
        Parent[_glimmerObjectReference.CLASS_META].getSubclasses().forEach(function (Subclass) {
            Subclass[_glimmerObjectReference.CLASS_META].reset(Parent[_glimmerObjectReference.CLASS_META]);
            Subclass.prototype = Object.create(Parent.prototype);
            _glimmerObjectLibObject.ClassMeta.applyAllMixins(Subclass, Parent);
            // recurse into sub-subclasses
            relinkSubclasses(Subclass);
        });
    }

    function toMixin(extension) {
        if (extension instanceof Mixin) return extension;else return new Mixin(extension, []);
    }

    var ValueDescriptor = (function (_Descriptor) {
        _inherits(ValueDescriptor, _Descriptor);

        function ValueDescriptor(_ref) {
            var _ref$enumerable = _ref.enumerable;
            var enumerable = _ref$enumerable === undefined ? true : _ref$enumerable;
            var _ref$configurable = _ref.configurable;
            var configurable = _ref$configurable === undefined ? true : _ref$configurable;
            var _ref$writable = _ref.writable;
            var writable = _ref$writable === undefined ? true : _ref$writable;
            var value = _ref.value;

            _classCallCheck(this, ValueDescriptor);

            _Descriptor.call(this);
            this.enumerable = enumerable;
            this.configurable = configurable;
            this.writable = writable;
            this.value = value;
        }

        ValueDescriptor.prototype.define = function define(target, key, home) {
            Object.defineProperty(target, key, {
                enumerable: this.enumerable,
                configurable: this.configurable,
                writable: this.writable,
                value: this.value
            });
        };

        return ValueDescriptor;
    })(Descriptor);

    var AccessorDescriptor = (function (_Descriptor2) {
        _inherits(AccessorDescriptor, _Descriptor2);

        function AccessorDescriptor(_ref2) {
            var enumerable = _ref2.enumerable;
            var configurable = _ref2.configurable;
            var get = _ref2.get;
            var set = _ref2.set;

            _classCallCheck(this, AccessorDescriptor);

            _Descriptor2.call(this);
            this.enumerable = enumerable;
            this.configurable = configurable;
            this.get = get;
            this.set = set;
        }

        AccessorDescriptor.prototype.define = function define(target, key) {
            Object.defineProperty(target, key, {
                enumerable: this.enumerable,
                configurable: this.configurable,
                get: this.get,
                set: this.set
            });
        };

        return AccessorDescriptor;
    })(Descriptor);

    var DataBlueprint = (function (_Blueprint) {
        _inherits(DataBlueprint, _Blueprint);

        function DataBlueprint(_ref3) {
            var _ref3$enumerable = _ref3.enumerable;
            var enumerable = _ref3$enumerable === undefined ? true : _ref3$enumerable;
            var _ref3$configurable = _ref3.configurable;
            var configurable = _ref3$configurable === undefined ? true : _ref3$configurable;
            var _ref3$writable = _ref3.writable;
            var writable = _ref3$writable === undefined ? true : _ref3$writable;
            var value = _ref3.value;

            _classCallCheck(this, DataBlueprint);

            _Blueprint.call(this);
            this.enumerable = enumerable;
            this.configurable = configurable;
            this.value = value;
            this.writable = writable;
        }

        DataBlueprint.prototype.descriptor = function descriptor(target, key, classMeta) {
            var enumerable = this.enumerable;
            var configurable = this.configurable;
            var writable = this.writable;
            var value = this.value;

            if (classMeta.hasConcatenatedProperty(key)) {
                classMeta.addConcatenatedProperty(key, value);
                value = classMeta.getConcatenatedProperty(key);
            } else if (classMeta.hasMergedProperty(key)) {
                classMeta.addMergedProperty(key, value);
                value = classMeta.getMergedProperty(key);
            }
            return new ValueDescriptor({ enumerable: enumerable, configurable: configurable, writable: writable, value: value });
        };

        return DataBlueprint;
    })(Blueprint);

    exports.DataBlueprint = DataBlueprint;

    var AccessorBlueprint = (function (_Blueprint2) {
        _inherits(AccessorBlueprint, _Blueprint2);

        function AccessorBlueprint(_ref4) {
            var _ref4$enumerable = _ref4.enumerable;
            var enumerable = _ref4$enumerable === undefined ? true : _ref4$enumerable;
            var _ref4$configurable = _ref4.configurable;
            var configurable = _ref4$configurable === undefined ? true : _ref4$configurable;
            var get = _ref4.get;
            var set = _ref4.set;

            _classCallCheck(this, AccessorBlueprint);

            _Blueprint2.call(this);
            this.enumerable = enumerable;
            this.configurable = configurable;
            this.get = get;
            this.set = set;
        }

        AccessorBlueprint.prototype.descriptor = function descriptor(target, key, classMeta) {
            return new ValueDescriptor({
                enumerable: this.enumerable,
                configurable: this.configurable,
                get: this.get,
                set: this.set
            });
        };

        return AccessorBlueprint;
    })(Blueprint);

    exports.AccessorBlueprint = AccessorBlueprint;

    var MethodDescriptor = (function (_ValueDescriptor) {
        _inherits(MethodDescriptor, _ValueDescriptor);

        function MethodDescriptor() {
            _classCallCheck(this, MethodDescriptor);

            _ValueDescriptor.apply(this, arguments);
        }

        MethodDescriptor.prototype.define = function define(target, key, home) {
            this.value = wrapMethod(home, key, this.value);
            _ValueDescriptor.prototype.define.call(this, target, key, home);
        };

        return MethodDescriptor;
    })(ValueDescriptor);

    var MethodBlueprint = (function (_DataBlueprint) {
        _inherits(MethodBlueprint, _DataBlueprint);

        function MethodBlueprint() {
            _classCallCheck(this, MethodBlueprint);

            _DataBlueprint.apply(this, arguments);
        }

        MethodBlueprint.prototype.descriptor = function descriptor(target, key, classMeta) {
            var desc = _DataBlueprint.prototype.descriptor.call(this, target, key, classMeta);
            return new MethodDescriptor(desc);
        };

        return MethodBlueprint;
    })(DataBlueprint);

    function wrapMethod(home, methodName, original) {
        if (!(methodName in home)) return maybeWrap(original);
        var superMethod = home[methodName];
        var func = function () {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            if (!this) return original.apply(this, args);
            var lastSuper = this._super;
            this._super = superMethod;
            try {
                return original.apply(this, args);
            } finally {
                this._super = lastSuper;
            }
        };
        func.__wrapped = true;
        return func;
    }

    function maybeWrap(original) {
        if ('__wrapped' in original) return original;
        return function () {
            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            if (!this) return original.apply(this, args);
            var lastSuper = this._super;
            this._super = _glimmerObjectLibUtils.ROOT;
            try {
                return original.apply(this, args);
            } finally {
                this._super = lastSuper;
            }
        };
    }
});
//# sourceMappingURL=data:application/json;base64,