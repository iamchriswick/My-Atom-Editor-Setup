enifed("@glimmer/syntax/lib/parser", ["exports", "handlebars", "@glimmer/syntax/lib/builders", "@glimmer/syntax/lib/generation/print", "@glimmer/syntax/lib/traversal/traverse", "@glimmer/syntax/lib/traversal/walker", "simple-html-tokenizer", "@glimmer/syntax/lib/parser/handlebars-node-visitors", "@glimmer/syntax/lib/parser/tokenizer-event-handlers"], function (exports, _handlebars, _glimmerSyntaxLibBuilders, _glimmerSyntaxLibGenerationPrint, _glimmerSyntaxLibTraversalTraverse, _glimmerSyntaxLibTraversalWalker, _simpleHtmlTokenizer, _glimmerSyntaxLibParserHandlebarsNodeVisitors, _glimmerSyntaxLibParserTokenizerEventHandlers) {
    "use strict";

    exports.preprocess = preprocess;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var syntax = {
        parse: preprocess,
        builders: _glimmerSyntaxLibBuilders.default,
        print: _glimmerSyntaxLibGenerationPrint.default,
        traverse: _glimmerSyntaxLibTraversalTraverse.default,
        Walker: _glimmerSyntaxLibTraversalWalker.default
    };
    exports.syntax = syntax;

    function preprocess(html, options) {
        var ast = typeof html === 'object' ? html : _handlebars.parse(html);
        var combined = new Parser(html, options).acceptNode(ast);
        if (options && options.plugins && options.plugins.ast) {
            for (var i = 0, l = options.plugins.ast.length; i < l; i++) {
                var plugin = new options.plugins.ast[i](options);
                plugin.syntax = syntax;
                combined = plugin.transform(combined);
            }
        }
        return combined;
    }

    var entityParser = new _simpleHtmlTokenizer.EntityParser(_simpleHtmlTokenizer.HTML5NamedCharRefs);

    var Parser = (function () {
        function Parser(source) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

            _classCallCheck(this, Parser);

            this.elementStack = [];
            this.currentAttribute = null;
            this.currentNode = null;
            this.tokenizer = new _simpleHtmlTokenizer.EventedTokenizer(this, entityParser);
            this.options = options;
            if (typeof source === 'string') {
                this.source = source.split(/(?:\r\n?|\n)/g);
            }
        }

        Parser.prototype.acceptNode = function acceptNode(node) {
            return this[node.type](node);
        };

        Parser.prototype.currentElement = function currentElement() {
            return this.elementStack[this.elementStack.length - 1];
        };

        Parser.prototype.sourceForMustache = function sourceForMustache(mustache) {
            var firstLine = mustache.loc.start.line - 1;
            var lastLine = mustache.loc.end.line - 1;
            var currentLine = firstLine - 1;
            var firstColumn = mustache.loc.start.column + 2;
            var lastColumn = mustache.loc.end.column - 2;
            var string = [];
            var line = undefined;
            if (!this.source) {
                return '{{' + mustache.path.id.original + '}}';
            }
            while (currentLine < lastLine) {
                currentLine++;
                line = this.source[currentLine];
                if (currentLine === firstLine) {
                    if (firstLine === lastLine) {
                        string.push(line.slice(firstColumn, lastColumn));
                    } else {
                        string.push(line.slice(firstColumn));
                    }
                } else if (currentLine === lastLine) {
                    string.push(line.slice(0, lastColumn));
                } else {
                    string.push(line);
                }
            }
            return string.join('\n');
        };

        return Parser;
    })();

    exports.Parser = Parser;

    for (var key in _glimmerSyntaxLibParserHandlebarsNodeVisitors.default) {
        Parser.prototype[key] = _glimmerSyntaxLibParserHandlebarsNodeVisitors.default[key];
    }
    for (var key in _glimmerSyntaxLibParserTokenizerEventHandlers.default) {
        Parser.prototype[key] = _glimmerSyntaxLibParserTokenizerEventHandlers.default[key];
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3N5bnRheC9saWIvcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFhTyxRQUFNLE1BQU0sR0FBRztBQUNwQixhQUFLLEVBQUUsVUFBVTtBQUNqQixnQkFBUSxtQ0FBQTtBQUNSLGFBQUssMENBQUE7QUFDTCxnQkFBUSw0Q0FBQTtBQUNSLGNBQU0sMENBQUE7S0FDUCxDQUFDOzs7QUFFSSxhQUFBLFVBQUEsQ0FBcUIsSUFBSSxFQUFFLE9BQVEsRUFBQTtBQUN2QyxZQUFJLEdBQUcsR0FBRyxBQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsR0FBSSxJQUFJLEdBQUcsWUF0QnZDLEtBQUssQ0FzQndDLElBQUksQ0FBQyxDQUFDO0FBQzFELFlBQUksUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7QUFFekQsWUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtBQUNyRCxpQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQzFELG9CQUFJLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRWpELHNCQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUV2Qix3QkFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDdkM7U0FDRjtBQUVELGVBQU8sUUFBUSxDQUFDO0tBQ2pCOztBQUVELFFBQU0sWUFBWSxHQUFHLHlCQS9CbkIsWUFBWSxzQkFDWixrQkFBa0IsQ0E4QmdDLENBQUM7O1FBRS9D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QUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxzREFBdUIsR0FBRyxDQUFDLENBQUM7S0FDckQ7QUFFRCxTQUFLLElBQUksR0FBRywyREFBNEI7QUFDdEMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxzREFBdUIsR0FBRyxDQUFDLENBQUM7S0FDckQiLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiaGFuZGxlYmFyc1wiO1xuaW1wb3J0IGJ1aWxkZXJzIGZyb20gXCIuL2J1aWxkZXJzXCI7XG5pbXBvcnQgcHJpbnQgZnJvbSBcIi4vZ2VuZXJhdGlvbi9wcmludFwiO1xuaW1wb3J0IHRyYXZlcnNlIGZyb20gXCIuL3RyYXZlcnNhbC90cmF2ZXJzZVwiO1xuaW1wb3J0IFdhbGtlciBmcm9tIFwiLi90cmF2ZXJzYWwvd2Fsa2VyXCI7XG5pbXBvcnQge1xuICBFdmVudGVkVG9rZW5pemVyLFxuICBFbnRpdHlQYXJzZXIsXG4gIEhUTUw1TmFtZWRDaGFyUmVmcyBhcyBuYW1lZENoYXJSZWZzXG59IGZyb20gXCJzaW1wbGUtaHRtbC10b2tlbml6ZXJcIjtcbmltcG9ydCBoYW5kbGViYXJzTm9kZVZpc2l0b3JzIGZyb20gXCIuL3BhcnNlci9oYW5kbGViYXJzLW5vZGUtdmlzaXRvcnNcIjtcbmltcG9ydCB0b2tlbml6ZXJFdmVudEhhbmRsZXJzIGZyb20gXCIuL3BhcnNlci90b2tlbml6ZXItZXZlbnQtaGFuZGxlcnNcIjtcblxuZXhwb3J0IGNvbnN0IHN5bnRheCA9IHtcbiAgcGFyc2U6IHByZXByb2Nlc3MsXG4gIGJ1aWxkZXJzLFxuICBwcmludCxcbiAgdHJhdmVyc2UsXG4gIFdhbGtlclxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByZXByb2Nlc3MoaHRtbCwgb3B0aW9ucz8pIHtcbiAgbGV0IGFzdCA9ICh0eXBlb2YgaHRtbCA9PT0gJ29iamVjdCcpID8gaHRtbCA6IHBhcnNlKGh0bWwpO1xuICBsZXQgY29tYmluZWQgPSBuZXcgUGFyc2VyKGh0bWwsIG9wdGlvbnMpLmFjY2VwdE5vZGUoYXN0KTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnBsdWdpbnMgJiYgb3B0aW9ucy5wbHVnaW5zLmFzdCkge1xuICAgIGZvciAobGV0IGkgPSAwLCBsID0gb3B0aW9ucy5wbHVnaW5zLmFzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBwbHVnaW4gPSBuZXcgb3B0aW9ucy5wbHVnaW5zLmFzdFtpXShvcHRpb25zKTtcblxuICAgICAgcGx1Z2luLnN5bnRheCA9IHN5bnRheDtcblxuICAgICAgY29tYmluZWQgPSBwbHVnaW4udHJhbnNmb3JtKGNvbWJpbmVkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29tYmluZWQ7XG59XG5cbmNvbnN0IGVudGl0eVBhcnNlciA9IG5ldyBFbnRpdHlQYXJzZXIobmFtZWRDaGFyUmVmcyk7XG5cbmV4cG9ydCBjbGFzcyBQYXJzZXIge1xuICBwcml2YXRlIGVsZW1lbnRTdGFjayA9IFtdO1xuICBwcml2YXRlIG9wdGlvbnM6IE9iamVjdDtcbiAgcHJpdmF0ZSBzb3VyY2U6IHN0cmluZ1tdO1xuICBwdWJsaWMgY3VycmVudEF0dHJpYnV0ZSA9IG51bGw7XG4gIHB1YmxpYyBjdXJyZW50Tm9kZSA9IG51bGw7XG4gIHB1YmxpYyB0b2tlbml6ZXIgPSBuZXcgRXZlbnRlZFRva2VuaXplcih0aGlzLCBlbnRpdHlQYXJzZXIpO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZSwgb3B0aW9uczogT2JqZWN0ID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZS5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICAgIH1cbiAgfVxuXG4gIGFjY2VwdE5vZGUobm9kZSk6IE9iamVjdCB7XG4gICAgcmV0dXJuIHRoaXNbbm9kZS50eXBlXShub2RlKTtcbiAgfVxuXG4gIGN1cnJlbnRFbGVtZW50KCk6IE9iamVjdCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFN0YWNrW3RoaXMuZWxlbWVudFN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgc291cmNlRm9yTXVzdGFjaGUobXVzdGFjaGUpOiBzdHJpbmcge1xuICAgIGxldCBmaXJzdExpbmUgPSBtdXN0YWNoZS5sb2Muc3RhcnQubGluZSAtIDE7XG4gICAgbGV0IGxhc3RMaW5lID0gbXVzdGFjaGUubG9jLmVuZC5saW5lIC0gMTtcbiAgICBsZXQgY3VycmVudExpbmUgPSBmaXJzdExpbmUgLSAxO1xuICAgIGxldCBmaXJzdENvbHVtbiA9IG11c3RhY2hlLmxvYy5zdGFydC5jb2x1bW4gKyAyO1xuICAgIGxldCBsYXN0Q29sdW1uID0gbXVzdGFjaGUubG9jLmVuZC5jb2x1bW4gLSAyO1xuICAgIGxldCBzdHJpbmcgPSBbXTtcbiAgICBsZXQgbGluZTtcblxuICAgIGlmICghdGhpcy5zb3VyY2UpIHtcbiAgICAgIHJldHVybiAne3snICsgbXVzdGFjaGUucGF0aC5pZC5vcmlnaW5hbCArICd9fSc7XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMaW5lIDwgbGFzdExpbmUpIHtcbiAgICAgIGN1cnJlbnRMaW5lKys7XG4gICAgICBsaW5lID0gdGhpcy5zb3VyY2VbY3VycmVudExpbmVdO1xuXG4gICAgICBpZiAoY3VycmVudExpbmUgPT09IGZpcnN0TGluZSkge1xuICAgICAgICBpZiAoZmlyc3RMaW5lID09PSBsYXN0TGluZSkge1xuICAgICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoZmlyc3RDb2x1bW4sIGxhc3RDb2x1bW4pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChsaW5lLnNsaWNlKGZpcnN0Q29sdW1uKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudExpbmUgPT09IGxhc3RMaW5lKSB7XG4gICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoMCwgbGFzdENvbHVtbikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nLnB1c2gobGluZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZy5qb2luKCdcXG4nKTtcbiAgfVxufVxuXG5mb3IgKGxldCBrZXkgaW4gaGFuZGxlYmFyc05vZGVWaXNpdG9ycykge1xuICBQYXJzZXIucHJvdG90eXBlW2tleV0gPSBoYW5kbGViYXJzTm9kZVZpc2l0b3JzW2tleV07XG59XG5cbmZvciAobGV0IGtleSBpbiB0b2tlbml6ZXJFdmVudEhhbmRsZXJzKSB7XG4gIFBhcnNlci5wcm90b3R5cGVba2V5XSA9IHRva2VuaXplckV2ZW50SGFuZGxlcnNba2V5XTtcbn1cbiJdfQ==