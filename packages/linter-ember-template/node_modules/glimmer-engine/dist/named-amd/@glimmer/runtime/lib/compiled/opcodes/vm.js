enifed('@glimmer/runtime/lib/compiled/opcodes/vm', ['exports', '@glimmer/runtime/lib/opcodes', '@glimmer/reference', '@glimmer/util'], function (exports, _glimmerRuntimeLibOpcodes, _glimmerReference, _glimmerUtil) {
    'use strict';

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PushChildScope, function (vm) {
        return vm.pushChildScope();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PopScope, function (vm) {
        return vm.popScope();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PushDynamicScope, function (vm) {
        return vm.pushDynamicScope();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PopDynamicScope, function (vm) {
        return vm.popDynamicScope();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.Put, function (vm, _ref) {
        var reference = _ref.op1;

        vm.frame.setOperand(vm.constants.getReference(reference));
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.EvaluatePut, function (vm, _ref2) {
        var expression = _ref2.op1;

        var expr = vm.constants.getExpression(expression);
        vm.evaluateOperand(expr);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PutArgs, function (vm, _ref3) {
        var args = _ref3.op1;

        vm.evaluateArgs(vm.constants.getExpression(args));
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.BindPositionalArgs, function (vm, _ref4) {
        var _symbols = _ref4.op1;

        var symbols = vm.constants.getArray(_symbols);
        vm.bindPositionalArgs(symbols);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.BindNamedArgs, function (vm, _ref5) {
        var _names = _ref5.op1;
        var _symbols = _ref5.op2;

        var names = vm.constants.getArray(_names);
        var symbols = vm.constants.getArray(_symbols);
        vm.bindNamedArgs(names, symbols);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.BindBlocks, function (vm, _ref6) {
        var _names = _ref6.op1;
        var _symbols = _ref6.op2;

        var names = vm.constants.getArray(_names);
        var symbols = vm.constants.getArray(_symbols);
        vm.bindBlocks(names, symbols);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.BindPartialArgs, function (vm, _ref7) {
        var symbol = _ref7.op1;

        vm.bindPartialArgs(symbol);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.BindCallerScope, function (vm) {
        return vm.bindCallerScope();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.BindDynamicScope, function (vm, _ref8) {
        var _names = _ref8.op1;

        var names = vm.constants.getArray(_names);
        vm.bindDynamicScope(names);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.Enter, function (vm, _ref9) {
        var slice = _ref9.op1;
        return vm.enter(slice);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.Exit, function (vm) {
        return vm.exit();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.Evaluate, function (vm, _ref10) {
        var _block = _ref10.op1;

        var block = vm.constants.getBlock(_block);
        var args = vm.frame.getArgs();
        vm.invokeBlock(block, args);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.Jump, function (vm, _ref11) {
        var target = _ref11.op1;
        return vm.goto(target);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.JumpIf, function (vm, _ref12) {
        var target = _ref12.op1;

        var reference = vm.frame.getCondition();
        if (_glimmerReference.isConst(reference)) {
            if (reference.value()) {
                vm.goto(target);
            }
        } else {
            var cache = new _glimmerReference.ReferenceCache(reference);
            if (cache.peek()) {
                vm.goto(target);
            }
            vm.updateWith(new Assert(cache));
        }
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.JumpUnless, function (vm, _ref13) {
        var target = _ref13.op1;

        var reference = vm.frame.getCondition();
        if (_glimmerReference.isConst(reference)) {
            if (!reference.value()) {
                vm.goto(target);
            }
        } else {
            var cache = new _glimmerReference.ReferenceCache(reference);
            if (!cache.peek()) {
                vm.goto(target);
            }
            vm.updateWith(new Assert(cache));
        }
    });
    var ConstTest = function (ref, _env) {
        return new _glimmerReference.ConstReference(!!ref.value());
    };
    exports.ConstTest = ConstTest;
    var SimpleTest = function (ref, _env) {
        return ref;
    };
    exports.SimpleTest = SimpleTest;
    var EnvironmentTest = function (ref, env) {
        return env.toConditionalReference(ref);
    };
    exports.EnvironmentTest = EnvironmentTest;
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.Test, function (vm, _ref14) {
        var _func = _ref14.op1;

        var operand = vm.frame.getOperand();
        var func = vm.constants.getFunction(_func);
        vm.frame.setCondition(func(operand, vm.env));
    });

    var Assert = (function (_UpdatingOpcode) {
        _inherits(Assert, _UpdatingOpcode);

        function Assert(cache) {
            _classCallCheck(this, Assert);

            _UpdatingOpcode.call(this);
            this.type = "assert";
            this.tag = cache.tag;
            this.cache = cache;
        }

        Assert.prototype.evaluate = function evaluate(vm) {
            var cache = this.cache;

            if (_glimmerReference.isModified(cache.revalidate())) {
                vm.throw();
            }
        };

        Assert.prototype.toJSON = function toJSON() {
            var type = this.type;
            var _guid = this._guid;
            var cache = this.cache;

            var expected = undefined;
            try {
                expected = JSON.stringify(cache.peek());
            } catch (e) {
                expected = String(cache.peek());
            }
            return {
                guid: _guid,
                type: type,
                args: [],
                details: { expected: expected }
            };
        };

        return Assert;
    })(_glimmerRuntimeLibOpcodes.UpdatingOpcode);

    exports.Assert = Assert;

    var JumpIfNotModifiedOpcode = (function (_UpdatingOpcode2) {
        _inherits(JumpIfNotModifiedOpcode, _UpdatingOpcode2);

        function JumpIfNotModifiedOpcode(tag, target) {
            _classCallCheck(this, JumpIfNotModifiedOpcode);

            _UpdatingOpcode2.call(this);
            this.target = target;
            this.type = "jump-if-not-modified";
            this.tag = tag;
            this.lastRevision = tag.value();
        }

        JumpIfNotModifiedOpcode.prototype.evaluate = function evaluate(vm) {
            var tag = this.tag;
            var target = this.target;
            var lastRevision = this.lastRevision;

            if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {
                vm.goto(target);
            }
        };

        JumpIfNotModifiedOpcode.prototype.didModify = function didModify() {
            this.lastRevision = this.tag.value();
        };

        JumpIfNotModifiedOpcode.prototype.toJSON = function toJSON() {
            return {
                guid: this._guid,
                type: this.type,
                args: [JSON.stringify(this.target.inspect())]
            };
        };

        return JumpIfNotModifiedOpcode;
    })(_glimmerRuntimeLibOpcodes.UpdatingOpcode);

    exports.JumpIfNotModifiedOpcode = JumpIfNotModifiedOpcode;

    var DidModifyOpcode = (function (_UpdatingOpcode3) {
        _inherits(DidModifyOpcode, _UpdatingOpcode3);

        function DidModifyOpcode(target) {
            _classCallCheck(this, DidModifyOpcode);

            _UpdatingOpcode3.call(this);
            this.target = target;
            this.type = "did-modify";
            this.tag = _glimmerReference.CONSTANT_TAG;
        }

        DidModifyOpcode.prototype.evaluate = function evaluate() {
            this.target.didModify();
        };

        return DidModifyOpcode;
    })(_glimmerRuntimeLibOpcodes.UpdatingOpcode);

    exports.DidModifyOpcode = DidModifyOpcode;

    var LabelOpcode = (function () {
        function LabelOpcode(label) {
            _classCallCheck(this, LabelOpcode);

            this.tag = _glimmerReference.CONSTANT_TAG;
            this.type = "label";
            this.label = null;
            this.prev = null;
            this.next = null;
            _glimmerUtil.initializeGuid(this);
            if (label) this.label = label;
        }

        LabelOpcode.prototype.evaluate = function evaluate() {};

        LabelOpcode.prototype.inspect = function inspect() {
            return this.label + ' [' + this._guid + ']';
        };

        LabelOpcode.prototype.toJSON = function toJSON() {
            return {
                guid: this._guid,
                type: this.type,
                args: [JSON.stringify(this.inspect())]
            };
        };

        return LabelOpcode;
    })();

    exports.LabelOpcode = LabelOpcode;
});
//# sourceMappingURL=data:application/json;base64,