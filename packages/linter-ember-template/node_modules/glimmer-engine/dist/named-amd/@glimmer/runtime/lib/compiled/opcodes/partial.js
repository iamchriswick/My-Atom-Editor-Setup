enifed('@glimmer/runtime/lib/compiled/opcodes/partial', ['exports', '@glimmer/reference', '@glimmer/runtime/lib/compiled/opcodes/vm', '@glimmer/runtime/lib/opcodes'], function (exports, _glimmerReference, _glimmerRuntimeLibCompiledOpcodesVm, _glimmerRuntimeLibOpcodes) {
    'use strict';

    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PutDynamicPartial, function (vm, _ref) {
        var _symbolTable = _ref.op1;

        var env = vm.env;
        var symbolTable = vm.constants.getOther(_symbolTable);
        function lookupPartial(name) {
            var normalized = String(name);
            if (!env.hasPartial(normalized, symbolTable)) {
                throw new Error('Could not find a partial named "' + normalized + '"');
            }
            return env.lookupPartial(normalized, symbolTable);
        }
        var reference = _glimmerReference.map(vm.frame.getOperand(), lookupPartial);
        var cache = _glimmerReference.isConst(reference) ? undefined : new _glimmerReference.ReferenceCache(reference);
        var definition = cache ? cache.peek() : reference.value();
        vm.frame.setImmediate(definition);
        if (cache) {
            vm.updateWith(new _glimmerRuntimeLibCompiledOpcodesVm.Assert(cache));
        }
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PutPartial, function (vm, _ref2) {
        var _definition = _ref2.op1;

        var definition = vm.constants.getOther(_definition);
        vm.frame.setImmediate(definition);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.EvaluatePartial, function (vm, _ref3) {
        var _symbolTable = _ref3.op1;
        var _cache = _ref3.op2;

        var symbolTable = vm.constants.getOther(_symbolTable);
        var cache = vm.constants.getOther(_cache);

        var _vm$frame$getImmediate = vm.frame.getImmediate();

        var template = _vm$frame$getImmediate.template;

        var block = cache[template.id];
        if (!block) {
            block = template.asPartial(symbolTable);
        }
        vm.invokePartial(block);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvcGFydGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFRQSw4QkFGUyxjQUFjLENBRVIsR0FBRyxDQUFDLDBCQUZNLFVBQVUsQ0FFYixpQkFBaUIsRUFBRSxVQUFDLEVBQUUsRUFBRSxJQUFxQixFQUFBO1lBQWQsWUFBWSxHQUFuQixJQUFxQixDQUFuQixHQUFHOztBQUNqRCxZQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ2pCLFlBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFjLFlBQVksQ0FBQyxDQUFDO0FBRW5FLGlCQUFBLGFBQUEsQ0FBdUIsSUFBWSxFQUFBO0FBQ2pDLGdCQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFOUIsZ0JBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRTtBQUM1QyxzQkFBTSxJQUFJLEtBQUssc0NBQW9DLFVBQVUsT0FBSSxDQUFDO2FBQ25FO0FBRUQsbUJBQU8sR0FBRyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDbkQ7QUFFRCxZQUFJLFNBQVMsR0FBRyxrQkFyQmdCLEdBQUcsQ0FxQmYsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNsRSxZQUFJLEtBQUssR0FBRyxrQkF0QlcsT0FBTyxDQXNCVixTQUFTLENBQUMsR0FBRyxTQUFTLEdBQUcsc0JBdEJ0QyxjQUFjLENBc0IyQyxTQUFTLENBQUMsQ0FBQztBQUMzRSxZQUFJLFVBQVUsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUUxRCxVQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUVsQyxZQUFJLEtBQUssRUFBRTtBQUNULGNBQUUsQ0FBQyxVQUFVLENBQUMsd0NBM0JULE1BQU0sQ0EyQmMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNsQztLQUNGLENBQUMsQ0FBQztBQUVILDhCQTNCUyxjQUFjLENBMkJSLEdBQUcsQ0FBQywwQkEzQk0sVUFBVSxDQTJCYixVQUFVLEVBQUUsVUFBQyxFQUFFLEVBQUUsS0FBb0IsRUFBQTtZQUFiLFdBQVcsR0FBbEIsS0FBb0IsQ0FBbEIsR0FBRzs7QUFDMUMsWUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQTRCLFdBQVcsQ0FBQyxDQUFDO0FBQy9FLFVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ25DLENBQUMsQ0FBQztBQUVILDhCQWhDUyxjQUFjLENBZ0NSLEdBQUcsQ0FBQywwQkFoQ00sVUFBVSxDQWdDYixlQUFlLEVBQUUsVUFBQyxFQUFFLEVBQUUsS0FBa0MsRUFBQTtZQUEzQixZQUFZLEdBQW5CLEtBQWtDLENBQWhDLEdBQUc7WUFBcUIsTUFBTSxHQUFoQyxLQUFrQyxDQUFiLEdBQUc7O0FBQ2xFLFlBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFjLFlBQVksQ0FBQyxDQUFDO0FBQ25FLFlBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFxQixNQUFNLENBQUMsQ0FBQzs7cUNBRTNDLEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUE2Qjs7WUFBL0QsUUFBUSwwQkFBUixRQUFROztBQUVkLFlBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFL0IsWUFBSSxDQUFDLEtBQUssRUFBRTtBQUNWLGlCQUFLLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN6QztBQUVELFVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDekIsQ0FBQyxDQUFDIiwiZmlsZSI6InBhcnRpYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIERpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFJlZmVyZW5jZUNhY2hlLCBpc0NvbnN0LCBtYXAgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgQXNzZXJ0IH0gZnJvbSAnLi92bSc7XG5pbXBvcnQgeyBQYXJ0aWFsRGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL3BhcnRpYWwnO1xuaW1wb3J0IHsgU3ltYm9sVGFibGUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFBhcnRpYWxCbG9jayB9IGZyb20gJy4uLy4uL3NjYW5uZXInO1xuaW1wb3J0IHsgQVBQRU5EX09QQ09ERVMsIE9wY29kZU5hbWUgYXMgT3AgfSBmcm9tICcuLi8uLi9vcGNvZGVzJztcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLlB1dER5bmFtaWNQYXJ0aWFsLCAodm0sIHsgb3AxOiBfc3ltYm9sVGFibGUgfSkgPT4ge1xuICBsZXQgZW52ID0gdm0uZW52O1xuICBsZXQgc3ltYm9sVGFibGUgPSB2bS5jb25zdGFudHMuZ2V0T3RoZXI8U3ltYm9sVGFibGU+KF9zeW1ib2xUYWJsZSk7XG5cbiAgZnVuY3Rpb24gbG9va3VwUGFydGlhbChuYW1lOiBPcGFxdWUpIHtcbiAgICBsZXQgbm9ybWFsaXplZCA9IFN0cmluZyhuYW1lKTtcblxuICAgIGlmICghZW52Lmhhc1BhcnRpYWwobm9ybWFsaXplZCwgc3ltYm9sVGFibGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkIG5vdCBmaW5kIGEgcGFydGlhbCBuYW1lZCBcIiR7bm9ybWFsaXplZH1cImApO1xuICAgIH1cblxuICAgIHJldHVybiBlbnYubG9va3VwUGFydGlhbChub3JtYWxpemVkLCBzeW1ib2xUYWJsZSk7XG4gIH1cblxuICBsZXQgcmVmZXJlbmNlID0gbWFwKHZtLmZyYW1lLmdldE9wZXJhbmQ8T3BhcXVlPigpLCBsb29rdXBQYXJ0aWFsKTtcbiAgbGV0IGNhY2hlID0gaXNDb25zdChyZWZlcmVuY2UpID8gdW5kZWZpbmVkIDogbmV3IFJlZmVyZW5jZUNhY2hlKHJlZmVyZW5jZSk7XG4gIGxldCBkZWZpbml0aW9uID0gY2FjaGUgPyBjYWNoZS5wZWVrKCkgOiByZWZlcmVuY2UudmFsdWUoKTtcblxuICB2bS5mcmFtZS5zZXRJbW1lZGlhdGUoZGVmaW5pdGlvbik7XG5cbiAgaWYgKGNhY2hlKSB7XG4gICAgdm0udXBkYXRlV2l0aChuZXcgQXNzZXJ0KGNhY2hlKSk7XG4gIH1cbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuUHV0UGFydGlhbCwgKHZtLCB7IG9wMTogX2RlZmluaXRpb24gfSkgPT4ge1xuICBsZXQgZGVmaW5pdGlvbiA9IHZtLmNvbnN0YW50cy5nZXRPdGhlcjxQYXJ0aWFsRGVmaW5pdGlvbjxPcGFxdWU+PihfZGVmaW5pdGlvbik7XG4gIHZtLmZyYW1lLnNldEltbWVkaWF0ZShkZWZpbml0aW9uKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRXZhbHVhdGVQYXJ0aWFsLCAodm0sIHsgb3AxOiBfc3ltYm9sVGFibGUsIG9wMjogX2NhY2hlIH0pID0+IHtcbiAgbGV0IHN5bWJvbFRhYmxlID0gdm0uY29uc3RhbnRzLmdldE90aGVyPFN5bWJvbFRhYmxlPihfc3ltYm9sVGFibGUpO1xuICBsZXQgY2FjaGUgPSB2bS5jb25zdGFudHMuZ2V0T3RoZXI8RGljdDxQYXJ0aWFsQmxvY2s+PihfY2FjaGUpO1xuXG4gIGxldCB7IHRlbXBsYXRlIH0gPSB2bS5mcmFtZS5nZXRJbW1lZGlhdGU8UGFydGlhbERlZmluaXRpb248T3BhcXVlPj4oKTtcblxuICBsZXQgYmxvY2sgPSBjYWNoZVt0ZW1wbGF0ZS5pZF07XG5cbiAgaWYgKCFibG9jaykge1xuICAgIGJsb2NrID0gdGVtcGxhdGUuYXNQYXJ0aWFsKHN5bWJvbFRhYmxlKTtcbiAgfVxuXG4gIHZtLmludm9rZVBhcnRpYWwoYmxvY2spO1xufSk7XG4iXX0=