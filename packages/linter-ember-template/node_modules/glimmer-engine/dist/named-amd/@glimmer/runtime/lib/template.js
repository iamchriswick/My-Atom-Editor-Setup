enifed('@glimmer/runtime/lib/template', ['exports', '@glimmer/util', '@glimmer/runtime/lib/builder', '@glimmer/runtime/lib/vm', '@glimmer/runtime/lib/scanner'], function (exports, _glimmerUtil, _glimmerRuntimeLibBuilder, _glimmerRuntimeLibVm, _glimmerRuntimeLibScanner) {
    'use strict';

    exports.default = templateFactory;

    var clientId = 0;

    function templateFactory(_ref) {
        var templateId = _ref.id;
        var meta = _ref.meta;
        var block = _ref.block;

        var parsedBlock = undefined;
        var id = templateId || 'client-' + clientId++;
        var create = function (env, envMeta) {
            var newMeta = envMeta ? _glimmerUtil.assign({}, envMeta, meta) : meta;
            if (!parsedBlock) {
                parsedBlock = JSON.parse(block);
            }
            return template(parsedBlock, id, newMeta, env);
        };
        return { id: id, meta: meta, create: create };
    }

    function template(block, id, meta, env) {
        var scanner = new _glimmerRuntimeLibScanner.default(block, meta, env);
        var entryPoint = undefined;
        var asEntryPoint = function () {
            if (!entryPoint) entryPoint = scanner.scanEntryPoint();
            return entryPoint;
        };
        var layout = undefined;
        var asLayout = function () {
            if (!layout) layout = scanner.scanLayout();
            return layout;
        };
        var asPartial = function (symbols) {
            return scanner.scanPartial(symbols);
        };
        var render = function (self, appendTo, dynamicScope) {
            var elementStack = _glimmerRuntimeLibBuilder.ElementStack.forInitialRender(env, appendTo, null);
            var compiled = asEntryPoint().compile(env);
            var vm = _glimmerRuntimeLibVm.VM.initial(env, self, dynamicScope, elementStack, compiled.symbols);
            return vm.execute(compiled.slice);
        };
        return { id: id, meta: meta, _block: block, asEntryPoint: asEntryPoint, asLayout: asLayout, asPartial: asPartial, render: render };
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3RlbXBsYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztzQkFxRmMsZUFBQTs7QUFUZCxRQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7O0FBU0gsYUFBQSxlQUFBLENBQTBCLElBQXFFLEVBQUE7WUFBL0QsVUFBVSxHQUFoQixJQUFxRSxDQUFuRSxFQUFFO1lBQWMsSUFBSSxHQUF0QixJQUFxRSxDQUFuRCxJQUFJO1lBQUUsS0FBSyxHQUE3QixJQUFxRSxDQUE3QyxLQUFLOztBQUNuRSxZQUFJLFdBQW9DLFlBQUEsQ0FBQztBQUN6QyxZQUFJLEVBQUUsR0FBRyxVQUFVLGdCQUFjLFFBQVEsRUFBRSxBQUFFLENBQUM7QUFDOUMsWUFBSSxNQUFNLEdBQUcsVUFBQyxHQUFnQixFQUFFLE9BQVksRUFBQTtBQUMxQyxnQkFBSSxPQUFPLEdBQUcsT0FBTyxHQUFHLGFBcEZuQixNQUFNLENBb0ZvQixFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQztBQUN6RCxnQkFBSSxDQUFDLFdBQVcsRUFBRTtBQUNoQiwyQkFBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakM7QUFDRCxtQkFBTyxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDaEQsQ0FBQztBQUNGLGVBQU8sRUFBRSxFQUFFLEVBQUYsRUFBRSxFQUFFLElBQUksRUFBSixJQUFJLEVBQUUsTUFBTSxFQUFOLE1BQU0sRUFBRSxDQUFDO0tBQzdCOztBQUVELGFBQUEsUUFBQSxDQUFxQixLQUE4QixFQUFFLEVBQVUsRUFBRSxJQUFPLEVBQUUsR0FBZ0IsRUFBQTtBQUN4RixZQUFJLE9BQU8sR0FBRyxzQ0FBWSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzVDLFlBQUksVUFBc0IsWUFBQSxDQUFDO0FBQzNCLFlBQUksWUFBWSxHQUFHLFlBQUE7QUFDakIsZ0JBQUksQ0FBQyxVQUFVLEVBQUUsVUFBVSxHQUFHLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztBQUN2RCxtQkFBTyxVQUFVLENBQUM7U0FDbkIsQ0FBQztBQUNGLFlBQUksTUFBYyxZQUFBLENBQUM7QUFDbkIsWUFBSSxRQUFRLEdBQUcsWUFBQTtBQUNiLGdCQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDM0MsbUJBQU8sTUFBTSxDQUFDO1NBQ2YsQ0FBQztBQUNGLFlBQUksU0FBUyxHQUFHLFVBQUMsT0FBb0I7bUJBQUssT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7U0FBQSxDQUFDO0FBQ3ZFLFlBQUksTUFBTSxHQUFHLFVBQUMsSUFBd0IsRUFBRSxRQUF3QixFQUFFLFlBQTBCLEVBQUE7QUFDMUYsZ0JBQUksWUFBWSxHQUFHLDBCQXhHZCxZQUFZLENBd0dlLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdEUsZ0JBQUksUUFBUSxHQUFHLFlBQVksRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQyxnQkFBSSxFQUFFLEdBQUcscUJBekdKLEVBQUUsQ0F5R0ssT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0UsbUJBQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkMsQ0FBQztBQUNGLGVBQU8sRUFBRSxFQUFFLEVBQUYsRUFBRSxFQUFFLElBQUksRUFBSixJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQVosWUFBWSxFQUFFLFFBQVEsRUFBUixRQUFRLEVBQUUsU0FBUyxFQUFULFNBQVMsRUFBRSxNQUFNLEVBQU4sTUFBTSxFQUFFLENBQUM7S0FDL0UiLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrLFxuICBTZXJpYWxpemVkVGVtcGxhdGVCbG9ja1xufSBmcm9tICdAZ2xpbW1lci93aXJlLWZvcm1hdCc7XG5pbXBvcnQgeyBQYXRoUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IGFzc2lnbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgU3ltYm9sVGFibGUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEVudmlyb25tZW50LCBEeW5hbWljU2NvcGUgfSBmcm9tICcuL2Vudmlyb25tZW50JztcbmltcG9ydCB7IEVsZW1lbnRTdGFjayB9IGZyb20gJy4vYnVpbGRlcic7XG5pbXBvcnQgeyBWTSB9IGZyb20gJy4vdm0nO1xuaW1wb3J0IFJlbmRlclJlc3VsdCBmcm9tICcuL3ZtL3JlbmRlci1yZXN1bHQnO1xuaW1wb3J0IFNjYW5uZXIsIHtcbiAgRW50cnlQb2ludCxcbiAgUGFydGlhbEJsb2NrLFxuICBMYXlvdXRcbn0gZnJvbSAnLi9zY2FubmVyJztcbmltcG9ydCAqIGFzIFNpbXBsZSBmcm9tICcuL2RvbS9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBFbnZpcm9ubWVudCBzcGVjaWZpYyB0ZW1wbGF0ZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZTxUPiB7XG4gIC8qKlxuICAgKiBUZW1wbGF0ZSBpZGVudGlmaWVyLCBpZiBwcmVjb21waWxlZCB3aWxsIGJlIHRoZSBpZCBvZiB0aGVcbiAgICogcHJlY29tcGlsZWQgdGVtcGxhdGUuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUZW1wbGF0ZSBtZXRhIChib3RoIGNvbXBpbGUgdGltZSBhbmQgZW52aXJvbm1lbnQgc3BlY2lmaWMpLlxuICAgKi9cbiAgbWV0YTogVDtcblxuICAvKipcbiAgICogSGVscGVyIHRvIHJlbmRlciB0ZW1wbGF0ZSBhcyByb290IGVudHJ5IHBvaW50LlxuICAgKi9cbiAgcmVuZGVyKHNlbGY6IFBhdGhSZWZlcmVuY2U8YW55PiwgYXBwZW5kVG86IFNpbXBsZS5FbGVtZW50LCBkeW5hbWljU2NvcGU6IER5bmFtaWNTY29wZSk6IFJlbmRlclJlc3VsdDtcblxuICAvLyBpbnRlcm5hbCBjYXN0cywgdGhlc2UgYXJlIGxhemlseSBjcmVhdGVkIGFuZCBjYWNoZWRcbiAgYXNFbnRyeVBvaW50KCk6IEVudHJ5UG9pbnQ7XG4gIGFzTGF5b3V0KCk6IExheW91dDtcbiAgYXNQYXJ0aWFsKHN5bWJvbHM6IFN5bWJvbFRhYmxlKTogUGFydGlhbEJsb2NrO1xuXG4gIC8vIGV4cG9zZWQgZm9yIHZpc3VhbGl6ZXJcbiAgX2Jsb2NrOiBTZXJpYWxpemVkVGVtcGxhdGVCbG9jaztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZUZhY3Rvcnk8VCwgVT4ge1xuICAvKipcbiAgICogVGVtcGxhdGUgaWRlbnRpZmllciwgaWYgcHJlY29tcGlsZWQgd2lsbCBiZSB0aGUgaWQgb2YgdGhlXG4gICAqIHByZWNvbXBpbGVkIHRlbXBsYXRlLlxuICAgKi9cbiAgaWQ6IHN0cmluZztcblxuICAvKipcbiAgICogQ29tcGlsZSB0aW1lIG1ldGEuXG4gICAqL1xuICBtZXRhOiBUO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNyZWF0ZSBhbiBlbnZpcm9ubWVudCBzcGVjaWZpYyBzaW5nbGV0b24gaW5zdGFuY2VcbiAgICogb2YgdGhlIHRlbXBsYXRlLlxuICAgKlxuICAgKiBAcGFyYW0ge0Vudmlyb25tZW50fSBlbnYgZ2xpbW1lciBFbnZpcm9ubWVudFxuICAgKi9cbiAgY3JlYXRlKGVudjogRW52aXJvbm1lbnQpOiBUZW1wbGF0ZTxUPjtcbiAgLyoqXG4gICAqIFVzZWQgdG8gY3JlYXRlIGFuIGVudmlyb25tZW50IHNwZWNpZmljIHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgKiBvZiB0aGUgdGVtcGxhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RW52aXJvbm1lbnR9IGVudiBnbGltbWVyIEVudmlyb25tZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhIGVudmlyb25tZW50IHNwZWNpZmljIGluamVjdGlvbnMgaW50byBtZXRhXG4gICAqL1xuICBjcmVhdGUoZW52OiBFbnZpcm9ubWVudCwgbWV0YTogVSk6IFRlbXBsYXRlPFQgJiBVPjtcbn1cblxubGV0IGNsaWVudElkID0gMDtcblxuLyoqXG4gKiBXcmFwcyBhIHRlbXBsYXRlIGpzIGluIGEgdGVtcGxhdGUgbW9kdWxlIHRvIGNoYW5nZSBpdCBpbnRvIGEgZmFjdG9yeVxuICogdGhhdCBoYW5kbGVzIGxhenkgcGFyc2luZyB0aGUgdGVtcGxhdGUgYW5kIHRvIGNyZWF0ZSBwZXIgZW52IHNpbmdsZXRvbnNcbiAqIG9mIHRoZSB0ZW1wbGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcGxhdGVGYWN0b3J5PFQ+KHNlcmlhbGl6ZWRUZW1wbGF0ZTogU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jazxUPik6IFRlbXBsYXRlRmFjdG9yeTxULCBUPjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeTxULCBVPihzZXJpYWxpemVkVGVtcGxhdGU6IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8VD4pOiBUZW1wbGF0ZUZhY3Rvcnk8VCwgVT47XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZW1wbGF0ZUZhY3RvcnkoeyBpZDogdGVtcGxhdGVJZCwgbWV0YSwgYmxvY2sgfTogU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jazxhbnk+KTogVGVtcGxhdGVGYWN0b3J5PHt9LCB7fT4ge1xuICBsZXQgcGFyc2VkQmxvY2s6IFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrO1xuICBsZXQgaWQgPSB0ZW1wbGF0ZUlkIHx8IGBjbGllbnQtJHtjbGllbnRJZCsrfWA7XG4gIGxldCBjcmVhdGUgPSAoZW52OiBFbnZpcm9ubWVudCwgZW52TWV0YT86IHt9KSA9PiB7XG4gICAgbGV0IG5ld01ldGEgPSBlbnZNZXRhID8gYXNzaWduKHt9LCBlbnZNZXRhLCBtZXRhKSA6IG1ldGE7XG4gICAgaWYgKCFwYXJzZWRCbG9jaykge1xuICAgICAgcGFyc2VkQmxvY2sgPSBKU09OLnBhcnNlKGJsb2NrKTtcbiAgICB9XG4gICAgcmV0dXJuIHRlbXBsYXRlKHBhcnNlZEJsb2NrLCBpZCwgbmV3TWV0YSwgZW52KTtcbiAgfTtcbiAgcmV0dXJuIHsgaWQsIG1ldGEsIGNyZWF0ZSB9O1xufVxuXG5mdW5jdGlvbiB0ZW1wbGF0ZTxUPihibG9jazogU2VyaWFsaXplZFRlbXBsYXRlQmxvY2ssIGlkOiBzdHJpbmcsIG1ldGE6IFQsIGVudjogRW52aXJvbm1lbnQpOiBUZW1wbGF0ZTxUPiB7XG4gIGxldCBzY2FubmVyID0gbmV3IFNjYW5uZXIoYmxvY2ssIG1ldGEsIGVudik7XG4gIGxldCBlbnRyeVBvaW50OiBFbnRyeVBvaW50O1xuICBsZXQgYXNFbnRyeVBvaW50ID0gKCkgPT4ge1xuICAgIGlmICghZW50cnlQb2ludCkgZW50cnlQb2ludCA9IHNjYW5uZXIuc2NhbkVudHJ5UG9pbnQoKTtcbiAgICByZXR1cm4gZW50cnlQb2ludDtcbiAgfTtcbiAgbGV0IGxheW91dDogTGF5b3V0O1xuICBsZXQgYXNMYXlvdXQgPSAoKSA9PiB7XG4gICAgaWYgKCFsYXlvdXQpIGxheW91dCA9IHNjYW5uZXIuc2NhbkxheW91dCgpO1xuICAgIHJldHVybiBsYXlvdXQ7XG4gIH07XG4gIGxldCBhc1BhcnRpYWwgPSAoc3ltYm9sczogU3ltYm9sVGFibGUpID0+IHNjYW5uZXIuc2NhblBhcnRpYWwoc3ltYm9scyk7XG4gIGxldCByZW5kZXIgPSAoc2VsZjogUGF0aFJlZmVyZW5jZTxhbnk+LCBhcHBlbmRUbzogU2ltcGxlLkVsZW1lbnQsIGR5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlKSA9PiB7XG4gICAgbGV0IGVsZW1lbnRTdGFjayA9IEVsZW1lbnRTdGFjay5mb3JJbml0aWFsUmVuZGVyKGVudiwgYXBwZW5kVG8sIG51bGwpO1xuICAgIGxldCBjb21waWxlZCA9IGFzRW50cnlQb2ludCgpLmNvbXBpbGUoZW52KTtcbiAgICBsZXQgdm0gPSBWTS5pbml0aWFsKGVudiwgc2VsZiwgZHluYW1pY1Njb3BlLCBlbGVtZW50U3RhY2ssIGNvbXBpbGVkLnN5bWJvbHMpO1xuICAgIHJldHVybiB2bS5leGVjdXRlKGNvbXBpbGVkLnNsaWNlKTtcbiAgfTtcbiAgcmV0dXJuIHsgaWQsIG1ldGEsIF9ibG9jazogYmxvY2ssIGFzRW50cnlQb2ludCwgYXNMYXlvdXQsIGFzUGFydGlhbCwgcmVuZGVyIH07XG59XG4iXX0=