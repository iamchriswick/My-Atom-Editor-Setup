enifed("@glimmer/runtime/lib/bounds", ["exports"], function (exports) {
    "use strict";

    exports.bounds = bounds;
    exports.single = single;
    exports.move = move;
    exports.clear = clear;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var Cursor = function Cursor(element, nextSibling) {
        _classCallCheck(this, Cursor);

        this.element = element;
        this.nextSibling = nextSibling;
    };

    exports.Cursor = Cursor;

    var RealDOMBounds = (function () {
        function RealDOMBounds(bounds) {
            _classCallCheck(this, RealDOMBounds);

            this.bounds = bounds;
        }

        RealDOMBounds.prototype.parentElement = function parentElement() {
            return this.bounds.parentElement();
        };

        RealDOMBounds.prototype.firstNode = function firstNode() {
            return this.bounds.firstNode();
        };

        RealDOMBounds.prototype.lastNode = function lastNode() {
            return this.bounds.lastNode();
        };

        return RealDOMBounds;
    })();

    exports.RealDOMBounds = RealDOMBounds;

    var ConcreteBounds = (function () {
        function ConcreteBounds(parentNode, first, last) {
            _classCallCheck(this, ConcreteBounds);

            this.parentNode = parentNode;
            this.first = first;
            this.last = last;
        }

        ConcreteBounds.prototype.parentElement = function parentElement() {
            return this.parentNode;
        };

        ConcreteBounds.prototype.firstNode = function firstNode() {
            return this.first;
        };

        ConcreteBounds.prototype.lastNode = function lastNode() {
            return this.last;
        };

        return ConcreteBounds;
    })();

    exports.ConcreteBounds = ConcreteBounds;

    var SingleNodeBounds = (function () {
        function SingleNodeBounds(parentNode, node) {
            _classCallCheck(this, SingleNodeBounds);

            this.parentNode = parentNode;
            this.node = node;
        }

        SingleNodeBounds.prototype.parentElement = function parentElement() {
            return this.parentNode;
        };

        SingleNodeBounds.prototype.firstNode = function firstNode() {
            return this.node;
        };

        SingleNodeBounds.prototype.lastNode = function lastNode() {
            return this.node;
        };

        return SingleNodeBounds;
    })();

    exports.SingleNodeBounds = SingleNodeBounds;

    function bounds(parent, first, last) {
        return new ConcreteBounds(parent, first, last);
    }

    function single(parent, node) {
        return new SingleNodeBounds(parent, node);
    }

    function move(bounds, reference) {
        var parent = bounds.parentElement();
        var first = bounds.firstNode();
        var last = bounds.lastNode();
        var node = first;
        while (node) {
            var next = node.nextSibling;
            parent.insertBefore(node, reference);
            if (node === last) return next;
            node = next;
        }
        return null;
    }

    function clear(bounds) {
        var parent = bounds.parentElement();
        var first = bounds.firstNode();
        var last = bounds.lastNode();
        var node = first;
        while (node) {
            var next = node.nextSibling;
            parent.removeChild(node);
            if (node === last) return next;
            node = next;
        }
        return null;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2JvdW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O1FBVU0sTUFBQSxHQUNKLFNBREksTUFBQSxDQUNlLE9BQXVCLEVBQVMsV0FBZ0MsRUFBQTs4QkFEL0UsTUFBQTs7QUFDZSxZQUFBLENBQUEsT0FBTyxHQUFQLE9BQU8sQ0FBZ0I7QUFBUyxZQUFBLENBQUEsV0FBVyxHQUFYLFdBQVcsQ0FBcUI7S0FBSTs7OztRQU9uRixhQUFBO0FBQ0osaUJBREksYUFBQSxDQUNnQixNQUFjLEVBQUE7a0NBRDlCLGFBQUE7O0FBQ2dCLGdCQUFBLENBQUEsTUFBTSxHQUFOLE1BQU0sQ0FBUTtTQUFJOztBQURsQyxxQkFBQSxXQUdKLGFBQWEsR0FBQSx5QkFBQTtBQUFLLG1CQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFhLENBQUM7U0FBRTs7QUFIOUQscUJBQUEsV0FJSixTQUFTLEdBQUEscUJBQUE7QUFBSyxtQkFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBVSxDQUFDO1NBQUU7O0FBSm5ELHFCQUFBLFdBS0osUUFBUSxHQUFBLG9CQUFBO0FBQUssbUJBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQVUsQ0FBQztTQUFFOztlQUxqRCxhQUFBOzs7OztRQVFBLGNBQUE7QUFDSixpQkFESSxjQUFBLENBQ2UsVUFBMEIsRUFBVSxLQUEwQixFQUFVLElBQXlCLEVBQUE7a0NBRGhILGNBQUE7O0FBQ2UsZ0JBQUEsQ0FBQSxVQUFVLEdBQVYsVUFBVSxDQUFnQjtBQUFVLGdCQUFBLENBQUEsS0FBSyxHQUFMLEtBQUssQ0FBcUI7QUFBVSxnQkFBQSxDQUFBLElBQUksR0FBSixJQUFJLENBQXFCO1NBQUk7O0FBRHBILHNCQUFBLFdBR0osYUFBYSxHQUFBLHlCQUFBO0FBQUssbUJBQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUFFOztBQUh2QyxzQkFBQSxXQUlKLFNBQVMsR0FBQSxxQkFBQTtBQUFLLG1CQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FBRTs7QUFKOUIsc0JBQUEsV0FLSixRQUFRLEdBQUEsb0JBQUE7QUFBSyxtQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQUU7O2VBTDVCLGNBQUE7Ozs7O1FBUUEsZ0JBQUE7QUFJSixpQkFKSSxnQkFBQSxDQUlRLFVBQTBCLEVBQUUsSUFBaUIsRUFBQTtrQ0FKckQsZ0JBQUE7O0FBS0YsZ0JBQUksQ0FBQyxVQUFVLEdBQUcsVUFBcUIsQ0FBQztBQUN4QyxnQkFBSSxDQUFDLElBQUksR0FBRyxJQUFZLENBQUM7U0FDMUI7O0FBUEcsd0JBQUEsV0FTSixhQUFhLEdBQUEseUJBQUE7QUFBSyxtQkFBTyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQUU7O0FBVHZDLHdCQUFBLFdBVUosU0FBUyxHQUFBLHFCQUFBO0FBQUssbUJBQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUFFOztBQVY3Qix3QkFBQSxXQVdKLFFBQVEsR0FBQSxvQkFBQTtBQUFLLG1CQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7U0FBRTs7ZUFYNUIsZ0JBQUE7Ozs7O0FBY0EsYUFBQSxNQUFBLENBQWlCLE1BQXNCLEVBQUUsS0FBa0IsRUFBRSxJQUFpQixFQUFBO0FBQ2xGLGVBQU8sSUFBSSxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUNoRDs7QUFFSyxhQUFBLE1BQUEsQ0FBaUIsTUFBc0IsRUFBRSxJQUFpQixFQUFBO0FBQzlELGVBQU8sSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDM0M7O0FBRUssYUFBQSxJQUFBLENBQWUsTUFBYyxFQUFFLFNBQThCLEVBQUE7QUFDakUsWUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3BDLFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMvQixZQUFJLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFN0IsWUFBSSxJQUFJLEdBQXdCLEtBQUssQ0FBQztBQUV0QyxlQUFPLElBQUksRUFBRTtBQUNYLGdCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLGtCQUFNLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUNyQyxnQkFBSSxJQUFJLEtBQUssSUFBSSxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBQy9CLGdCQUFJLEdBQUcsSUFBSSxDQUFDO1NBQ2I7QUFFRCxlQUFPLElBQUksQ0FBQztLQUNiOztBQUVLLGFBQUEsS0FBQSxDQUFnQixNQUFjLEVBQUE7QUFDbEMsWUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3BDLFlBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMvQixZQUFJLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFFN0IsWUFBSSxJQUFJLEdBQXdCLEtBQUssQ0FBQztBQUV0QyxlQUFPLElBQUksRUFBRTtBQUNYLGdCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO0FBQzVCLGtCQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pCLGdCQUFJLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxJQUFJLENBQUM7QUFDL0IsZ0JBQUksR0FBRyxJQUFJLENBQUM7U0FDYjtBQUVELGVBQU8sSUFBSSxDQUFDO0tBQ2IiLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgU2ltcGxlIGZyb20gJy4vZG9tL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgT3B0aW9uLCBEZXN0cm95YWJsZSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kcyB7XG4gIC8vIGEgbWV0aG9kIHRvIGZ1dHVyZS1wcm9vZiBmb3Igd29ybWhvbGluZzsgbWF5IG5vdCBiZSBuZWVkZWQgdWx0aW1hdGVseVxuICBwYXJlbnRFbGVtZW50KCk6IFNpbXBsZS5FbGVtZW50O1xuICBmaXJzdE5vZGUoKTogT3B0aW9uPFNpbXBsZS5Ob2RlPjtcbiAgbGFzdE5vZGUoKTogT3B0aW9uPFNpbXBsZS5Ob2RlPjtcbn1cblxuZXhwb3J0IGNsYXNzIEN1cnNvciB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50OiBTaW1wbGUuRWxlbWVudCwgcHVibGljIG5leHRTaWJsaW5nOiBPcHRpb248U2ltcGxlLk5vZGU+KSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb3VuZHM7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzdHJveWFibGVCb3VuZHMgZXh0ZW5kcyBCb3VuZHMsIERlc3Ryb3lhYmxlIHt9XG5cbmV4cG9ydCBjbGFzcyBSZWFsRE9NQm91bmRzIGltcGxlbWVudHMgQm91bmRzIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBib3VuZHM6IEJvdW5kcykge31cblxuICBwYXJlbnRFbGVtZW50KCkgeyByZXR1cm4gdGhpcy5ib3VuZHMucGFyZW50RWxlbWVudCgpIGFzIEVsZW1lbnQ7IH1cbiAgZmlyc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5ib3VuZHMuZmlyc3ROb2RlKCkgYXMgTm9kZTsgfVxuICBsYXN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMuYm91bmRzLmxhc3ROb2RlKCkgYXMgTm9kZTsgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uY3JldGVCb3VuZHMgaW1wbGVtZW50cyBCb3VuZHMge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGFyZW50Tm9kZTogU2ltcGxlLkVsZW1lbnQsIHByaXZhdGUgZmlyc3Q6IE9wdGlvbjxTaW1wbGUuTm9kZT4sIHByaXZhdGUgbGFzdDogT3B0aW9uPFNpbXBsZS5Ob2RlPikge31cblxuICBwYXJlbnRFbGVtZW50KCkgeyByZXR1cm4gdGhpcy5wYXJlbnROb2RlOyB9XG4gIGZpcnN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMuZmlyc3Q7IH1cbiAgbGFzdE5vZGUoKSB7IHJldHVybiB0aGlzLmxhc3Q7IH1cbn1cblxuZXhwb3J0IGNsYXNzIFNpbmdsZU5vZGVCb3VuZHMgaW1wbGVtZW50cyBCb3VuZHMge1xuICBwcml2YXRlIHBhcmVudE5vZGU6IEVsZW1lbnQ7XG4gIHByaXZhdGUgbm9kZTogTm9kZTtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnROb2RlOiBTaW1wbGUuRWxlbWVudCwgbm9kZTogU2ltcGxlLk5vZGUpIHtcbiAgICB0aGlzLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlIGFzIEVsZW1lbnQ7XG4gICAgdGhpcy5ub2RlID0gbm9kZSBhcyBOb2RlO1xuICB9XG5cbiAgcGFyZW50RWxlbWVudCgpIHsgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTsgfVxuICBmaXJzdE5vZGUoKSB7IHJldHVybiB0aGlzLm5vZGU7IH1cbiAgbGFzdE5vZGUoKSB7IHJldHVybiB0aGlzLm5vZGU7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5kcyhwYXJlbnQ6IFNpbXBsZS5FbGVtZW50LCBmaXJzdDogU2ltcGxlLk5vZGUsIGxhc3Q6IFNpbXBsZS5Ob2RlKTogQm91bmRzIHtcbiAgcmV0dXJuIG5ldyBDb25jcmV0ZUJvdW5kcyhwYXJlbnQsIGZpcnN0LCBsYXN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpbmdsZShwYXJlbnQ6IFNpbXBsZS5FbGVtZW50LCBub2RlOiBTaW1wbGUuTm9kZSk6IEJvdW5kcyB7XG4gIHJldHVybiBuZXcgU2luZ2xlTm9kZUJvdW5kcyhwYXJlbnQsIG5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZShib3VuZHM6IEJvdW5kcywgcmVmZXJlbmNlOiBPcHRpb248U2ltcGxlLk5vZGU+KSB7XG4gIGxldCBwYXJlbnQgPSBib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICBsZXQgZmlyc3QgPSBib3VuZHMuZmlyc3ROb2RlKCk7XG4gIGxldCBsYXN0ID0gYm91bmRzLmxhc3ROb2RlKCk7XG5cbiAgbGV0IG5vZGU6IE9wdGlvbjxTaW1wbGUuTm9kZT4gPSBmaXJzdDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZmVyZW5jZSk7XG4gICAgaWYgKG5vZGUgPT09IGxhc3QpIHJldHVybiBuZXh0O1xuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcihib3VuZHM6IEJvdW5kcyk6IE9wdGlvbjxTaW1wbGUuTm9kZT4ge1xuICBsZXQgcGFyZW50ID0gYm91bmRzLnBhcmVudEVsZW1lbnQoKTtcbiAgbGV0IGZpcnN0ID0gYm91bmRzLmZpcnN0Tm9kZSgpO1xuICBsZXQgbGFzdCA9IGJvdW5kcy5sYXN0Tm9kZSgpO1xuXG4gIGxldCBub2RlOiBPcHRpb248U2ltcGxlLk5vZGU+ID0gZmlyc3Q7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBsZXQgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIGlmIChub2RlID09PSBsYXN0KSByZXR1cm4gbmV4dDtcbiAgICBub2RlID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIl19