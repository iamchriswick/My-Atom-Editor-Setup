enifed('@glimmer/runtime/lib/component/interfaces', ['exports'], function (exports) {
    'use strict';

    exports.isComponentDefinition = isComponentDefinition;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var COMPONENT_DEFINITION_BRAND = 'COMPONENT DEFINITION [id=e59c754e-61eb-4392-8c4a-2c0ac72bfcd4]';

    function isComponentDefinition(obj) {
        return typeof obj === 'object' && obj && obj[COMPONENT_DEFINITION_BRAND];
    }

    var ComponentDefinition = function ComponentDefinition(name, manager, ComponentClass) {
        _classCallCheck(this, ComponentDefinition);

        this[COMPONENT_DEFINITION_BRAND] = true;
        this.name = name;
        this.manager = manager;
        this.ComponentClass = ComponentClass;
    };

    exports.ComponentDefinition = ComponentDefinition;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBvbmVudC9pbnRlcmZhY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFzR0EsUUFBTSwwQkFBMEIsR0FBRyxnRUFBZ0UsQ0FBQzs7QUFFOUYsYUFBQSxxQkFBQSxDQUFnQyxHQUFRLEVBQUE7QUFDNUMsZUFBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0tBQzFFOztRQUVLLG1CQUFBLEdBS0osU0FMSSxtQkFBQSxDQUtRLElBQVksRUFBRSxPQUE0QixFQUFFLGNBQThCLEVBQUE7OEJBTGxGLG1CQUFBOztBQU1GLFlBQUksQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLElBQUksQ0FBQztBQUN4QyxZQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztBQUNqQixZQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztBQUN2QixZQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztLQUN0QyIsImZpbGUiOiJpbnRlcmZhY2VzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZhbHVhdGVkQXJncyB9IGZyb20gJy4uL2NvbXBpbGVkL2V4cHJlc3Npb25zL2FyZ3MnO1xuaW1wb3J0IHsgRnVuY3Rpb25FeHByZXNzaW9uIH0gZnJvbSAnLi4vY29tcGlsZWQvZXhwcmVzc2lvbnMvZnVuY3Rpb24nO1xuaW1wb3J0IHsgQ29tcGlsZWRQcm9ncmFtIH0gZnJvbSAnLi4vY29tcGlsZWQvYmxvY2tzJztcbmltcG9ydCB7IExheW91dCB9IGZyb20gJy4uL3NjYW5uZXInO1xuXG5pbXBvcnQgRW52aXJvbm1lbnQsIHsgRHluYW1pY1Njb3BlIH0gZnJvbSAnLi4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgRWxlbWVudE9wZXJhdGlvbnMgfSBmcm9tICcuLi9idWlsZGVyJztcbmltcG9ydCBCb3VuZHMgZnJvbSAnLi4vYm91bmRzJztcbmltcG9ydCAqIGFzIFNpbXBsZSBmcm9tICcuLi9kb20vaW50ZXJmYWNlcyc7XG5cbmltcG9ydCB7IERlc3Ryb3lhYmxlLCBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UsIFJldmlzaW9uVGFnIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50ID0gT3BhcXVlO1xuZXhwb3J0IHR5cGUgQ29tcG9uZW50Q2xhc3MgPSBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50TWFuYWdlcjxUIGV4dGVuZHMgQ29tcG9uZW50PiB7XG4gIC8vIEZpcnN0LCB0aGUgY29tcG9uZW50IG1hbmFnZXIgaXMgYXNrZWQgdG8gcHJlcGFyZSB0aGUgYXJndW1lbnRzIG5lZWRlZFxuICAvLyBmb3IgYGNyZWF0ZWAuIFRoaXMgYWxsb3dzIGZvciB0aGluZ3MgbGlrZSBjbG9zdXJlIGNvbXBvbmVudHMgd2hlcmUgdGhlXG4gIC8vIGFyZ3MgbmVlZCB0byBiZSBjdXJyaWVkIGJlZm9yZSBjb25zdHJ1Y3RpbmcgdGhlIGluc3RhbmNlIG9mIHRoZSBzdGF0ZVxuICAvLyBidWNrZXQuXG4gIHByZXBhcmVBcmdzKGRlZmluaXRpb246IENvbXBvbmVudERlZmluaXRpb248VD4sIGFyZ3M6IEV2YWx1YXRlZEFyZ3MsIGR5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlKTogRXZhbHVhdGVkQXJncztcblxuICAvLyBUaGVuLCB0aGUgY29tcG9uZW50IG1hbmFnZXIgaXMgYXNrZWQgdG8gY3JlYXRlIGEgYnVja2V0IG9mIHN0YXRlIGZvclxuICAvLyB0aGUgc3VwcGxpZWQgYXJndW1lbnRzLiBGcm9tIHRoZSBwZXJzcGVjdGl2ZSBvZiBHbGltbWVyLCB0aGlzIGlzXG4gIC8vIGFuIG9wYXF1ZSB0b2tlbiwgYnV0IGluIHByYWN0aWNlIGl0IGlzIHByb2JhYmx5IGEgY29tcG9uZW50IG9iamVjdC5cbiAgY3JlYXRlKGVudjogRW52aXJvbm1lbnQsIGRlZmluaXRpb246IENvbXBvbmVudERlZmluaXRpb248VD4sIGFyZ3M6IEV2YWx1YXRlZEFyZ3MsIGR5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlLCBjYWxsZXI6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiwgaGFzRGVmYXVsdEJsb2NrOiBib29sZWFuKTogVDtcblxuICAvLyBSZXR1cm4gdGhlIGNvbXBpbGVkIGxheW91dCB0byB1c2UgZm9yIHRoaXMgY29tcG9uZW50LiBUaGlzIGlzIGNhbGxlZFxuICAvLyAqYWZ0ZXIqIHRoZSBjb21wb25lbnQgaW5zdGFuY2UgaGFzIGJlZW4gY3JlYXRlZCwgYmVjYXVzZSB5b3UgbWlnaHRcbiAgLy8gd2FudCB0byByZXR1cm4gYSBkaWZmZXJlbnQgbGF5b3V0IHBlci1pbnN0YW5jZSBmb3Igb3B0aW1pemF0aW9uIHJlYXNvbnNcbiAgLy8gb3IgdG8gaW1wbGVtZW50IGZlYXR1cmVzIGxpa2UgRW1iZXIncyBcImxhdGUtYm91bmRcIiBsYXlvdXRzLlxuICBsYXlvdXRGb3IoZGVmaW5pdGlvbjogQ29tcG9uZW50RGVmaW5pdGlvbjxUPiwgY29tcG9uZW50OiBULCBlbnY6IEVudmlyb25tZW50KTogQ29tcGlsZWRQcm9ncmFtO1xuXG4gIC8vIE5leHQsIEdsaW1tZXIgYXNrcyB0aGUgbWFuYWdlciB0byBjcmVhdGUgYSByZWZlcmVuY2UgZm9yIHRoZSBgc2VsZmBcbiAgLy8gaXQgc2hvdWxkIHVzZSBpbiB0aGUgbGF5b3V0LlxuICBnZXRTZWxmKGNvbXBvbmVudDogVCk6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPjtcblxuICAvLyBUaGUgYGRpZENyZWF0ZUVsZW1lbnRgIGhvb2sgaXMgcnVuIGZvciBub24tdGFnbGVzcyBjb21wb25lbnRzIGFmdGVyIHRoZVxuICAvLyBlbGVtZW50IGFzIGJlZW4gY3JlYXRlZCwgYnV0IGJlZm9yZSBpdCBoYXMgYmVlbiBhcHBlbmRlZCAoXCJmbHVzaGVkXCIpIHRvXG4gIC8vIHRoZSBET00uIFRoaXMgaG9vayBhbGxvd3MgdGhlIG1hbmFnZXIgdG8gc2F2ZSBvZmYgdGhlIGVsZW1lbnQsIGFzIHdlbGwgYXNcbiAgLy8gaW5zdGFsbCBvdGhlciBkeW5hbWljIGF0dHJpYnV0ZXMgdmlhIHRoZSBFbGVtZW50T3BlcmF0aW9ucyBvYmplY3QuXG4gIC8vXG4gIC8vIEhvc3RzIHNob3VsZCB1c2UgYGRpZENyZWF0ZWAsIHdoaWNoIHJ1bnMgYXN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIHJlbmRlcmluZ1xuICAvLyBwcm9jZXNzLCB0byBwcm92aWRlIGhvb2tzIGZvciB1c2VyIGNvZGUuXG4gIGRpZENyZWF0ZUVsZW1lbnQoY29tcG9uZW50OiBULCBlbGVtZW50OiBTaW1wbGUuRWxlbWVudCwgb3BlcmF0aW9uczogRWxlbWVudE9wZXJhdGlvbnMpOiB2b2lkO1xuXG4gIC8vIFRoaXMgaG9vayBpcyBydW4gYWZ0ZXIgdGhlIGVudGlyZSBsYXlvdXQgaGFzIGJlZW4gcmVuZGVyZWQuXG4gIC8vXG4gIC8vIEhvc3RzIHNob3VsZCB1c2UgYGRpZENyZWF0ZWAsIHdoaWNoIHJ1bnMgYXN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIHJlbmRlcmluZ1xuICAvLyBwcm9jZXNzLCB0byBwcm92aWRlIGhvb2tzIGZvciB1c2VyIGNvZGUuXG4gIGRpZFJlbmRlckxheW91dChjb21wb25lbnQ6IFQsIGJvdW5kczogQm91bmRzKTogdm9pZDtcblxuICAvLyBPbmNlIHRoZSB3aG9sZSB0b3AtZG93biByZW5kZXJpbmcgcHJvY2VzcyBpcyBjb21wbGV0ZSwgR2xpbW1lciBpbnZva2VzXG4gIC8vIHRoZSBgZGlkQ3JlYXRlYCBjYWxsYmFja3MuXG4gIGRpZENyZWF0ZShjb21wb25lbnQ6IFQpOiB2b2lkO1xuXG4gIC8vIENvbnZlcnQgdGhlIG9wYXF1ZSBjb21wb25lbnQgaW50byBhIGBSZXZpc2lvblRhZ2AgdGhhdCBkZXRlcm1pbnMgd2hlblxuICAvLyB0aGUgY29tcG9uZW50J3MgdXBkYXRlIGhvb2tzIG5lZWQgdG8gYmUgY2FsbGVkLCBpbiBhZGRpdGlvbiB0byBhbnlcbiAgLy8gb3V0c2lkZSBjaGFuZ2VzIGNhcHR1cmVkIGluIHRoZSBpbnB1dCBhcmd1bWVudHMuIElmIGl0IHJldHVybnMgbnVsbCxcbiAgLy8gdGhlIHVwZGF0ZSBob29rcyB3aWxsIG9ubHkgYmUgY2FsbGVkIHdoZW4gb25lIG9yIG1vcmUgb2YgdGhlIGlucHV0XG4gIC8vIGFyZ3VtZW50cyBoYXMgY2hhbmdlZC5cbiAgZ2V0VGFnKGNvbXBvbmVudDogVCk6IFJldmlzaW9uVGFnO1xuXG4gIC8vIFdoZW4gdGhlIGlucHV0IGFyZ3VtZW50cyBoYXZlIGNoYW5nZWQsIGFuZCB0b3AtZG93biByZXZhbGlkYXRpb24gaGFzXG4gIC8vIGJlZ3VuLCB0aGUgbWFuYWdlcidzIGB1cGRhdGVgIGhvb2sgaXMgY2FsbGVkLlxuICB1cGRhdGUoY29tcG9uZW50OiBULCBhcmdzOiBFdmFsdWF0ZWRBcmdzLCBkeW5hbWljU2NvcGU6IER5bmFtaWNTY29wZSk6IHZvaWQ7XG5cbiAgLy8gVGhpcyBob29rIGlzIHJ1biBhZnRlciB0aGUgZW50aXJlIGxheW91dCBoYXMgYmVlbiB1cGRhdGVkLlxuICAvL1xuICAvLyBIb3N0cyBzaG91bGQgdXNlIGBkaWRVcGRhdGVgLCB3aGljaCBydW5zIGFzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSByZW5kZXJpbmdcbiAgLy8gcHJvY2VzcywgdG8gcHJvdmlkZSBob29rcyBmb3IgdXNlciBjb2RlLlxuICBkaWRVcGRhdGVMYXlvdXQoY29tcG9uZW50OiBULCBib3VuZHM6IEJvdW5kcyk6IHZvaWQ7XG5cbiAgLy8gRmluYWxseSwgb25jZSB0b3AtZG93biByZXZhbGlkYXRpb24gaGFzIGNvbXBsZXRlZCwgR2xpbW1lciBpbnZva2VzXG4gIC8vIHRoZSBgZGlkVXBkYXRlYCBjYWxsYmFja3Mgb24gY29tcG9uZW50cyB0aGF0IGNoYW5nZWQuXG4gIGRpZFVwZGF0ZShjb21wb25lbnQ6IFQpOiB2b2lkO1xuXG4gIC8vIENvbnZlcnQgdGhlIG9wYXF1ZSBjb21wb25lbnQgaW50byBhbiBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIERlc3Ryb3lhYmxlLlxuICAvLyBJZiBpdCByZXR1cm5zIG51bGwsIHRoZSBjb21wb25lbnQgd2lsbCBub3QgYmUgZGVzdHJveWVkLlxuICBnZXREZXN0cnVjdG9yKGNvbXBvbmVudDogVCk6IERlc3Ryb3lhYmxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudExheW91dEJ1aWxkZXIge1xuICBlbnY6IEVudmlyb25tZW50O1xuICB0YWc6IENvbXBvbmVudFRhZ0J1aWxkZXI7XG4gIGF0dHJzOiBDb21wb25lbnRBdHRyc0J1aWxkZXI7XG5cbiAgd3JhcExheW91dChsYXlvdXQ6IExheW91dCk6IHZvaWQ7XG4gIGZyb21MYXlvdXQobGF5b3V0OiBMYXlvdXQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudFRhZ0J1aWxkZXIge1xuICBzdGF0aWModGFnTmFtZTogc3RyaW5nKTogdm9pZDtcbiAgZHluYW1pYyh0YWdOYW1lOiBGdW5jdGlvbkV4cHJlc3Npb248c3RyaW5nPik6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50QXR0cnNCdWlsZGVyIHtcbiAgc3RhdGljKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG4gIGR5bmFtaWMobmFtZTogc3RyaW5nLCB2YWx1ZTogRnVuY3Rpb25FeHByZXNzaW9uPHN0cmluZz4pOiB2b2lkO1xufVxuXG5jb25zdCBDT01QT05FTlRfREVGSU5JVElPTl9CUkFORCA9ICdDT01QT05FTlQgREVGSU5JVElPTiBbaWQ9ZTU5Yzc1NGUtNjFlYi00MzkyLThjNGEtMmMwYWM3MmJmY2Q0XSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvbmVudERlZmluaXRpb24ob2JqOiBhbnkpOiBvYmogaXMgQ29tcG9uZW50RGVmaW5pdGlvbjxPcGFxdWU+IHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAmJiBvYmpbQ09NUE9ORU5UX0RFRklOSVRJT05fQlJBTkRdO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50RGVmaW5pdGlvbjxUPiB7XG4gIHB1YmxpYyBuYW1lOiBzdHJpbmc7IC8vIGZvciBkZWJ1Z2dpbmdcbiAgcHVibGljIG1hbmFnZXI6IENvbXBvbmVudE1hbmFnZXI8VD47XG4gIHB1YmxpYyBDb21wb25lbnRDbGFzczogQ29tcG9uZW50Q2xhc3M7XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBtYW5hZ2VyOiBDb21wb25lbnRNYW5hZ2VyPFQ+LCBDb21wb25lbnRDbGFzczogQ29tcG9uZW50Q2xhc3MpIHtcbiAgICB0aGlzW0NPTVBPTkVOVF9ERUZJTklUSU9OX0JSQU5EXSA9IHRydWU7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuQ29tcG9uZW50Q2xhc3MgPSBDb21wb25lbnRDbGFzcztcbiAgfVxufVxuIl19