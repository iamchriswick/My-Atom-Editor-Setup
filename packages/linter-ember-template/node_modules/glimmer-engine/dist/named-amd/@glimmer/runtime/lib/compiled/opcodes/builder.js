enifed('@glimmer/runtime/lib/compiled/opcodes/builder', ['exports', '@glimmer/runtime/lib/compiled/opcodes/content', '@glimmer/runtime/lib/compiled/opcodes/vm', '@glimmer/runtime/lib/compiled/expressions/has-block', '@glimmer/util', '@glimmer/runtime/lib/syntax/functions', '@glimmer/runtime/lib/compiled/expressions', '@glimmer/runtime/lib/compiler', '@glimmer/runtime/lib/opcodes'], function (exports, _glimmerRuntimeLibCompiledOpcodesContent, _glimmerRuntimeLibCompiledOpcodesVm, _glimmerRuntimeLibCompiledExpressionsHasBlock, _glimmerUtil, _glimmerRuntimeLibSyntaxFunctions, _glimmerRuntimeLibCompiledExpressions, _glimmerRuntimeLibCompiler, _glimmerRuntimeLibOpcodes) {
    'use strict';

    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function appendOpcode(name, op1, op2, op3) {
        return _glimmerRuntimeLibOpcodes.APPEND_OPCODES.construct(name, null, op1, op2, op3);
    }

    var Labels = (function () {
        function Labels() {
            _classCallCheck(this, Labels);

            this.labels = _glimmerUtil.dict();
            this.jumps = [];
            this.ranges = [];
        }

        Labels.prototype.label = function label(name, index) {
            this.labels[name] = index;
        };

        Labels.prototype.jump = function jump(at, Target, target) {
            this.jumps.push({ at: at, target: target, Target: Target });
        };

        Labels.prototype.range = function range(at, Range, start, end) {
            this.ranges.push({ at: at, start: start, end: end, Range: Range });
        };

        Labels.prototype.patch = function patch(constants, opcodes) {
            for (var i = 0; i < this.jumps.length; i++) {
                var _jumps$i = this.jumps[i];
                var at = _jumps$i.at;
                var target = _jumps$i.target;
                var Target = _jumps$i.Target;

                opcodes.set(at, _glimmerRuntimeLibOpcodes.APPEND_OPCODES.construct(Target, null, this.labels[target]));
            }
            for (var i = 0; i < this.ranges.length; i++) {
                var _ranges$i = this.ranges[i];
                var at = _ranges$i.at;
                var start = _ranges$i.start;
                var end = _ranges$i.end;
                var _Range = _ranges$i.Range;

                var slice = constants.slice([this.labels[start], this.labels[end] - 1]);
                opcodes.set(at, _glimmerRuntimeLibOpcodes.APPEND_OPCODES.construct(_Range, null, slice));
            }
        };

        return Labels;
    })();

    var BasicOpcodeBuilder = (function () {
        function BasicOpcodeBuilder(symbolTable, env, program) {
            _classCallCheck(this, BasicOpcodeBuilder);

            this.symbolTable = symbolTable;
            this.env = env;
            this.program = program;
            this.labelsStack = new _glimmerUtil.Stack();
            this.constants = env.constants;
            this.start = program.next;
        }

        BasicOpcodeBuilder.prototype.opcode = function opcode(name, op1, op2, op3) {
            this.push(appendOpcode(name, op1, op2, op3));
        };

        BasicOpcodeBuilder.prototype.push = function push(op) {
            // console.log(`pushing ${op && op.type}`);
            if (op === null) {
                this.program.push([0, 0, 0, 0]);
            } else {
                this.program.push(op);
            }
        };

        BasicOpcodeBuilder.prototype.toSlice = function toSlice() {
            return [this.start, this.program.current];
        };

        // helpers

        BasicOpcodeBuilder.prototype.startLabels = function startLabels() {
            this.labelsStack.push(new Labels());
        };

        BasicOpcodeBuilder.prototype.stopLabels = function stopLabels() {
            var label = _glimmerUtil.expect(this.labelsStack.pop(), 'unbalanced push and pop labels');
            label.patch(this.constants, this.program);
        };

        // partials

        BasicOpcodeBuilder.prototype.putPartialDefinition = function putPartialDefinition(_definition) {
            var definition = this.constants.other(_definition);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PutPartial, definition);
        };

        BasicOpcodeBuilder.prototype.putDynamicPartialDefinition = function putDynamicPartialDefinition() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PutDynamicPartial, this.constants.other(this.symbolTable));
        };

        BasicOpcodeBuilder.prototype.evaluatePartial = function evaluatePartial() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.EvaluatePartial, this.constants.other(this.symbolTable), this.constants.other(_glimmerUtil.dict()));
        };

        // components

        BasicOpcodeBuilder.prototype.putComponentDefinition = function putComponentDefinition(definition) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PutComponent, this.other(definition));
        };

        BasicOpcodeBuilder.prototype.putDynamicComponentDefinition = function putDynamicComponentDefinition() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PutDynamicComponent);
        };

        BasicOpcodeBuilder.prototype.openComponent = function openComponent(args, shadow) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.OpenComponent, this.args(args), shadow ? this.block(shadow) : 0);
        };

        BasicOpcodeBuilder.prototype.didCreateElement = function didCreateElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.DidCreateElement);
        };

        BasicOpcodeBuilder.prototype.shadowAttributes = function shadowAttributes() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.ShadowAttributes);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.CloseBlock);
        };

        BasicOpcodeBuilder.prototype.didRenderLayout = function didRenderLayout() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.DidRenderLayout);
        };

        BasicOpcodeBuilder.prototype.closeComponent = function closeComponent() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.CloseComponent);
        };

        // content

        BasicOpcodeBuilder.prototype.dynamicContent = function dynamicContent(Opcode) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.DynamicContent, this.other(Opcode));
        };

        BasicOpcodeBuilder.prototype.cautiousAppend = function cautiousAppend() {
            this.dynamicContent(new _glimmerRuntimeLibCompiledOpcodesContent.OptimizedCautiousAppendOpcode());
        };

        BasicOpcodeBuilder.prototype.trustingAppend = function trustingAppend() {
            this.dynamicContent(new _glimmerRuntimeLibCompiledOpcodesContent.OptimizedTrustingAppendOpcode());
        };

        BasicOpcodeBuilder.prototype.guardedCautiousAppend = function guardedCautiousAppend(expression) {
            this.dynamicContent(new _glimmerRuntimeLibCompiledOpcodesContent.GuardedCautiousAppendOpcode(this.compileExpression(expression), this.symbolTable));
        };

        BasicOpcodeBuilder.prototype.guardedTrustingAppend = function guardedTrustingAppend(expression) {
            this.dynamicContent(new _glimmerRuntimeLibCompiledOpcodesContent.GuardedTrustingAppendOpcode(this.compileExpression(expression), this.symbolTable));
        };

        // dom

        BasicOpcodeBuilder.prototype.text = function text(_text) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Text, this.constants.string(_text));
        };

        BasicOpcodeBuilder.prototype.openPrimitiveElement = function openPrimitiveElement(tag) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.OpenElement, this.constants.string(tag));
        };

        BasicOpcodeBuilder.prototype.openComponentElement = function openComponentElement(tag) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.OpenComponentElement, this.constants.string(tag));
        };

        BasicOpcodeBuilder.prototype.openDynamicPrimitiveElement = function openDynamicPrimitiveElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.OpenDynamicElement);
        };

        BasicOpcodeBuilder.prototype.flushElement = function flushElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.FlushElement);
        };

        BasicOpcodeBuilder.prototype.closeElement = function closeElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.CloseElement);
        };

        BasicOpcodeBuilder.prototype.staticAttr = function staticAttr(_name, _namespace, _value) {
            var name = this.constants.string(_name);
            var namespace = _namespace ? this.constants.string(_namespace) : 0;
            var value = this.constants.string(_value);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.StaticAttr, name, value, namespace);
        };

        BasicOpcodeBuilder.prototype.dynamicAttrNS = function dynamicAttrNS(_name, _namespace, trusting) {
            var name = this.constants.string(_name);
            var namespace = this.constants.string(_namespace);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.DynamicAttrNS, name, namespace, trusting | 0);
        };

        BasicOpcodeBuilder.prototype.dynamicAttr = function dynamicAttr(_name, trusting) {
            var name = this.constants.string(_name);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.DynamicAttr, name, trusting | 0);
        };

        BasicOpcodeBuilder.prototype.comment = function comment(_comment) {
            var comment = this.constants.string(_comment);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Comment, comment);
        };

        BasicOpcodeBuilder.prototype.modifier = function modifier(_name, _args) {
            var args = this.constants.expression(this.compile(_args));
            var _modifierManager = this.env.lookupModifier([_name], this.symbolTable);
            var modifierManager = this.constants.other(_modifierManager);
            var name = this.constants.string(_name);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Modifier, name, modifierManager, args);
        };

        // lists

        BasicOpcodeBuilder.prototype.putIterator = function putIterator() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PutIterator);
        };

        BasicOpcodeBuilder.prototype.enterList = function enterList(start, end) {
            this.push(null);
            this.labels.range(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.EnterList, start, end);
        };

        BasicOpcodeBuilder.prototype.exitList = function exitList() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.ExitList);
        };

        BasicOpcodeBuilder.prototype.enterWithKey = function enterWithKey(start, end) {
            this.push(null);
            this.labels.range(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.EnterWithKey, start, end);
        };

        BasicOpcodeBuilder.prototype.nextIter = function nextIter(end) {
            this.push(null);
            this.labels.jump(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.NextIter, end);
        };

        // vm

        BasicOpcodeBuilder.prototype.openBlock = function openBlock(_args, _inner) {
            var args = this.constants.expression(this.compile(_args));
            var inner = this.constants.other(_inner);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.OpenBlock, inner, args);
        };

        BasicOpcodeBuilder.prototype.closeBlock = function closeBlock() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.CloseBlock);
        };

        BasicOpcodeBuilder.prototype.pushRemoteElement = function pushRemoteElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PushRemoteElement);
        };

        BasicOpcodeBuilder.prototype.popRemoteElement = function popRemoteElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PopRemoteElement);
        };

        BasicOpcodeBuilder.prototype.popElement = function popElement() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PopElement);
        };

        BasicOpcodeBuilder.prototype.label = function label(name) {
            this.labels.label(name, this.nextPos);
        };

        BasicOpcodeBuilder.prototype.pushChildScope = function pushChildScope() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PushChildScope);
        };

        BasicOpcodeBuilder.prototype.popScope = function popScope() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PopScope);
        };

        BasicOpcodeBuilder.prototype.pushDynamicScope = function pushDynamicScope() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PushDynamicScope);
        };

        BasicOpcodeBuilder.prototype.popDynamicScope = function popDynamicScope() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PopDynamicScope);
        };

        BasicOpcodeBuilder.prototype.putNull = function putNull() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Put, this.constants.NULL_REFERENCE);
        };

        BasicOpcodeBuilder.prototype.putValue = function putValue(_expression) {
            var expr = this.constants.expression(this.compileExpression(_expression));
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.EvaluatePut, expr);
        };

        BasicOpcodeBuilder.prototype.putArgs = function putArgs(_args) {
            var args = this.constants.expression(this.compile(_args));
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.PutArgs, args);
        };

        BasicOpcodeBuilder.prototype.bindDynamicScope = function bindDynamicScope(_names) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindDynamicScope, this.names(_names));
        };

        BasicOpcodeBuilder.prototype.bindPositionalArgs = function bindPositionalArgs(_names, _symbols) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindPositionalArgs, this.names(_names), this.symbols(_symbols));
        };

        BasicOpcodeBuilder.prototype.bindNamedArgs = function bindNamedArgs(_names, _symbols) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindNamedArgs, this.names(_names), this.symbols(_symbols));
        };

        BasicOpcodeBuilder.prototype.bindBlocks = function bindBlocks(_names, _symbols) {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindBlocks, this.names(_names), this.symbols(_symbols));
        };

        BasicOpcodeBuilder.prototype.enter = function enter(_enter, exit) {
            this.push(null);
            this.labels.range(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.Enter, _enter, exit);
        };

        BasicOpcodeBuilder.prototype.exit = function exit() {
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Exit);
        };

        BasicOpcodeBuilder.prototype.evaluate = function evaluate(_block) {
            var block = this.constants.block(_block);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Evaluate, block);
        };

        BasicOpcodeBuilder.prototype.test = function test(testFunc) {
            var _func = undefined;
            if (testFunc === 'const') {
                _func = _glimmerRuntimeLibCompiledOpcodesVm.ConstTest;
            } else if (testFunc === 'simple') {
                _func = _glimmerRuntimeLibCompiledOpcodesVm.SimpleTest;
            } else if (testFunc === 'environment') {
                _func = _glimmerRuntimeLibCompiledOpcodesVm.EnvironmentTest;
            } else if (typeof testFunc === 'function') {
                _func = testFunc;
            } else {
                throw new Error('unreachable');
            }
            var func = this.constants.function(_func);
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.Test, func);
        };

        BasicOpcodeBuilder.prototype.jump = function jump(target) {
            this.push(null);
            this.labels.jump(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.Jump, target);
        };

        BasicOpcodeBuilder.prototype.jumpIf = function jumpIf(target) {
            this.push(null);
            this.labels.jump(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.JumpIf, target);
        };

        BasicOpcodeBuilder.prototype.jumpUnless = function jumpUnless(target) {
            this.push(null);
            this.labels.jump(this.pos, _glimmerRuntimeLibOpcodes.OpcodeName.JumpUnless, target);
        };

        BasicOpcodeBuilder.prototype.names = function names(_names) {
            var _this = this;

            var names = _names.map(function (n) {
                return _this.constants.string(n);
            });
            return this.constants.array(names);
        };

        BasicOpcodeBuilder.prototype.symbols = function symbols(_symbols2) {
            return this.constants.array(_symbols2);
        };

        BasicOpcodeBuilder.prototype.other = function other(value) {
            return this.constants.other(value);
        };

        BasicOpcodeBuilder.prototype.args = function args(_args2) {
            return this.constants.expression(this.compile(_args2));
        };

        BasicOpcodeBuilder.prototype.block = function block(_block2) {
            return this.constants.block(_block2);
        };

        _createClass(BasicOpcodeBuilder, [{
            key: 'pos',
            get: function () {
                return this.program.current;
            }
        }, {
            key: 'nextPos',
            get: function () {
                return this.program.next;
            }
        }, {
            key: 'labels',
            get: function () {
                return _glimmerUtil.expect(this.labelsStack.current, 'bug: not in a label stack');
            }
        }]);

        return BasicOpcodeBuilder;
    })();

    exports.BasicOpcodeBuilder = BasicOpcodeBuilder;

    function isCompilableExpression(expr) {
        return expr && typeof expr['compile'] === 'function';
    }

    var OpcodeBuilder = (function (_BasicOpcodeBuilder) {
        _inherits(OpcodeBuilder, _BasicOpcodeBuilder);

        function OpcodeBuilder(symbolTable, env) {
            var program = arguments.length <= 2 || arguments[2] === undefined ? env.program : arguments[2];
            return (function () {
                _classCallCheck(this, OpcodeBuilder);

                _BasicOpcodeBuilder.call(this, symbolTable, env, program);
                this.component = new _glimmerRuntimeLibCompiler.ComponentBuilder(this);
            }).apply(this, arguments);
        }

        OpcodeBuilder.prototype.compile = function compile(expr) {
            if (isCompilableExpression(expr)) {
                return expr.compile(this);
            } else {
                return expr;
            }
        };

        OpcodeBuilder.prototype.compileExpression = function compileExpression(expression) {
            if (expression instanceof _glimmerRuntimeLibCompiledExpressions.CompiledExpression) {
                return expression;
            } else {
                return _glimmerRuntimeLibSyntaxFunctions.expr(expression, this);
            }
        };

        OpcodeBuilder.prototype.bindPositionalArgsForLocals = function bindPositionalArgsForLocals(locals) {
            var symbols = Object.keys(locals).map(function (name) {
                return locals[name];
            });
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindPositionalArgs, this.symbols(symbols));
        };

        OpcodeBuilder.prototype.preludeForLayout = function preludeForLayout(layout) {
            var _this2 = this;

            var symbols = layout.symbolTable.getSymbols();
            if (symbols.named) {
                (function () {
                    var named = symbols.named;
                    var namedNames = Object.keys(named);
                    var namedSymbols = namedNames.map(function (n) {
                        return named[n];
                    });
                    _this2.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindNamedArgs, _this2.names(namedNames), _this2.symbols(namedSymbols));
                })();
            }
            this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindCallerScope);
            if (symbols.yields) {
                (function () {
                    var yields = symbols.yields;
                    var yieldNames = Object.keys(yields);
                    var yieldSymbols = yieldNames.map(function (n) {
                        return yields[n];
                    });
                    _this2.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindBlocks, _this2.names(yieldNames), _this2.symbols(yieldSymbols));
                })();
            }
            if (symbols.partialArgs) {
                this.opcode(_glimmerRuntimeLibOpcodes.OpcodeName.BindPartialArgs, symbols.partialArgs);
            }
        };

        OpcodeBuilder.prototype.yield = function _yield(args, to) {
            var yields = undefined,
                partial = undefined;
            var inner = undefined;
            if (yields = this.symbolTable.getSymbol('yields', to)) {
                inner = new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledGetBlockBySymbol(yields, to);
            } else if (partial = this.symbolTable.getPartialArgs()) {
                inner = new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledInPartialGetBlock(partial, to);
            } else {
                throw new Error('[BUG] ${to} is not a valid block name.');
            }
            this.openBlock(args, inner);
            this.closeBlock();
        };

        // TODO
        // come back to this

        OpcodeBuilder.prototype.labelled = function labelled(args, callback) {
            if (args) this.putArgs(args);
            this.startLabels();
            this.enter('BEGIN', 'END');
            this.label('BEGIN');
            callback(this, 'BEGIN', 'END');
            this.label('END');
            this.exit();
            this.stopLabels();
        };

        // TODO
        // come back to this

        OpcodeBuilder.prototype.iter = function iter(callback) {
            this.startLabels();
            this.enterList('BEGIN', 'END');
            this.label('ITER');
            this.nextIter('BREAK');
            this.enterWithKey('BEGIN', 'END');
            this.label('BEGIN');
            callback(this, 'BEGIN', 'END');
            this.label('END');
            this.exit();
            this.jump('ITER');
            this.label('BREAK');
            this.exitList();
            this.stopLabels();
        };

        // TODO
        // come back to this

        OpcodeBuilder.prototype.unit = function unit(callback) {
            this.startLabels();
            callback(this);
            this.stopLabels();
        };

        return OpcodeBuilder;
    })(BasicOpcodeBuilder);

    exports.default = OpcodeBuilder;
});
//# sourceMappingURL=data:application/json;base64,