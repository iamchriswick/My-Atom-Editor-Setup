enifed('@glimmer/runtime/lib/compiled/opcodes/lists', ['exports', '@glimmer/runtime/lib/compiled/expressions/args', '@glimmer/util', '@glimmer/reference', '@glimmer/runtime/lib/opcodes'], function (exports, _glimmerRuntimeLibCompiledExpressionsArgs, _glimmerUtil, _glimmerReference, _glimmerRuntimeLibOpcodes) {
    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var IterablePresenceReference = (function () {
        function IterablePresenceReference(artifacts) {
            _classCallCheck(this, IterablePresenceReference);

            this.tag = artifacts.tag;
            this.artifacts = artifacts;
        }

        IterablePresenceReference.prototype.value = function value() {
            return !this.artifacts.isEmpty();
        };

        return IterablePresenceReference;
    })();

    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PutIterator, function (vm) {
        var listRef = vm.frame.getOperand();
        var args = _glimmerUtil.expect(vm.frame.getArgs(), 'PutIteratorOpcode expects a populated args register');
        var iterable = vm.env.iterableFor(listRef, args);
        var iterator = new _glimmerReference.ReferenceIterator(iterable);
        vm.frame.setIterator(iterator);
        vm.frame.setCondition(new IterablePresenceReference(iterator.artifacts));
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.EnterList, function (vm, _ref) {
        var _slice = _ref.op1;

        vm.enterList(vm.constants.getSlice(_slice));
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.ExitList, function (vm) {
        return vm.exitList();
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.EnterWithKey, function (vm, _ref2) {
        var _slice = _ref2.op2;

        var key = _glimmerUtil.expect(vm.frame.getKey(), 'EnterWithKeyOpcode expects a populated key register');
        var slice = vm.constants.getSlice(_slice);
        vm.enterWithKey(key, slice);
    });
    var TRUE_REF = new _glimmerReference.ConstReference(true);
    var FALSE_REF = new _glimmerReference.ConstReference(false);
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.NextIter, function (vm, _ref3) {
        var end = _ref3.op1;

        var item = vm.frame.getIterator().next();
        if (item) {
            vm.frame.setCondition(TRUE_REF);
            vm.frame.setKey(item.key);
            vm.frame.setOperand(item.value);
            vm.frame.setArgs(_glimmerRuntimeLibCompiledExpressionsArgs.EvaluatedArgs.positional([item.value, item.memo]));
        } else {
            vm.frame.setCondition(FALSE_REF);
            vm.goto(end);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvbGlzdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLQSx5QkFBQTtBQUlFLGlCQUpGLHlCQUFBLENBSWMsU0FBNkIsRUFBQTtrQ0FKM0MseUJBQUE7O0FBS0ksZ0JBQUksQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUN6QixnQkFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDNUI7O0FBUEgsaUNBQUEsV0FTRSxLQUFLLEdBQUEsaUJBQUE7QUFDSCxtQkFBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDbEM7O2VBWEgseUJBQUE7OztBQWNBLDhCQWhCUyxjQUFjLENBZ0JSLEdBQUcsQ0FBQywwQkFoQk0sVUFBVSxDQWdCYixXQUFXLEVBQUUsVUFBQSxFQUFFLEVBQUE7QUFDbkMsWUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUNwQyxZQUFJLElBQUksR0FBRyxhQXBCSixNQUFNLENBb0JLLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUscURBQXFELENBQUMsQ0FBQztBQUM3RixZQUFJLFFBQVEsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakQsWUFBSSxRQUFRLEdBQUcsc0JBckJnQyxpQkFBaUIsQ0FxQjNCLFFBQVEsQ0FBQyxDQUFDO0FBRS9DLFVBQUUsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLFVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLElBQUkseUJBQXlCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7S0FDMUUsQ0FBQyxDQUFDO0FBRUgsOEJBMUJTLGNBQWMsQ0EwQlIsR0FBRyxDQUFDLDBCQTFCTSxVQUFVLENBMEJiLFNBQVMsRUFBRSxVQUFDLEVBQUUsRUFBRSxJQUFlLEVBQUE7WUFBUixNQUFNLEdBQWIsSUFBZSxDQUFiLEdBQUc7O0FBQ3pDLFVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztLQUM3QyxDQUFDLENBQUM7QUFFSCw4QkE5QlMsY0FBYyxDQThCUixHQUFHLENBQUMsMEJBOUJNLFVBQVUsQ0E4QmIsUUFBUSxFQUFFLFVBQUEsRUFBRTtlQUFJLEVBQUUsQ0FBQyxRQUFRLEVBQUU7S0FBQSxDQUFDLENBQUM7QUFFckQsOEJBaENTLGNBQWMsQ0FnQ1IsR0FBRyxDQUFDLDBCQWhDTSxVQUFVLENBZ0NiLFlBQVksRUFBRSxVQUFDLEVBQUUsRUFBRSxLQUFlLEVBQUE7WUFBUixNQUFNLEdBQWIsS0FBZSxDQUFiLEdBQUc7O0FBQzVDLFlBQUksR0FBRyxHQUFHLGFBbkNILE1BQU0sQ0FtQ0ksRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxxREFBcUQsQ0FBQyxDQUFDO0FBQzNGLFlBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFDLFVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzdCLENBQUMsQ0FBQztBQUVILFFBQU0sUUFBUSxHQUFHLHNCQXZDZ0IsY0FBYyxDQXVDWCxJQUFJLENBQUMsQ0FBQztBQUMxQyxRQUFNLFNBQVMsR0FBRyxzQkF4Q2UsY0FBYyxDQXdDVixLQUFLLENBQUMsQ0FBQztBQUU1Qyw4QkF6Q1MsY0FBYyxDQXlDUixHQUFHLENBQUMsMEJBekNNLFVBQVUsQ0F5Q2IsUUFBUSxFQUFFLFVBQUMsRUFBRSxFQUFFLEtBQVksRUFBQTtZQUFMLEdBQUcsR0FBVixLQUFZLENBQVYsR0FBRzs7QUFDeEMsWUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUV6QyxZQUFJLElBQUksRUFBRTtBQUNSLGNBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2hDLGNBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixjQUFFLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDaEMsY0FBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsMENBbkRaLGFBQWEsQ0FtRGEsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JFLE1BQU07QUFDTCxjQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNqQyxjQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2Q7S0FDRixDQUFDLENBQUMiLCJmaWxlIjoibGlzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmFsdWF0ZWRBcmdzIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMvYXJncyc7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFJldmlzaW9uVGFnLCBSZWZlcmVuY2UsIENvbnN0UmVmZXJlbmNlLCBSZWZlcmVuY2VJdGVyYXRvciwgSXRlcmF0aW9uQXJ0aWZhY3RzIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IEFQUEVORF9PUENPREVTLCBPcGNvZGVOYW1lIGFzIE9wIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5cbmNsYXNzIEl0ZXJhYmxlUHJlc2VuY2VSZWZlcmVuY2UgaW1wbGVtZW50cyBSZWZlcmVuY2U8Ym9vbGVhbj4ge1xuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZztcbiAgcHJpdmF0ZSBhcnRpZmFjdHM6IEl0ZXJhdGlvbkFydGlmYWN0cztcblxuICBjb25zdHJ1Y3RvcihhcnRpZmFjdHM6IEl0ZXJhdGlvbkFydGlmYWN0cykge1xuICAgIHRoaXMudGFnID0gYXJ0aWZhY3RzLnRhZztcbiAgICB0aGlzLmFydGlmYWN0cyA9IGFydGlmYWN0cztcbiAgfVxuXG4gIHZhbHVlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5hcnRpZmFjdHMuaXNFbXB0eSgpO1xuICB9XG59XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5QdXRJdGVyYXRvciwgdm0gPT4ge1xuICBsZXQgbGlzdFJlZiA9IHZtLmZyYW1lLmdldE9wZXJhbmQoKTtcbiAgbGV0IGFyZ3MgPSBleHBlY3Qodm0uZnJhbWUuZ2V0QXJncygpLCAnUHV0SXRlcmF0b3JPcGNvZGUgZXhwZWN0cyBhIHBvcHVsYXRlZCBhcmdzIHJlZ2lzdGVyJyk7XG4gIGxldCBpdGVyYWJsZSA9IHZtLmVudi5pdGVyYWJsZUZvcihsaXN0UmVmLCBhcmdzKTtcbiAgbGV0IGl0ZXJhdG9yID0gbmV3IFJlZmVyZW5jZUl0ZXJhdG9yKGl0ZXJhYmxlKTtcblxuICB2bS5mcmFtZS5zZXRJdGVyYXRvcihpdGVyYXRvcik7XG4gIHZtLmZyYW1lLnNldENvbmRpdGlvbihuZXcgSXRlcmFibGVQcmVzZW5jZVJlZmVyZW5jZShpdGVyYXRvci5hcnRpZmFjdHMpKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRW50ZXJMaXN0LCAodm0sIHsgb3AxOiBfc2xpY2UgfSkgPT4ge1xuICB2bS5lbnRlckxpc3Qodm0uY29uc3RhbnRzLmdldFNsaWNlKF9zbGljZSkpO1xufSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5FeGl0TGlzdCwgdm0gPT4gdm0uZXhpdExpc3QoKSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5FbnRlcldpdGhLZXksICh2bSwgeyBvcDI6IF9zbGljZSB9KSA9PiB7XG4gIGxldCBrZXkgPSBleHBlY3Qodm0uZnJhbWUuZ2V0S2V5KCksICdFbnRlcldpdGhLZXlPcGNvZGUgZXhwZWN0cyBhIHBvcHVsYXRlZCBrZXkgcmVnaXN0ZXInKTtcbiAgbGV0IHNsaWNlID0gdm0uY29uc3RhbnRzLmdldFNsaWNlKF9zbGljZSk7XG4gIHZtLmVudGVyV2l0aEtleShrZXksIHNsaWNlKTtcbn0pO1xuXG5jb25zdCBUUlVFX1JFRiA9IG5ldyBDb25zdFJlZmVyZW5jZSh0cnVlKTtcbmNvbnN0IEZBTFNFX1JFRiA9IG5ldyBDb25zdFJlZmVyZW5jZShmYWxzZSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5OZXh0SXRlciwgKHZtLCB7IG9wMTogZW5kIH0pID0+IHtcbiAgbGV0IGl0ZW0gPSB2bS5mcmFtZS5nZXRJdGVyYXRvcigpLm5leHQoKTtcblxuICBpZiAoaXRlbSkge1xuICAgIHZtLmZyYW1lLnNldENvbmRpdGlvbihUUlVFX1JFRik7XG4gICAgdm0uZnJhbWUuc2V0S2V5KGl0ZW0ua2V5KTtcbiAgICB2bS5mcmFtZS5zZXRPcGVyYW5kKGl0ZW0udmFsdWUpO1xuICAgIHZtLmZyYW1lLnNldEFyZ3MoRXZhbHVhdGVkQXJncy5wb3NpdGlvbmFsKFtpdGVtLnZhbHVlLCBpdGVtLm1lbW9dKSk7XG4gIH0gZWxzZSB7XG4gICAgdm0uZnJhbWUuc2V0Q29uZGl0aW9uKEZBTFNFX1JFRik7XG4gICAgdm0uZ290byhlbmQpO1xuICB9XG59KTtcbiJdfQ==