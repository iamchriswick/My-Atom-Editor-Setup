enifed('@glimmer/runtime/lib/compiler', ['exports', '@glimmer/runtime/lib/compiled/blocks', '@glimmer/runtime/lib/scanner', '@glimmer/runtime/lib/syntax/functions', '@glimmer/runtime/lib/compiled/opcodes/builder'], function (exports, _glimmerRuntimeLibCompiledBlocks, _glimmerRuntimeLibScanner, _glimmerRuntimeLibSyntaxFunctions, _glimmerRuntimeLibCompiledOpcodesBuilder) {
    'use strict';

    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

    exports.compileLayout = compileLayout;
    exports.builder = builder;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function compileLayout(compilable, env) {
        var builder = new ComponentLayoutBuilder(env);
        compilable.compile(builder);
        return builder.compile();
    }

    var ComponentLayoutBuilder = (function () {
        function ComponentLayoutBuilder(env) {
            _classCallCheck(this, ComponentLayoutBuilder);

            this.env = env;
        }

        ComponentLayoutBuilder.prototype.wrapLayout = function wrapLayout(layout) {
            this.inner = new WrappedBuilder(this.env, layout);
        };

        ComponentLayoutBuilder.prototype.fromLayout = function fromLayout(layout) {
            this.inner = new UnwrappedBuilder(this.env, layout);
        };

        ComponentLayoutBuilder.prototype.compile = function compile() {
            return this.inner.compile();
        };

        _createClass(ComponentLayoutBuilder, [{
            key: 'tag',
            get: function () {
                return this.inner.tag;
            }
        }, {
            key: 'attrs',
            get: function () {
                return this.inner.attrs;
            }
        }]);

        return ComponentLayoutBuilder;
    })();

    var WrappedBuilder = (function () {
        function WrappedBuilder(env, layout) {
            _classCallCheck(this, WrappedBuilder);

            this.env = env;
            this.layout = layout;
            this.tag = new ComponentTagBuilder();
            this.attrs = new ComponentAttrsBuilder();
        }

        WrappedBuilder.prototype.compile = function compile() {
            //========DYNAMIC
            //        PutValue(TagExpr)
            //        Test
            //        JumpUnless(BODY)
            //        OpenDynamicPrimitiveElement
            //        DidCreateElement
            //        ...attr statements...
            //        FlushElement
            // BODY:  Noop
            //        ...body statements...
            //        PutValue(TagExpr)
            //        Test
            //        JumpUnless(END)
            //        CloseElement
            // END:   Noop
            //        DidRenderLayout
            //        Exit
            //
            //========STATIC
            //        OpenPrimitiveElementOpcode
            //        DidCreateElement
            //        ...attr statements...
            //        FlushElement
            //        ...body statements...
            //        CloseElement
            //        DidRenderLayout
            //        Exit
            var env = this.env;
            var layout = this.layout;

            var symbolTable = layout.symbolTable;
            var b = builder(env, layout.symbolTable);
            b.startLabels();
            var dynamicTag = this.tag.getDynamic();
            var staticTag = undefined;
            if (dynamicTag) {
                b.putValue(dynamicTag);
                b.test('simple');
                b.jumpUnless('BODY');
                b.openDynamicPrimitiveElement();
                b.didCreateElement();
                this.attrs['buffer'].forEach(function (statement) {
                    return _glimmerRuntimeLibScanner.compileStatement(statement, b);
                });
                b.flushElement();
                b.label('BODY');
            } else if (staticTag = this.tag.getStatic()) {
                b.openPrimitiveElement(staticTag);
                b.didCreateElement();
                this.attrs['buffer'].forEach(function (statement) {
                    return _glimmerRuntimeLibScanner.compileStatement(statement, b);
                });
                b.flushElement();
            }
            b.preludeForLayout(layout);
            layout.statements.forEach(function (statement) {
                return _glimmerRuntimeLibScanner.compileStatement(statement, b);
            });
            if (dynamicTag) {
                b.putValue(dynamicTag);
                b.test('simple');
                b.jumpUnless('END');
                b.closeElement();
                b.label('END');
            } else if (staticTag) {
                b.closeElement();
            }
            b.didRenderLayout();
            b.stopLabels();
            return new _glimmerRuntimeLibCompiledBlocks.CompiledProgram(b.toSlice(), symbolTable.size);
        };

        return WrappedBuilder;
    })();

    function isOpenElement(value) {
        var type = value[0];
        return type === 'open-element' || type === 'open-primitive-element';
    }

    var UnwrappedBuilder = (function () {
        function UnwrappedBuilder(env, layout) {
            _classCallCheck(this, UnwrappedBuilder);

            this.env = env;
            this.layout = layout;
            this.attrs = new ComponentAttrsBuilder();
        }

        UnwrappedBuilder.prototype.compile = function compile() {
            var env = this.env;
            var layout = this.layout;

            var b = builder(env, layout.symbolTable);
            b.startLabels();
            b.preludeForLayout(layout);
            var attrs = this.attrs['buffer'];
            var attrsInserted = false;
            for (var i = 0; i < layout.statements.length; i++) {
                var statement = layout.statements[i];
                if (!attrsInserted && isOpenElement(statement)) {
                    b.openComponentElement(statement[1]);
                    b.didCreateElement();
                    b.shadowAttributes();
                    attrs.forEach(function (statement) {
                        return _glimmerRuntimeLibScanner.compileStatement(statement, b);
                    });
                    attrsInserted = true;
                } else {
                    _glimmerRuntimeLibScanner.compileStatement(statement, b);
                }
            }
            b.didRenderLayout();
            b.stopLabels();
            return new _glimmerRuntimeLibCompiledBlocks.CompiledProgram(b.toSlice(), layout.symbolTable.size);
        };

        _createClass(UnwrappedBuilder, [{
            key: 'tag',
            get: function () {
                throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');
            }
        }]);

        return UnwrappedBuilder;
    })();

    var ComponentTagBuilder = (function () {
        function ComponentTagBuilder() {
            _classCallCheck(this, ComponentTagBuilder);

            this.isDynamic = null;
            this.isStatic = null;
            this.staticTagName = null;
            this.dynamicTagName = null;
        }

        ComponentTagBuilder.prototype.getDynamic = function getDynamic() {
            if (this.isDynamic) {
                return this.dynamicTagName;
            }
        };

        ComponentTagBuilder.prototype.getStatic = function getStatic() {
            if (this.isStatic) {
                return this.staticTagName;
            }
        };

        ComponentTagBuilder.prototype.static = function _static(tagName) {
            this.isStatic = true;
            this.staticTagName = tagName;
        };

        ComponentTagBuilder.prototype.dynamic = function dynamic(tagName) {
            this.isDynamic = true;
            this.dynamicTagName = ['function', tagName];
        };

        return ComponentTagBuilder;
    })();

    var ComponentAttrsBuilder = (function () {
        function ComponentAttrsBuilder() {
            _classCallCheck(this, ComponentAttrsBuilder);

            this.buffer = [];
        }

        ComponentAttrsBuilder.prototype.static = function _static(name, value) {
            this.buffer.push(['static-attr', name, value, null]);
        };

        ComponentAttrsBuilder.prototype.dynamic = function dynamic(name, value) {
            this.buffer.push(['dynamic-attr', name, ['function', value], null]);
        };

        return ComponentAttrsBuilder;
    })();

    var ComponentBuilder = (function () {
        function ComponentBuilder(builder) {
            _classCallCheck(this, ComponentBuilder);

            this.builder = builder;
            this.env = builder.env;
        }

        ComponentBuilder.prototype.static = function _static(definition, args, _symbolTable, shadow) {
            this.builder.unit(function (b) {
                b.putComponentDefinition(definition);
                b.openComponent(_glimmerRuntimeLibSyntaxFunctions.compileBaselineArgs(args, b), shadow);
                b.closeComponent();
            });
        };

        ComponentBuilder.prototype.dynamic = function dynamic(definitionArgs, definition, args, _symbolTable, shadow) {
            this.builder.unit(function (b) {
                b.putArgs(_glimmerRuntimeLibSyntaxFunctions.compileArgs(definitionArgs[0], definitionArgs[1], b));
                b.putValue(['function', definition]);
                b.test('simple');
                b.enter('BEGIN', 'END');
                b.label('BEGIN');
                b.jumpUnless('END');
                b.putDynamicComponentDefinition();
                b.openComponent(_glimmerRuntimeLibSyntaxFunctions.compileBaselineArgs(args, b), shadow);
                b.closeComponent();
                b.label('END');
                b.exit();
            });
        };

        return ComponentBuilder;
    })();

    exports.ComponentBuilder = ComponentBuilder;

    function builder(env, symbolTable) {
        return new _glimmerRuntimeLibCompiledOpcodesBuilder.default(symbolTable, env);
    }
});
//# sourceMappingURL=data:application/json;base64,