enifed('@glimmer/runtime/lib/compiled/expressions/has-block', ['exports', '@glimmer/runtime/lib/compiled/expressions', '@glimmer/runtime/lib/references'], function (exports, _glimmerRuntimeLibCompiledExpressions, _glimmerRuntimeLibReferences) {
    'use strict';

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    var CompiledHasBlock = (function (_CompiledExpression) {
        _inherits(CompiledHasBlock, _CompiledExpression);

        function CompiledHasBlock(inner) {
            _classCallCheck(this, CompiledHasBlock);

            _CompiledExpression.call(this);
            this.inner = inner;
            this.type = "has-block";
        }

        CompiledHasBlock.prototype.evaluate = function evaluate(vm) {
            var block = this.inner.evaluate(vm);
            return _glimmerRuntimeLibReferences.PrimitiveReference.create(!!block);
        };

        CompiledHasBlock.prototype.toJSON = function toJSON() {
            return 'has-block(' + this.inner.toJSON() + ')';
        };

        return CompiledHasBlock;
    })(_glimmerRuntimeLibCompiledExpressions.CompiledExpression);

    exports.default = CompiledHasBlock;

    var CompiledHasBlockParams = (function (_CompiledExpression2) {
        _inherits(CompiledHasBlockParams, _CompiledExpression2);

        function CompiledHasBlockParams(inner) {
            _classCallCheck(this, CompiledHasBlockParams);

            _CompiledExpression2.call(this);
            this.inner = inner;
            this.type = "has-block-params";
        }

        CompiledHasBlockParams.prototype.evaluate = function evaluate(vm) {
            var block = this.inner.evaluate(vm);
            var hasLocals = block && block.symbolTable.getSymbols().locals;
            return _glimmerRuntimeLibReferences.PrimitiveReference.create(!!hasLocals);
        };

        CompiledHasBlockParams.prototype.toJSON = function toJSON() {
            return 'has-block-params(' + this.inner.toJSON() + ')';
        };

        return CompiledHasBlockParams;
    })(_glimmerRuntimeLibCompiledExpressions.CompiledExpression);

    exports.CompiledHasBlockParams = CompiledHasBlockParams;

    var CompiledGetBlockBySymbol = (function () {
        function CompiledGetBlockBySymbol(symbol, debug) {
            _classCallCheck(this, CompiledGetBlockBySymbol);

            this.symbol = symbol;
            this.debug = debug;
        }

        CompiledGetBlockBySymbol.prototype.evaluate = function evaluate(vm) {
            return vm.scope().getBlock(this.symbol);
        };

        CompiledGetBlockBySymbol.prototype.toJSON = function toJSON() {
            return 'get-block($' + this.symbol + '(' + this.debug + '))';
        };

        return CompiledGetBlockBySymbol;
    })();

    exports.CompiledGetBlockBySymbol = CompiledGetBlockBySymbol;

    var CompiledInPartialGetBlock = (function () {
        function CompiledInPartialGetBlock(symbol, name) {
            _classCallCheck(this, CompiledInPartialGetBlock);

            this.symbol = symbol;
            this.name = name;
        }

        CompiledInPartialGetBlock.prototype.evaluate = function evaluate(vm) {
            var symbol = this.symbol;
            var name = this.name;

            var args = vm.scope().getPartialArgs(symbol);
            return args.blocks[name];
        };

        CompiledInPartialGetBlock.prototype.toJSON = function toJSON() {
            return 'get-block($' + this.symbol + '($ARGS).' + this.name + '))';
        };

        return CompiledInPartialGetBlock;
    })();

    exports.CompiledInPartialGetBlock = CompiledInPartialGetBlock;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2hhcy1ibG9jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7UUFPYyxnQkFBd0I7a0JBQXhCLGdCQUF3Qjs7QUFHcEMsaUJBSFksZ0JBQXdCLENBR2hCLEtBQXVCLEVBQUE7a0NBSC9CLGdCQUF3Qjs7QUFJbEMsMENBQU8sQ0FBQztBQURVLGdCQUFBLENBQUEsS0FBSyxHQUFMLEtBQUssQ0FBa0I7QUFGcEMsZ0JBQUEsQ0FBQSxJQUFJLEdBQUcsV0FBVyxDQUFDO1NBSXpCOztBQUxXLHdCQUF3QixXQU9wQyxRQUFRLEdBQUEsa0JBQUMsRUFBTSxFQUFBO0FBQ2IsZ0JBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLG1CQUFPLDZCQVhGLGtCQUFrQixDQVdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0M7O0FBVlcsd0JBQXdCLFdBWXBDLE1BQU0sR0FBQSxrQkFBQTtBQUNKLGtDQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFJO1NBQzVDOztlQWRXLGdCQUF3Qjs2Q0FIN0Isa0JBQWtCOztzQkFHYixnQkFBd0I7O1FBaUJoQyxzQkFBOEI7a0JBQTlCLHNCQUE4Qjs7QUFHbEMsaUJBSEksc0JBQThCLENBR2QsS0FBdUIsRUFBQTtrQ0FIdkMsc0JBQThCOztBQUloQywyQ0FBTyxDQUFDO0FBRFUsZ0JBQUEsQ0FBQSxLQUFLLEdBQUwsS0FBSyxDQUFrQjtBQUZwQyxnQkFBQSxDQUFBLElBQUksR0FBRyxrQkFBa0IsQ0FBQztTQUloQzs7QUFMRyw4QkFBOEIsV0FPbEMsUUFBUSxHQUFBLGtCQUFDLEVBQU0sRUFBQTtBQUNiLGdCQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNwQyxnQkFBSSxTQUFTLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDO0FBQy9ELG1CQUFPLDZCQTdCRixrQkFBa0IsQ0E2QkcsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMvQzs7QUFYRyw4QkFBOEIsV0FhbEMsTUFBTSxHQUFBLGtCQUFBO0FBQ0oseUNBQTJCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE9BQUk7U0FDbkQ7O2VBZkcsc0JBQThCOzZDQXBCM0Isa0JBQWtCOzs7O1FBMkNyQix3QkFBQTtBQUNKLGlCQURJLHdCQUFBLENBQ2dCLE1BQWMsRUFBVSxLQUFhLEVBQUE7a0NBRHJELHdCQUFBOztBQUNnQixnQkFBQSxDQUFBLE1BQU0sR0FBTixNQUFNLENBQVE7QUFBVSxnQkFBQSxDQUFBLEtBQUssR0FBTCxLQUFLLENBQVE7U0FDeEQ7O0FBRkcsZ0NBQUEsV0FJSixRQUFRLEdBQUEsa0JBQUMsRUFBTSxFQUFBO0FBQ2IsbUJBQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDekM7O0FBTkcsZ0NBQUEsV0FRSixNQUFNLEdBQUEsa0JBQUE7QUFDSixtQ0FBcUIsSUFBSSxDQUFDLE1BQU0sU0FBSSxJQUFJLENBQUMsS0FBSyxRQUFLO1NBQ3BEOztlQVZHLHdCQUFBOzs7OztRQWFBLHlCQUFBO0FBQ0osaUJBREkseUJBQUEsQ0FDZ0IsTUFBYyxFQUFVLElBQVksRUFBQTtrQ0FEcEQseUJBQUE7O0FBQ2dCLGdCQUFBLENBQUEsTUFBTSxHQUFOLE1BQU0sQ0FBUTtBQUFVLGdCQUFBLENBQUEsSUFBSSxHQUFKLElBQUksQ0FBUTtTQUN2RDs7QUFGRyxpQ0FBQSxXQUlKLFFBQVEsR0FBQSxrQkFBQyxFQUFNLEVBQUE7Z0JBQ1AsTUFBTSxHQUFXLElBQUksQ0FBckIsTUFBTTtnQkFBRSxJQUFJLEdBQUssSUFBSSxDQUFiLElBQUk7O0FBQ2xCLGdCQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLG1CQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUI7O0FBUkcsaUNBQUEsV0FVSixNQUFNLEdBQUEsa0JBQUE7QUFDSixtQ0FBcUIsSUFBSSxDQUFDLE1BQU0sZ0JBQVcsSUFBSSxDQUFDLElBQUksUUFBSztTQUMxRDs7ZUFaRyx5QkFBQSIsImZpbGUiOiJoYXMtYmxvY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXRoUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IFZNIGZyb20gJy4uLy4uL3ZtL2FwcGVuZCc7XG5pbXBvcnQgeyBJbmxpbmVCbG9jayB9IGZyb20gJy4uLy4uL3NjYW5uZXInO1xuaW1wb3J0IHsgQ29tcGlsZWRFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMnO1xuaW1wb3J0IHsgUHJpbWl0aXZlUmVmZXJlbmNlIH0gZnJvbSAnLi4vLi4vcmVmZXJlbmNlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBpbGVkSGFzQmxvY2sgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248Ym9vbGVhbj4ge1xuICBwdWJsaWMgdHlwZSA9IFwiaGFzLWJsb2NrXCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbm5lcjogQ29tcGlsZWRHZXRCbG9jaykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBQYXRoUmVmZXJlbmNlPGJvb2xlYW4+IHtcbiAgICBsZXQgYmxvY2sgPSB0aGlzLmlubmVyLmV2YWx1YXRlKHZtKTtcbiAgICByZXR1cm4gUHJpbWl0aXZlUmVmZXJlbmNlLmNyZWF0ZSghIWJsb2NrKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgaGFzLWJsb2NrKCR7dGhpcy5pbm5lci50b0pTT04oKX0pYDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tcGlsZWRIYXNCbG9ja1BhcmFtcyBleHRlbmRzIENvbXBpbGVkRXhwcmVzc2lvbjxib29sZWFuPiB7XG4gIHB1YmxpYyB0eXBlID0gXCJoYXMtYmxvY2stcGFyYW1zXCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbm5lcjogQ29tcGlsZWRHZXRCbG9jaykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBQYXRoUmVmZXJlbmNlPGJvb2xlYW4+IHtcbiAgICBsZXQgYmxvY2sgPSB0aGlzLmlubmVyLmV2YWx1YXRlKHZtKTtcbiAgICBsZXQgaGFzTG9jYWxzID0gYmxvY2sgJiYgYmxvY2suc3ltYm9sVGFibGUuZ2V0U3ltYm9scygpLmxvY2FscztcbiAgICByZXR1cm4gUHJpbWl0aXZlUmVmZXJlbmNlLmNyZWF0ZSghIWhhc0xvY2Fscyk7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGhhcy1ibG9jay1wYXJhbXMoJHt0aGlzLmlubmVyLnRvSlNPTigpfSlgO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRHZXRCbG9jayB7XG4gIGV2YWx1YXRlKHZtOiBWTSk6IE9wdGlvbjxJbmxpbmVCbG9jaz47XG4gIHRvSlNPTigpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZEdldEJsb2NrQnlTeW1ib2wgaW1wbGVtZW50cyBDb21waWxlZEdldEJsb2NrIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzeW1ib2w6IG51bWJlciwgcHJpdmF0ZSBkZWJ1Zzogc3RyaW5nKSB7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBJbmxpbmVCbG9jayB7XG4gICAgcmV0dXJuIHZtLnNjb3BlKCkuZ2V0QmxvY2sodGhpcy5zeW1ib2wpO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBnZXQtYmxvY2soJCR7dGhpcy5zeW1ib2x9KCR7dGhpcy5kZWJ1Z30pKWA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkSW5QYXJ0aWFsR2V0QmxvY2sgaW1wbGVtZW50cyBDb21waWxlZEdldEJsb2NrIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzeW1ib2w6IG51bWJlciwgcHJpdmF0ZSBuYW1lOiBzdHJpbmcpIHtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IElubGluZUJsb2NrIHtcbiAgICBsZXQgeyBzeW1ib2wsIG5hbWUgfSA9IHRoaXM7XG4gICAgbGV0IGFyZ3MgPSB2bS5zY29wZSgpLmdldFBhcnRpYWxBcmdzKHN5bWJvbCk7XG4gICAgcmV0dXJuIGFyZ3MuYmxvY2tzW25hbWVdO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBnZXQtYmxvY2soJCR7dGhpcy5zeW1ib2x9KCRBUkdTKS4ke3RoaXMubmFtZX0pKWA7XG4gIH1cbn1cbiJdfQ==