enifed('@glimmer/runtime/lib/compiled/expressions/args', ['exports', '@glimmer/runtime/lib/compiled/expressions/positional-args', '@glimmer/runtime/lib/compiled/expressions/named-args', '@glimmer/reference'], function (exports, _glimmerRuntimeLibCompiledExpressionsPositionalArgs, _glimmerRuntimeLibCompiledExpressionsNamedArgs, _glimmerReference) {
    'use strict';

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    exports.COMPILED_EMPTY_POSITIONAL_ARGS = _glimmerRuntimeLibCompiledExpressionsPositionalArgs.COMPILED_EMPTY_POSITIONAL_ARGS;
    exports.COMPILED_EMPTY_NAMED_ARGS = _glimmerRuntimeLibCompiledExpressionsNamedArgs.COMPILED_EMPTY_NAMED_ARGS;
    var EMPTY_BLOCKS = {
        default: null,
        inverse: null
    };
    exports.EMPTY_BLOCKS = EMPTY_BLOCKS;

    var CompiledArgs = (function () {
        function CompiledArgs(positional, named, blocks) {
            _classCallCheck(this, CompiledArgs);

            this.positional = positional;
            this.named = named;
            this.blocks = blocks;
            this.type = "compiled-args";
        }

        CompiledArgs.create = function create(positional, named, blocks) {
            if (positional === _glimmerRuntimeLibCompiledExpressionsPositionalArgs.COMPILED_EMPTY_POSITIONAL_ARGS && named === _glimmerRuntimeLibCompiledExpressionsNamedArgs.COMPILED_EMPTY_NAMED_ARGS && blocks === EMPTY_BLOCKS) {
                return this.empty();
            } else {
                return new this(positional, named, blocks);
            }
        };

        CompiledArgs.empty = function empty() {
            return COMPILED_EMPTY_ARGS;
        };

        CompiledArgs.prototype.evaluate = function evaluate(vm) {
            var positional = this.positional;
            var named = this.named;
            var blocks = this.blocks;

            return EvaluatedArgs.create(positional.evaluate(vm), named.evaluate(vm), blocks);
        };

        return CompiledArgs;
    })();

    exports.CompiledArgs = CompiledArgs;
    var COMPILED_EMPTY_ARGS = new ((function (_CompiledArgs) {
        _inherits(_class, _CompiledArgs);

        function _class() {
            _classCallCheck(this, _class);

            _CompiledArgs.call(this, _glimmerRuntimeLibCompiledExpressionsPositionalArgs.COMPILED_EMPTY_POSITIONAL_ARGS, _glimmerRuntimeLibCompiledExpressionsNamedArgs.COMPILED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS);
        }

        _class.prototype.evaluate = function evaluate(_vm) {
            return EMPTY_EVALUATED_ARGS;
        };

        return _class;
    })(CompiledArgs))();
    exports.COMPILED_EMPTY_ARGS = COMPILED_EMPTY_ARGS;

    var EvaluatedArgs = (function () {
        function EvaluatedArgs(positional, named, blocks) {
            _classCallCheck(this, EvaluatedArgs);

            this.positional = positional;
            this.named = named;
            this.blocks = blocks;
            this.tag = _glimmerReference.combineTagged([positional, named]);
        }

        EvaluatedArgs.empty = function empty() {
            return EMPTY_EVALUATED_ARGS;
        };

        EvaluatedArgs.create = function create(positional, named, blocks) {
            return new this(positional, named, blocks);
        };

        EvaluatedArgs.positional = function positional(values) {
            var blocks = arguments.length <= 1 || arguments[1] === undefined ? EMPTY_BLOCKS : arguments[1];

            return new this(_glimmerRuntimeLibCompiledExpressionsPositionalArgs.EvaluatedPositionalArgs.create(values), _glimmerRuntimeLibCompiledExpressionsNamedArgs.EVALUATED_EMPTY_NAMED_ARGS, blocks);
        };

        EvaluatedArgs.named = function named(map) {
            var blocks = arguments.length <= 1 || arguments[1] === undefined ? EMPTY_BLOCKS : arguments[1];

            return new this(_glimmerRuntimeLibCompiledExpressionsPositionalArgs.EVALUATED_EMPTY_POSITIONAL_ARGS, _glimmerRuntimeLibCompiledExpressionsNamedArgs.EvaluatedNamedArgs.create(map), blocks);
        };

        return EvaluatedArgs;
    })();

    exports.EvaluatedArgs = EvaluatedArgs;

    var EMPTY_EVALUATED_ARGS = new EvaluatedArgs(_glimmerRuntimeLibCompiledExpressionsPositionalArgs.EVALUATED_EMPTY_POSITIONAL_ARGS, _glimmerRuntimeLibCompiledExpressionsNamedArgs.EVALUATED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS);
    exports.CompiledPositionalArgs = _glimmerRuntimeLibCompiledExpressionsPositionalArgs.CompiledPositionalArgs;
    exports.EvaluatedPositionalArgs = _glimmerRuntimeLibCompiledExpressionsPositionalArgs.EvaluatedPositionalArgs;
    exports.CompiledNamedArgs = _glimmerRuntimeLibCompiledExpressionsNamedArgs.CompiledNamedArgs;
    exports.EvaluatedNamedArgs = _glimmerRuntimeLibCompiledExpressionsNamedArgs.EvaluatedNamedArgs;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2FyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1lBT1MsOEJBQThCLHVEQU45Qiw4QkFBOEI7WUFNRSx5QkFBeUIsa0RBTHpELHlCQUF5QjtBQVkzQixRQUFNLFlBQVksR0FBVztBQUNsQyxlQUFPLEVBQUUsSUFBSTtBQUNiLGVBQU8sRUFBRSxJQUFJO0tBQ2QsQ0FBQzs7O1FBRUksWUFBQTtBQWVKLGlCQWZJLFlBQUEsQ0FnQkssVUFBa0MsRUFDbEMsS0FBd0IsRUFDeEIsTUFBYyxFQUFBO2tDQWxCbkIsWUFBQTs7QUFnQkssZ0JBQUEsQ0FBQSxVQUFVLEdBQVYsVUFBVSxDQUF3QjtBQUNsQyxnQkFBQSxDQUFBLEtBQUssR0FBTCxLQUFLLENBQW1CO0FBQ3hCLGdCQUFBLENBQUEsTUFBTSxHQUFOLE1BQU0sQ0FBUTtBQUxoQixnQkFBQSxDQUFBLElBQUksR0FBRyxlQUFlLENBQUM7U0FPN0I7O0FBcEJHLG9CQUFBLENBQ0csTUFBTSxHQUFBLGdCQUFDLFVBQWtDLEVBQUUsS0FBd0IsRUFBRSxNQUFjLEVBQUE7QUFDeEYsZ0JBQUksVUFBVSx5REFwQlQsOEJBQThCLEFBb0JjLElBQUksS0FBSyxvREFuQnJELHlCQUF5QixBQW1CMEQsSUFBSSxNQUFNLEtBQUssWUFBWSxFQUFFO0FBQ25ILHVCQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNyQixNQUFNO0FBQ0wsdUJBQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQzthQUM1QztTQUNGOztBQVBHLG9CQUFBLENBU0csS0FBSyxHQUFBLGlCQUFBO0FBQ1YsbUJBQU8sbUJBQW1CLENBQUM7U0FDNUI7O0FBWEcsb0JBQUEsV0FzQkosUUFBUSxHQUFBLGtCQUFDLEVBQU0sRUFBQTtnQkFDUCxVQUFVLEdBQW9CLElBQUksQ0FBbEMsVUFBVTtnQkFBRSxLQUFLLEdBQWEsSUFBSSxDQUF0QixLQUFLO2dCQUFFLE1BQU0sR0FBSyxJQUFJLENBQWYsTUFBTTs7QUFDL0IsbUJBQU8sYUFBYSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDbEY7O2VBekJHLFlBQUE7Ozs7QUE0QkMsUUFBTSxtQkFBbUIsR0FBaUI7OztBQUMvQywwQkFBQTs7O0FBQ0UseUZBaERLLDhCQUE4QixpREFDOUIseUJBQXlCLEVBK0NtQyxZQUFZLENBQUMsQ0FBQztTQUNoRjs7eUJBRUQsUUFBUSxHQUFBLGtCQUFDLEdBQU8sRUFBQTtBQUNkLG1CQUFPLG9CQUFvQixDQUFDO1NBQzdCOzs7T0FQaUUsWUFBWSxJQVE5RSxDQUFDOzs7UUFFRyxhQUFBO0FBbUJKLGlCQW5CSSxhQUFBLENBb0JLLFVBQW1DLEVBQ25DLEtBQXlCLEVBQ3pCLE1BQWMsRUFBQTtrQ0F0Qm5CLGFBQUE7O0FBb0JLLGdCQUFBLENBQUEsVUFBVSxHQUFWLFVBQVUsQ0FBeUI7QUFDbkMsZ0JBQUEsQ0FBQSxLQUFLLEdBQUwsS0FBSyxDQUFvQjtBQUN6QixnQkFBQSxDQUFBLE1BQU0sR0FBTixNQUFNLENBQVE7QUFFckIsZ0JBQUksQ0FBQyxHQUFHLEdBQUcsa0JBOUVzQixhQUFhLENBOEVyQixDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQy9DOztBQXpCRyxxQkFBQSxDQUNHLEtBQUssR0FBQSxpQkFBQTtBQUNWLG1CQUFPLG9CQUFvQixDQUFDO1NBQzdCOztBQUhHLHFCQUFBLENBS0csTUFBTSxHQUFBLGdCQUFDLFVBQW1DLEVBQUUsS0FBeUIsRUFBRSxNQUFjLEVBQUE7QUFDMUYsbUJBQU8sSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztTQUM1Qzs7QUFQRyxxQkFBQSxDQVNHLFVBQVUsR0FBQSxvQkFBQyxNQUErQixFQUF1QjtnQkFBckIsTUFBTSx5REFBRyxZQUFZOztBQUN0RSxtQkFBTyxJQUFJLElBQUksQ0FBQyxvREFsRThFLHVCQUF1QixDQWtFN0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpREFqRXRCLDBCQUEwQixFQWlFMEIsTUFBTSxDQUFDLENBQUM7U0FDN0Y7O0FBWEcscUJBQUEsQ0FhRyxLQUFLLEdBQUEsZUFBQyxHQUFnQyxFQUF1QjtnQkFBckIsTUFBTSx5REFBRyxZQUFZOztBQUNsRSxtQkFBTyxJQUFJLElBQUkscURBdEVzQiwrQkFBK0IsRUFzRW5CLCtDQXJFOEIsa0JBQWtCLENBcUU3QixNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDMUY7O2VBZkcsYUFBQTs7Ozs7QUE0Qk4sUUFBTSxvQkFBb0IsR0FBRyxJQUFJLGFBQWEscURBcEZMLCtCQUErQixpREFDcEMsMEJBQTBCLEVBbUY4QyxZQUFZLENBQUMsQ0FBQztZQUVqSCxzQkFBc0IsdURBdEYyQyxzQkFBc0I7WUFzRi9ELHVCQUF1Qix1REF0RjBDLHVCQUF1QjtZQXNGL0QsaUJBQWlCLGtEQXJGWCxpQkFBaUI7WUFxRkosa0JBQWtCLGtEQXJGWixrQkFBa0IiLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWTSBmcm9tICcuLi8uLi92bS9hcHBlbmQnO1xuaW1wb3J0IHsgQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBFVkFMVUFURURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBDb21waWxlZFBvc2l0aW9uYWxBcmdzLCBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB9IGZyb20gJy4vcG9zaXRpb25hbC1hcmdzJztcbmltcG9ydCB7IENPTVBJTEVEX0VNUFRZX05BTUVEX0FSR1MsIEVWQUxVQVRFRF9FTVBUWV9OQU1FRF9BUkdTLCBDb21waWxlZE5hbWVkQXJncywgRXZhbHVhdGVkTmFtZWRBcmdzIH0gZnJvbSAnLi9uYW1lZC1hcmdzJztcbmltcG9ydCB7IFJldmlzaW9uVGFnLCBQYXRoUmVmZXJlbmNlLCBjb21iaW5lVGFnZ2VkIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IElubGluZUJsb2NrIH0gZnJvbSAnLi4vLi4vc2Nhbm5lcic7XG5pbXBvcnQgeyBPcGFxdWUsIE9wdGlvbiwgRGljdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgeyBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIENPTVBJTEVEX0VNUFRZX05BTUVEX0FSR1MgfTtcblxuZXhwb3J0IGludGVyZmFjZSBCbG9ja3Mge1xuICBkZWZhdWx0OiBPcHRpb248SW5saW5lQmxvY2s+O1xuICBpbnZlcnNlOiBPcHRpb248SW5saW5lQmxvY2s+O1xufVxuXG5leHBvcnQgY29uc3QgRU1QVFlfQkxPQ0tTOiBCbG9ja3MgPSB7XG4gIGRlZmF1bHQ6IG51bGwsXG4gIGludmVyc2U6IG51bGxcbn07XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZEFyZ3Mge1xuICBzdGF0aWMgY3JlYXRlKHBvc2l0aW9uYWw6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsIG5hbWVkOiBDb21waWxlZE5hbWVkQXJncywgYmxvY2tzOiBCbG9ja3MpOiBDb21waWxlZEFyZ3Mge1xuICAgIGlmIChwb3NpdGlvbmFsID09PSBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MgJiYgbmFtZWQgPT09IENPTVBJTEVEX0VNUFRZX05BTUVEX0FSR1MgJiYgYmxvY2tzID09PSBFTVBUWV9CTE9DS1MpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtcHR5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyhwb3NpdGlvbmFsLCBuYW1lZCwgYmxvY2tzKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZW1wdHkoKTogQ29tcGlsZWRBcmdzIHtcbiAgICByZXR1cm4gQ09NUElMRURfRU1QVFlfQVJHUztcbiAgfVxuXG4gIHB1YmxpYyB0eXBlID0gXCJjb21waWxlZC1hcmdzXCI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBvc2l0aW9uYWw6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsXG4gICAgcHVibGljIG5hbWVkOiBDb21waWxlZE5hbWVkQXJncyxcbiAgICBwdWJsaWMgYmxvY2tzOiBCbG9ja3NcbiAgKSB7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBFdmFsdWF0ZWRBcmdzIHtcbiAgICBsZXQgeyBwb3NpdGlvbmFsLCBuYW1lZCwgYmxvY2tzIH0gPSB0aGlzO1xuICAgIHJldHVybiBFdmFsdWF0ZWRBcmdzLmNyZWF0ZShwb3NpdGlvbmFsLmV2YWx1YXRlKHZtKSwgbmFtZWQuZXZhbHVhdGUodm0pLCBibG9ja3MpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01QSUxFRF9FTVBUWV9BUkdTOiBDb21waWxlZEFyZ3MgPSBuZXcgKGNsYXNzIGV4dGVuZHMgQ29tcGlsZWRBcmdzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTLCBFTVBUWV9CTE9DS1MpO1xuICB9XG5cbiAgZXZhbHVhdGUoX3ZtOiBWTSk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBFTVBUWV9FVkFMVUFURURfQVJHUztcbiAgfVxufSk7XG5cbmV4cG9ydCBjbGFzcyBFdmFsdWF0ZWRBcmdzIHtcbiAgc3RhdGljIGVtcHR5KCk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBFTVBUWV9FVkFMVUFURURfQVJHUztcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUocG9zaXRpb25hbDogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3MsIG5hbWVkOiBFdmFsdWF0ZWROYW1lZEFyZ3MsIGJsb2NrczogQmxvY2tzKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKHBvc2l0aW9uYWwsIG5hbWVkLCBibG9ja3MpO1xuICB9XG5cbiAgc3RhdGljIHBvc2l0aW9uYWwodmFsdWVzOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT5bXSwgYmxvY2tzID0gRU1QVFlfQkxPQ0tTKTogRXZhbHVhdGVkQXJncyB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzLmNyZWF0ZSh2YWx1ZXMpLCBFVkFMVUFURURfRU1QVFlfTkFNRURfQVJHUywgYmxvY2tzKTtcbiAgfVxuXG4gIHN0YXRpYyBuYW1lZChtYXA6IERpY3Q8UGF0aFJlZmVyZW5jZTxPcGFxdWU+PiwgYmxvY2tzID0gRU1QVFlfQkxPQ0tTKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIEV2YWx1YXRlZE5hbWVkQXJncy5jcmVhdGUobWFwKSwgYmxvY2tzKTtcbiAgfVxuXG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwb3NpdGlvbmFsOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyxcbiAgICBwdWJsaWMgbmFtZWQ6IEV2YWx1YXRlZE5hbWVkQXJncyxcbiAgICBwdWJsaWMgYmxvY2tzOiBCbG9ja3NcbiAgKSB7XG4gICAgdGhpcy50YWcgPSBjb21iaW5lVGFnZ2VkKFtwb3NpdGlvbmFsLCBuYW1lZF0pO1xuICB9XG59XG5cbmNvbnN0IEVNUFRZX0VWQUxVQVRFRF9BUkdTID0gbmV3IEV2YWx1YXRlZEFyZ3MoRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUywgRVZBTFVBVEVEX0VNUFRZX05BTUVEX0FSR1MsIEVNUFRZX0JMT0NLUyk7XG5cbmV4cG9ydCB7IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MsIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzLCBDb21waWxlZE5hbWVkQXJncywgRXZhbHVhdGVkTmFtZWRBcmdzIH07XG4iXX0=