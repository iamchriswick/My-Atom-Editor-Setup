enifed('@glimmer/runtime/lib/vm/frame', ['exports', '@glimmer/util'], function (exports, _glimmerUtil) {
    'use strict';

    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var CapturedFrame = function CapturedFrame(operand, args, condition) {
        _classCallCheck(this, CapturedFrame);

        this.operand = operand;
        this.args = args;
        this.condition = condition;
    };

    exports.CapturedFrame = CapturedFrame;

    var Frame = (function () {
        function Frame(ops) {
            var component = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
            var manager = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
            var shadow = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

            _classCallCheck(this, Frame);

            this.ops = ops;
            this.component = component;
            this.manager = manager;
            this.shadow = shadow;
            this.operand = null;
            this.immediate = null;
            this.args = null;
            this.callerScope = null;
            this.blocks = null;
            this.condition = null;
            this.iterator = null;
            this.key = null;
            this.ip = ops[0];
        }

        Frame.prototype.capture = function capture() {
            return new CapturedFrame(this.operand, this.args, this.condition);
        };

        Frame.prototype.restore = function restore(frame) {
            this.operand = frame['operand'];
            this.args = frame['args'];
            this.condition = frame['condition'];
        };

        return Frame;
    })();

    var FrameStack = (function () {
        function FrameStack() {
            _classCallCheck(this, FrameStack);

            this.frames = [];
            this.frame = null;
        }

        FrameStack.prototype.push = function push(ops) {
            var component = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
            var manager = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
            var shadow = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];

            var frame = this.frame === null ? this.frame = 0 : ++this.frame;
            if (this.frames.length <= frame) {
                this.frames.push(null);
            }
            this.frames[frame] = new Frame(ops, component, manager, shadow);
        };

        FrameStack.prototype.pop = function pop() {
            var frames = this.frames;
            var frame = this.frame;

            frames[_glimmerUtil.expect(frame, 'only pop after pushing')] = null;
            this.frame = frame === 0 ? null : frame - 1;
        };

        FrameStack.prototype.capture = function capture() {
            return this.currentFrame.capture();
        };

        FrameStack.prototype.restore = function restore(frame) {
            this.currentFrame.restore(frame);
        };

        FrameStack.prototype.getOps = function getOps() {
            return this.currentFrame.ops;
        };

        FrameStack.prototype.getCurrent = function getCurrent() {
            return this.currentFrame.ip;
        };

        FrameStack.prototype.setCurrent = function setCurrent(ip) {
            return this.currentFrame.ip = ip;
        };

        FrameStack.prototype.getOperand = function getOperand() {
            return _glimmerUtil.unwrap(this.currentFrame.operand);
        };

        FrameStack.prototype.setOperand = function setOperand(operand) {
            return this.currentFrame.operand = operand;
        };

        FrameStack.prototype.getImmediate = function getImmediate() {
            return this.currentFrame.immediate;
        };

        FrameStack.prototype.setImmediate = function setImmediate(value) {
            return this.currentFrame.immediate = value;
        };

        // FIXME: These options are required in practice by the existing code, but
        // figure out why.

        FrameStack.prototype.getArgs = function getArgs() {
            return this.currentFrame.args;
        };

        FrameStack.prototype.setArgs = function setArgs(args) {
            return this.currentFrame.args = args;
        };

        FrameStack.prototype.getCondition = function getCondition() {
            return _glimmerUtil.unwrap(this.currentFrame.condition);
        };

        FrameStack.prototype.setCondition = function setCondition(condition) {
            return this.currentFrame.condition = condition;
        };

        FrameStack.prototype.getIterator = function getIterator() {
            return _glimmerUtil.unwrap(this.currentFrame.iterator);
        };

        FrameStack.prototype.setIterator = function setIterator(iterator) {
            return this.currentFrame.iterator = iterator;
        };

        FrameStack.prototype.getKey = function getKey() {
            return this.currentFrame.key;
        };

        FrameStack.prototype.setKey = function setKey(key) {
            return this.currentFrame.key = key;
        };

        FrameStack.prototype.getBlocks = function getBlocks() {
            return _glimmerUtil.unwrap(this.currentFrame.blocks);
        };

        FrameStack.prototype.setBlocks = function setBlocks(blocks) {
            return this.currentFrame.blocks = blocks;
        };

        FrameStack.prototype.getCallerScope = function getCallerScope() {
            return _glimmerUtil.unwrap(this.currentFrame.callerScope);
        };

        FrameStack.prototype.setCallerScope = function setCallerScope(callerScope) {
            return this.currentFrame.callerScope = callerScope;
        };

        FrameStack.prototype.getComponent = function getComponent() {
            return _glimmerUtil.unwrap(this.currentFrame.component);
        };

        FrameStack.prototype.getManager = function getManager() {
            return _glimmerUtil.unwrap(this.currentFrame.manager);
        };

        FrameStack.prototype.getShadow = function getShadow() {
            return this.currentFrame.shadow;
        };

        FrameStack.prototype.goto = function goto(ip) {
            this.setCurrent(ip);
        };

        FrameStack.prototype.hasOpcodes = function hasOpcodes() {
            return this.frame !== null;
        };

        FrameStack.prototype.nextStatement = function nextStatement(env) {
            var ip = this.frames[_glimmerUtil.unwrap(this.frame)].ip;
            var ops = this.getOps();
            if (ip <= ops[1]) {
                var program = env.program;
                this.setCurrent(ip + 4);
                return program.opcode(ip);
            } else {
                this.pop();
                return null;
            }
        };

        _createClass(FrameStack, [{
            key: 'currentFrame',
            get: function () {
                return this.frames[_glimmerUtil.unwrap(this.frame)];
            }
        }]);

        return FrameStack;
    })();

    exports.FrameStack = FrameStack;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3ZtL2ZyYW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7UUFRTSxhQUFBLEdBQ0osU0FESSxhQUFBLENBRUssT0FBbUMsRUFDbkMsSUFBMkIsRUFDM0IsU0FBcUMsRUFBQTs4QkFKMUMsYUFBQTs7QUFFSyxZQUFBLENBQUEsT0FBTyxHQUFQLE9BQU8sQ0FBNEI7QUFDbkMsWUFBQSxDQUFBLElBQUksR0FBSixJQUFJLENBQXVCO0FBQzNCLFlBQUEsQ0FBQSxTQUFTLEdBQVQsU0FBUyxDQUE0QjtLQUMxQzs7OztRQUdOLEtBQUE7QUFXRSxpQkFYRixLQUFBLENBWVcsR0FBVSxFQUd3QjtnQkFGbEMsU0FBQSx5REFBdUIsSUFBSTtnQkFDM0IsT0FBQSx5REFBK0MsSUFBSTtnQkFDbkQsTUFBQSx5REFBOEIsSUFBSTs7a0NBZjdDLEtBQUE7O0FBWVcsZ0JBQUEsQ0FBQSxHQUFHLEdBQUgsR0FBRyxDQUFPO0FBQ1YsZ0JBQUEsQ0FBQSxTQUFTLEdBQVQsU0FBUyxDQUFrQjtBQUMzQixnQkFBQSxDQUFBLE9BQU8sR0FBUCxPQUFPLENBQTRDO0FBQ25ELGdCQUFBLENBQUEsTUFBTSxHQUFOLE1BQU0sQ0FBNEI7QUFiM0MsZ0JBQUEsQ0FBQSxPQUFPLEdBQStCLElBQUksQ0FBQztBQUMzQyxnQkFBQSxDQUFBLFNBQVMsR0FBUSxJQUFJLENBQUM7QUFDdEIsZ0JBQUEsQ0FBQSxJQUFJLEdBQTBCLElBQUksQ0FBQztBQUNuQyxnQkFBQSxDQUFBLFdBQVcsR0FBa0IsSUFBSSxDQUFDO0FBQ2xDLGdCQUFBLENBQUEsTUFBTSxHQUFtQixJQUFJLENBQUM7QUFDOUIsZ0JBQUEsQ0FBQSxTQUFTLEdBQStCLElBQUksQ0FBQztBQUM3QyxnQkFBQSxDQUFBLFFBQVEsR0FBOEIsSUFBSSxDQUFDO0FBQzNDLGdCQUFBLENBQUEsR0FBRyxHQUFtQixJQUFJLENBQUM7QUFRekIsZ0JBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxD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YixnQkFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNyQjs7QUE3SEcsa0JBQUEsV0ErSEosVUFBVSxHQUFBLHNCQUFBO0FBQ1IsbUJBQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7U0FDNUI7O0FBaklHLGtCQUFBLFdBbUlKLGFBQWEsR0FBQSx1QkFBQyxHQUFnQixFQUFBO0FBQzVCLGdCQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBdExELE1BQU0sQ0FzTEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzVDLGdCQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFFeEIsZ0JBQUksRUFBRSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNoQixvQkFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztBQUMxQixvQkFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDeEIsdUJBQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMzQixNQUFNO0FBQ0wsb0JBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNYLHVCQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7O3FCQS9JRyxVQUFBOztpQkFJb0IsWUFBQTtBQUN0Qix1QkFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBdkRDLE1BQU0sQ0F1REEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDeEM7OztlQU5HLFVBQUEiLCJmaWxlIjoiZnJhbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY29wZSwgRW52aXJvbm1lbnQsIE9wY29kZSB9IGZyb20gJy4uL2Vudmlyb25tZW50JztcbmltcG9ydCB7IFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSwgUmVmZXJlbmNlSXRlcmF0b3IgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgVFJVU1QsIE9wdGlvbiwgdW53cmFwLCBleHBlY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IElubGluZUJsb2NrIH0gZnJvbSAnLi4vc2Nhbm5lcic7XG5pbXBvcnQgeyBFdmFsdWF0ZWRBcmdzIH0gZnJvbSAnLi4vY29tcGlsZWQvZXhwcmVzc2lvbnMvYXJncyc7XG5pbXBvcnQgeyBTbGljZSB9IGZyb20gJy4uL29wY29kZXMnO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRNYW5hZ2VyIH0gZnJvbSAnLi4vY29tcG9uZW50L2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2FwdHVyZWRGcmFtZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBvcGVyYW5kOiBPcHRpb248UGF0aFJlZmVyZW5jZTxhbnk+PixcbiAgICBwdWJsaWMgYXJnczogT3B0aW9uPEV2YWx1YXRlZEFyZ3M+LFxuICAgIHB1YmxpYyBjb25kaXRpb246IE9wdGlvbjxSZWZlcmVuY2U8Ym9vbGVhbj4+XG4gICkge31cbn1cblxuY2xhc3MgRnJhbWUge1xuICBpcDogbnVtYmVyO1xuICBvcGVyYW5kOiBPcHRpb248UGF0aFJlZmVyZW5jZTxhbnk+PiA9IG51bGw7XG4gIGltbWVkaWF0ZTogYW55ID0gbnVsbDtcbiAgYXJnczogT3B0aW9uPEV2YWx1YXRlZEFyZ3M+ID0gbnVsbDtcbiAgY2FsbGVyU2NvcGU6IE9wdGlvbjxTY29wZT4gPSBudWxsO1xuICBibG9ja3M6IE9wdGlvbjxCbG9ja3M+ID0gbnVsbDtcbiAgY29uZGl0aW9uOiBPcHRpb248UmVmZXJlbmNlPGJvb2xlYW4+PiA9IG51bGw7XG4gIGl0ZXJhdG9yOiBPcHRpb248UmVmZXJlbmNlSXRlcmF0b3I+ID0gbnVsbDtcbiAga2V5OiBPcHRpb248c3RyaW5nPiA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG9wczogU2xpY2UsXG4gICAgcHVibGljIGNvbXBvbmVudDogQ29tcG9uZW50ID0gbnVsbCxcbiAgICBwdWJsaWMgbWFuYWdlcjogT3B0aW9uPENvbXBvbmVudE1hbmFnZXI8Q29tcG9uZW50Pj4gPSBudWxsLFxuICAgIHB1YmxpYyBzaGFkb3c6IE9wdGlvbjxJbmxpbmVCbG9jaz4gPSBudWxsXG4gICkge1xuICAgIHRoaXMuaXAgPSBvcHNbMF07XG4gIH1cblxuICBjYXB0dXJlKCk6IENhcHR1cmVkRnJhbWUge1xuICAgIHJldHVybiBuZXcgQ2FwdHVyZWRGcmFtZSh0aGlzLm9wZXJhbmQsIHRoaXMuYXJncywgdGhpcy5jb25kaXRpb24pO1xuICB9XG5cbiAgcmVzdG9yZShmcmFtZTogQ2FwdHVyZWRGcmFtZSkge1xuICAgIHRoaXMub3BlcmFuZCA9IGZyYW1lWydvcGVyYW5kJ107XG4gICAgdGhpcy5hcmdzID0gZnJhbWVbJ2FyZ3MnXTtcbiAgICB0aGlzLmNvbmRpdGlvbiA9IGZyYW1lWydjb25kaXRpb24nXTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJsb2NrcyB7XG4gIGRlZmF1bHQ6IE9wdGlvbjxJbmxpbmVCbG9jaz47XG4gIGludmVyc2U6IE9wdGlvbjxJbmxpbmVCbG9jaz47XG59XG5cbmV4cG9ydCBjbGFzcyBGcmFtZVN0YWNrIHtcbiAgcHJpdmF0ZSBmcmFtZXM6IEZyYW1lW10gPSBbXTtcbiAgcHJpdmF0ZSBmcmFtZTogT3B0aW9uPG51bWJlcj4gPSBudWxsO1xuXG4gIHByaXZhdGUgZ2V0IGN1cnJlbnRGcmFtZSgpOiBGcmFtZSB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVzW3Vud3JhcCh0aGlzLmZyYW1lKV07XG4gIH1cblxuICBwdXNoKG9wczogU2xpY2UsIGNvbXBvbmVudDogQ29tcG9uZW50ID0gbnVsbCwgbWFuYWdlcjogT3B0aW9uPENvbXBvbmVudE1hbmFnZXI8Q29tcG9uZW50Pj4gPSBudWxsLCBzaGFkb3c6IE9wdGlvbjxJbmxpbmVCbG9jaz4gPSBudWxsKSB7XG4gICAgbGV0IGZyYW1lID0gKHRoaXMuZnJhbWUgPT09IG51bGwpID8gKHRoaXMuZnJhbWUgPSAwKSA6ICsrdGhpcy5mcmFtZTtcblxuICAgIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggPD0gZnJhbWUpIHtcbiAgICAgIHRoaXMuZnJhbWVzLnB1c2gobnVsbCBhcyBUUlVTVDxGcmFtZSwgJ3RoZSBudWxsIGlzIHJlcGxhY2VkIG9uIHRoZSBuZXh0IGxpbmUnPik7XG4gICAgfVxuXG4gICAgdGhpcy5mcmFtZXNbZnJhbWVdID0gbmV3IEZyYW1lKG9wcywgY29tcG9uZW50LCBtYW5hZ2VyLCBzaGFkb3cpO1xuICB9XG5cbiAgcG9wKCkge1xuICAgIGxldCB7IGZyYW1lcywgZnJhbWUgfSA9IHRoaXM7XG4gICAgZnJhbWVzW2V4cGVjdChmcmFtZSwgJ29ubHkgcG9wIGFmdGVyIHB1c2hpbmcnKV0gPSBudWxsIGFzIFRSVVNUPEZyYW1lLCBcInRoaXMgZnJhbWUgd29uJ3QgYmUgYWNjZXNzZWQgYW55bW9yZVwiPjtcbiAgICB0aGlzLmZyYW1lID0gZnJhbWUgPT09IDAgPyBudWxsIDogZnJhbWUgLSAxO1xuICB9XG5cbiAgY2FwdHVyZSgpOiBDYXB0dXJlZEZyYW1lIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUuY2FwdHVyZSgpO1xuICB9XG5cbiAgcmVzdG9yZShmcmFtZTogQ2FwdHVyZWRGcmFtZSkge1xuICAgIHRoaXMuY3VycmVudEZyYW1lLnJlc3RvcmUoZnJhbWUpO1xuICB9XG5cbiAgZ2V0T3BzKCk6IFNsaWNlIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUub3BzO1xuICB9XG5cbiAgZ2V0Q3VycmVudCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGcmFtZS5pcDtcbiAgfVxuXG4gIHNldEN1cnJlbnQoaXA6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZyYW1lLmlwID0gaXA7XG4gIH1cblxuICBnZXRPcGVyYW5kPFQ+KCk6IFBhdGhSZWZlcmVuY2U8VD4ge1xuICAgIHJldHVybiB1bndyYXAodGhpcy5jdXJyZW50RnJhbWUub3BlcmFuZCk7XG4gIH1cblxuICBzZXRPcGVyYW5kPFQ+KG9wZXJhbmQ6IFBhdGhSZWZlcmVuY2U8VD4pOiBQYXRoUmVmZXJlbmNlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUub3BlcmFuZCA9IG9wZXJhbmQ7XG4gIH1cblxuICBnZXRJbW1lZGlhdGU8VD4oKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZyYW1lLmltbWVkaWF0ZTtcbiAgfVxuXG4gIHNldEltbWVkaWF0ZTxUPih2YWx1ZTogVCk6IFQge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGcmFtZS5pbW1lZGlhdGUgPSB2YWx1ZTtcbiAgfVxuXG4gIC8vIEZJWE1FOiBUaGVzZSBvcHRpb25zIGFyZSByZXF1aXJlZCBpbiBwcmFjdGljZSBieSB0aGUgZXhpc3RpbmcgY29kZSwgYnV0XG4gIC8vIGZpZ3VyZSBvdXQgd2h5LlxuXG4gIGdldEFyZ3MoKTogT3B0aW9uPEV2YWx1YXRlZEFyZ3M+IHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUuYXJncztcbiAgfVxuXG4gIHNldEFyZ3MoYXJnczogRXZhbHVhdGVkQXJncyk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGcmFtZS5hcmdzID0gYXJncztcbiAgfVxuXG4gIGdldENvbmRpdGlvbigpOiBSZWZlcmVuY2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB1bndyYXAodGhpcy5jdXJyZW50RnJhbWUuY29uZGl0aW9uKTtcbiAgfVxuXG4gIHNldENvbmRpdGlvbihjb25kaXRpb246IFJlZmVyZW5jZTxib29sZWFuPik6IFJlZmVyZW5jZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZyYW1lLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgfVxuXG4gIGdldEl0ZXJhdG9yKCk6IFJlZmVyZW5jZUl0ZXJhdG9yIHtcbiAgICByZXR1cm4gdW53cmFwKHRoaXMuY3VycmVudEZyYW1lLml0ZXJhdG9yKTtcbiAgfVxuXG4gIHNldEl0ZXJhdG9yKGl0ZXJhdG9yOiBSZWZlcmVuY2VJdGVyYXRvcik6IFJlZmVyZW5jZUl0ZXJhdG9yIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUuaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgfVxuXG4gIGdldEtleSgpOiBPcHRpb248c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZyYW1lLmtleTtcbiAgfVxuXG4gIHNldEtleShrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZyYW1lLmtleSA9IGtleTtcbiAgfVxuXG4gIGdldEJsb2NrcygpOiBCbG9ja3Mge1xuICAgIHJldHVybiB1bndyYXAodGhpcy5jdXJyZW50RnJhbWUuYmxvY2tzKTtcbiAgfVxuXG4gIHNldEJsb2NrcyhibG9ja3M6IEJsb2Nrcyk6IEJsb2NrcyB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEZyYW1lLmJsb2NrcyA9IGJsb2NrcztcbiAgfVxuXG4gIGdldENhbGxlclNjb3BlKCk6IFNjb3BlIHtcbiAgICByZXR1cm4gdW53cmFwKHRoaXMuY3VycmVudEZyYW1lLmNhbGxlclNjb3BlKTtcbiAgfVxuXG4gIHNldENhbGxlclNjb3BlKGNhbGxlclNjb3BlOiBTY29wZSk6IFNjb3BlIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUuY2FsbGVyU2NvcGUgPSBjYWxsZXJTY29wZTtcbiAgfVxuXG4gIGdldENvbXBvbmVudCgpOiBDb21wb25lbnQge1xuICAgIHJldHVybiB1bndyYXAodGhpcy5jdXJyZW50RnJhbWUuY29tcG9uZW50KTtcbiAgfVxuXG4gIGdldE1hbmFnZXIoKTogQ29tcG9uZW50TWFuYWdlcjxDb21wb25lbnQ+IHtcbiAgICByZXR1cm4gdW53cmFwKHRoaXMuY3VycmVudEZyYW1lLm1hbmFnZXIpO1xuICB9XG5cbiAgZ2V0U2hhZG93KCk6IE9wdGlvbjxJbmxpbmVCbG9jaz4ge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRGcmFtZS5zaGFkb3c7XG4gIH1cblxuICBnb3RvKGlwOiBudW1iZXIpIHtcbiAgICB0aGlzLnNldEN1cnJlbnQoaXApO1xuICB9XG5cbiAgaGFzT3Bjb2RlcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5mcmFtZSAhPT0gbnVsbDtcbiAgfVxuXG4gIG5leHRTdGF0ZW1lbnQoZW52OiBFbnZpcm9ubWVudCk6IE9wdGlvbjxPcGNvZGU+IHtcbiAgICBsZXQgaXAgPSB0aGlzLmZyYW1lc1t1bndyYXAodGhpcy5mcmFtZSldLmlwO1xuICAgIGxldCBvcHMgPSB0aGlzLmdldE9wcygpO1xuXG4gICAgaWYgKGlwIDw9IG9wc1sxXSkge1xuICAgICAgbGV0IHByb2dyYW0gPSBlbnYucHJvZ3JhbTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudChpcCArIDQpO1xuICAgICAgcmV0dXJuIHByb2dyYW0ub3Bjb2RlKGlwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wb3AoKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufVxuIl19