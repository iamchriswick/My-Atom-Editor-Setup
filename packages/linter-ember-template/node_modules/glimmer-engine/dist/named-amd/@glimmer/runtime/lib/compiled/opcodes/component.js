enifed('@glimmer/runtime/lib/compiled/opcodes/component', ['exports', '@glimmer/runtime/lib/opcodes', '@glimmer/runtime/lib/compiled/opcodes/vm', '@glimmer/runtime/lib/compiled/expressions/args', '@glimmer/reference'], function (exports, _glimmerRuntimeLibOpcodes, _glimmerRuntimeLibCompiledOpcodesVm, _glimmerRuntimeLibCompiledExpressionsArgs, _glimmerReference) {
    'use strict';

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PutDynamicComponent, function (vm) {
        var reference = vm.frame.getOperand();
        var cache = _glimmerReference.isConst(reference) ? undefined : new _glimmerReference.ReferenceCache(reference);
        var definition = cache ? cache.peek() : reference.value();
        vm.frame.setImmediate(definition);
        if (cache) {
            vm.updateWith(new _glimmerRuntimeLibCompiledOpcodesVm.Assert(cache));
        }
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.PutComponent, function (vm, _ref) {
        var _component = _ref.op1;

        var definition = vm.constants.getOther(_component);
        vm.frame.setImmediate(definition);
    });
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.OpenComponent, function (vm, _ref2) {
        var _args = _ref2.op1;
        var _shadow = _ref2.op2;

        var rawArgs = vm.constants.getExpression(_args);
        var shadow = vm.constants.getBlock(_shadow);
        var definition = vm.frame.getImmediate();
        var dynamicScope = vm.pushDynamicScope();
        var callerScope = vm.scope();
        var manager = definition.manager;
        var args = manager.prepareArgs(definition, rawArgs.evaluate(vm), dynamicScope);
        var hasDefaultBlock = !!args.blocks.default; // TODO Cleanup?
        var component = manager.create(vm.env, definition, args, dynamicScope, vm.getSelf(), hasDefaultBlock);
        var destructor = manager.getDestructor(component);
        if (destructor) vm.newDestroyable(destructor);
        var layout = manager.layoutFor(definition, component, vm.env);
        var selfRef = manager.getSelf(component);
        vm.beginCacheGroup();
        vm.stack().pushSimpleBlock();
        vm.pushRootScope(selfRef, layout.symbols);
        vm.invokeLayout(args, layout, callerScope, component, manager, shadow);
        vm.updateWith(new UpdateComponentOpcode(definition.name, component, manager, args, dynamicScope));
    });
    // export class DidCreateElementOpcode extends Opcode {
    //   public type = "did-create-element";
    //   evaluate(vm: VM) {
    //     let manager = vm.frame.getManager();
    //     let component = vm.frame.getComponent();
    //     let action = 'DidCreateElementOpcode#evaluate';
    //     manager.didCreateElement(component, vm.stack().expectConstructing(action), vm.stack().expectOperations(action));
    //   }
    //   toJSON(): OpcodeJSON {
    //     return {
    //       guid: this._guid,
    //       type: this.type,
    //       args: ["$ARGS"]
    //     };
    //   }
    // }
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.DidCreateElement, function (vm) {
        var manager = vm.frame.getManager();
        var component = vm.frame.getComponent();
        var action = 'DidCreateElementOpcode#evaluate';
        manager.didCreateElement(component, vm.stack().expectConstructing(action), vm.stack().expectOperations(action));
    });
    // export class ShadowAttributesOpcode extends Opcode {
    //   public type = "shadow-attributes";
    //   evaluate(vm: VM) {
    //     let shadow = vm.frame.getShadow();
    //     vm.pushCallerScope();
    //     if (!shadow) return;
    //     vm.invokeBlock(shadow, EvaluatedArgs.empty());
    //   }
    //   toJSON(): OpcodeJSON {
    //     return {
    //       guid: this._guid,
    //       type: this.type,
    //       args: ["$ARGS"]
    //     };
    //   }
    // }
    // Slow path for non-specialized component invocations. Uses an internal
    // named lookup on the args.
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.ShadowAttributes, function (vm) {
        var shadow = vm.frame.getShadow();
        vm.pushCallerScope();
        if (!shadow) return;
        vm.invokeBlock(shadow, _glimmerRuntimeLibCompiledExpressionsArgs.EvaluatedArgs.empty());
    });
    // export class DidRenderLayoutOpcode extends Opcode {
    //   public type = "did-render-layout";
    //   evaluate(vm: VM) {
    //     let manager = vm.frame.getManager();
    //     let component = vm.frame.getComponent();
    //     let bounds = vm.stack().popBlock();
    //     manager.didRenderLayout(component, bounds);
    //     vm.env.didCreate(component, manager);
    //     vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));
    //   }
    // }
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.DidRenderLayout, function (vm) {
        var manager = vm.frame.getManager();
        var component = vm.frame.getComponent();
        var bounds = vm.stack().popBlock();
        manager.didRenderLayout(component, bounds);
        vm.env.didCreate(component, manager);
        vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));
    });
    // export class CloseComponentOpcode extends Opcode {
    //   public type = "close-component";
    //   evaluate(vm: VM) {
    //     vm.popScope();
    //     vm.popDynamicScope();
    //     vm.commitCacheGroup();
    //   }
    // }
    _glimmerRuntimeLibOpcodes.APPEND_OPCODES.add(_glimmerRuntimeLibOpcodes.OpcodeName.CloseComponent, function (vm) {
        vm.popScope();
        vm.popDynamicScope();
        vm.commitCacheGroup();
    });

    var UpdateComponentOpcode = (function (_UpdatingOpcode) {
        _inherits(UpdateComponentOpcode, _UpdatingOpcode);

        function UpdateComponentOpcode(name, component, manager, args, dynamicScope) {
            _classCallCheck(this, UpdateComponentOpcode);

            _UpdatingOpcode.call(this);
            this.name = name;
            this.component = component;
            this.manager = manager;
            this.args = args;
            this.dynamicScope = dynamicScope;
            this.type = "update-component";
            var componentTag = manager.getTag(component);
            if (componentTag) {
                this.tag = _glimmerReference.combine([args.tag, componentTag]);
            } else {
                this.tag = args.tag;
            }
        }

        UpdateComponentOpcode.prototype.evaluate = function evaluate(_vm) {
            var component = this.component;
            var manager = this.manager;
            var args = this.args;
            var dynamicScope = this.dynamicScope;

            manager.update(component, args, dynamicScope);
        };

        UpdateComponentOpcode.prototype.toJSON = function toJSON() {
            return {
                guid: this._guid,
                type: this.type,
                args: [JSON.stringify(this.name)]
            };
        };

        return UpdateComponentOpcode;
    })(_glimmerRuntimeLibOpcodes.UpdatingOpcode);

    exports.UpdateComponentOpcode = UpdateComponentOpcode;

    var DidUpdateLayoutOpcode = (function (_UpdatingOpcode2) {
        _inherits(DidUpdateLayoutOpcode, _UpdatingOpcode2);

        function DidUpdateLayoutOpcode(manager, component, bounds) {
            _classCallCheck(this, DidUpdateLayoutOpcode);

            _UpdatingOpcode2.call(this);
            this.manager = manager;
            this.component = component;
            this.bounds = bounds;
            this.type = "did-update-layout";
            this.tag = _glimmerReference.CONSTANT_TAG;
        }

        DidUpdateLayoutOpcode.prototype.evaluate = function evaluate(vm) {
            var manager = this.manager;
            var component = this.component;
            var bounds = this.bounds;

            manager.didUpdateLayout(component, bounds);
            vm.env.didUpdate(component, manager);
        };

        return DidUpdateLayoutOpcode;
    })(_glimmerRuntimeLibOpcodes.UpdatingOpcode);

    exports.DidUpdateLayoutOpcode = DidUpdateLayoutOpcode;
});
//# sourceMappingURL=data:application/json;base64,