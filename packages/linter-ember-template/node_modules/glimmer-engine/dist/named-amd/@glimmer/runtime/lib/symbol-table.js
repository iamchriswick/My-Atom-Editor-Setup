enifed('@glimmer/runtime/lib/symbol-table', ['exports', '@glimmer/util'], function (exports, _glimmerUtil) {
    'use strict';

    exports.entryPoint = entryPoint;
    exports.layout = layout;
    exports.block = block;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function entryPoint(meta) {
        return new ProgramSymbolTable(meta);
    }

    function layout(meta, wireNamed, wireYields, hasPartials) {
        var _symbols = symbols(wireNamed, wireYields, hasPartials);

        var named = _symbols.named;
        var yields = _symbols.yields;
        var partialSymbol = _symbols.partialSymbol;
        var size = _symbols.size;

        return new ProgramSymbolTable(meta, named, yields, partialSymbol, size);
    }

    function block(parent, locals) {
        var localsMap = null;
        var program = parent['program'];
        if (locals.length !== 0) {
            (function () {
                var map = localsMap = _glimmerUtil.dict();
                locals.forEach(function (l) {
                    return map[l] = program.size++;
                });
            })();
        }
        return new BlockSymbolTable(parent, program, localsMap);
    }

    function symbols(named, yields, hasPartials) {
        var yieldsMap = null;
        var namedMap = null;
        var size = 1;
        if (yields.length !== 0) {
            (function () {
                var map = yieldsMap = _glimmerUtil.dict();
                yields.forEach(function (y) {
                    return map[y] = size++;
                });
            })();
        }
        if (named.length !== 0) {
            (function () {
                var map = namedMap = _glimmerUtil.dict();
                named.forEach(function (y) {
                    return map[y] = size++;
                });
            })();
        }
        var partialSymbol = hasPartials ? size++ : null;
        return { named: namedMap, yields: yieldsMap, partialSymbol: partialSymbol, size: size };
    }

    var ProgramSymbolTable = (function () {
        function ProgramSymbolTable(meta) {
            var named = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
            var yields = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
            var partialArgs = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
            var size = arguments.length <= 4 || arguments[4] === undefined ? 1 : arguments[4];

            _classCallCheck(this, ProgramSymbolTable);

            this.meta = meta;
            this.named = named;
            this.yields = yields;
            this.partialArgs = partialArgs;
            this.size = size;
            this.program = this;
        }

        ProgramSymbolTable.prototype.getMeta = function getMeta() {
            return this.meta;
        };

        ProgramSymbolTable.prototype.getSymbols = function getSymbols() {
            return {
                named: this.named,
                yields: this.yields,
                locals: null,
                partialArgs: this.partialArgs
            };
        };

        ProgramSymbolTable.prototype.getSymbol = function getSymbol(kind, name) {
            if (kind === 'local') return null;
            return this[kind] && this[kind][name];
        };

        ProgramSymbolTable.prototype.getPartialArgs = function getPartialArgs() {
            return this.partialArgs || 0;
        };

        return ProgramSymbolTable;
    })();

    exports.ProgramSymbolTable = ProgramSymbolTable;

    var BlockSymbolTable = (function () {
        function BlockSymbolTable(parent, program, locals) {
            _classCallCheck(this, BlockSymbolTable);

            this.parent = parent;
            this.program = program;
            this.locals = locals;
        }

        BlockSymbolTable.prototype.getMeta = function getMeta() {
            return this.program.getMeta();
        };

        BlockSymbolTable.prototype.getSymbols = function getSymbols() {
            return {
                named: null,
                yields: null,
                locals: this.locals,
                partialArgs: null
            };
        };

        BlockSymbolTable.prototype.getSymbol = function getSymbol(kind, name) {
            if (kind === 'local') {
                return this.getLocal(name);
            } else {
                return this.program.getSymbol(kind, name);
            }
        };

        BlockSymbolTable.prototype.getLocal = function getLocal(name) {
            var locals = this.locals;
            var parent = this.parent;

            var symbol = locals && locals[name];
            if (!symbol && parent) {
                symbol = parent.getSymbol('local', name);
            }
            return symbol;
        };

        BlockSymbolTable.prototype.getPartialArgs = function getPartialArgs() {
            return this.program.getPartialArgs();
        };

        return BlockSymbolTable;
    })();

    exports.BlockSymbolTable = BlockSymbolTable;
    var EMPTY_SYMBOL_TABLE = {
        getMeta: function () {
            return null;
        },
        getSymbols: function () {
            return {
                named: null,
                yields: null,
                locals: null,
                partialArgs: null
            };
        },
        getSymbol: function (_kind, _name) {
            throw new Error("BUG: Calling getSymbol on EMPTY_SYMBOL_TABLE");
        },
        getPartialArgs: function () {
            return null;
        }
    };
    exports.EMPTY_SYMBOL_TABLE = EMPTY_SYMBOL_TABLE;
});
//# sourceMappingURL=data:application/json;base64,