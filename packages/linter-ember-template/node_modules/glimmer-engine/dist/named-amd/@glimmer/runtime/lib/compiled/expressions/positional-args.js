enifed('@glimmer/runtime/lib/compiled/expressions/positional-args', ['exports', '@glimmer/runtime/lib/references', '@glimmer/runtime/lib/utils', '@glimmer/reference'], function (exports, _glimmerRuntimeLibReferences, _glimmerRuntimeLibUtils, _glimmerReference) {
    'use strict';

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var CompiledPositionalArgs = (function () {
        function CompiledPositionalArgs(values) {
            _classCallCheck(this, CompiledPositionalArgs);

            this.values = values;
            this.length = values.length;
        }

        CompiledPositionalArgs.create = function create(values) {
            if (values.length) {
                return new this(values);
            } else {
                return COMPILED_EMPTY_POSITIONAL_ARGS;
            }
        };

        CompiledPositionalArgs.empty = function empty() {
            return COMPILED_EMPTY_POSITIONAL_ARGS;
        };

        CompiledPositionalArgs.prototype.evaluate = function evaluate(vm) {
            var values = this.values;
            var length = this.length;

            var references = new Array(length);
            for (var i = 0; i < length; i++) {
                references[i] = values[i].evaluate(vm);
            }
            return EvaluatedPositionalArgs.create(references);
        };

        CompiledPositionalArgs.prototype.toJSON = function toJSON() {
            return '[' + this.values.map(function (value) {
                return value.toJSON();
            }).join(", ") + ']';
        };

        return CompiledPositionalArgs;
    })();

    exports.CompiledPositionalArgs = CompiledPositionalArgs;
    var COMPILED_EMPTY_POSITIONAL_ARGS = new ((function (_CompiledPositionalArgs) {
        _inherits(_class, _CompiledPositionalArgs);

        function _class() {
            _classCallCheck(this, _class);

            _CompiledPositionalArgs.call(this, _glimmerRuntimeLibUtils.EMPTY_ARRAY);
        }

        _class.prototype.evaluate = function evaluate(_vm) {
            return EVALUATED_EMPTY_POSITIONAL_ARGS;
        };

        _class.prototype.toJSON = function toJSON() {
            return '<EMPTY>';
        };

        return _class;
    })(CompiledPositionalArgs))();
    exports.COMPILED_EMPTY_POSITIONAL_ARGS = COMPILED_EMPTY_POSITIONAL_ARGS;

    var EvaluatedPositionalArgs = (function () {
        function EvaluatedPositionalArgs(values) {
            _classCallCheck(this, EvaluatedPositionalArgs);

            this.values = values;
            this.tag = _glimmerReference.combineTagged(values);
            this.length = values.length;
        }

        EvaluatedPositionalArgs.create = function create(values) {
            return new this(values);
        };

        EvaluatedPositionalArgs.empty = function empty() {
            return EVALUATED_EMPTY_POSITIONAL_ARGS;
        };

        EvaluatedPositionalArgs.prototype.at = function at(index) {
            var values = this.values;
            var length = this.length;

            return index < length ? values[index] : _glimmerRuntimeLibReferences.UNDEFINED_REFERENCE;
        };

        EvaluatedPositionalArgs.prototype.value = function value() {
            var values = this.values;
            var length = this.length;

            var ret = new Array(length);
            for (var i = 0; i < length; i++) {
                ret[i] = values[i].value();
            }
            return ret;
        };

        return EvaluatedPositionalArgs;
    })();

    exports.EvaluatedPositionalArgs = EvaluatedPositionalArgs;
    var EVALUATED_EMPTY_POSITIONAL_ARGS = new ((function (_EvaluatedPositionalArgs) {
        _inherits(_class2, _EvaluatedPositionalArgs);

        function _class2() {
            _classCallCheck(this, _class2);

            _EvaluatedPositionalArgs.call(this, _glimmerRuntimeLibUtils.EMPTY_ARRAY);
        }

        _class2.prototype.at = function at() {
            return _glimmerRuntimeLibReferences.UNDEFINED_REFERENCE;
        };

        _class2.prototype.value = function value() {
            return this.values;
        };

        return _class2;
    })(EvaluatedPositionalArgs))();
    exports.EVALUATED_EMPTY_POSITIONAL_ARGS = EVALUATED_EMPTY_POSITIONAL_ARGS;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL3Bvc2l0aW9uYWwtYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7UUFPTSxzQkFBQTtBQWVKLGlCQWZJLHNCQUFBLENBZWUsTUFBaUQsRUFBQTtrQ0FmaEUsc0JBQUE7O0FBZWUsZ0JBQUEsQ0FBQSxNQUFNLEdBQU4sTUFBTSxDQUEyQztBQUNsRSxnQkFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzdCOztBQWpCRyw4QkFBQSxDQUNHLE1BQU0sR0FBQSxnQkFBQyxNQUFvQyxFQUFBO0FBQ2hELGdCQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7QUFDakIsdUJBQU8sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDekIsTUFBTTtBQUNMLHVCQUFPLDhCQUE4QixDQUFDO2FBQ3ZDO1NBQ0Y7O0FBUEcsOEJBQUEsQ0FTRyxLQUFLLEdBQUEsaUJBQUE7QUFDVixtQkFBTyw4QkFBOEIsQ0FBQztTQUN2Qzs7QUFYRyw4QkFBQSxXQW1CSixRQUFRLEdBQUEsa0JBQUMsRUFBTSxFQUFBO2dCQUNQLE1BQU0sR0FBYSxJQUFJLENBQXZCLE1BQU07Z0JBQUUsTUFBTSxHQUFLLElBQUksQ0FBZixNQUFNOztBQUNwQixnQkFBSSxVQUFVLEdBQTRCLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRTVELGlCQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQy9CLDBCQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN4QztBQUVELG1CQUFPLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNuRDs7QUE1QkcsOEJBQUEsV0E4QkosTUFBTSxHQUFBLGtCQUFBO0FBQ0oseUJBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBQSxLQUFLO3VCQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7YUFBQSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFJO1NBQ25FOztlQWhDRyxzQkFBQTs7OztBQW1DQyxRQUFNLDhCQUE4QixHQUEyQjs7O0FBQ3BFLDBCQUFBOzs7QUFDRSx1RUF6Q0ssV0FBVyxDQXlDRSxDQUFDO1NBQ3BCOzt5QkFFRCxRQUFRLEdBQUEsa0JBQUMsR0FBTyxFQUFBO0FBQ2QsbUJBQU8sK0JBQStCLENBQUM7U0FDeEM7O3lCQUVELE1BQU0sR0FBQSxrQkFBQTtBQUNKLDZCQUFpQjtTQUNsQjs7O09BWHNGLHNCQUFzQixJQVk3RyxDQUFDOzs7UUFFRyx1QkFBQTtBQVlKLGlCQVpJLHVCQUFBLENBWWUsTUFBNEMsRUFBQTtrQ0FaM0QsdUJBQUE7O0FBWWUsZ0JBQUEsQ0FBQSxNQUFNLEdBQU4sTUFBTSxDQUFzQztBQUM3RCxnQkFBSSxDQUFDLEdBQUcsR0FBRyxrQkFqRXNCLGFBQWEsQ0FpRXJCLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLGdCQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7U0FDN0I7O0FBZkcsK0JBQUEsQ0FDRyxNQUFNLEdBQUEsZ0JBQUMsTUFBNEMsRUFBQTtBQUN4RCxtQkFBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6Qjs7QUFIRywrQkFBQSxDQUtHLEtBQUssR0FBQSxpQkFBQTtBQUNWLG1CQUFPLCtCQUErQixDQUFDO1NBQ3hDOztBQVBHLCtCQUFBLFdBaUJKLEVBQUUsR0FBQSxZQUFDLEtBQWEsRUFBQTtnQkFDUixNQUFNLEdBQWEsSUFBSSxDQUF2QixNQUFNO2dCQUFFLE1BQU0sR0FBSyxJQUFJLENBQWYsTUFBTTs7QUFDcEIsbUJBQU8sQUFBQyxLQUFLLEdBQUcsTUFBTSxHQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0NBM0VsQyxtQkFBbUIsQUEyRXFDLENBQUM7U0FDL0Q7O0FBcEJHLCtCQUFBLFdBc0JKLEtBQUssR0FBQSxpQkFBQTtnQkFDRyxNQUFNLEdBQWEsSUFBSSxDQUF2QixNQUFNO2dCQUFFLE1BQU0sR0FBSyxJQUFJLENBQWYsTUFBTTs7QUFDcEIsZ0JBQUksR0FBRyxHQUFhLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRXRDLGlCQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQy9CLG1CQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQzVCO0FBRUQsbUJBQU8sR0FBRyxDQUFDO1NBQ1o7O2VBL0JHLHVCQUFBOzs7O0FBa0NDLFFBQU0sK0JBQStCLEdBQTRCOzs7QUFDdEUsMkJBQUE7OztBQUNFLHdFQXpGSyxXQUFXLENBeUZFLENBQUM7U0FDcEI7OzBCQUVELEVBQUUsR0FBQSxjQUFBO0FBQ0EsZ0RBaEdLLG1CQUFtQixDQWdHRztTQUM1Qjs7MEJBRUQsS0FBSyxHQUFBLGlCQUFBO0FBQ0gsbUJBQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNwQjs7O09BWHdGLHVCQUF1QixJQVloSCxDQUFDIiwiZmlsZSI6InBvc2l0aW9uYWwtYXJncy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVOREVGSU5FRF9SRUZFUkVOQ0UgfSBmcm9tICcuLi8uLi9yZWZlcmVuY2VzJztcbmltcG9ydCB7IENvbXBpbGVkRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb25zJztcbmltcG9ydCBWTSBmcm9tICcuLi8uLi92bS9hcHBlbmQnO1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBQYXRoUmVmZXJlbmNlLCBSZXZpc2lvblRhZywgY29tYmluZVRhZ2dlZCB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICBzdGF0aWMgY3JlYXRlKHZhbHVlczogQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT5bXSk6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXModmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENPTVBJTEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgcmV0dXJuIENPTVBJTEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgfVxuXG4gIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWVzOiBSZWFkb25seUFycmF5PENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+Pikge1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgICBsZXQgeyB2YWx1ZXMsIGxlbmd0aCB9ID0gdGhpcztcbiAgICBsZXQgcmVmZXJlbmNlczogUGF0aFJlZmVyZW5jZTxPcGFxdWU+W10gPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlZmVyZW5jZXNbaV0gPSB2YWx1ZXNbaV0uZXZhbHVhdGUodm0pO1xuICAgIH1cblxuICAgIHJldHVybiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncy5jcmVhdGUocmVmZXJlbmNlcyk7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFske3RoaXMudmFsdWVzLm1hcCh2YWx1ZSA9PiB2YWx1ZS50b0pTT04oKSkuam9pbihcIiwgXCIpfV1gO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MgPSBuZXcgKGNsYXNzIGV4dGVuZHMgQ29tcGlsZWRQb3NpdGlvbmFsQXJncyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKEVNUFRZX0FSUkFZKTtcbiAgfVxuXG4gIGV2YWx1YXRlKF92bTogVk0pOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gICAgcmV0dXJuIEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYDxFTVBUWT5gO1xuICB9XG59KTtcblxuZXhwb3J0IGNsYXNzIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgc3RhdGljIGNyZWF0ZSh2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8UGF0aFJlZmVyZW5jZTxPcGFxdWU+Pikge1xuICAgIHJldHVybiBuZXcgdGhpcyh2YWx1ZXMpO1xuICB9XG5cbiAgc3RhdGljIGVtcHR5KCk6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgICByZXR1cm4gRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgfVxuXG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnO1xuICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHZhbHVlczogUmVhZG9ubHlBcnJheTxQYXRoUmVmZXJlbmNlPE9wYXF1ZT4+KSB7XG4gICAgdGhpcy50YWcgPSBjb21iaW5lVGFnZ2VkKHZhbHVlcyk7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICB9XG5cbiAgYXQoaW5kZXg6IG51bWJlcik6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgbGV0IHsgdmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgcmV0dXJuIChpbmRleCA8IGxlbmd0aCkgPyB2YWx1ZXNbaW5kZXhdIDogVU5ERUZJTkVEX1JFRkVSRU5DRTtcbiAgfVxuXG4gIHZhbHVlKCk6IFJlYWRvbmx5QXJyYXk8T3BhcXVlPiB7XG4gICAgbGV0IHsgdmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgbGV0IHJldDogT3BhcXVlW10gPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHZhbHVlc1tpXS52YWx1ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzID0gbmV3IChjbGFzcyBleHRlbmRzIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoRU1QVFlfQVJSQVkpO1xuICB9XG5cbiAgYXQoKTogUGF0aFJlZmVyZW5jZTxPcGFxdWU+IHtcbiAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRTtcbiAgfVxuXG4gIHZhbHVlKCk6IFJlYWRvbmx5QXJyYXk8T3BhcXVlPiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzO1xuICB9XG59KTtcbiJdfQ==