enifed('@glimmer/runtime/lib/environment', ['exports', '@glimmer/util', '@glimmer/runtime/lib/syntax/functions', '@glimmer/runtime/lib/opcodes', '@glimmer/runtime/lib/references', '@glimmer/runtime/lib/dom/attribute-managers'], function (exports, _glimmerUtil, _glimmerRuntimeLibSyntaxFunctions, _glimmerRuntimeLibOpcodes, _glimmerRuntimeLibReferences, _glimmerRuntimeLibDomAttributeManagers) {
    'use strict';

    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var Scope = (function () {
        function Scope(references) {
            var callerScope = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

            _classCallCheck(this, Scope);

            this.callerScope = null;
            this.slots = references;
            this.callerScope = callerScope;
        }

        Scope.root = function root(self) {
            var size = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

            var refs = new Array(size + 1);
            for (var i = 0; i <= size; i++) {
                refs[i] = _glimmerRuntimeLibReferences.UNDEFINED_REFERENCE;
            }
            return new Scope(refs).init({ self: self });
        };

        Scope.prototype.init = function init(_ref) {
            var self = _ref.self;

            this.slots[0] = self;
            return this;
        };

        Scope.prototype.getSelf = function getSelf() {
            return this.slots[0];
        };

        Scope.prototype.getSymbol = function getSymbol(symbol) {
            return this.slots[symbol];
        };

        Scope.prototype.getBlock = function getBlock(symbol) {
            return this.slots[symbol];
        };

        Scope.prototype.getPartialArgs = function getPartialArgs(symbol) {
            return this.slots[symbol];
        };

        Scope.prototype.bindSymbol = function bindSymbol(symbol, value) {
            this.slots[symbol] = value;
        };

        Scope.prototype.bindBlock = function bindBlock(symbol, value) {
            this.slots[symbol] = value;
        };

        Scope.prototype.bindPartialArgs = function bindPartialArgs(symbol, value) {
            this.slots[symbol] = value;
        };

        Scope.prototype.bindCallerScope = function bindCallerScope(scope) {
            this.callerScope = scope;
        };

        Scope.prototype.getCallerScope = function getCallerScope() {
            return this.callerScope;
        };

        Scope.prototype.child = function child() {
            return new Scope(this.slots.slice(), this.callerScope);
        };

        return Scope;
    })();

    exports.Scope = Scope;

    var Transaction = (function () {
        function Transaction() {
            _classCallCheck(this, Transaction);

            this.scheduledInstallManagers = [];
            this.scheduledInstallModifiers = [];
            this.scheduledUpdateModifierManagers = [];
            this.scheduledUpdateModifiers = [];
            this.createdComponents = [];
            this.createdManagers = [];
            this.updatedComponents = [];
            this.updatedManagers = [];
            this.destructors = [];
        }

        Transaction.prototype.didCreate = function didCreate(component, manager) {
            this.createdComponents.push(component);
            this.createdManagers.push(manager);
        };

        Transaction.prototype.didUpdate = function didUpdate(component, manager) {
            this.updatedComponents.push(component);
            this.updatedManagers.push(manager);
        };

        Transaction.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {
            this.scheduledInstallManagers.push(manager);
            this.scheduledInstallModifiers.push(modifier);
        };

        Transaction.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {
            this.scheduledUpdateModifierManagers.push(manager);
            this.scheduledUpdateModifiers.push(modifier);
        };

        Transaction.prototype.didDestroy = function didDestroy(d) {
            this.destructors.push(d);
        };

        Transaction.prototype.commit = function commit() {
            var createdComponents = this.createdComponents;
            var createdManagers = this.createdManagers;

            for (var i = 0; i < createdComponents.length; i++) {
                var component = createdComponents[i];
                var manager = createdManagers[i];
                manager.didCreate(component);
            }
            var updatedComponents = this.updatedComponents;
            var updatedManagers = this.updatedManagers;

            for (var i = 0; i < updatedComponents.length; i++) {
                var component = updatedComponents[i];
                var manager = updatedManagers[i];
                manager.didUpdate(component);
            }
            var destructors = this.destructors;

            for (var i = 0; i < destructors.length; i++) {
                destructors[i].destroy();
            }
            var scheduledInstallManagers = this.scheduledInstallManagers;
            var scheduledInstallModifiers = this.scheduledInstallModifiers;

            for (var i = 0; i < scheduledInstallManagers.length; i++) {
                var manager = scheduledInstallManagers[i];
                var modifier = scheduledInstallModifiers[i];
                manager.install(modifier);
            }
            var scheduledUpdateModifierManagers = this.scheduledUpdateModifierManagers;
            var scheduledUpdateModifiers = this.scheduledUpdateModifiers;

            for (var i = 0; i < scheduledUpdateModifierManagers.length; i++) {
                var manager = scheduledUpdateModifierManagers[i];
                var modifier = scheduledUpdateModifiers[i];
                manager.update(modifier);
            }
        };

        return Transaction;
    })();

    var Opcode = (function () {
        function Opcode(array) {
            _classCallCheck(this, Opcode);

            this.array = array;
            this.offset = 0;
        }

        _createClass(Opcode, [{
            key: 'type',
            get: function () {
                return this.array[this.offset];
            }
        }, {
            key: 'op1',
            get: function () {
                return this.array[this.offset + 1];
            }
        }, {
            key: 'op2',
            get: function () {
                return this.array[this.offset + 2];
            }
        }, {
            key: 'op3',
            get: function () {
                return this.array[this.offset + 3];
            }
        }]);

        return Opcode;
    })();

    exports.Opcode = Opcode;

    var Program = (function () {
        function Program() {
            _classCallCheck(this, Program);

            this.opcodes = new _glimmerUtil.A(0x100000);
            this._offset = 0;
            this._opcode = new Opcode(this.opcodes);
        }

        Program.prototype.opcode = function opcode(offset) {
            this._opcode.offset = offset;
            return this._opcode;
        };

        Program.prototype.set = function set(pos, opcode) {
            var type = opcode[0];
            var op1 = opcode[1];
            var op2 = opcode[2];
            var op3 = opcode[3];

            this.opcodes[pos] = type;
            this.opcodes[pos + 1] = op1;
            this.opcodes[pos + 2] = op2;
            this.opcodes[pos + 3] = op3;
        };

        Program.prototype.push = function push(opcode) {
            var offset = this._offset;
            var type = opcode[0];
            var op1 = opcode[1];
            var op2 = opcode[2];
            var op3 = opcode[3];

            this.opcodes[this._offset++] = type;
            this.opcodes[this._offset++] = op1;
            this.opcodes[this._offset++] = op2;
            this.opcodes[this._offset++] = op3;
            return offset;
        };

        _createClass(Program, [{
            key: 'next',
            get: function () {
                return this._offset;
            }
        }, {
            key: 'current',
            get: function () {
                return this._offset - 4;
            }
        }]);

        return Program;
    })();

    exports.Program = Program;

    var Environment = (function () {
        function Environment(_ref2) {
            var appendOperations = _ref2.appendOperations;
            var updateOperations = _ref2.updateOperations;

            _classCallCheck(this, Environment);

            this._macros = null;
            this._transaction = null;
            this.constants = new _glimmerRuntimeLibOpcodes.Constants();
            this.program = new Program();
            this.appendOperations = appendOperations;
            this.updateOperations = updateOperations;
        }

        Environment.prototype.toConditionalReference = function toConditionalReference(reference) {
            return new _glimmerRuntimeLibReferences.ConditionalReference(reference);
        };

        Environment.prototype.getAppendOperations = function getAppendOperations() {
            return this.appendOperations;
        };

        Environment.prototype.getDOM = function getDOM() {
            return this.updateOperations;
        };

        Environment.prototype.getIdentity = function getIdentity(object) {
            return _glimmerUtil.ensureGuid(object) + '';
        };

        Environment.prototype.begin = function begin() {
            _glimmerUtil.assert(!this._transaction, 'Cannot start a nested transaction');
            this._transaction = new Transaction();
        };

        Environment.prototype.didCreate = function didCreate(component, manager) {
            this.transaction.didCreate(component, manager);
        };

        Environment.prototype.didUpdate = function didUpdate(component, manager) {
            this.transaction.didUpdate(component, manager);
        };

        Environment.prototype.scheduleInstallModifier = function scheduleInstallModifier(modifier, manager) {
            this.transaction.scheduleInstallModifier(modifier, manager);
        };

        Environment.prototype.scheduleUpdateModifier = function scheduleUpdateModifier(modifier, manager) {
            this.transaction.scheduleUpdateModifier(modifier, manager);
        };

        Environment.prototype.didDestroy = function didDestroy(d) {
            this.transaction.didDestroy(d);
        };

        Environment.prototype.commit = function commit() {
            this.transaction.commit();
            this._transaction = null;
        };

        Environment.prototype.attributeFor = function attributeFor(element, attr, isTrusting, namespace) {
            return _glimmerRuntimeLibDomAttributeManagers.defaultManagers(element, attr, isTrusting, namespace === undefined ? null : namespace);
        };

        Environment.prototype.macros = function macros() {
            var macros = this._macros;
            if (!macros) {
                this._macros = macros = _glimmerRuntimeLibSyntaxFunctions.populateBuiltins();
            }
            return macros;
        };

        _createClass(Environment, [{
            key: 'transaction',
            get: function () {
                return _glimmerUtil.expect(this._transaction, 'must be in a transaction');
            }
        }]);

        return Environment;
    })();

    exports.Environment = Environment;
    exports.default = Environment;
});
//# sourceMappingURL=data:application/json;base64,