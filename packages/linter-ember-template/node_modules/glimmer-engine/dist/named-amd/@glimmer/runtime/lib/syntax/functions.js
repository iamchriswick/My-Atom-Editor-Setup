enifed('@glimmer/runtime/lib/syntax/functions', ['exports', '@glimmer/runtime/lib/compiled/expressions/value', '@glimmer/runtime/lib/compiled/expressions/has-block', '@glimmer/util', '@glimmer/runtime/lib/compiled/expressions/lookups', '@glimmer/runtime/lib/compiled/expressions/helper', '@glimmer/runtime/lib/compiled/expressions/concat', '@glimmer/runtime/lib/compiled/expressions/args', '@glimmer/runtime/lib/compiled/expressions/function'], function (exports, _glimmerRuntimeLibCompiledExpressionsValue, _glimmerRuntimeLibCompiledExpressionsHasBlock, _glimmerUtil, _glimmerRuntimeLibCompiledExpressionsLookups, _glimmerRuntimeLibCompiledExpressionsHelper, _glimmerRuntimeLibCompiledExpressionsConcat, _glimmerRuntimeLibCompiledExpressionsArgs, _glimmerRuntimeLibCompiledExpressionsFunction) {
    'use strict';

    exports.setDebuggerCallback = setDebuggerCallback;
    exports.resetDebuggerCallback = resetDebuggerCallback;
    exports.expr = expr;
    exports.compileArgs = compileArgs;
    exports.compileBlockArgs = compileBlockArgs;
    exports.compileBaselineArgs = compileBaselineArgs;
    exports.populateBuiltins = populateBuiltins;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function debugCallback(context, get) {
        console.info('Use `context`, and `get(<path>)` to debug this template.');
        /* tslint:disable */
        debugger;
        /* tslint:enable */
        return { context: context, get: get };
    }
    function getter(vm, builder) {
        return function (path) {
            var parts = path.split('.');
            if (parts[0] === 'this') {
                parts[0] = null;
            }
            return compileRef(parts, builder).evaluate(vm);
        };
    }
    var callback = debugCallback;
    // For testing purposes

    function setDebuggerCallback(cb) {
        callback = cb;
    }

    function resetDebuggerCallback() {
        callback = debugCallback;
    }

    var Compilers = (function () {
        function Compilers() {
            _classCallCheck(this, Compilers);

            this.names = _glimmerUtil.dict();
            this.funcs = [];
        }

        Compilers.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Compilers.prototype.compile = function compile(sexp, builder) {
            var name = sexp[0];
            var index = this.names[name];
            var func = this.funcs[index];
            _glimmerUtil.assert(!!func, 'expected an implementation for ' + sexp[0]);
            return func(sexp, builder);
        };

        return Compilers;
    })();

    exports.Compilers = Compilers;
    var STATEMENTS = new Compilers();
    exports.STATEMENTS = STATEMENTS;
    STATEMENTS.add('text', function (sexp, builder) {
        builder.text(sexp[1]);
    });
    STATEMENTS.add('comment', function (sexp, builder) {
        builder.comment(sexp[1]);
    });
    STATEMENTS.add('close-element', function (_sexp, builder) {
        _glimmerUtil.LOGGER.trace('close-element statement');
        builder.closeElement();
    });
    STATEMENTS.add('flush-element', function (_sexp, builder) {
        builder.flushElement();
    });
    STATEMENTS.add('modifier', function (sexp, builder) {
        var path = sexp[1];
        var params = sexp[2];
        var hash = sexp[3];

        var args = compileArgs(params, hash, builder);
        if (builder.env.hasModifier(path, builder.symbolTable)) {
            builder.modifier(path[0], args);
        } else {
            throw new Error('Compile Error ' + path.join('.') + ' is not a modifier: Helpers may not be used in the element form.');
        }
    });
    STATEMENTS.add('static-attr', function (sexp, builder) {
        var name = sexp[1];
        var value = sexp[2];
        var namespace = sexp[3];

        builder.staticAttr(name, namespace, value);
    });
    STATEMENTS.add('any-dynamic-attr', function (sexp, builder) {
        var name = sexp[1];
        var value = sexp[2];
        var namespace = sexp[3];
        var trusting = sexp[4];

        builder.putValue(value);
        if (namespace) {
            builder.dynamicAttrNS(name, namespace, trusting);
        } else {
            builder.dynamicAttr(name, trusting);
        }
    });
    STATEMENTS.add('open-element', function (sexp, builder) {
        _glimmerUtil.LOGGER.trace('open-element statement');
        builder.openPrimitiveElement(sexp[1]);
    });
    STATEMENTS.add('optimized-append', function (sexp, builder) {
        var value = sexp[1];
        var trustingMorph = sexp[2];

        var _builder$env$macros = builder.env.macros();

        var inlines = _builder$env$macros.inlines;

        var returned = inlines.compile(sexp, builder) || value;
        if (returned === true) return;
        builder.putValue(returned[1]);
        if (trustingMorph) {
            builder.trustingAppend();
        } else {
            builder.cautiousAppend();
        }
    });
    STATEMENTS.add('unoptimized-append', function (sexp, builder) {
        var value = sexp[1];
        var trustingMorph = sexp[2];

        var _builder$env$macros2 = builder.env.macros();

        var inlines = _builder$env$macros2.inlines;

        var returned = inlines.compile(sexp, builder) || value;
        if (returned === true) return;
        if (trustingMorph) {
            builder.guardedTrustingAppend(returned[1]);
        } else {
            builder.guardedCautiousAppend(returned[1]);
        }
    });
    STATEMENTS.add('nested-block', function (sexp, builder) {
        var _builder$env$macros3 = builder.env.macros();

        var blocks = _builder$env$macros3.blocks;

        blocks.compile(sexp, builder);
    });
    STATEMENTS.add('scanned-block', function (sexp, builder) {
        var path = sexp[1];
        var params = sexp[2];
        var hash = sexp[3];
        var template = sexp[4];
        var inverse = sexp[5];

        var templateBlock = template && template.scan();
        var inverseBlock = inverse && inverse.scan();

        var _builder$env$macros4 = builder.env.macros();

        var blocks = _builder$env$macros4.blocks;

        blocks.compile(['nested-block', path, params, hash, templateBlock, inverseBlock], builder);
    });
    STATEMENTS.add('scanned-component', function (sexp, builder) {
        var tag = sexp[1];
        var attrs = sexp[2];
        var rawArgs = sexp[3];
        var rawBlock = sexp[4];

        var block = rawBlock && rawBlock.scan();
        var args = compileBlockArgs(null, rawArgs, { default: block, inverse: null }, builder);
        var definition = builder.env.getComponentDefinition([tag], builder.symbolTable);
        builder.putComponentDefinition(definition);
        builder.openComponent(args, attrs.scan());
        builder.closeComponent();
    });
    STATEMENTS.add('static-partial', function (sexp, builder) {
        var name = sexp[1];

        if (!builder.env.hasPartial(name, builder.symbolTable)) {
            throw new Error('Compile Error: Could not find a partial named "' + name + '"');
        }
        var definition = builder.env.lookupPartial(name, builder.symbolTable);
        builder.putPartialDefinition(definition);
        builder.evaluatePartial();
    });
    STATEMENTS.add('dynamic-partial', function (sexp, builder) {
        var name = sexp[1];

        builder.startLabels();
        builder.putValue(name);
        builder.test('simple');
        builder.enter('BEGIN', 'END');
        builder.label('BEGIN');
        builder.jumpUnless('END');
        builder.putDynamicPartialDefinition();
        builder.evaluatePartial();
        builder.label('END');
        builder.exit();
        builder.stopLabels();
    });
    STATEMENTS.add('yield', function (sexp, builder) {
        var to = sexp[1];
        var params = sexp[2];

        var args = compileArgs(params, null, builder);
        builder.yield(args, to);
    });
    STATEMENTS.add('debugger', function (sexp, builder) {
        builder.putValue(['function', function (vm) {
            var context = vm.getSelf().value();
            var get = function (path) {
                return getter(vm, builder)(path).value();
            };
            callback(context, get);
        }]);
        return sexp;
    });
    var EXPRESSIONS = new Compilers();

    function expr(expression, builder) {
        if (Array.isArray(expression)) {
            return EXPRESSIONS.compile(expression, builder);
        } else {
            return new _glimmerRuntimeLibCompiledExpressionsValue.default(expression);
        }
    }

    EXPRESSIONS.add('unknown', function (sexp, builder) {
        var path = sexp[1];
        if (builder.env.hasHelper(path, builder.symbolTable)) {
            return new _glimmerRuntimeLibCompiledExpressionsHelper.default(path, builder.env.lookupHelper(path, builder.symbolTable), _glimmerRuntimeLibCompiledExpressionsArgs.CompiledArgs.empty(), builder.symbolTable);
        } else {
            return compileRef(path, builder);
        }
    });
    EXPRESSIONS.add('concat', function (sexp, builder) {
        var params = sexp[1].map(function (p) {
            return expr(p, builder);
        });
        return new _glimmerRuntimeLibCompiledExpressionsConcat.default(params);
    });
    EXPRESSIONS.add('function', function (sexp, builder) {
        return new _glimmerRuntimeLibCompiledExpressionsFunction.CompiledFunctionExpression(sexp[1], builder.symbolTable);
    });
    EXPRESSIONS.add('helper', function (sexp, builder) {
        var env = builder.env;
        var symbolTable = builder.symbolTable;
        var path = sexp[1];
        var params = sexp[2];
        var hash = sexp[3];

        if (env.hasHelper(path, symbolTable)) {
            var args = compileArgs(params, hash, builder);
            return new _glimmerRuntimeLibCompiledExpressionsHelper.default(path, env.lookupHelper(path, symbolTable), args, symbolTable);
        } else {
            throw new Error('Compile Error: ' + path.join('.') + ' is not a helper');
        }
    });
    EXPRESSIONS.add('get', function (sexp, builder) {
        return compileRef(sexp[1], builder);
    });
    EXPRESSIONS.add('undefined', function (_sexp, _builder) {
        return new _glimmerRuntimeLibCompiledExpressionsValue.default(undefined);
    });
    EXPRESSIONS.add('arg', function (sexp, builder) {
        var parts = sexp[1];

        var head = parts[0];
        var named = undefined,
            partial = undefined;
        if (named = builder.symbolTable.getSymbol('named', head)) {
            var path = parts.slice(1);
            var inner = new _glimmerRuntimeLibCompiledExpressionsLookups.CompiledSymbol(named, head);
            return _glimmerRuntimeLibCompiledExpressionsLookups.default.create(inner, path);
        } else if (partial = builder.symbolTable.getPartialArgs()) {
            var path = parts.slice(1);
            var inner = new _glimmerRuntimeLibCompiledExpressionsLookups.CompiledInPartialName(partial, head);
            return _glimmerRuntimeLibCompiledExpressionsLookups.default.create(inner, path);
        } else {
            throw new Error('[BUG] @' + parts.join('.') + ' is not a valid lookup path.');
        }
    });
    EXPRESSIONS.add('has-block', function (sexp, builder) {
        var blockName = sexp[1];
        var yields = undefined,
            partial = undefined;
        if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
            var inner = new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledGetBlockBySymbol(yields, blockName);
            return new _glimmerRuntimeLibCompiledExpressionsHasBlock.default(inner);
        } else if (partial = builder.symbolTable.getPartialArgs()) {
            var inner = new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledInPartialGetBlock(partial, blockName);
            return new _glimmerRuntimeLibCompiledExpressionsHasBlock.default(inner);
        } else {
            throw new Error('[BUG] ${blockName} is not a valid block name.');
        }
    });
    EXPRESSIONS.add('has-block-params', function (sexp, builder) {
        var blockName = sexp[1];
        var yields = undefined,
            partial = undefined;
        if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
            var inner = new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledGetBlockBySymbol(yields, blockName);
            return new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledHasBlockParams(inner);
        } else if (partial = builder.symbolTable.getPartialArgs()) {
            var inner = new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledInPartialGetBlock(partial, blockName);
            return new _glimmerRuntimeLibCompiledExpressionsHasBlock.CompiledHasBlockParams(inner);
        } else {
            throw new Error('[BUG] ${blockName} is not a valid block name.');
        }
    });

    function compileArgs(params, hash, builder) {
        var compiledParams = compileParams(params, builder);
        var compiledHash = compileHash(hash, builder);
        return _glimmerRuntimeLibCompiledExpressionsArgs.CompiledArgs.create(compiledParams, compiledHash, _glimmerRuntimeLibCompiledExpressionsArgs.EMPTY_BLOCKS);
    }

    function compileBlockArgs(params, hash, blocks, builder) {
        var compiledParams = compileParams(params, builder);
        var compiledHash = compileHash(hash, builder);
        return _glimmerRuntimeLibCompiledExpressionsArgs.CompiledArgs.create(compiledParams, compiledHash, blocks);
    }

    function compileBaselineArgs(args, builder) {
        var params = args[0];
        var hash = args[1];
        var _default = args[2];
        var inverse = args[3];

        return _glimmerRuntimeLibCompiledExpressionsArgs.CompiledArgs.create(compileParams(params, builder), compileHash(hash, builder), { default: _default, inverse: inverse });
    }

    function compileParams(params, builder) {
        if (!params || params.length === 0) return _glimmerRuntimeLibCompiledExpressionsArgs.COMPILED_EMPTY_POSITIONAL_ARGS;
        var compiled = params.map(function (p) {
            return expr(p, builder);
        });
        return _glimmerRuntimeLibCompiledExpressionsArgs.CompiledPositionalArgs.create(compiled);
    }
    function compileHash(hash, builder) {
        if (!hash) return _glimmerRuntimeLibCompiledExpressionsArgs.COMPILED_EMPTY_NAMED_ARGS;
        var keys = hash[0];
        var values = hash[1];

        if (keys.length === 0) return _glimmerRuntimeLibCompiledExpressionsArgs.COMPILED_EMPTY_NAMED_ARGS;
        var compiled = values.map(function (p) {
            return expr(p, builder);
        });
        return new _glimmerRuntimeLibCompiledExpressionsArgs.CompiledNamedArgs(keys, compiled);
    }
    function compileRef(parts, builder) {
        var head = parts[0];
        var local = undefined;
        if (head === null) {
            var inner = new _glimmerRuntimeLibCompiledExpressionsLookups.CompiledSelf();
            var path = parts.slice(1);
            return _glimmerRuntimeLibCompiledExpressionsLookups.default.create(inner, path);
        } else if (local = builder.symbolTable.getSymbol('local', head)) {
            var path = parts.slice(1);
            var inner = new _glimmerRuntimeLibCompiledExpressionsLookups.CompiledSymbol(local, head);
            return _glimmerRuntimeLibCompiledExpressionsLookups.default.create(inner, path);
        } else {
            var inner = new _glimmerRuntimeLibCompiledExpressionsLookups.CompiledSelf();
            return _glimmerRuntimeLibCompiledExpressionsLookups.default.create(inner, parts);
        }
    }

    var Blocks = (function () {
        function Blocks() {
            _classCallCheck(this, Blocks);

            this.names = _glimmerUtil.dict();
            this.funcs = [];
        }

        Blocks.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Blocks.prototype.addMissing = function addMissing(func) {
            this.missing = func;
        };

        Blocks.prototype.compile = function compile(sexp, builder) {
            // assert(sexp[1].length === 1, 'paths in blocks are not supported');
            var name = sexp[1][0];
            var index = this.names[name];
            if (index === undefined) {
                _glimmerUtil.assert(!!this.missing, name + ' not found, and no catch-all block handler was registered');
                var func = this.missing;
                var handled = func(sexp, builder);
                _glimmerUtil.assert(!!handled, name + ' not found, and the catch-all block handler didn\'t handle it');
            } else {
                var func = this.funcs[index];
                func(sexp, builder);
            }
        };

        return Blocks;
    })();

    exports.Blocks = Blocks;
    var BLOCKS = new Blocks();
    exports.BLOCKS = BLOCKS;

    var Inlines = (function () {
        function Inlines() {
            _classCallCheck(this, Inlines);

            this.names = _glimmerUtil.dict();
            this.funcs = [];
        }

        Inlines.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Inlines.prototype.addMissing = function addMissing(func) {
            this.missing = func;
        };

        Inlines.prototype.compile = function compile(sexp, builder) {
            var value = sexp[1];
            // TODO: Fix this so that expression macros can return
            // things like components, so that {{component foo}}
            // is the same as {{(component foo)}}
            if (!Array.isArray(value)) return ['expr', value];
            var path = undefined;
            var params = undefined;
            var hash = undefined;
            if (value[0] === 'helper') {
                path = value[1];
                params = value[2];
                hash = value[3];
            } else if (value[0] === 'unknown') {
                path = value[1];
                params = hash = null;
            } else {
                return ['expr', value];
            }
            if (path.length > 1 && !params && !hash) {
                return ['expr', value];
            }
            var name = path[0];
            var index = this.names[name];
            if (index === undefined && this.missing) {
                var func = this.missing;
                var returned = func(path, params, hash, builder);
                return returned === false ? ['expr', value] : returned;
            } else if (index !== undefined) {
                var func = this.funcs[index];
                var returned = func(path, params, hash, builder);
                return returned === false ? ['expr', value] : returned;
            } else {
                return ['expr', value];
            }
        };

        return Inlines;
    })();

    exports.Inlines = Inlines;
    var INLINES = new Inlines();
    exports.INLINES = INLINES;
    populateBuiltins(BLOCKS, INLINES);

    function populateBuiltins() {
        var blocks = arguments.length <= 0 || arguments[0] === undefined ? new Blocks() : arguments[0];
        var inlines = arguments.length <= 1 || arguments[1] === undefined ? new Inlines() : arguments[1];

        blocks.add('if', function (sexp, builder) {
            //        PutArgs
            //        Test(Environment)
            //        Enter(BEGIN, END)
            // BEGIN: Noop
            //        JumpUnless(ELSE)
            //        Evaluate(default)
            //        Jump(END)
            // ELSE:  Noop
            //        Evalulate(inverse)
            // END:   Noop
            //        Exit
            var params = sexp[2];
            var hash = sexp[3];
            var _default = sexp[4];
            var inverse = sexp[5];

            var args = compileArgs(params, hash, builder);
            builder.putArgs(args);
            builder.test('environment');
            builder.labelled(null, function (b) {
                if (_default && inverse) {
                    b.jumpUnless('ELSE');
                    b.evaluate(_default);
                    b.jump('END');
                    b.label('ELSE');
                    b.evaluate(inverse);
                } else if (_default) {
                    b.jumpUnless('END');
                    b.evaluate(_default);
                } else {
                    throw _glimmerUtil.unreachable();
                }
            });
        });
        blocks.add('unless', function (sexp, builder) {
            //        PutArgs
            //        Test(Environment)
            //        Enter(BEGIN, END)
            // BEGIN: Noop
            //        JumpUnless(ELSE)
            //        Evaluate(default)
            //        Jump(END)
            // ELSE:  Noop
            //        Evalulate(inverse)
            // END:   Noop
            //        Exit
            var params = sexp[2];
            var hash = sexp[3];
            var _default = sexp[4];
            var inverse = sexp[5];

            var args = compileArgs(params, hash, builder);
            builder.putArgs(args);
            builder.test('environment');
            builder.labelled(null, function (b) {
                if (_default && inverse) {
                    b.jumpIf('ELSE');
                    b.evaluate(_default);
                    b.jump('END');
                    b.label('ELSE');
                    b.evaluate(inverse);
                } else if (_default) {
                    b.jumpIf('END');
                    b.evaluate(_default);
                } else {
                    throw _glimmerUtil.unreachable();
                }
            });
        });
        blocks.add('with', function (sexp, builder) {
            //        PutArgs
            //        Test(Environment)
            //        Enter(BEGIN, END)
            // BEGIN: Noop
            //        JumpUnless(ELSE)
            //        Evaluate(default)
            //        Jump(END)
            // ELSE:  Noop
            //        Evalulate(inverse)
            // END:   Noop
            //        Exit
            var params = sexp[2];
            var hash = sexp[3];
            var _default = sexp[4];
            var inverse = sexp[5];

            var args = compileArgs(params, hash, builder);
            builder.putArgs(args);
            builder.test('environment');
            builder.labelled(null, function (b) {
                if (_default && inverse) {
                    b.jumpUnless('ELSE');
                    b.evaluate(_default);
                    b.jump('END');
                    b.label('ELSE');
                    b.evaluate(inverse);
                } else if (_default) {
                    b.jumpUnless('END');
                    b.evaluate(_default);
                } else {
                    throw _glimmerUtil.unreachable();
                }
            });
        });
        blocks.add('each', function (sexp, builder) {
            //         Enter(BEGIN, END)
            // BEGIN:  Noop
            //         PutArgs
            //         PutIterable
            //         JumpUnless(ELSE)
            //         EnterList(BEGIN2, END2)
            // ITER:   Noop
            //         NextIter(BREAK)
            //         EnterWithKey(BEGIN2, END2)
            // BEGIN2: Noop
            //         PushChildScope
            //         Evaluate(default)
            //         PopScope
            // END2:   Noop
            //         Exit
            //         Jump(ITER)
            // BREAK:  Noop
            //         ExitList
            //         Jump(END)
            // ELSE:   Noop
            //         Evalulate(inverse)
            // END:    Noop
            //         Exit
            var params = sexp[2];
            var hash = sexp[3];
            var _default = sexp[4];
            var inverse = sexp[5];

            var args = compileArgs(params, hash, builder);
            builder.labelled(args, function (b) {
                b.putIterator();
                if (inverse) {
                    b.jumpUnless('ELSE');
                } else {
                    b.jumpUnless('END');
                }
                b.iter(function (b) {
                    b.evaluate(_glimmerUtil.unwrap(_default));
                });
                if (inverse) {
                    b.jump('END');
                    b.label('ELSE');
                    b.evaluate(inverse);
                }
            });
        });
        return { blocks: blocks, inlines: inlines };
    }
});
//# sourceMappingURL=data:application/json;base64,