enifed('@glimmer/runtime/lib/scanner', ['exports', '@glimmer/runtime/lib/compiled/blocks', '@glimmer/runtime/lib/compiler', '@glimmer/wire-format', '@glimmer/runtime/lib/symbol-table', '@glimmer/runtime/lib/syntax/functions', '@glimmer/runtime/lib/syntax/specialize'], function (exports, _glimmerRuntimeLibCompiledBlocks, _glimmerRuntimeLibCompiler, _glimmerWireFormat, _glimmerRuntimeLibSymbolTable, _glimmerRuntimeLibSyntaxFunctions, _glimmerRuntimeLibSyntaxSpecialize) {
    'use strict';

    exports.compileStatement = compileStatement;
    exports.scanBlock = scanBlock;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function compileStatement(statement, builder) {
        var refined = _glimmerRuntimeLibSyntaxSpecialize.SPECIALIZE.specialize(statement, builder.symbolTable);
        _glimmerRuntimeLibSyntaxFunctions.STATEMENTS.compile(refined, builder);
    }

    var Template = function Template(statements, symbolTable) {
        _classCallCheck(this, Template);

        this.statements = statements;
        this.symbolTable = symbolTable;
    };

    exports.Template = Template;

    var Layout = (function (_Template) {
        _inherits(Layout, _Template);

        function Layout() {
            _classCallCheck(this, Layout);

            _Template.apply(this, arguments);
        }

        return Layout;
    })(Template);

    exports.Layout = Layout;

    var EntryPoint = (function (_Template2) {
        _inherits(EntryPoint, _Template2);

        function EntryPoint() {
            _classCallCheck(this, EntryPoint);

            _Template2.apply(this, arguments);
        }

        EntryPoint.prototype.compile = function compile(env) {
            var table = this.symbolTable;
            var b = _glimmerRuntimeLibCompiler.builder(env, table);
            for (var i = 0; i < this.statements.length; i++) {
                var statement = this.statements[i];
                var refined = _glimmerRuntimeLibSyntaxSpecialize.SPECIALIZE.specialize(statement, table);
                _glimmerRuntimeLibSyntaxFunctions.STATEMENTS.compile(refined, b);
            }
            return new _glimmerRuntimeLibCompiledBlocks.CompiledProgram(b.toSlice(), this.symbolTable.size);
        };

        return EntryPoint;
    })(Template);

    exports.EntryPoint = EntryPoint;

    var InlineBlock = (function (_Template3) {
        _inherits(InlineBlock, _Template3);

        function InlineBlock() {
            _classCallCheck(this, InlineBlock);

            _Template3.apply(this, arguments);
        }

        InlineBlock.prototype.splat = function splat(builder) {
            var table = builder.symbolTable;
            var locals = table.getSymbols().locals;
            if (locals) {
                builder.pushChildScope();
                builder.bindPositionalArgsForLocals(locals);
            }
            for (var i = 0; i < this.statements.length; i++) {
                var statement = this.statements[i];
                var refined = _glimmerRuntimeLibSyntaxSpecialize.SPECIALIZE.specialize(statement, table);
                _glimmerRuntimeLibSyntaxFunctions.STATEMENTS.compile(refined, builder);
            }
            if (locals) {
                builder.popScope();
            }
        };

        InlineBlock.prototype.compile = function compile(env) {
            var table = this.symbolTable;
            var b = _glimmerRuntimeLibCompiler.builder(env, table);
            this.splat(b);
            return new _glimmerRuntimeLibCompiledBlocks.CompiledBlock(b.toSlice());
        };

        return InlineBlock;
    })(Template);

    exports.InlineBlock = InlineBlock;

    var PartialBlock = (function (_Template4) {
        _inherits(PartialBlock, _Template4);

        function PartialBlock() {
            _classCallCheck(this, PartialBlock);

            _Template4.apply(this, arguments);
        }

        PartialBlock.prototype.compile = function compile(env) {
            var table = this.symbolTable;
            var b = _glimmerRuntimeLibCompiler.builder(env, table);
            for (var i = 0; i < this.statements.length; i++) {
                var statement = this.statements[i];
                var refined = _glimmerRuntimeLibSyntaxSpecialize.SPECIALIZE.specialize(statement, table);
                _glimmerRuntimeLibSyntaxFunctions.STATEMENTS.compile(refined, b);
            }
            return new _glimmerRuntimeLibCompiledBlocks.CompiledProgram(b.toSlice(), table.size);
        };

        return PartialBlock;
    })(Template);

    exports.PartialBlock = PartialBlock;

    var Scanner = (function () {
        function Scanner(block, meta, env) {
            _classCallCheck(this, Scanner);

            this.block = block;
            this.meta = meta;
            this.env = env;
        }

        Scanner.prototype.scanEntryPoint = function scanEntryPoint() {
            var block = this.block;
            var meta = this.meta;

            var symbolTable = _glimmerRuntimeLibSymbolTable.entryPoint(meta);
            var child = scanBlock(block, symbolTable, this.env);
            return new EntryPoint(child.statements, symbolTable);
        };

        Scanner.prototype.scanLayout = function scanLayout() {
            var block = this.block;
            var meta = this.meta;
            var named = block.named;
            var yields = block.yields;
            var hasPartials = block.hasPartials;

            var symbolTable = _glimmerRuntimeLibSymbolTable.layout(meta, named, yields, hasPartials);
            var child = scanBlock(block, symbolTable, this.env);
            return new Layout(child.statements, symbolTable);
        };

        Scanner.prototype.scanPartial = function scanPartial(symbolTable) {
            var block = this.block;

            var child = scanBlock(block, symbolTable, this.env);
            return new PartialBlock(child.statements, symbolTable);
        };

        return Scanner;
    })();

    exports.default = Scanner;

    function scanBlock(_ref, symbolTable, env) {
        var statements = _ref.statements;

        return new RawInlineBlock(env, symbolTable, statements).scan();
    }

    var BaselineSyntax;
    exports.BaselineSyntax = BaselineSyntax;
    (function (BaselineSyntax) {
        BaselineSyntax.isScannedComponent = _glimmerWireFormat.is('scanned-component');
        BaselineSyntax.isPrimitiveElement = _glimmerWireFormat.is('open-primitive-element');
        BaselineSyntax.isOptimizedAppend = _glimmerWireFormat.is('optimized-append');
        BaselineSyntax.isUnoptimizedAppend = _glimmerWireFormat.is('unoptimized-append');
        BaselineSyntax.isAnyAttr = _glimmerWireFormat.is('any-dynamic-attr');
        BaselineSyntax.isStaticPartial = _glimmerWireFormat.is('static-partial');
        BaselineSyntax.isDynamicPartial = _glimmerWireFormat.is('dynamic-partial');
        BaselineSyntax.isFunctionExpression = _glimmerWireFormat.is('function');
        BaselineSyntax.isNestedBlock = _glimmerWireFormat.is('nested-block');
        BaselineSyntax.isScannedBlock = _glimmerWireFormat.is('scanned-block');
        BaselineSyntax.isDebugger = _glimmerWireFormat.is('debugger');
        var NestedBlock;
        (function (NestedBlock) {
            function defaultBlock(sexp) {
                return sexp[4];
            }
            NestedBlock.defaultBlock = defaultBlock;
            function inverseBlock(sexp) {
                return sexp[5];
            }
            NestedBlock.inverseBlock = inverseBlock;
            function params(sexp) {
                return sexp[2];
            }
            NestedBlock.params = params;
            function hash(sexp) {
                return sexp[3];
            }
            NestedBlock.hash = hash;
        })(NestedBlock = BaselineSyntax.NestedBlock || (BaselineSyntax.NestedBlock = {}));
    })(BaselineSyntax || (exports.BaselineSyntax = BaselineSyntax = {}));

    var RawInlineBlock = (function () {
        function RawInlineBlock(env, table, statements) {
            _classCallCheck(this, RawInlineBlock);

            this.env = env;
            this.table = table;
            this.statements = statements;
        }

        RawInlineBlock.prototype.scan = function scan() {
            var buffer = [];
            for (var i = 0; i < this.statements.length; i++) {
                var statement = this.statements[i];
                if (_glimmerWireFormat.Statements.isBlock(statement)) {
                    buffer.push(this.specializeBlock(statement));
                } else if (_glimmerWireFormat.Statements.isComponent(statement)) {
                    buffer.push.apply(buffer, this.specializeComponent(statement));
                } else {
                    buffer.push(statement);
                }
            }
            return new InlineBlock(buffer, this.table);
        };

        RawInlineBlock.prototype.specializeBlock = function specializeBlock(block) {
            var path = block[1];
            var params = block[2];
            var hash = block[3];
            var template = block[4];
            var inverse = block[5];

            return ['scanned-block', path, params, hash, this.child(template), this.child(inverse)];
        };

        RawInlineBlock.prototype.specializeComponent = function specializeComponent(sexp) {
            var tag = sexp[1];
            var component = sexp[2];

            if (this.env.hasComponentDefinition([tag], this.table)) {
                var child = this.child(component);
                var attrs = new RawInlineBlock(this.env, this.table, component.attrs);
                return [['scanned-component', tag, attrs, component.args, child]];
            } else {
                var buf = [];
                buf.push(['open-element', tag, []]);
                buf.push.apply(buf, component.attrs);
                buf.push(['flush-element']);
                buf.push.apply(buf, component.statements);
                buf.push(['close-element']);
                return buf;
            }
        };

        RawInlineBlock.prototype.child = function child(block) {
            if (!block) return null;
            var table = _glimmerRuntimeLibSymbolTable.block(this.table, block.locals);
            return new RawInlineBlock(this.env, table, block.statements);
        };

        return RawInlineBlock;
    })();

    exports.RawInlineBlock = RawInlineBlock;
});
//# sourceMappingURL=data:application/json;base64,