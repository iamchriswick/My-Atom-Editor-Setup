enifed('@glimmer/runtime/lib/compiled/expressions/lookups', ['exports', '@glimmer/runtime/lib/compiled/expressions', '@glimmer/reference'], function (exports, _glimmerRuntimeLibCompiledExpressions, _glimmerReference) {
    'use strict';

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    var CompiledLookup = (function (_CompiledExpression) {
        _inherits(CompiledLookup, _CompiledExpression);

        function CompiledLookup(base, path) {
            _classCallCheck(this, CompiledLookup);

            _CompiledExpression.call(this);
            this.base = base;
            this.path = path;
            this.type = "lookup";
        }

        CompiledLookup.create = function create(base, path) {
            if (path.length === 0) {
                return base;
            } else {
                return new this(base, path);
            }
        };

        CompiledLookup.prototype.evaluate = function evaluate(vm) {
            var base = this.base;
            var path = this.path;

            return _glimmerReference.referenceFromParts(base.evaluate(vm), path);
        };

        CompiledLookup.prototype.toJSON = function toJSON() {
            return this.base.toJSON() + '.' + this.path.join('.');
        };

        return CompiledLookup;
    })(_glimmerRuntimeLibCompiledExpressions.CompiledExpression);

    exports.default = CompiledLookup;

    var CompiledSelf = (function (_CompiledExpression2) {
        _inherits(CompiledSelf, _CompiledExpression2);

        function CompiledSelf() {
            _classCallCheck(this, CompiledSelf);

            _CompiledExpression2.apply(this, arguments);
        }

        CompiledSelf.prototype.evaluate = function evaluate(vm) {
            return vm.getSelf();
        };

        CompiledSelf.prototype.toJSON = function toJSON() {
            return 'self';
        };

        return CompiledSelf;
    })(_glimmerRuntimeLibCompiledExpressions.CompiledExpression);

    exports.CompiledSelf = CompiledSelf;

    var CompiledSymbol = (function (_CompiledExpression3) {
        _inherits(CompiledSymbol, _CompiledExpression3);

        function CompiledSymbol(symbol, debug) {
            _classCallCheck(this, CompiledSymbol);

            _CompiledExpression3.call(this);
            this.symbol = symbol;
            this.debug = debug;
        }

        CompiledSymbol.prototype.evaluate = function evaluate(vm) {
            return vm.referenceForSymbol(this.symbol);
        };

        CompiledSymbol.prototype.toJSON = function toJSON() {
            return '$' + this.symbol + '(' + this.debug + ')';
        };

        return CompiledSymbol;
    })(_glimmerRuntimeLibCompiledExpressions.CompiledExpression);

    exports.CompiledSymbol = CompiledSymbol;

    var CompiledInPartialName = (function (_CompiledExpression4) {
        _inherits(CompiledInPartialName, _CompiledExpression4);

        function CompiledInPartialName(symbol, name) {
            _classCallCheck(this, CompiledInPartialName);

            _CompiledExpression4.call(this);
            this.symbol = symbol;
            this.name = name;
        }

        CompiledInPartialName.prototype.evaluate = function evaluate(vm) {
            var symbol = this.symbol;
            var name = this.name;

            var args = vm.scope().getPartialArgs(symbol);
            return args.named.get(name);
        };

        CompiledInPartialName.prototype.toJSON = function toJSON() {
            return '$' + this.symbol + '($ARGS).' + this.name;
        };

        return CompiledInPartialName;
    })(_glimmerRuntimeLibCompiledExpressions.CompiledExpression);

    exports.CompiledInPartialName = CompiledInPartialName;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2xvb2t1cHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1FBTWMsY0FBc0I7a0JBQXRCLGNBQXNCOztBQVdsQyxpQkFYWSxjQUFzQixDQVl4QixJQUFnQyxFQUNoQyxJQUFjLEVBQUE7a0NBYlosY0FBc0I7O0FBZWhDLDBDQUFPLENBQUM7QUFIQSxnQkFBQSxDQUFBLElBQUksR0FBSixJQUFJLENBQTRCO0FBQ2hDLGdCQUFBLENBQUEsSUFBSSxHQUFKLElBQUksQ0FBVTtBQVpqQixnQkFBQSxDQUFBLElBQUksR0FBRyxRQUFRLENBQUM7U0FldEI7O0FBaEJXLHNCQUFzQixDQUczQixNQUFNLEdBQUEsZ0JBQUMsSUFBZ0MsRUFBRSxJQUFjLEVBQUE7QUFDNUQsZ0JBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDckIsdUJBQU8sSUFBSSxDQUFDO2FBQ2IsTUFBTTtBQUNMLHVCQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQzthQUM3QjtTQUNGOztBQVRXLHNCQUFzQixXQWtCbEMsUUFBUSxHQUFBLGtCQUFDLEVBQU0sRUFBQTtnQkFDUCxJQUFJLEdBQVcsSUFBSSxDQUFuQixJQUFJO2dCQUFFLElBQUksR0FBSyxJQUFJLENBQWIsSUFBSTs7QUFDaEIsbUJBQU8sa0JBdEJGLGtCQUFrQixDQXNCRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3BEOztBQXJCVyxzQkFBc0IsV0F1QmxDLE1BQU0sR0FBQSxrQkFBQTtBQUNKLG1CQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUc7U0FDdkQ7O2VBekJXLGNBQXNCOzZDQUwzQixrQkFBa0I7O3NCQUtiLGNBQXNCOztRQTRCOUIsWUFBb0I7a0JBQXBCLFlBQW9COztpQkFBcEIsWUFBb0I7a0NBQXBCLFlBQW9COzs7OztBQUFwQixvQkFBb0IsV0FDeEIsUUFBUSxHQUFBLGtCQUFDLEVBQU0sRUFBQTtBQUNiLG1CQUFPLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNyQjs7QUFIRyxvQkFBb0IsV0FLeEIsTUFBTSxHQUFBLGtCQUFBO0FBQ0osbUJBQU8sTUFBTSxDQUFDO1NBQ2Y7O2VBUEcsWUFBb0I7NkNBakNqQixrQkFBa0I7Ozs7UUEyQ3JCLGNBQXNCO2tCQUF0QixjQUFzQjs7QUFDMUIsaUJBREksY0FBc0IsQ0FDTixNQUFjLEVBQVUsS0FBYSxFQUFBO2tDQURyRCxjQUFzQjs7QUFFeEIsMkNBQU8sQ0FBQztBQURVLGdCQUFBLENBQUEsTUFBTSxHQUFOLE1BQU0sQ0FBUTtBQUFVLGdCQUFBLENBQUEsS0FBSyxHQUFMLEtBQUssQ0FBUTtTQUV4RDs7QUFIRyxzQkFBc0IsV0FLMUIsUUFBUSxHQUFBLGtCQUFDLEVBQU0sRUFBQTtBQUNiLG1CQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0M7O0FBUEcsc0JBQXNCLFdBUzFCLE1BQU0sR0FBQSxrQkFBQTtBQUNKLHlCQUFXLElBQUksQ0FBQyxNQUFNLFNBQUksSUFBSSxDQUFDLEtBQUssT0FBSTtTQUN6Qzs7ZUFYRyxjQUFzQjs2Q0EzQ25CLGtCQUFrQjs7OztRQXlEckIscUJBQTZCO2tCQUE3QixxQkFBNkI7O0FBQ2pDLGlCQURJLHFCQUE2QixDQUNiLE1BQWMsRUFBVSxJQUFZLEVBQUE7a0NBRHBELHFCQUE2Qjs7QUFFL0IsMkNBQU8sQ0FBQztBQURVLGdCQUFBLENBQUEsTUFBTSxHQUFOLE1BQU0sQ0FBUTtBQUFVLGdCQUFBLENBQUEsSUFBSSxHQUFKLElBQUksQ0FBUTtTQUV2RDs7QUFIRyw2QkFBNkIsV0FLakMsUUFBUSxHQUFBLGtCQUFDLEVBQU0sRUFBQTtnQkFDUCxNQUFNLEdBQVcsSUFBSSxDQUFyQixNQUFNO2dCQUFFLElBQUksR0FBSyxJQUFJLENBQWIsSUFBSTs7QUFDbEIsZ0JBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDN0MsbUJBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7O0FBVEcsNkJBQTZCLFdBV2pDLE1BQU0sR0FBQSxrQkFBQTtBQUNKLHlCQUFXLElBQUksQ0FBQyxNQUFNLGdCQUFXLElBQUksQ0FBQyxJQUFJLENBQUc7U0FDOUM7O2VBYkcscUJBQTZCOzZDQXpEMUIsa0JBQWtCIiwiZmlsZSI6Imxvb2t1cHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IENvbXBpbGVkRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb25zJztcbmltcG9ydCBWTSBmcm9tICcuLi8uLi92bS9hcHBlbmQnO1xuaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyByZWZlcmVuY2VGcm9tUGFydHMgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21waWxlZExvb2t1cCBleHRlbmRzIENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+IHtcbiAgcHVibGljIHR5cGUgPSBcImxvb2t1cFwiO1xuXG4gIHN0YXRpYyBjcmVhdGUoYmFzZTogQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT4sIHBhdGg6IHN0cmluZ1tdKTogQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT4ge1xuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGJhc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgdGhpcyhiYXNlLCBwYXRoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYmFzZTogQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT4sXG4gICAgcHJpdmF0ZSBwYXRoOiBzdHJpbmdbXVxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogUGF0aFJlZmVyZW5jZTxPcGFxdWU+IHtcbiAgICBsZXQgeyBiYXNlLCBwYXRoIH0gPSB0aGlzO1xuICAgIHJldHVybiByZWZlcmVuY2VGcm9tUGFydHMoYmFzZS5ldmFsdWF0ZSh2bSksIHBhdGgpO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMuYmFzZS50b0pTT04oKX0uJHt0aGlzLnBhdGguam9pbignLicpfWA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkU2VsZiBleHRlbmRzIENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+IHtcbiAgZXZhbHVhdGUodm06IFZNKTogUGF0aFJlZmVyZW5jZTxPcGFxdWU+IHtcbiAgICByZXR1cm4gdm0uZ2V0U2VsZigpO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdzZWxmJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tcGlsZWRTeW1ib2wgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248T3BhcXVlPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3ltYm9sOiBudW1iZXIsIHByaXZhdGUgZGVidWc6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT4ge1xuICAgIHJldHVybiB2bS5yZWZlcmVuY2VGb3JTeW1ib2wodGhpcy5zeW1ib2wpO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAkJHt0aGlzLnN5bWJvbH0oJHt0aGlzLmRlYnVnfSlgO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZEluUGFydGlhbE5hbWUgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248T3BhcXVlPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3ltYm9sOiBudW1iZXIsIHByaXZhdGUgbmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgbGV0IHsgc3ltYm9sLCBuYW1lIH0gPSB0aGlzO1xuICAgIGxldCBhcmdzID0gdm0uc2NvcGUoKS5nZXRQYXJ0aWFsQXJncyhzeW1ib2wpO1xuICAgIHJldHVybiBhcmdzLm5hbWVkLmdldChuYW1lKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJCR7dGhpcy5zeW1ib2x9KCRBUkdTKS4ke3RoaXMubmFtZX1gO1xuICB9XG59XG4iXX0=