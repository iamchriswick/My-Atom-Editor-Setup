enifed('@glimmer/runtime/lib/opcodes', ['exports', '@glimmer/util', '@glimmer/runtime/lib/references'], function (exports, _glimmerUtil, _glimmerRuntimeLibReferences) {
    'use strict';

    exports.pretty = pretty;
    exports.defaultToJSON = defaultToJSON;
    exports.inspect = inspect;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function pretty(json) {
        return json.type + '(' + (json.args ? json.args.join(', ') : '') + ')';
    }

    function defaultToJSON(opcode) {
        return { type: opcode[0] };
    }

    var OpcodeName;
    exports.OpcodeName = OpcodeName;
    (function (OpcodeName) {
        OpcodeName[OpcodeName["PushChildScope"] = 0] = "PushChildScope";
        OpcodeName[OpcodeName["PopScope"] = 1] = "PopScope";
        OpcodeName[OpcodeName["PushDynamicScope"] = 2] = "PushDynamicScope";
        OpcodeName[OpcodeName["PopDynamicScope"] = 3] = "PopDynamicScope";
        OpcodeName[OpcodeName["Put"] = 4] = "Put";
        OpcodeName[OpcodeName["EvaluatePut"] = 5] = "EvaluatePut";
        OpcodeName[OpcodeName["PutArgs"] = 6] = "PutArgs";
        OpcodeName[OpcodeName["BindPositionalArgs"] = 7] = "BindPositionalArgs";
        OpcodeName[OpcodeName["BindNamedArgs"] = 8] = "BindNamedArgs";
        OpcodeName[OpcodeName["BindBlocks"] = 9] = "BindBlocks";
        OpcodeName[OpcodeName["BindPartialArgs"] = 10] = "BindPartialArgs";
        OpcodeName[OpcodeName["BindCallerScope"] = 11] = "BindCallerScope";
        OpcodeName[OpcodeName["BindDynamicScope"] = 12] = "BindDynamicScope";
        OpcodeName[OpcodeName["Enter"] = 13] = "Enter";
        OpcodeName[OpcodeName["Exit"] = 14] = "Exit";
        OpcodeName[OpcodeName["Evaluate"] = 15] = "Evaluate";
        OpcodeName[OpcodeName["Jump"] = 16] = "Jump";
        OpcodeName[OpcodeName["JumpIf"] = 17] = "JumpIf";
        OpcodeName[OpcodeName["JumpUnless"] = 18] = "JumpUnless";
        OpcodeName[OpcodeName["Test"] = 19] = "Test";
        OpcodeName[OpcodeName["OpenBlock"] = 20] = "OpenBlock";
        OpcodeName[OpcodeName["CloseBlock"] = 21] = "CloseBlock";
        OpcodeName[OpcodeName["PutDynamicComponent"] = 22] = "PutDynamicComponent";
        OpcodeName[OpcodeName["PutComponent"] = 23] = "PutComponent";
        OpcodeName[OpcodeName["OpenComponent"] = 24] = "OpenComponent";
        OpcodeName[OpcodeName["DidCreateElement"] = 25] = "DidCreateElement";
        OpcodeName[OpcodeName["ShadowAttributes"] = 26] = "ShadowAttributes";
        OpcodeName[OpcodeName["DidRenderLayout"] = 27] = "DidRenderLayout";
        OpcodeName[OpcodeName["CloseComponent"] = 28] = "CloseComponent";
        OpcodeName[OpcodeName["Text"] = 29] = "Text";
        OpcodeName[OpcodeName["Comment"] = 30] = "Comment";
        OpcodeName[OpcodeName["DynamicContent"] = 31] = "DynamicContent";
        OpcodeName[OpcodeName["OpenElement"] = 32] = "OpenElement";
        OpcodeName[OpcodeName["PushRemoteElement"] = 33] = "PushRemoteElement";
        OpcodeName[OpcodeName["PopRemoteElement"] = 34] = "PopRemoteElement";
        OpcodeName[OpcodeName["OpenComponentElement"] = 35] = "OpenComponentElement";
        OpcodeName[OpcodeName["OpenDynamicElement"] = 36] = "OpenDynamicElement";
        OpcodeName[OpcodeName["FlushElement"] = 37] = "FlushElement";
        OpcodeName[OpcodeName["CloseElement"] = 38] = "CloseElement";
        OpcodeName[OpcodeName["PopElement"] = 39] = "PopElement";
        OpcodeName[OpcodeName["StaticAttr"] = 40] = "StaticAttr";
        OpcodeName[OpcodeName["Modifier"] = 41] = "Modifier";
        OpcodeName[OpcodeName["DynamicAttrNS"] = 42] = "DynamicAttrNS";
        OpcodeName[OpcodeName["DynamicAttr"] = 43] = "DynamicAttr";
        OpcodeName[OpcodeName["PutIterator"] = 44] = "PutIterator";
        OpcodeName[OpcodeName["EnterList"] = 45] = "EnterList";
        OpcodeName[OpcodeName["ExitList"] = 46] = "ExitList";
        OpcodeName[OpcodeName["EnterWithKey"] = 47] = "EnterWithKey";
        OpcodeName[OpcodeName["NextIter"] = 48] = "NextIter";
        OpcodeName[OpcodeName["PutDynamicPartial"] = 49] = "PutDynamicPartial";
        OpcodeName[OpcodeName["PutPartial"] = 50] = "PutPartial";
        OpcodeName[OpcodeName["EvaluatePartial"] = 51] = "EvaluatePartial"; // (Other<SymbolTable>, Other<Dict<PartialBlock>>)
    })(OpcodeName || (exports.OpcodeName = OpcodeName = {}));

    var Constants = (function () {
        function Constants() {
            _classCallCheck(this, Constants);

            // `0` means NULL
            this.references = [];
            this.strings = [];
            this.expressions = [];
            this.arrays = [];
            this.slices = [];
            this.blocks = [];
            this.functions = [];
            this.others = [];
            this.NULL_REFERENCE = this.reference(_glimmerRuntimeLibReferences.NULL_REFERENCE);
            this.UNDEFINED_REFERENCE = this.reference(_glimmerRuntimeLibReferences.UNDEFINED_REFERENCE);
        }

        Constants.prototype.getReference = function getReference(value) {
            return this.references[value - 1];
        };

        Constants.prototype.reference = function reference(value) {
            var index = this.references.length;
            this.references.push(value);
            return index + 1;
        };

        Constants.prototype.getString = function getString(value) {
            return this.strings[value - 1];
        };

        Constants.prototype.string = function string(value) {
            var index = this.strings.length;
            this.strings.push(value);
            return index + 1;
        };

        Constants.prototype.getExpression = function getExpression(value) {
            return this.expressions[value - 1];
        };

        Constants.prototype.expression = function expression(value) {
            var index = this.expressions.length;
            this.expressions.push(value);
            return index + 1;
        };

        Constants.prototype.getArray = function getArray(value) {
            return this.arrays[value - 1];
        };

        Constants.prototype.array = function array(values) {
            var index = this.arrays.length;
            this.arrays.push(values);
            return index + 1;
        };

        Constants.prototype.getSlice = function getSlice(value) {
            return this.slices[value - 1];
        };

        Constants.prototype.slice = function slice(_slice) {
            // TODO: Put the entire program in one big array
            var index = this.slices.length;
            this.slices.push(_slice);
            return index + 1;
        };

        Constants.prototype.getBlock = function getBlock(value) {
            return this.blocks[value - 1];
        };

        Constants.prototype.block = function block(_block) {
            var index = this.blocks.length;
            this.blocks.push(_block);
            return index + 1;
        };

        Constants.prototype.getFunction = function getFunction(value) {
            return this.functions[value - 1];
        };

        Constants.prototype.function = function _function(f) {
            var index = this.functions.length;
            this.functions.push(f);
            return index + 1;
        };

        Constants.prototype.getOther = function getOther(value) {
            return this.others[value - 1];
        };

        Constants.prototype.other = function other(_other) {
            var index = this.others.length;
            this.others.push(_other);
            return index + 1;
        };

        return Constants;
    })();

    exports.Constants = Constants;

    var AppendOpcodes = (function () {
        function AppendOpcodes() {
            _classCallCheck(this, AppendOpcodes);

            this.evaluateOpcode = _glimmerUtil.fillNulls(OpcodeName.EvaluatePartial + 1);
        }

        AppendOpcodes.prototype.add = function add(name, evaluate) {
            this.evaluateOpcode[name] = evaluate;
        };

        AppendOpcodes.prototype.construct = function construct(name, _debug, op1, op2, op3) {
            return [name | 0, (op1 || 0) | 0, (op2 || 0) | 0, (op3 || 0) | 0];
        };

        AppendOpcodes.prototype.evaluate = function evaluate(vm, opcode) {
            _glimmerUtil.LOGGER.debug('[VM] OPCODE: ' + opcode.type);
            var func = this.evaluateOpcode[opcode.type];
            func(vm, opcode);
        };

        return AppendOpcodes;
    })();

    exports.AppendOpcodes = AppendOpcodes;
    var APPEND_OPCODES = new AppendOpcodes();
    exports.APPEND_OPCODES = APPEND_OPCODES;

    var AbstractOpcode = (function () {
        function AbstractOpcode() {
            _classCallCheck(this, AbstractOpcode);

            _glimmerUtil.initializeGuid(this);
        }

        AbstractOpcode.prototype.toJSON = function toJSON() {
            return { guid: this._guid, type: this.type };
        };

        return AbstractOpcode;
    })();

    exports.AbstractOpcode = AbstractOpcode;

    var UpdatingOpcode = (function (_AbstractOpcode) {
        _inherits(UpdatingOpcode, _AbstractOpcode);

        function UpdatingOpcode() {
            _classCallCheck(this, UpdatingOpcode);

            _AbstractOpcode.apply(this, arguments);
            this.next = null;
            this.prev = null;
        }

        return UpdatingOpcode;
    })(AbstractOpcode);

    exports.UpdatingOpcode = UpdatingOpcode;

    function inspect(opcodes) {
        var buffer = [];
        opcodes.forEach(function (opcode, i) {
            _inspect(opcode.toJSON(), buffer, 0, i);
        });
        return buffer.join('');
    }

    function _inspect(opcode, buffer, level, index) {
        var indentation = [];
        for (var i = 0; i < level; i++) {
            indentation.push('  ');
        }
        buffer.push.apply(buffer, indentation);
        buffer.push(index + '. ' + opcode.type);
        if (opcode.args || opcode.details) {
            buffer.push('(');
            if (opcode.args) {
                buffer.push(opcode.args.join(', '));
            }
            if (opcode.details) {
                var _keys = Object.keys(opcode.details);
                if (_keys.length) {
                    if (opcode.args && opcode.args.length) {
                        buffer.push(', ');
                    }
                    buffer.push(_keys.map(function (key) {
                        return key + '=' + (opcode.details && opcode.details[key]);
                    }).join(', '));
                }
            }
            buffer.push(')');
        }
        buffer.push('\n');
        if (opcode.children && opcode.children.length) {
            for (var i = 0; i < opcode.children.length; i++) {
                _inspect(opcode.children[i], buffer, level + 1, i);
            }
        }
    }
});
//# sourceMappingURL=data:application/json;base64,