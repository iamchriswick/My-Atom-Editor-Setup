enifed('@glimmer/runtime/lib/syntax/specialize', ['exports', '@glimmer/wire-format', '@glimmer/util'], function (exports, _glimmerWireFormat, _glimmerUtil) {
    'use strict';

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    var Specialize = (function () {
        function Specialize() {
            _classCallCheck(this, Specialize);

            this.names = _glimmerUtil.dict();
            this.funcs = [];
        }

        Specialize.prototype.add = function add(name, func) {
            this.funcs.push(func);
            this.names[name] = this.funcs.length - 1;
        };

        Specialize.prototype.specialize = function specialize(sexp, table) {
            var name = sexp[0];
            var index = this.names[name];
            if (index === undefined) return sexp;
            var func = this.funcs[index];
            _glimmerUtil.assert(!!func, 'expected a specialization for ' + sexp[0]);
            return func(sexp, table);
        };

        return Specialize;
    })();

    exports.Specialize = Specialize;
    var SPECIALIZE = new Specialize();
    exports.SPECIALIZE = SPECIALIZE;
    var E = _glimmerWireFormat.Expressions;
    SPECIALIZE.add('append', function (sexp, _symbolTable) {
        var path = sexp[1];
        if (Array.isArray(path) && (E.isUnknown(path) || E.isGet(path))) {
            if (path[1].length !== 1) {
                return ['unoptimized-append', sexp[1], sexp[2]];
            }
        }
        return ['optimized-append', sexp[1], sexp[2]];
    });
    SPECIALIZE.add('dynamic-attr', function (sexp, _symbolTable) {
        return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], false];
    });
    SPECIALIZE.add('trusting-attr', function (sexp, _symbolTable) {
        return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], true];
    });
    SPECIALIZE.add('partial', function (sexp, _table) {
        var expression = sexp[1];
        if (typeof expression === 'string') {
            return ['static-partial', expression];
        } else {
            return ['dynamic-partial', expression];
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3N5bnRheC9zcGVjaWFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBU00sVUFBQTtBQUFOLGlCQUFNLFVBQUEsR0FBTjtrQ0FBTSxVQUFBOztBQUNJLGdCQUFBLENBQUEsS0FBSyxHQUFHLGFBUlQsSUFBSSxFQVFtQixDQUFDO0FBQ3ZCLGdCQUFBLENBQUEsS0FBSyxHQUF5QixFQUFFLENBQUM7U0FpQjFDOztBQW5CSyxrQkFBQSxXQUlKLEdBQUcsR0FBQSxhQUFDLElBQVUsRUFBRSxJQUF3QixFQUFBO0FBQ3RDLGdCQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QixnQkFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7U0FDMUM7O0FBUEcsa0JBQUEsV0FTSixVQUFVLEdBQUEsb0JBQUMsSUFBWSxFQUFFLEtBQWtCLEVBQUE7QUFDekMsZ0JBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN6QixnQkFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU3QixnQkFBSSxLQUFLLEtBQUssU0FBUyxFQUFFLE9BQU8sSUFBSSxDQUFDO0FBRXJDLGdCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzdCLHlCQXZCVyxNQUFNLENBdUJWLENBQUMsQ0FBQyxJQUFJLHFDQUFtQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUcsQ0FBQztBQUMzRCxtQkFBTyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzFCOztlQWxCRyxVQUFBOzs7O0FBcUJDLFFBQU0sVUFBVSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7O0FBRzNDLFFBQU8sQ0FBQyxHQUFHLG1CQUFXLFdBQVcsQ0FBQztBQUVsQyxjQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFDLElBQWMsRUFBRSxZQUFZLEVBQUE7QUFDcEQsWUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRW5CLFlBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUEsQUFBQyxFQUFFO0FBQy9ELGdCQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBRXhCLHVCQUFPLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pEO1NBQ0Y7QUFFRCxlQUFPLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQy9DLENBQUMsQ0FBQztBQUVILGNBQVUsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLFVBQUMsSUFBbUIsRUFBRSxZQUFZLEVBQUE7QUFDL0QsZUFBTyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQy9ELENBQUMsQ0FBQztBQUVILGNBQVUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLFVBQUMsSUFBb0IsRUFBRSxZQUFZLEVBQUE7QUFDakUsZUFBTyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQzlELENBQUMsQ0FBQztBQUVILGNBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFVBQUMsSUFBZSxFQUFFLE1BQU0sRUFBQTtBQUNoRCxZQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFekIsWUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7QUFDbEMsbUJBQU8sQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUN2QyxNQUFNO0FBQ0wsbUJBQU8sQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUN4QztLQUNGLENBQUMsQ0FBQyIsImZpbGUiOiJzcGVjaWFsaXplLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgV2lyZUZvcm1hdCBmcm9tICdAZ2xpbW1lci93aXJlLWZvcm1hdCc7XHJcbmltcG9ydCB7IEJhc2VsaW5lU3ludGF4IH0gZnJvbSAnLi4vc2Nhbm5lcic7XHJcbmltcG9ydCB7IGRpY3QsIGFzc2VydCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xyXG5pbXBvcnQgeyBTeW1ib2xUYWJsZSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU3ludGF4ID0gQmFzZWxpbmVTeW50YXguQW55U3RhdGVtZW50O1xyXG5leHBvcnQgdHlwZSBOYW1lID0gQmFzZWxpbmVTeW50YXguQW55U3RhdGVtZW50WzBdO1xyXG5leHBvcnQgdHlwZSBTcGVjaWFsaXplRnVuY3Rpb24gPSAoc2V4cDogU3ludGF4LCBzeW1ib2xUYWJsZTogU3ltYm9sVGFibGUpID0+IFN5bnRheDtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcGVjaWFsaXplIHtcclxuICBwcml2YXRlIG5hbWVzID0gZGljdDxudW1iZXI+KCk7XHJcbiAgcHJpdmF0ZSBmdW5jczogU3BlY2lhbGl6ZUZ1bmN0aW9uW10gPSBbXTtcclxuXHJcbiAgYWRkKG5hbWU6IE5hbWUsIGZ1bmM6IFNwZWNpYWxpemVGdW5jdGlvbikge1xyXG4gICAgdGhpcy5mdW5jcy5wdXNoKGZ1bmMpO1xyXG4gICAgdGhpcy5uYW1lc1tuYW1lXSA9IHRoaXMuZnVuY3MubGVuZ3RoIC0gMTtcclxuICB9XHJcblxyXG4gIHNwZWNpYWxpemUoc2V4cDogU3ludGF4LCB0YWJsZTogU3ltYm9sVGFibGUpOiBTeW50YXgge1xyXG4gICAgbGV0IG5hbWU6IE5hbWUgPSBzZXhwWzBdO1xyXG4gICAgbGV0IGluZGV4ID0gdGhpcy5uYW1lc1tuYW1lXTtcclxuXHJcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkgcmV0dXJuIHNleHA7XHJcblxyXG4gICAgbGV0IGZ1bmMgPSB0aGlzLmZ1bmNzW2luZGV4XTtcclxuICAgIGFzc2VydCghIWZ1bmMsIGBleHBlY3RlZCBhIHNwZWNpYWxpemF0aW9uIGZvciAke3NleHBbMF19YCk7XHJcbiAgICByZXR1cm4gZnVuYyhzZXhwLCB0YWJsZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1BFQ0lBTElaRSA9IG5ldyBTcGVjaWFsaXplKCk7XHJcblxyXG5pbXBvcnQgUyA9IFdpcmVGb3JtYXQuU3RhdGVtZW50cztcclxuaW1wb3J0IEUgPSBXaXJlRm9ybWF0LkV4cHJlc3Npb25zO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ2FwcGVuZCcsIChzZXhwOiBTLkFwcGVuZCwgX3N5bWJvbFRhYmxlKSA9PiB7XHJcbiAgbGV0IHBhdGggPSBzZXhwWzFdO1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSAmJiAoRS5pc1Vua25vd24ocGF0aCkgfHwgRS5pc0dldChwYXRoKSkpIHtcclxuICAgIGlmIChwYXRoWzFdLmxlbmd0aCAhPT0gMSkge1xyXG5cclxuICAgICAgcmV0dXJuIFsndW5vcHRpbWl6ZWQtYXBwZW5kJywgc2V4cFsxXSwgc2V4cFsyXV07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gWydvcHRpbWl6ZWQtYXBwZW5kJywgc2V4cFsxXSwgc2V4cFsyXV07XHJcbn0pO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ2R5bmFtaWMtYXR0cicsIChzZXhwOiBTLkR5bmFtaWNBdHRyLCBfc3ltYm9sVGFibGUpID0+IHtcclxuICByZXR1cm4gWydhbnktZHluYW1pYy1hdHRyJywgc2V4cFsxXSwgc2V4cFsyXSwgc2V4cFszXSwgZmFsc2VdO1xyXG59KTtcclxuXHJcblNQRUNJQUxJWkUuYWRkKCd0cnVzdGluZy1hdHRyJywgKHNleHA6IFMuVHJ1c3RpbmdBdHRyLCBfc3ltYm9sVGFibGUpID0+IHtcclxuICByZXR1cm4gWydhbnktZHluYW1pYy1hdHRyJywgc2V4cFsxXSwgc2V4cFsyXSwgc2V4cFszXSwgdHJ1ZV07XHJcbn0pO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ3BhcnRpYWwnLCAoc2V4cDogUy5QYXJ0aWFsLCBfdGFibGUpID0+IHtcclxuICBsZXQgZXhwcmVzc2lvbiA9IHNleHBbMV07XHJcblxyXG4gIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiBbJ3N0YXRpYy1wYXJ0aWFsJywgZXhwcmVzc2lvbl07XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBbJ2R5bmFtaWMtcGFydGlhbCcsIGV4cHJlc3Npb25dO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==