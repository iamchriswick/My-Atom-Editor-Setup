import CompiledValue from '../compiled/expressions/value';
import CompiledHasBlock, { CompiledHasBlockParams } from '../compiled/expressions/has-block';
import { LOGGER, dict, assert, unwrap, unreachable } from '@glimmer/util';
import CompiledLookup, { CompiledSelf, CompiledSymbol, CompiledInPartialName } from '../compiled/expressions/lookups';
import CompiledHelper from '../compiled/expressions/helper';
import CompiledConcat from '../compiled/expressions/concat';
import { COMPILED_EMPTY_POSITIONAL_ARGS, COMPILED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS, CompiledArgs, CompiledPositionalArgs, CompiledNamedArgs } from '../compiled/expressions/args';
import { CompiledGetBlockBySymbol, CompiledInPartialGetBlock } from '../compiled/expressions/has-block';
import { CompiledFunctionExpression } from '../compiled/expressions/function';
function debugCallback(context, get) {
    console.info('Use `context`, and `get(<path>)` to debug this template.');
    /* tslint:disable */
    debugger;
    /* tslint:enable */
    return { context, get };
}
function getter(vm, builder) {
    return (path) => {
        let parts = path.split('.');
        if (parts[0] === 'this') {
            parts[0] = null;
        }
        return compileRef(parts, builder).evaluate(vm);
    };
}
let callback = debugCallback;
// For testing purposes
export function setDebuggerCallback(cb) {
    callback = cb;
}
export function resetDebuggerCallback() {
    callback = debugCallback;
}
export class Compilers {
    constructor() {
        this.names = dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    compile(sexp, builder) {
        let name = sexp[0];
        let index = this.names[name];
        let func = this.funcs[index];
        assert(!!func, `expected an implementation for ${sexp[0]}`);
        return func(sexp, builder);
    }
}
export const STATEMENTS = new Compilers();
STATEMENTS.add('text', (sexp, builder) => {
    builder.text(sexp[1]);
});
STATEMENTS.add('comment', (sexp, builder) => {
    builder.comment(sexp[1]);
});
STATEMENTS.add('close-element', (_sexp, builder) => {
    LOGGER.trace('close-element statement');
    builder.closeElement();
});
STATEMENTS.add('flush-element', (_sexp, builder) => {
    builder.flushElement();
});
STATEMENTS.add('modifier', (sexp, builder) => {
    let [, path, params, hash] = sexp;
    let args = compileArgs(params, hash, builder);
    if (builder.env.hasModifier(path, builder.symbolTable)) {
        builder.modifier(path[0], args);
    }
    else {
        throw new Error(`Compile Error ${path.join('.')} is not a modifier: Helpers may not be used in the element form.`);
    }
});
STATEMENTS.add('static-attr', (sexp, builder) => {
    let [, name, value, namespace] = sexp;
    builder.staticAttr(name, namespace, value);
});
STATEMENTS.add('any-dynamic-attr', (sexp, builder) => {
    let [, name, value, namespace, trusting] = sexp;
    builder.putValue(value);
    if (namespace) {
        builder.dynamicAttrNS(name, namespace, trusting);
    }
    else {
        builder.dynamicAttr(name, trusting);
    }
});
STATEMENTS.add('open-element', (sexp, builder) => {
    LOGGER.trace('open-element statement');
    builder.openPrimitiveElement(sexp[1]);
});
STATEMENTS.add('optimized-append', (sexp, builder) => {
    let [, value, trustingMorph] = sexp;
    let { inlines } = builder.env.macros();
    let returned = inlines.compile(sexp, builder) || value;
    if (returned === true)
        return;
    builder.putValue(returned[1]);
    if (trustingMorph) {
        builder.trustingAppend();
    }
    else {
        builder.cautiousAppend();
    }
});
STATEMENTS.add('unoptimized-append', (sexp, builder) => {
    let [, value, trustingMorph] = sexp;
    let { inlines } = builder.env.macros();
    let returned = inlines.compile(sexp, builder) || value;
    if (returned === true)
        return;
    if (trustingMorph) {
        builder.guardedTrustingAppend(returned[1]);
    }
    else {
        builder.guardedCautiousAppend(returned[1]);
    }
});
STATEMENTS.add('nested-block', (sexp, builder) => {
    let { blocks } = builder.env.macros();
    blocks.compile(sexp, builder);
});
STATEMENTS.add('scanned-block', (sexp, builder) => {
    let [, path, params, hash, template, inverse] = sexp;
    let templateBlock = template && template.scan();
    let inverseBlock = inverse && inverse.scan();
    let { blocks } = builder.env.macros();
    blocks.compile(['nested-block', path, params, hash, templateBlock, inverseBlock], builder);
});
STATEMENTS.add('scanned-component', (sexp, builder) => {
    let [, tag, attrs, rawArgs, rawBlock] = sexp;
    let block = rawBlock && rawBlock.scan();
    let args = compileBlockArgs(null, rawArgs, { default: block, inverse: null }, builder);
    let definition = builder.env.getComponentDefinition([tag], builder.symbolTable);
    builder.putComponentDefinition(definition);
    builder.openComponent(args, attrs.scan());
    builder.closeComponent();
});
STATEMENTS.add('static-partial', (sexp, builder) => {
    let [, name] = sexp;
    if (!builder.env.hasPartial(name, builder.symbolTable)) {
        throw new Error(`Compile Error: Could not find a partial named "${name}"`);
    }
    let definition = builder.env.lookupPartial(name, builder.symbolTable);
    builder.putPartialDefinition(definition);
    builder.evaluatePartial();
});
STATEMENTS.add('dynamic-partial', (sexp, builder) => {
    let [, name] = sexp;
    builder.startLabels();
    builder.putValue(name);
    builder.test('simple');
    builder.enter('BEGIN', 'END');
    builder.label('BEGIN');
    builder.jumpUnless('END');
    builder.putDynamicPartialDefinition();
    builder.evaluatePartial();
    builder.label('END');
    builder.exit();
    builder.stopLabels();
});
STATEMENTS.add('yield', function (sexp, builder) {
    let [, to, params] = sexp;
    let args = compileArgs(params, null, builder);
    builder.yield(args, to);
});
STATEMENTS.add('debugger', (sexp, builder) => {
    builder.putValue(['function', (vm) => {
            let context = vm.getSelf().value();
            let get = (path) => {
                return getter(vm, builder)(path).value();
            };
            callback(context, get);
        }]);
    return sexp;
});
let EXPRESSIONS = new Compilers();
export function expr(expression, builder) {
    if (Array.isArray(expression)) {
        return EXPRESSIONS.compile(expression, builder);
    }
    else {
        return new CompiledValue(expression);
    }
}
EXPRESSIONS.add('unknown', (sexp, builder) => {
    let path = sexp[1];
    if (builder.env.hasHelper(path, builder.symbolTable)) {
        return new CompiledHelper(path, builder.env.lookupHelper(path, builder.symbolTable), CompiledArgs.empty(), builder.symbolTable);
    }
    else {
        return compileRef(path, builder);
    }
});
EXPRESSIONS.add('concat', ((sexp, builder) => {
    let params = sexp[1].map(p => expr(p, builder));
    return new CompiledConcat(params);
}));
EXPRESSIONS.add('function', (sexp, builder) => {
    return new CompiledFunctionExpression(sexp[1], builder.symbolTable);
});
EXPRESSIONS.add('helper', (sexp, builder) => {
    let { env, symbolTable } = builder;
    let [, path, params, hash] = sexp;
    if (env.hasHelper(path, symbolTable)) {
        let args = compileArgs(params, hash, builder);
        return new CompiledHelper(path, env.lookupHelper(path, symbolTable), args, symbolTable);
    }
    else {
        throw new Error(`Compile Error: ${path.join('.')} is not a helper`);
    }
});
EXPRESSIONS.add('get', (sexp, builder) => {
    return compileRef(sexp[1], builder);
});
EXPRESSIONS.add('undefined', (_sexp, _builder) => {
    return new CompiledValue(undefined);
});
EXPRESSIONS.add('arg', (sexp, builder) => {
    let [, parts] = sexp;
    let head = parts[0];
    let named, partial;
    if (named = builder.symbolTable.getSymbol('named', head)) {
        let path = parts.slice(1);
        let inner = new CompiledSymbol(named, head);
        return CompiledLookup.create(inner, path);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        let path = parts.slice(1);
        let inner = new CompiledInPartialName(partial, head);
        return CompiledLookup.create(inner, path);
    }
    else {
        throw new Error(`[BUG] @${parts.join('.')} is not a valid lookup path.`);
    }
});
EXPRESSIONS.add('has-block', (sexp, builder) => {
    let blockName = sexp[1];
    let yields, partial;
    if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
        let inner = new CompiledGetBlockBySymbol(yields, blockName);
        return new CompiledHasBlock(inner);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        let inner = new CompiledInPartialGetBlock(partial, blockName);
        return new CompiledHasBlock(inner);
    }
    else {
        throw new Error('[BUG] ${blockName} is not a valid block name.');
    }
});
EXPRESSIONS.add('has-block-params', (sexp, builder) => {
    let blockName = sexp[1];
    let yields, partial;
    if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
        let inner = new CompiledGetBlockBySymbol(yields, blockName);
        return new CompiledHasBlockParams(inner);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        let inner = new CompiledInPartialGetBlock(partial, blockName);
        return new CompiledHasBlockParams(inner);
    }
    else {
        throw new Error('[BUG] ${blockName} is not a valid block name.');
    }
});
export function compileArgs(params, hash, builder) {
    let compiledParams = compileParams(params, builder);
    let compiledHash = compileHash(hash, builder);
    return CompiledArgs.create(compiledParams, compiledHash, EMPTY_BLOCKS);
}
export function compileBlockArgs(params, hash, blocks, builder) {
    let compiledParams = compileParams(params, builder);
    let compiledHash = compileHash(hash, builder);
    return CompiledArgs.create(compiledParams, compiledHash, blocks);
}
export function compileBaselineArgs(args, builder) {
    let [params, hash, _default, inverse] = args;
    return CompiledArgs.create(compileParams(params, builder), compileHash(hash, builder), { default: _default, inverse });
}
function compileParams(params, builder) {
    if (!params || params.length === 0)
        return COMPILED_EMPTY_POSITIONAL_ARGS;
    let compiled = params.map(p => expr(p, builder));
    return CompiledPositionalArgs.create(compiled);
}
function compileHash(hash, builder) {
    if (!hash)
        return COMPILED_EMPTY_NAMED_ARGS;
    let [keys, values] = hash;
    if (keys.length === 0)
        return COMPILED_EMPTY_NAMED_ARGS;
    let compiled = values.map(p => expr(p, builder));
    return new CompiledNamedArgs(keys, compiled);
}
function compileRef(parts, builder) {
    let head = parts[0];
    let local;
    if (head === null) {
        let inner = new CompiledSelf();
        let path = parts.slice(1);
        return CompiledLookup.create(inner, path);
    }
    else if (local = builder.symbolTable.getSymbol('local', head)) {
        let path = parts.slice(1);
        let inner = new CompiledSymbol(local, head);
        return CompiledLookup.create(inner, path);
    }
    else {
        let inner = new CompiledSelf();
        return CompiledLookup.create(inner, parts);
    }
}
export class Blocks {
    constructor() {
        this.names = dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    addMissing(func) {
        this.missing = func;
    }
    compile(sexp, builder) {
        // assert(sexp[1].length === 1, 'paths in blocks are not supported');
        let name = sexp[1][0];
        let index = this.names[name];
        if (index === undefined) {
            assert(!!this.missing, `${name} not found, and no catch-all block handler was registered`);
            let func = this.missing;
            let handled = func(sexp, builder);
            assert(!!handled, `${name} not found, and the catch-all block handler didn't handle it`);
        }
        else {
            let func = this.funcs[index];
            func(sexp, builder);
        }
    }
}
export const BLOCKS = new Blocks();
export class Inlines {
    constructor() {
        this.names = dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    addMissing(func) {
        this.missing = func;
    }
    compile(sexp, builder) {
        let value = sexp[1];
        // TODO: Fix this so that expression macros can return
        // things like components, so that {{component foo}}
        // is the same as {{(component foo)}}
        if (!Array.isArray(value))
            return ['expr', value];
        let path;
        let params;
        let hash;
        if (value[0] === 'helper') {
            path = value[1];
            params = value[2];
            hash = value[3];
        }
        else if (value[0] === 'unknown') {
            path = value[1];
            params = hash = null;
        }
        else {
            return ['expr', value];
        }
        if (path.length > 1 && !params && !hash) {
            return ['expr', value];
        }
        let name = path[0];
        let index = this.names[name];
        if (index === undefined && this.missing) {
            let func = this.missing;
            let returned = func(path, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        }
        else if (index !== undefined) {
            let func = this.funcs[index];
            let returned = func(path, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        }
        else {
            return ['expr', value];
        }
    }
}
export const INLINES = new Inlines();
populateBuiltins(BLOCKS, INLINES);
export function populateBuiltins(blocks = new Blocks(), inlines = new Inlines()) {
    blocks.add('if', (sexp, builder) => {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, b => {
            if (_default && inverse) {
                b.jumpUnless('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpUnless('END');
                b.evaluate(_default);
            }
            else {
                throw unreachable();
            }
        });
    });
    blocks.add('unless', (sexp, builder) => {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, b => {
            if (_default && inverse) {
                b.jumpIf('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpIf('END');
                b.evaluate(_default);
            }
            else {
                throw unreachable();
            }
        });
    });
    blocks.add('with', (sexp, builder) => {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, b => {
            if (_default && inverse) {
                b.jumpUnless('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpUnless('END');
                b.evaluate(_default);
            }
            else {
                throw unreachable();
            }
        });
    });
    blocks.add('each', (sexp, builder) => {
        //         Enter(BEGIN, END)
        // BEGIN:  Noop
        //         PutArgs
        //         PutIterable
        //         JumpUnless(ELSE)
        //         EnterList(BEGIN2, END2)
        // ITER:   Noop
        //         NextIter(BREAK)
        //         EnterWithKey(BEGIN2, END2)
        // BEGIN2: Noop
        //         PushChildScope
        //         Evaluate(default)
        //         PopScope
        // END2:   Noop
        //         Exit
        //         Jump(ITER)
        // BREAK:  Noop
        //         ExitList
        //         Jump(END)
        // ELSE:   Noop
        //         Evalulate(inverse)
        // END:    Noop
        //         Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.labelled(args, b => {
            b.putIterator();
            if (inverse) {
                b.jumpUnless('ELSE');
            }
            else {
                b.jumpUnless('END');
            }
            b.iter(b => {
                b.evaluate(unwrap(_default));
            });
            if (inverse) {
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
        });
    });
    return { blocks, inlines };
}
//# sourceMappingURL=data:application/json;base64,