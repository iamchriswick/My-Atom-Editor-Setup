import { COMPILED_EMPTY_POSITIONAL_ARGS, EVALUATED_EMPTY_POSITIONAL_ARGS, CompiledPositionalArgs, EvaluatedPositionalArgs } from './positional-args';
import { COMPILED_EMPTY_NAMED_ARGS, EVALUATED_EMPTY_NAMED_ARGS, CompiledNamedArgs, EvaluatedNamedArgs } from './named-args';
import { combineTagged } from '@glimmer/reference';
export { COMPILED_EMPTY_POSITIONAL_ARGS, COMPILED_EMPTY_NAMED_ARGS };
export const EMPTY_BLOCKS = {
    default: null,
    inverse: null
};
export class CompiledArgs {
    constructor(positional, named, blocks) {
        this.positional = positional;
        this.named = named;
        this.blocks = blocks;
        this.type = "compiled-args";
    }
    static create(positional, named, blocks) {
        if (positional === COMPILED_EMPTY_POSITIONAL_ARGS && named === COMPILED_EMPTY_NAMED_ARGS && blocks === EMPTY_BLOCKS) {
            return this.empty();
        }
        else {
            return new this(positional, named, blocks);
        }
    }
    static empty() {
        return COMPILED_EMPTY_ARGS;
    }
    evaluate(vm) {
        let { positional, named, blocks } = this;
        return EvaluatedArgs.create(positional.evaluate(vm), named.evaluate(vm), blocks);
    }
}
export const COMPILED_EMPTY_ARGS = new (class extends CompiledArgs {
    constructor() {
        super(COMPILED_EMPTY_POSITIONAL_ARGS, COMPILED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS);
    }
    evaluate(_vm) {
        return EMPTY_EVALUATED_ARGS;
    }
});
export class EvaluatedArgs {
    constructor(positional, named, blocks) {
        this.positional = positional;
        this.named = named;
        this.blocks = blocks;
        this.tag = combineTagged([positional, named]);
    }
    static empty() {
        return EMPTY_EVALUATED_ARGS;
    }
    static create(positional, named, blocks) {
        return new this(positional, named, blocks);
    }
    static positional(values, blocks = EMPTY_BLOCKS) {
        return new this(EvaluatedPositionalArgs.create(values), EVALUATED_EMPTY_NAMED_ARGS, blocks);
    }
    static named(map, blocks = EMPTY_BLOCKS) {
        return new this(EVALUATED_EMPTY_POSITIONAL_ARGS, EvaluatedNamedArgs.create(map), blocks);
    }
}
const EMPTY_EVALUATED_ARGS = new EvaluatedArgs(EVALUATED_EMPTY_POSITIONAL_ARGS, EVALUATED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS);
export { CompiledPositionalArgs, EvaluatedPositionalArgs, CompiledNamedArgs, EvaluatedNamedArgs };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2FyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLDhCQUE4QixFQUFFLCtCQUErQixFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckosT0FBTyxFQUFFLHlCQUF5QixFQUFFLDBCQUEwQixFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzVILE9BQU8sRUFBOEIsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJL0UsT0FBTyxFQUFFLDhCQUE4QixFQUFFLHlCQUF5QixFQUFFLENBQUM7QUFPckUsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFXO0lBQ2xDLE9BQU8sRUFBRSxJQUFJO0lBQ2IsT0FBTyxFQUFFLElBQUk7Q0FDZCxDQUFDO0FBRUYsTUFBTTtJQWVKLFlBQ1MsVUFBa0MsRUFDbEMsS0FBd0IsRUFDeEIsTUFBYztRQUZkLGVBQVUsR0FBVixVQUFVLENBQXdCO1FBQ2xDLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBQ3hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFMaEIsU0FBSSxHQUFHLGVBQWUsQ0FBQztJQU85QixDQUFDO0lBbkJELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBa0MsRUFBRSxLQUF3QixFQUFFLE1BQWM7UUFDeEYsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLDhCQUE4QixJQUFJLEtBQUssS0FBSyx5QkFBeUIsSUFBSSxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNwSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixNQUFNLENBQUMsbUJBQW1CLENBQUM7SUFDN0IsQ0FBQztJQVdELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsSUFBSSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBaUIsSUFBSSxDQUFDLEtBQU0sU0FBUSxZQUFZO0lBQzlFO1FBQ0UsS0FBSyxDQUFDLDhCQUE4QixFQUFFLHlCQUF5QixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBTztRQUNkLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTTtJQW1CSixZQUNTLFVBQW1DLEVBQ25DLEtBQXlCLEVBQ3pCLE1BQWM7UUFGZCxlQUFVLEdBQVYsVUFBVSxDQUF5QjtRQUNuQyxVQUFLLEdBQUwsS0FBSyxDQUFvQjtRQUN6QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRXJCLElBQUksQ0FBQyxHQUFHLEdBQUcsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQXhCRCxNQUFNLENBQUMsS0FBSztRQUNWLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFtQyxFQUFFLEtBQXlCLEVBQUUsTUFBYztRQUMxRixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUErQixFQUFFLE1BQU0sR0FBRyxZQUFZO1FBQ3RFLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBZ0MsRUFBRSxNQUFNLEdBQUcsWUFBWTtRQUNsRSxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsK0JBQStCLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNGLENBQUM7Q0FXRjtBQUVELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxhQUFhLENBQUMsK0JBQStCLEVBQUUsMEJBQTBCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFFMUgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVk0gZnJvbSAnLi4vLi4vdm0vYXBwZW5kJztcbmltcG9ydCB7IENPTVBJTEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUywgRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUywgQ29tcGlsZWRQb3NpdGlvbmFsQXJncywgRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3MgfSBmcm9tICcuL3Bvc2l0aW9uYWwtYXJncyc7XG5pbXBvcnQgeyBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTLCBFVkFMVUFURURfRU1QVFlfTkFNRURfQVJHUywgQ29tcGlsZWROYW1lZEFyZ3MsIEV2YWx1YXRlZE5hbWVkQXJncyB9IGZyb20gJy4vbmFtZWQtYXJncyc7XG5pbXBvcnQgeyBSZXZpc2lvblRhZywgUGF0aFJlZmVyZW5jZSwgY29tYmluZVRhZ2dlZCB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBJbmxpbmVCbG9jayB9IGZyb20gJy4uLy4uL3NjYW5uZXInO1xuaW1wb3J0IHsgT3BhcXVlLCBPcHRpb24sIERpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IHsgQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmxvY2tzIHtcbiAgZGVmYXVsdDogT3B0aW9uPElubGluZUJsb2NrPjtcbiAgaW52ZXJzZTogT3B0aW9uPElubGluZUJsb2NrPjtcbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX0JMT0NLUzogQmxvY2tzID0ge1xuICBkZWZhdWx0OiBudWxsLFxuICBpbnZlcnNlOiBudWxsXG59O1xuXG5leHBvcnQgY2xhc3MgQ29tcGlsZWRBcmdzIHtcbiAgc3RhdGljIGNyZWF0ZShwb3NpdGlvbmFsOiBDb21waWxlZFBvc2l0aW9uYWxBcmdzLCBuYW1lZDogQ29tcGlsZWROYW1lZEFyZ3MsIGJsb2NrczogQmxvY2tzKTogQ29tcGlsZWRBcmdzIHtcbiAgICBpZiAocG9zaXRpb25hbCA9PT0gQ09NUElMRURfRU1QVFlfUE9TSVRJT05BTF9BUkdTICYmIG5hbWVkID09PSBDT01QSUxFRF9FTVBUWV9OQU1FRF9BUkdTICYmIGJsb2NrcyA9PT0gRU1QVFlfQkxPQ0tTKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbXB0eSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMocG9zaXRpb25hbCwgbmFtZWQsIGJsb2Nrcyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGVtcHR5KCk6IENvbXBpbGVkQXJncyB7XG4gICAgcmV0dXJuIENPTVBJTEVEX0VNUFRZX0FSR1M7XG4gIH1cblxuICBwdWJsaWMgdHlwZSA9IFwiY29tcGlsZWQtYXJnc1wiO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwb3NpdGlvbmFsOiBDb21waWxlZFBvc2l0aW9uYWxBcmdzLFxuICAgIHB1YmxpYyBuYW1lZDogQ29tcGlsZWROYW1lZEFyZ3MsXG4gICAgcHVibGljIGJsb2NrczogQmxvY2tzXG4gICkge1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogRXZhbHVhdGVkQXJncyB7XG4gICAgbGV0IHsgcG9zaXRpb25hbCwgbmFtZWQsIGJsb2NrcyB9ID0gdGhpcztcbiAgICByZXR1cm4gRXZhbHVhdGVkQXJncy5jcmVhdGUocG9zaXRpb25hbC5ldmFsdWF0ZSh2bSksIG5hbWVkLmV2YWx1YXRlKHZtKSwgYmxvY2tzKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQ09NUElMRURfRU1QVFlfQVJHUzogQ29tcGlsZWRBcmdzID0gbmV3IChjbGFzcyBleHRlbmRzIENvbXBpbGVkQXJncyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKENPTVBJTEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUywgQ09NUElMRURfRU1QVFlfTkFNRURfQVJHUywgRU1QVFlfQkxPQ0tTKTtcbiAgfVxuXG4gIGV2YWx1YXRlKF92bTogVk0pOiBFdmFsdWF0ZWRBcmdzIHtcbiAgICByZXR1cm4gRU1QVFlfRVZBTFVBVEVEX0FSR1M7XG4gIH1cbn0pO1xuXG5leHBvcnQgY2xhc3MgRXZhbHVhdGVkQXJncyB7XG4gIHN0YXRpYyBlbXB0eSgpOiBFdmFsdWF0ZWRBcmdzIHtcbiAgICByZXR1cm4gRU1QVFlfRVZBTFVBVEVEX0FSR1M7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKHBvc2l0aW9uYWw6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzLCBuYW1lZDogRXZhbHVhdGVkTmFtZWRBcmdzLCBibG9ja3M6IEJsb2Nrcyk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBuZXcgdGhpcyhwb3NpdGlvbmFsLCBuYW1lZCwgYmxvY2tzKTtcbiAgfVxuXG4gIHN0YXRpYyBwb3NpdGlvbmFsKHZhbHVlczogUGF0aFJlZmVyZW5jZTxPcGFxdWU+W10sIGJsb2NrcyA9IEVNUFRZX0JMT0NLUyk6IEV2YWx1YXRlZEFyZ3Mge1xuICAgIHJldHVybiBuZXcgdGhpcyhFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncy5jcmVhdGUodmFsdWVzKSwgRVZBTFVBVEVEX0VNUFRZX05BTUVEX0FSR1MsIGJsb2Nrcyk7XG4gIH1cblxuICBzdGF0aWMgbmFtZWQobWFwOiBEaWN0PFBhdGhSZWZlcmVuY2U8T3BhcXVlPj4sIGJsb2NrcyA9IEVNUFRZX0JMT0NLUykge1xuICAgIHJldHVybiBuZXcgdGhpcyhFVkFMVUFURURfRU1QVFlfUE9TSVRJT05BTF9BUkdTLCBFdmFsdWF0ZWROYW1lZEFyZ3MuY3JlYXRlKG1hcCksIGJsb2Nrcyk7XG4gIH1cblxuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcG9zaXRpb25hbDogRXZhbHVhdGVkUG9zaXRpb25hbEFyZ3MsXG4gICAgcHVibGljIG5hbWVkOiBFdmFsdWF0ZWROYW1lZEFyZ3MsXG4gICAgcHVibGljIGJsb2NrczogQmxvY2tzXG4gICkge1xuICAgIHRoaXMudGFnID0gY29tYmluZVRhZ2dlZChbcG9zaXRpb25hbCwgbmFtZWRdKTtcbiAgfVxufVxuXG5jb25zdCBFTVBUWV9FVkFMVUFURURfQVJHUyA9IG5ldyBFdmFsdWF0ZWRBcmdzKEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1MsIEVWQUxVQVRFRF9FTVBUWV9OQU1FRF9BUkdTLCBFTVBUWV9CTE9DS1MpO1xuXG5leHBvcnQgeyBDb21waWxlZFBvc2l0aW9uYWxBcmdzLCBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncywgQ29tcGlsZWROYW1lZEFyZ3MsIEV2YWx1YXRlZE5hbWVkQXJncyB9O1xuIl19