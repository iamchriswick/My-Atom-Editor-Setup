import { ReferenceCache, isConst, map } from '@glimmer/reference';
import { Assert } from './vm';
import { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';
APPEND_OPCODES.add(Op.PutDynamicPartial, (vm, { op1: _symbolTable }) => {
    let env = vm.env;
    let symbolTable = vm.constants.getOther(_symbolTable);
    function lookupPartial(name) {
        let normalized = String(name);
        if (!env.hasPartial(normalized, symbolTable)) {
            throw new Error(`Could not find a partial named "${normalized}"`);
        }
        return env.lookupPartial(normalized, symbolTable);
    }
    let reference = map(vm.frame.getOperand(), lookupPartial);
    let cache = isConst(reference) ? undefined : new ReferenceCache(reference);
    let definition = cache ? cache.peek() : reference.value();
    vm.frame.setImmediate(definition);
    if (cache) {
        vm.updateWith(new Assert(cache));
    }
});
APPEND_OPCODES.add(Op.PutPartial, (vm, { op1: _definition }) => {
    let definition = vm.constants.getOther(_definition);
    vm.frame.setImmediate(definition);
});
APPEND_OPCODES.add(Op.EvaluatePartial, (vm, { op1: _symbolTable, op2: _cache }) => {
    let symbolTable = vm.constants.getOther(_symbolTable);
    let cache = vm.constants.getOther(_cache);
    let { template } = vm.frame.getImmediate();
    let block = cache[template.id];
    if (!block) {
        block = template.asPartial(symbolTable);
    }
    vm.invokePartial(block);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvcGFydGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSTlCLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxJQUFJLEVBQUUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRSxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUU7SUFDakUsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQztJQUNqQixJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBYyxZQUFZLENBQUMsQ0FBQztJQUVuRSx1QkFBdUIsSUFBWTtRQUNqQyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFOUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsVUFBVSxHQUFHLENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLFNBQVMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNsRSxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsU0FBUyxHQUFHLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzNFLElBQUksVUFBVSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRTFELEVBQUUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBRWxDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDVixFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDO0FBRUgsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRTtJQUN6RCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBNEIsV0FBVyxDQUFDLENBQUM7SUFDL0UsRUFBRSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUU7SUFDNUUsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQWMsWUFBWSxDQUFDLENBQUM7SUFDbkUsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQXFCLE1BQU0sQ0FBQyxDQUFDO0lBRTlELElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBNkIsQ0FBQztJQUV0RSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRS9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNYLEtBQUssR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlLCBEaWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBSZWZlcmVuY2VDYWNoZSwgaXNDb25zdCwgbWFwIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IEFzc2VydCB9IGZyb20gJy4vdm0nO1xuaW1wb3J0IHsgUGFydGlhbERlZmluaXRpb24gfSBmcm9tICcuLi8uLi9wYXJ0aWFsJztcbmltcG9ydCB7IFN5bWJvbFRhYmxlIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBQYXJ0aWFsQmxvY2sgfSBmcm9tICcuLi8uLi9zY2FubmVyJztcbmltcG9ydCB7IEFQUEVORF9PUENPREVTLCBPcGNvZGVOYW1lIGFzIE9wIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5QdXREeW5hbWljUGFydGlhbCwgKHZtLCB7IG9wMTogX3N5bWJvbFRhYmxlIH0pID0+IHtcbiAgbGV0IGVudiA9IHZtLmVudjtcbiAgbGV0IHN5bWJvbFRhYmxlID0gdm0uY29uc3RhbnRzLmdldE90aGVyPFN5bWJvbFRhYmxlPihfc3ltYm9sVGFibGUpO1xuXG4gIGZ1bmN0aW9uIGxvb2t1cFBhcnRpYWwobmFtZTogT3BhcXVlKSB7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSBTdHJpbmcobmFtZSk7XG5cbiAgICBpZiAoIWVudi5oYXNQYXJ0aWFsKG5vcm1hbGl6ZWQsIHN5bWJvbFRhYmxlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBhIHBhcnRpYWwgbmFtZWQgXCIke25vcm1hbGl6ZWR9XCJgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW52Lmxvb2t1cFBhcnRpYWwobm9ybWFsaXplZCwgc3ltYm9sVGFibGUpO1xuICB9XG5cbiAgbGV0IHJlZmVyZW5jZSA9IG1hcCh2bS5mcmFtZS5nZXRPcGVyYW5kPE9wYXF1ZT4oKSwgbG9va3VwUGFydGlhbCk7XG4gIGxldCBjYWNoZSA9IGlzQ29uc3QocmVmZXJlbmNlKSA/IHVuZGVmaW5lZCA6IG5ldyBSZWZlcmVuY2VDYWNoZShyZWZlcmVuY2UpO1xuICBsZXQgZGVmaW5pdGlvbiA9IGNhY2hlID8gY2FjaGUucGVlaygpIDogcmVmZXJlbmNlLnZhbHVlKCk7XG5cbiAgdm0uZnJhbWUuc2V0SW1tZWRpYXRlKGRlZmluaXRpb24pO1xuXG4gIGlmIChjYWNoZSkge1xuICAgIHZtLnVwZGF0ZVdpdGgobmV3IEFzc2VydChjYWNoZSkpO1xuICB9XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLlB1dFBhcnRpYWwsICh2bSwgeyBvcDE6IF9kZWZpbml0aW9uIH0pID0+IHtcbiAgbGV0IGRlZmluaXRpb24gPSB2bS5jb25zdGFudHMuZ2V0T3RoZXI8UGFydGlhbERlZmluaXRpb248T3BhcXVlPj4oX2RlZmluaXRpb24pO1xuICB2bS5mcmFtZS5zZXRJbW1lZGlhdGUoZGVmaW5pdGlvbik7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkV2YWx1YXRlUGFydGlhbCwgKHZtLCB7IG9wMTogX3N5bWJvbFRhYmxlLCBvcDI6IF9jYWNoZSB9KSA9PiB7XG4gIGxldCBzeW1ib2xUYWJsZSA9IHZtLmNvbnN0YW50cy5nZXRPdGhlcjxTeW1ib2xUYWJsZT4oX3N5bWJvbFRhYmxlKTtcbiAgbGV0IGNhY2hlID0gdm0uY29uc3RhbnRzLmdldE90aGVyPERpY3Q8UGFydGlhbEJsb2NrPj4oX2NhY2hlKTtcblxuICBsZXQgeyB0ZW1wbGF0ZSB9ID0gdm0uZnJhbWUuZ2V0SW1tZWRpYXRlPFBhcnRpYWxEZWZpbml0aW9uPE9wYXF1ZT4+KCk7XG5cbiAgbGV0IGJsb2NrID0gY2FjaGVbdGVtcGxhdGUuaWRdO1xuXG4gIGlmICghYmxvY2spIHtcbiAgICBibG9jayA9IHRlbXBsYXRlLmFzUGFydGlhbChzeW1ib2xUYWJsZSk7XG4gIH1cblxuICB2bS5pbnZva2VQYXJ0aWFsKGJsb2NrKTtcbn0pO1xuIl19