import * as content from './content';
import * as vm from './vm';
import { CompiledGetBlockBySymbol, CompiledInPartialGetBlock } from '../../compiled/expressions/has-block';
import { Stack, dict, expect } from '@glimmer/util';
import { expr } from '../../syntax/functions';
import { CompiledExpression } from '../expressions';
import { ComponentBuilder } from '../../compiler';
import { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';
function appendOpcode(name, op1, op2, op3) {
    return APPEND_OPCODES.construct(name, null, op1, op2, op3);
}
class Labels {
    constructor() {
        this.labels = dict();
        this.jumps = [];
        this.ranges = [];
    }
    label(name, index) {
        this.labels[name] = index;
    }
    jump(at, Target, target) {
        this.jumps.push({ at, target, Target });
    }
    range(at, Range, start, end) {
        this.ranges.push({ at, start, end, Range });
    }
    patch(constants, opcodes) {
        for (let i = 0; i < this.jumps.length; i++) {
            let { at, target, Target } = this.jumps[i];
            opcodes.set(at, APPEND_OPCODES.construct(Target, null, this.labels[target]));
        }
        for (let i = 0; i < this.ranges.length; i++) {
            let { at, start, end, Range } = this.ranges[i];
            let slice = constants.slice([this.labels[start], this.labels[end] - 1]);
            opcodes.set(at, APPEND_OPCODES.construct(Range, null, slice));
        }
    }
}
export class BasicOpcodeBuilder {
    constructor(symbolTable, env, program) {
        this.symbolTable = symbolTable;
        this.env = env;
        this.program = program;
        this.labelsStack = new Stack();
        this.constants = env.constants;
        this.start = program.next;
    }
    get pos() {
        return this.program.current;
    }
    get nextPos() {
        return this.program.next;
    }
    opcode(name, op1, op2, op3) {
        this.push(appendOpcode(name, op1, op2, op3));
    }
    push(op) {
        // console.log(`pushing ${op && op.type}`);
        if (op === null) {
            this.program.push([0, 0, 0, 0]);
        }
        else {
            this.program.push(op);
        }
    }
    toSlice() {
        return [this.start, this.program.current];
    }
    // helpers
    get labels() {
        return expect(this.labelsStack.current, 'bug: not in a label stack');
    }
    startLabels() {
        this.labelsStack.push(new Labels());
    }
    stopLabels() {
        let label = expect(this.labelsStack.pop(), 'unbalanced push and pop labels');
        label.patch(this.constants, this.program);
    }
    // partials
    putPartialDefinition(_definition) {
        let definition = this.constants.other(_definition);
        this.opcode(Op.PutPartial, definition);
    }
    putDynamicPartialDefinition() {
        this.opcode(Op.PutDynamicPartial, this.constants.other(this.symbolTable));
    }
    evaluatePartial() {
        this.opcode(Op.EvaluatePartial, this.constants.other(this.symbolTable), this.constants.other(dict()));
    }
    // components
    putComponentDefinition(definition) {
        this.opcode(Op.PutComponent, this.other(definition));
    }
    putDynamicComponentDefinition() {
        this.opcode(Op.PutDynamicComponent);
    }
    openComponent(args, shadow) {
        this.opcode(Op.OpenComponent, this.args(args), shadow ? this.block(shadow) : 0);
    }
    didCreateElement() {
        this.opcode(Op.DidCreateElement);
    }
    shadowAttributes() {
        this.opcode(Op.ShadowAttributes);
        this.opcode(Op.CloseBlock);
    }
    didRenderLayout() {
        this.opcode(Op.DidRenderLayout);
    }
    closeComponent() {
        this.opcode(Op.CloseComponent);
    }
    // content
    dynamicContent(Opcode) {
        this.opcode(Op.DynamicContent, this.other(Opcode));
    }
    cautiousAppend() {
        this.dynamicContent(new content.OptimizedCautiousAppendOpcode());
    }
    trustingAppend() {
        this.dynamicContent(new content.OptimizedTrustingAppendOpcode());
    }
    guardedCautiousAppend(expression) {
        this.dynamicContent(new content.GuardedCautiousAppendOpcode(this.compileExpression(expression), this.symbolTable));
    }
    guardedTrustingAppend(expression) {
        this.dynamicContent(new content.GuardedTrustingAppendOpcode(this.compileExpression(expression), this.symbolTable));
    }
    // dom
    text(text) {
        this.opcode(Op.Text, this.constants.string(text));
    }
    openPrimitiveElement(tag) {
        this.opcode(Op.OpenElement, this.constants.string(tag));
    }
    openComponentElement(tag) {
        this.opcode(Op.OpenComponentElement, this.constants.string(tag));
    }
    openDynamicPrimitiveElement() {
        this.opcode(Op.OpenDynamicElement);
    }
    flushElement() {
        this.opcode(Op.FlushElement);
    }
    closeElement() {
        this.opcode(Op.CloseElement);
    }
    staticAttr(_name, _namespace, _value) {
        let name = this.constants.string(_name);
        let namespace = _namespace ? this.constants.string(_namespace) : 0;
        let value = this.constants.string(_value);
        this.opcode(Op.StaticAttr, name, value, namespace);
    }
    dynamicAttrNS(_name, _namespace, trusting) {
        let name = this.constants.string(_name);
        let namespace = this.constants.string(_namespace);
        this.opcode(Op.DynamicAttrNS, name, namespace, trusting | 0);
    }
    dynamicAttr(_name, trusting) {
        let name = this.constants.string(_name);
        this.opcode(Op.DynamicAttr, name, trusting | 0);
    }
    comment(_comment) {
        let comment = this.constants.string(_comment);
        this.opcode(Op.Comment, comment);
    }
    modifier(_name, _args) {
        let args = this.constants.expression(this.compile(_args));
        let _modifierManager = this.env.lookupModifier([_name], this.symbolTable);
        let modifierManager = this.constants.other(_modifierManager);
        let name = this.constants.string(_name);
        this.opcode(Op.Modifier, name, modifierManager, args);
    }
    // lists
    putIterator() {
        this.opcode(Op.PutIterator);
    }
    enterList(start, end) {
        this.push(null);
        this.labels.range(this.pos, Op.EnterList, start, end);
    }
    exitList() {
        this.opcode(Op.ExitList);
    }
    enterWithKey(start, end) {
        this.push(null);
        this.labels.range(this.pos, Op.EnterWithKey, start, end);
    }
    nextIter(end) {
        this.push(null);
        this.labels.jump(this.pos, Op.NextIter, end);
    }
    // vm
    openBlock(_args, _inner) {
        let args = this.constants.expression(this.compile(_args));
        let inner = this.constants.other(_inner);
        this.opcode(Op.OpenBlock, inner, args);
    }
    closeBlock() {
        this.opcode(Op.CloseBlock);
    }
    pushRemoteElement() {
        this.opcode(Op.PushRemoteElement);
    }
    popRemoteElement() {
        this.opcode(Op.PopRemoteElement);
    }
    popElement() {
        this.opcode(Op.PopElement);
    }
    label(name) {
        this.labels.label(name, this.nextPos);
    }
    pushChildScope() {
        this.opcode(Op.PushChildScope);
    }
    popScope() {
        this.opcode(Op.PopScope);
    }
    pushDynamicScope() {
        this.opcode(Op.PushDynamicScope);
    }
    popDynamicScope() {
        this.opcode(Op.PopDynamicScope);
    }
    putNull() {
        this.opcode(Op.Put, this.constants.NULL_REFERENCE);
    }
    putValue(_expression) {
        let expr = this.constants.expression(this.compileExpression(_expression));
        this.opcode(Op.EvaluatePut, expr);
    }
    putArgs(_args) {
        let args = this.constants.expression(this.compile(_args));
        this.opcode(Op.PutArgs, args);
    }
    bindDynamicScope(_names) {
        this.opcode(Op.BindDynamicScope, this.names(_names));
    }
    bindPositionalArgs(_names, _symbols) {
        this.opcode(Op.BindPositionalArgs, this.names(_names), this.symbols(_symbols));
    }
    bindNamedArgs(_names, _symbols) {
        this.opcode(Op.BindNamedArgs, this.names(_names), this.symbols(_symbols));
    }
    bindBlocks(_names, _symbols) {
        this.opcode(Op.BindBlocks, this.names(_names), this.symbols(_symbols));
    }
    enter(enter, exit) {
        this.push(null);
        this.labels.range(this.pos, Op.Enter, enter, exit);
    }
    exit() {
        this.opcode(Op.Exit);
    }
    evaluate(_block) {
        let block = this.constants.block(_block);
        this.opcode(Op.Evaluate, block);
    }
    test(testFunc) {
        let _func;
        if (testFunc === 'const') {
            _func = vm.ConstTest;
        }
        else if (testFunc === 'simple') {
            _func = vm.SimpleTest;
        }
        else if (testFunc === 'environment') {
            _func = vm.EnvironmentTest;
        }
        else if (typeof testFunc === 'function') {
            _func = testFunc;
        }
        else {
            throw new Error('unreachable');
        }
        let func = this.constants.function(_func);
        this.opcode(Op.Test, func);
    }
    jump(target) {
        this.push(null);
        this.labels.jump(this.pos, Op.Jump, target);
    }
    jumpIf(target) {
        this.push(null);
        this.labels.jump(this.pos, Op.JumpIf, target);
    }
    jumpUnless(target) {
        this.push(null);
        this.labels.jump(this.pos, Op.JumpUnless, target);
    }
    names(_names) {
        let names = _names.map(n => this.constants.string(n));
        return this.constants.array(names);
    }
    symbols(symbols) {
        return this.constants.array(symbols);
    }
    other(value) {
        return this.constants.other(value);
    }
    args(args) {
        return this.constants.expression(this.compile(args));
    }
    block(block) {
        return this.constants.block(block);
    }
}
function isCompilableExpression(expr) {
    return expr && typeof expr['compile'] === 'function';
}
export default class OpcodeBuilder extends BasicOpcodeBuilder {
    constructor(symbolTable, env, program = env.program) {
        super(symbolTable, env, program);
        this.component = new ComponentBuilder(this);
    }
    compile(expr) {
        if (isCompilableExpression(expr)) {
            return expr.compile(this);
        }
        else {
            return expr;
        }
    }
    compileExpression(expression) {
        if (expression instanceof CompiledExpression) {
            return expression;
        }
        else {
            return expr(expression, this);
        }
    }
    bindPositionalArgsForLocals(locals) {
        let symbols = Object.keys(locals).map(name => locals[name]);
        this.opcode(Op.BindPositionalArgs, this.symbols(symbols));
    }
    preludeForLayout(layout) {
        let symbols = layout.symbolTable.getSymbols();
        if (symbols.named) {
            let named = symbols.named;
            let namedNames = Object.keys(named);
            let namedSymbols = namedNames.map(n => named[n]);
            this.opcode(Op.BindNamedArgs, this.names(namedNames), this.symbols(namedSymbols));
        }
        this.opcode(Op.BindCallerScope);
        if (symbols.yields) {
            let yields = symbols.yields;
            let yieldNames = Object.keys(yields);
            let yieldSymbols = yieldNames.map(n => yields[n]);
            this.opcode(Op.BindBlocks, this.names(yieldNames), this.symbols(yieldSymbols));
        }
        if (symbols.partialArgs) {
            this.opcode(Op.BindPartialArgs, symbols.partialArgs);
        }
    }
    yield(args, to) {
        let yields, partial;
        let inner;
        if (yields = this.symbolTable.getSymbol('yields', to)) {
            inner = new CompiledGetBlockBySymbol(yields, to);
        }
        else if (partial = this.symbolTable.getPartialArgs()) {
            inner = new CompiledInPartialGetBlock(partial, to);
        }
        else {
            throw new Error('[BUG] ${to} is not a valid block name.');
        }
        this.openBlock(args, inner);
        this.closeBlock();
    }
    // TODO
    // come back to this
    labelled(args, callback) {
        if (args)
            this.putArgs(args);
        this.startLabels();
        this.enter('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.stopLabels();
    }
    // TODO
    // come back to this
    iter(callback) {
        this.startLabels();
        this.enterList('BEGIN', 'END');
        this.label('ITER');
        this.nextIter('BREAK');
        this.enterWithKey('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.jump('ITER');
        this.label('BREAK');
        this.exitList();
        this.stopLabels();
    }
    // TODO
    // come back to this
    unit(callback) {
        this.startLabels();
        callback(this);
        this.stopLabels();
    }
}
//# sourceMappingURL=data:application/json;base64,