import { clear, move as moveBounds } from '../bounds';
import { ElementStack } from '../builder';
import { LOGGER, Stack, dict, expect } from '@glimmer/util';
import { ConstReference, IteratorSynchronizer, 
// Tags
combine, UpdatableTag, combineSlice, CONSTANT_TAG, INITIAL } from '@glimmer/reference';
import { EvaluatedArgs } from '../compiled/expressions/args';
import { UpdatingOpcode } from '../opcodes';
import VM from './append';
export default class UpdatingVM {
    constructor(env, { alwaysRevalidate = false }) {
        this.frameStack = new Stack();
        this.env = env;
        this.constants = env.constants;
        this.dom = env.getDOM();
        this.alwaysRevalidate = alwaysRevalidate;
    }
    execute(opcodes, handler) {
        let { frameStack } = this;
        this.try(opcodes, handler);
        while (true) {
            if (frameStack.isEmpty())
                break;
            let opcode = this.frame.nextStatement();
            if (opcode === null) {
                this.frameStack.pop();
                continue;
            }
            LOGGER.debug(`[VM] OP ${opcode.type}`);
            LOGGER.trace(opcode);
            opcode.evaluate(this);
        }
    }
    get frame() {
        return expect(this.frameStack.current, 'bug: expected a frame');
    }
    goto(op) {
        this.frame.goto(op);
    }
    try(ops, handler) {
        this.frameStack.push(new UpdatingVMFrame(this, ops, handler));
    }
    throw() {
        this.frame.handleException();
        this.frameStack.pop();
    }
    evaluateOpcode(opcode) {
        opcode.evaluate(this);
    }
}
export class BlockOpcode extends UpdatingOpcode {
    constructor(ops, state, bounds, children) {
        super();
        this.ops = ops;
        this.type = "block";
        this.next = null;
        this.prev = null;
        let { env, scope, dynamicScope, frame } = state;
        this.children = children;
        this.env = env;
        this.scope = scope;
        this.dynamicScope = dynamicScope;
        this.frame = frame;
        this.bounds = bounds;
    }
    parentElement() {
        return this.bounds.parentElement();
    }
    firstNode() {
        return this.bounds.firstNode();
    }
    lastNode() {
        return this.bounds.lastNode();
    }
    evaluate(vm) {
        vm.try(this.children, null);
    }
    destroy() {
        this.bounds.destroy();
    }
    didDestroy() {
        this.env.didDestroy(this.bounds);
    }
    toJSON() {
        let details = dict();
        details["guid"] = `${this._guid}`;
        return {
            guid: this._guid,
            type: this.type,
            details,
            children: this.children.toArray().map(op => op.toJSON())
        };
    }
}
export class TryOpcode extends BlockOpcode {
    constructor(ops, state, bounds, children) {
        super(ops, state, bounds, children);
        this.type = "try";
        this.tag = this._tag = new UpdatableTag(CONSTANT_TAG);
    }
    didInitializeChildren() {
        this._tag.update(combineSlice(this.children));
    }
    evaluate(vm) {
        vm.try(this.children, this);
    }
    handleException() {
        let { env, scope, ops, dynamicScope, frame } = this;
        let elementStack = ElementStack.resume(this.env, this.bounds, this.bounds.reset(env));
        let vm = new VM(env, scope, dynamicScope, elementStack);
        let result = vm.resume(ops, frame);
        this.children = result.opcodes();
        this.didInitializeChildren();
    }
    toJSON() {
        let json = super.toJSON();
        let details = json["details"];
        if (!details) {
            details = json["details"] = {};
        }
        return super.toJSON();
    }
}
class ListRevalidationDelegate {
    constructor(opcode, marker) {
        this.opcode = opcode;
        this.marker = marker;
        this.didInsert = false;
        this.didDelete = false;
        this.map = opcode.map;
        this.updating = opcode['children'];
    }
    insert(key, item, memo, before) {
        let { map, opcode, updating } = this;
        let nextSibling = null;
        let reference = null;
        if (before) {
            reference = map[before];
            nextSibling = reference['bounds'].firstNode();
        }
        else {
            nextSibling = this.marker;
        }
        let vm = opcode.vmForInsertion(nextSibling);
        let tryOpcode = null;
        vm.execute(opcode.ops, vm => {
            vm.frame.setArgs(EvaluatedArgs.positional([item, memo]));
            vm.frame.setOperand(item);
            vm.frame.setCondition(new ConstReference(true));
            vm.frame.setKey(key);
            let state = vm.capture();
            let tracker = vm.stack().pushUpdatableBlock();
            tryOpcode = new TryOpcode(opcode.ops, state, tracker, vm.updating());
        });
        tryOpcode.didInitializeChildren();
        updating.insertBefore(tryOpcode, reference);
        map[key] = tryOpcode;
        this.didInsert = true;
    }
    retain(_key, _item, _memo) {
    }
    move(key, _item, _memo, before) {
        let { map, updating } = this;
        let entry = map[key];
        let reference = map[before] || null;
        if (before) {
            moveBounds(entry, reference.firstNode());
        }
        else {
            moveBounds(entry, this.marker);
        }
        updating.remove(entry);
        updating.insertBefore(entry, reference);
    }
    delete(key) {
        let { map } = this;
        let opcode = map[key];
        opcode.didDestroy();
        clear(opcode);
        this.updating.remove(opcode);
        delete map[key];
        this.didDelete = true;
    }
    done() {
        this.opcode.didInitializeChildren(this.didInsert || this.didDelete);
    }
}
export class ListBlockOpcode extends BlockOpcode {
    constructor(ops, state, bounds, children, artifacts) {
        super(ops, state, bounds, children);
        this.type = "list-block";
        this.map = dict();
        this.lastIterated = INITIAL;
        this.artifacts = artifacts;
        let _tag = this._tag = new UpdatableTag(CONSTANT_TAG);
        this.tag = combine([artifacts.tag, _tag]);
    }
    didInitializeChildren(listDidChange = true) {
        this.lastIterated = this.artifacts.tag.value();
        if (listDidChange) {
            this._tag.update(combineSlice(this.children));
        }
    }
    evaluate(vm) {
        let { artifacts, lastIterated } = this;
        if (!artifacts.tag.validate(lastIterated)) {
            let { bounds } = this;
            let { dom } = vm;
            let marker = dom.createComment('');
            dom.insertAfter(bounds.parentElement(), marker, expect(bounds.lastNode(), "can't insert after an empty bounds"));
            let target = new ListRevalidationDelegate(this, marker);
            let synchronizer = new IteratorSynchronizer({ target, artifacts });
            synchronizer.sync();
            this.parentElement().removeChild(marker);
        }
        // Run now-updated updating opcodes
        super.evaluate(vm);
    }
    vmForInsertion(nextSibling) {
        let { env, scope, dynamicScope } = this;
        let elementStack = ElementStack.forInitialRender(this.env, this.bounds.parentElement(), nextSibling);
        return new VM(env, scope, dynamicScope, elementStack);
    }
    toJSON() {
        let json = super.toJSON();
        let map = this.map;
        let inner = Object.keys(map).map(key => {
            return `${JSON.stringify(key)}: ${map[key]._guid}`;
        }).join(", ");
        let details = json["details"];
        if (!details) {
            details = json["details"] = {};
        }
        details["map"] = `{${inner}}`;
        return json;
    }
}
class UpdatingVMFrame {
    constructor(vm, ops, exceptionHandler) {
        this.vm = vm;
        this.ops = ops;
        this.exceptionHandler = exceptionHandler;
        this.vm = vm;
        this.ops = ops;
        this.current = ops.head();
    }
    goto(op) {
        this.current = op;
    }
    nextStatement() {
        let { current, ops } = this;
        if (current)
            this.current = ops.nextNode(current);
        return current;
    }
    handleException() {
        if (this.exceptionHandler) {
            this.exceptionHandler.handleException();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,