import { assign } from '@glimmer/util';
import { ElementStack } from './builder';
import { VM } from './vm';
import Scanner from './scanner';
let clientId = 0;
export default function templateFactory({ id: templateId, meta, block }) {
    let parsedBlock;
    let id = templateId || `client-${clientId++}`;
    let create = (env, envMeta) => {
        let newMeta = envMeta ? assign({}, envMeta, meta) : meta;
        if (!parsedBlock) {
            parsedBlock = JSON.parse(block);
        }
        return template(parsedBlock, id, newMeta, env);
    };
    return { id, meta, create };
}
function template(block, id, meta, env) {
    let scanner = new Scanner(block, meta, env);
    let entryPoint;
    let asEntryPoint = () => {
        if (!entryPoint)
            entryPoint = scanner.scanEntryPoint();
        return entryPoint;
    };
    let layout;
    let asLayout = () => {
        if (!layout)
            layout = scanner.scanLayout();
        return layout;
    };
    let asPartial = (symbols) => scanner.scanPartial(symbols);
    let render = (self, appendTo, dynamicScope) => {
        let elementStack = ElementStack.forInitialRender(env, appendTo, null);
        let compiled = asEntryPoint().compile(env);
        let vm = VM.initial(env, self, dynamicScope, elementStack, compiled.symbols);
        return vm.execute(compiled.slice);
    };
    return { id, meta, _block: block, asEntryPoint, asLayout, asPartial, render };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9ydW50aW1lL2xpYi90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3ZDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUxQixPQUFPLE9BSU4sTUFBTSxXQUFXLENBQUM7QUE2RG5CLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQztBQVNqQixNQUFNLENBQUMsT0FBTywwQkFBMEIsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQXdDO0lBQzNHLElBQUksV0FBb0MsQ0FBQztJQUN6QyxJQUFJLEVBQUUsR0FBRyxVQUFVLElBQUksVUFBVSxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQzlDLElBQUksTUFBTSxHQUFHLENBQUMsR0FBZ0IsRUFBRSxPQUFZO1FBQzFDLElBQUksT0FBTyxHQUFHLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDekQsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVELGtCQUFxQixLQUE4QixFQUFFLEVBQVUsRUFBRSxJQUFPLEVBQUUsR0FBZ0I7SUFDeEYsSUFBSSxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1QyxJQUFJLFVBQXNCLENBQUM7SUFDM0IsSUFBSSxZQUFZLEdBQUc7UUFDakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7WUFBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxNQUFjLENBQUM7SUFDbkIsSUFBSSxRQUFRLEdBQUc7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0MsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUM7SUFDRixJQUFJLFNBQVMsR0FBRyxDQUFDLE9BQW9CLEtBQUssT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RSxJQUFJLE1BQU0sR0FBRyxDQUFDLElBQXdCLEVBQUUsUUFBd0IsRUFBRSxZQUEwQjtRQUMxRixJQUFJLFlBQVksR0FBRyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RSxJQUFJLFFBQVEsR0FBRyxZQUFZLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0MsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdFLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDaEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2ssXG4gIFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrXG59IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBTeW1ib2xUYWJsZSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQsIER5bmFtaWNTY29wZSB9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgRWxlbWVudFN0YWNrIH0gZnJvbSAnLi9idWlsZGVyJztcbmltcG9ydCB7IFZNIH0gZnJvbSAnLi92bSc7XG5pbXBvcnQgUmVuZGVyUmVzdWx0IGZyb20gJy4vdm0vcmVuZGVyLXJlc3VsdCc7XG5pbXBvcnQgU2Nhbm5lciwge1xuICBFbnRyeVBvaW50LFxuICBQYXJ0aWFsQmxvY2ssXG4gIExheW91dFxufSBmcm9tICcuL3NjYW5uZXInO1xuaW1wb3J0ICogYXMgU2ltcGxlIGZyb20gJy4vZG9tL2ludGVyZmFjZXMnO1xuXG4vKipcbiAqIEVudmlyb25tZW50IHNwZWNpZmljIHRlbXBsYXRlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlPFQ+IHtcbiAgLyoqXG4gICAqIFRlbXBsYXRlIGlkZW50aWZpZXIsIGlmIHByZWNvbXBpbGVkIHdpbGwgYmUgdGhlIGlkIG9mIHRoZVxuICAgKiBwcmVjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICovXG4gIGlkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRlbXBsYXRlIG1ldGEgKGJvdGggY29tcGlsZSB0aW1lIGFuZCBlbnZpcm9ubWVudCBzcGVjaWZpYykuXG4gICAqL1xuICBtZXRhOiBUO1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgdG8gcmVuZGVyIHRlbXBsYXRlIGFzIHJvb3QgZW50cnkgcG9pbnQuXG4gICAqL1xuICByZW5kZXIoc2VsZjogUGF0aFJlZmVyZW5jZTxhbnk+LCBhcHBlbmRUbzogU2ltcGxlLkVsZW1lbnQsIGR5bmFtaWNTY29wZTogRHluYW1pY1Njb3BlKTogUmVuZGVyUmVzdWx0O1xuXG4gIC8vIGludGVybmFsIGNhc3RzLCB0aGVzZSBhcmUgbGF6aWx5IGNyZWF0ZWQgYW5kIGNhY2hlZFxuICBhc0VudHJ5UG9pbnQoKTogRW50cnlQb2ludDtcbiAgYXNMYXlvdXQoKTogTGF5b3V0O1xuICBhc1BhcnRpYWwoc3ltYm9sczogU3ltYm9sVGFibGUpOiBQYXJ0aWFsQmxvY2s7XG5cbiAgLy8gZXhwb3NlZCBmb3IgdmlzdWFsaXplclxuICBfYmxvY2s6IFNlcmlhbGl6ZWRUZW1wbGF0ZUJsb2NrO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlRmFjdG9yeTxULCBVPiB7XG4gIC8qKlxuICAgKiBUZW1wbGF0ZSBpZGVudGlmaWVyLCBpZiBwcmVjb21waWxlZCB3aWxsIGJlIHRoZSBpZCBvZiB0aGVcbiAgICogcHJlY29tcGlsZWQgdGVtcGxhdGUuXG4gICAqL1xuICBpZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb21waWxlIHRpbWUgbWV0YS5cbiAgICovXG4gIG1ldGE6IFQ7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY3JlYXRlIGFuIGVudmlyb25tZW50IHNwZWNpZmljIHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgKiBvZiB0aGUgdGVtcGxhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RW52aXJvbm1lbnR9IGVudiBnbGltbWVyIEVudmlyb25tZW50XG4gICAqL1xuICBjcmVhdGUoZW52OiBFbnZpcm9ubWVudCk6IFRlbXBsYXRlPFQ+O1xuICAvKipcbiAgICogVXNlZCB0byBjcmVhdGUgYW4gZW52aXJvbm1lbnQgc3BlY2lmaWMgc2luZ2xldG9uIGluc3RhbmNlXG4gICAqIG9mIHRoZSB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQHBhcmFtIHtFbnZpcm9ubWVudH0gZW52IGdsaW1tZXIgRW52aXJvbm1lbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IG1ldGEgZW52aXJvbm1lbnQgc3BlY2lmaWMgaW5qZWN0aW9ucyBpbnRvIG1ldGFcbiAgICovXG4gIGNyZWF0ZShlbnY6IEVudmlyb25tZW50LCBtZXRhOiBVKTogVGVtcGxhdGU8VCAmIFU+O1xufVxuXG5sZXQgY2xpZW50SWQgPSAwO1xuXG4vKipcbiAqIFdyYXBzIGEgdGVtcGxhdGUganMgaW4gYSB0ZW1wbGF0ZSBtb2R1bGUgdG8gY2hhbmdlIGl0IGludG8gYSBmYWN0b3J5XG4gKiB0aGF0IGhhbmRsZXMgbGF6eSBwYXJzaW5nIHRoZSB0ZW1wbGF0ZSBhbmQgdG8gY3JlYXRlIHBlciBlbnYgc2luZ2xldG9uc1xuICogb2YgdGhlIHRlbXBsYXRlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0ZW1wbGF0ZUZhY3Rvcnk8VD4oc2VyaWFsaXplZFRlbXBsYXRlOiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPFQ+KTogVGVtcGxhdGVGYWN0b3J5PFQsIFQ+O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGVtcGxhdGVGYWN0b3J5PFQsIFU+KHNlcmlhbGl6ZWRUZW1wbGF0ZTogU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jazxUPik6IFRlbXBsYXRlRmFjdG9yeTxULCBVPjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRlbXBsYXRlRmFjdG9yeSh7IGlkOiB0ZW1wbGF0ZUlkLCBtZXRhLCBibG9jayB9OiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPGFueT4pOiBUZW1wbGF0ZUZhY3Rvcnk8e30sIHt9PiB7XG4gIGxldCBwYXJzZWRCbG9jazogU2VyaWFsaXplZFRlbXBsYXRlQmxvY2s7XG4gIGxldCBpZCA9IHRlbXBsYXRlSWQgfHwgYGNsaWVudC0ke2NsaWVudElkKyt9YDtcbiAgbGV0IGNyZWF0ZSA9IChlbnY6IEVudmlyb25tZW50LCBlbnZNZXRhPzoge30pID0+IHtcbiAgICBsZXQgbmV3TWV0YSA9IGVudk1ldGEgPyBhc3NpZ24oe30sIGVudk1ldGEsIG1ldGEpIDogbWV0YTtcbiAgICBpZiAoIXBhcnNlZEJsb2NrKSB7XG4gICAgICBwYXJzZWRCbG9jayA9IEpTT04ucGFyc2UoYmxvY2spO1xuICAgIH1cbiAgICByZXR1cm4gdGVtcGxhdGUocGFyc2VkQmxvY2ssIGlkLCBuZXdNZXRhLCBlbnYpO1xuICB9O1xuICByZXR1cm4geyBpZCwgbWV0YSwgY3JlYXRlIH07XG59XG5cbmZ1bmN0aW9uIHRlbXBsYXRlPFQ+KGJsb2NrOiBTZXJpYWxpemVkVGVtcGxhdGVCbG9jaywgaWQ6IHN0cmluZywgbWV0YTogVCwgZW52OiBFbnZpcm9ubWVudCk6IFRlbXBsYXRlPFQ+IHtcbiAgbGV0IHNjYW5uZXIgPSBuZXcgU2Nhbm5lcihibG9jaywgbWV0YSwgZW52KTtcbiAgbGV0IGVudHJ5UG9pbnQ6IEVudHJ5UG9pbnQ7XG4gIGxldCBhc0VudHJ5UG9pbnQgPSAoKSA9PiB7XG4gICAgaWYgKCFlbnRyeVBvaW50KSBlbnRyeVBvaW50ID0gc2Nhbm5lci5zY2FuRW50cnlQb2ludCgpO1xuICAgIHJldHVybiBlbnRyeVBvaW50O1xuICB9O1xuICBsZXQgbGF5b3V0OiBMYXlvdXQ7XG4gIGxldCBhc0xheW91dCA9ICgpID0+IHtcbiAgICBpZiAoIWxheW91dCkgbGF5b3V0ID0gc2Nhbm5lci5zY2FuTGF5b3V0KCk7XG4gICAgcmV0dXJuIGxheW91dDtcbiAgfTtcbiAgbGV0IGFzUGFydGlhbCA9IChzeW1ib2xzOiBTeW1ib2xUYWJsZSkgPT4gc2Nhbm5lci5zY2FuUGFydGlhbChzeW1ib2xzKTtcbiAgbGV0IHJlbmRlciA9IChzZWxmOiBQYXRoUmVmZXJlbmNlPGFueT4sIGFwcGVuZFRvOiBTaW1wbGUuRWxlbWVudCwgZHluYW1pY1Njb3BlOiBEeW5hbWljU2NvcGUpID0+IHtcbiAgICBsZXQgZWxlbWVudFN0YWNrID0gRWxlbWVudFN0YWNrLmZvckluaXRpYWxSZW5kZXIoZW52LCBhcHBlbmRUbywgbnVsbCk7XG4gICAgbGV0IGNvbXBpbGVkID0gYXNFbnRyeVBvaW50KCkuY29tcGlsZShlbnYpO1xuICAgIGxldCB2bSA9IFZNLmluaXRpYWwoZW52LCBzZWxmLCBkeW5hbWljU2NvcGUsIGVsZW1lbnRTdGFjaywgY29tcGlsZWQuc3ltYm9scyk7XG4gICAgcmV0dXJuIHZtLmV4ZWN1dGUoY29tcGlsZWQuc2xpY2UpO1xuICB9O1xuICByZXR1cm4geyBpZCwgbWV0YSwgX2Jsb2NrOiBibG9jaywgYXNFbnRyeVBvaW50LCBhc0xheW91dCwgYXNQYXJ0aWFsLCByZW5kZXIgfTtcbn1cbiJdfQ==