import { CompiledExpression } from '../expressions';
import { referenceFromParts } from '@glimmer/reference';
export default class CompiledLookup extends CompiledExpression {
    constructor(base, path) {
        super();
        this.base = base;
        this.path = path;
        this.type = "lookup";
    }
    static create(base, path) {
        if (path.length === 0) {
            return base;
        }
        else {
            return new this(base, path);
        }
    }
    evaluate(vm) {
        let { base, path } = this;
        return referenceFromParts(base.evaluate(vm), path);
    }
    toJSON() {
        return `${this.base.toJSON()}.${this.path.join('.')}`;
    }
}
export class CompiledSelf extends CompiledExpression {
    evaluate(vm) {
        return vm.getSelf();
    }
    toJSON() {
        return 'self';
    }
}
export class CompiledSymbol extends CompiledExpression {
    constructor(symbol, debug) {
        super();
        this.symbol = symbol;
        this.debug = debug;
    }
    evaluate(vm) {
        return vm.referenceForSymbol(this.symbol);
    }
    toJSON() {
        return `$${this.symbol}(${this.debug})`;
    }
}
export class CompiledInPartialName extends CompiledExpression {
    constructor(symbol, name) {
        super();
        this.symbol = symbol;
        this.name = name;
    }
    evaluate(vm) {
        let { symbol, name } = this;
        let args = vm.scope().getPartialArgs(symbol);
        return args.named.get(name);
    }
    toJSON() {
        return `$${this.symbol}($ARGS).${this.name}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3Vwcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2xvb2t1cHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFeEQsTUFBTSxDQUFDLE9BQU8scUJBQXNCLFNBQVEsa0JBQTBCO0lBV3BFLFlBQ1UsSUFBZ0MsRUFDaEMsSUFBYztRQUV0QixLQUFLLEVBQUUsQ0FBQztRQUhBLFNBQUksR0FBSixJQUFJLENBQTRCO1FBQ2hDLFNBQUksR0FBSixJQUFJLENBQVU7UUFaakIsU0FBSSxHQUFHLFFBQVEsQ0FBQztJQWV2QixDQUFDO0lBYkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFnQyxFQUFFLElBQWM7UUFDNUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDZCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDO0lBU0QsUUFBUSxDQUFDLEVBQU07UUFDYixJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztRQUMxQixNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLG1CQUFvQixTQUFRLGtCQUEwQjtJQUMxRCxRQUFRLENBQUMsRUFBTTtRQUNiLE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQUVELE1BQU0scUJBQXNCLFNBQVEsa0JBQTBCO0lBQzVELFlBQW9CLE1BQWMsRUFBVSxLQUFhO1FBQ3ZELEtBQUssRUFBRSxDQUFDO1FBRFUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLFVBQUssR0FBTCxLQUFLLENBQVE7SUFFekQsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsTUFBTSxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQztJQUMxQyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLDRCQUE2QixTQUFRLGtCQUEwQjtJQUNuRSxZQUFvQixNQUFjLEVBQVUsSUFBWTtRQUN0RCxLQUFLLEVBQUUsQ0FBQztRQURVLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFRO0lBRXhELENBQUM7SUFFRCxRQUFRLENBQUMsRUFBTTtRQUNiLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sV0FBVyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0MsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBDb21waWxlZEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9ucyc7XG5pbXBvcnQgVk0gZnJvbSAnLi4vLi4vdm0vYXBwZW5kJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgcmVmZXJlbmNlRnJvbVBhcnRzIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsZWRMb29rdXAgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248T3BhcXVlPiB7XG4gIHB1YmxpYyB0eXBlID0gXCJsb29rdXBcIjtcblxuICBzdGF0aWMgY3JlYXRlKGJhc2U6IENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+LCBwYXRoOiBzdHJpbmdbXSk6IENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+IHtcbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMoYmFzZSwgcGF0aCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGJhc2U6IENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+LFxuICAgIHByaXZhdGUgcGF0aDogc3RyaW5nW11cbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgbGV0IHsgYmFzZSwgcGF0aCB9ID0gdGhpcztcbiAgICByZXR1cm4gcmVmZXJlbmNlRnJvbVBhcnRzKGJhc2UuZXZhbHVhdGUodm0pLCBwYXRoKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmJhc2UudG9KU09OKCl9LiR7dGhpcy5wYXRoLmpvaW4oJy4nKX1gO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZFNlbGYgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248T3BhcXVlPiB7XG4gIGV2YWx1YXRlKHZtOiBWTSk6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgcmV0dXJuIHZtLmdldFNlbGYoKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiAnc2VsZic7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkU3ltYm9sIGV4dGVuZHMgQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN5bWJvbDogbnVtYmVyLCBwcml2YXRlIGRlYnVnOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogUGF0aFJlZmVyZW5jZTxPcGFxdWU+IHtcbiAgICByZXR1cm4gdm0ucmVmZXJlbmNlRm9yU3ltYm9sKHRoaXMuc3ltYm9sKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJCR7dGhpcy5zeW1ib2x9KCR7dGhpcy5kZWJ1Z30pYDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tcGlsZWRJblBhcnRpYWxOYW1lIGV4dGVuZHMgQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN5bWJvbDogbnVtYmVyLCBwcml2YXRlIG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT4ge1xuICAgIGxldCB7IHN5bWJvbCwgbmFtZSB9ID0gdGhpcztcbiAgICBsZXQgYXJncyA9IHZtLnNjb3BlKCkuZ2V0UGFydGlhbEFyZ3Moc3ltYm9sKTtcbiAgICByZXR1cm4gYXJncy5uYW1lZC5nZXQobmFtZSk7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCQke3RoaXMuc3ltYm9sfSgkQVJHUykuJHt0aGlzLm5hbWV9YDtcbiAgfVxufVxuIl19