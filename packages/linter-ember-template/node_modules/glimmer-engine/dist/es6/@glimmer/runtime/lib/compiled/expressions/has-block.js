import { CompiledExpression } from '../expressions';
import { PrimitiveReference } from '../../references';
export default class CompiledHasBlock extends CompiledExpression {
    constructor(inner) {
        super();
        this.inner = inner;
        this.type = "has-block";
    }
    evaluate(vm) {
        let block = this.inner.evaluate(vm);
        return PrimitiveReference.create(!!block);
    }
    toJSON() {
        return `has-block(${this.inner.toJSON()})`;
    }
}
export class CompiledHasBlockParams extends CompiledExpression {
    constructor(inner) {
        super();
        this.inner = inner;
        this.type = "has-block-params";
    }
    evaluate(vm) {
        let block = this.inner.evaluate(vm);
        let hasLocals = block && block.symbolTable.getSymbols().locals;
        return PrimitiveReference.create(!!hasLocals);
    }
    toJSON() {
        return `has-block-params(${this.inner.toJSON()})`;
    }
}
export class CompiledGetBlockBySymbol {
    constructor(symbol, debug) {
        this.symbol = symbol;
        this.debug = debug;
    }
    evaluate(vm) {
        return vm.scope().getBlock(this.symbol);
    }
    toJSON() {
        return `get-block($${this.symbol}(${this.debug}))`;
    }
}
export class CompiledInPartialGetBlock {
    constructor(symbol, name) {
        this.symbol = symbol;
        this.name = name;
    }
    evaluate(vm) {
        let { symbol, name } = this;
        let args = vm.scope().getPartialArgs(symbol);
        return args.blocks[name];
    }
    toJSON() {
        return `get-block($${this.symbol}($ARGS).${this.name}))`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLWJsb2NrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvaGFzLWJsb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXRELE1BQU0sQ0FBQyxPQUFPLHVCQUF3QixTQUFRLGtCQUEyQjtJQUd2RSxZQUFvQixLQUF1QjtRQUN6QyxLQUFLLEVBQUUsQ0FBQztRQURVLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBRnBDLFNBQUksR0FBRyxXQUFXLENBQUM7SUFJMUIsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLENBQUMsYUFBYSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBRUQsTUFBTSw2QkFBOEIsU0FBUSxrQkFBMkI7SUFHckUsWUFBb0IsS0FBdUI7UUFDekMsS0FBSyxFQUFFLENBQUM7UUFEVSxVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUZwQyxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFJakMsQ0FBQztJQUVELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEMsSUFBSSxTQUFTLEdBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUMsTUFBTSxDQUFDO1FBQy9ELE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxDQUFDLG9CQUFvQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBT0QsTUFBTTtJQUNKLFlBQW9CLE1BQWMsRUFBVSxLQUFhO1FBQXJDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFRO0lBQ3pELENBQUM7SUFFRCxRQUFRLENBQUMsRUFBTTtRQUNiLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sQ0FBQyxjQUFjLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDO0lBQ3JELENBQUM7Q0FDRjtBQUVELE1BQU07SUFDSixZQUFvQixNQUFjLEVBQVUsSUFBWTtRQUFwQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUN4RCxDQUFDO0lBRUQsUUFBUSxDQUFDLEVBQU07UUFDYixJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxDQUFDLGNBQWMsSUFBSSxDQUFDLE1BQU0sV0FBVyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUM7SUFDM0QsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCBWTSBmcm9tICcuLi8uLi92bS9hcHBlbmQnO1xuaW1wb3J0IHsgSW5saW5lQmxvY2sgfSBmcm9tICcuLi8uLi9zY2FubmVyJztcbmltcG9ydCB7IENvbXBpbGVkRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb25zJztcbmltcG9ydCB7IFByaW1pdGl2ZVJlZmVyZW5jZSB9IGZyb20gJy4uLy4uL3JlZmVyZW5jZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21waWxlZEhhc0Jsb2NrIGV4dGVuZHMgQ29tcGlsZWRFeHByZXNzaW9uPGJvb2xlYW4+IHtcbiAgcHVibGljIHR5cGUgPSBcImhhcy1ibG9ja1wiO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5uZXI6IENvbXBpbGVkR2V0QmxvY2spIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogUGF0aFJlZmVyZW5jZTxib29sZWFuPiB7XG4gICAgbGV0IGJsb2NrID0gdGhpcy5pbm5lci5ldmFsdWF0ZSh2bSk7XG4gICAgcmV0dXJuIFByaW1pdGl2ZVJlZmVyZW5jZS5jcmVhdGUoISFibG9jayk7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGhhcy1ibG9jaygke3RoaXMuaW5uZXIudG9KU09OKCl9KWA7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkSGFzQmxvY2tQYXJhbXMgZXh0ZW5kcyBDb21waWxlZEV4cHJlc3Npb248Ym9vbGVhbj4ge1xuICBwdWJsaWMgdHlwZSA9IFwiaGFzLWJsb2NrLXBhcmFtc1wiO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5uZXI6IENvbXBpbGVkR2V0QmxvY2spIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogUGF0aFJlZmVyZW5jZTxib29sZWFuPiB7XG4gICAgbGV0IGJsb2NrID0gdGhpcy5pbm5lci5ldmFsdWF0ZSh2bSk7XG4gICAgbGV0IGhhc0xvY2FscyA9IGJsb2NrICYmIGJsb2NrLnN5bWJvbFRhYmxlLmdldFN5bWJvbHMoKS5sb2NhbHM7XG4gICAgcmV0dXJuIFByaW1pdGl2ZVJlZmVyZW5jZS5jcmVhdGUoISFoYXNMb2NhbHMpO1xuICB9XG5cbiAgdG9KU09OKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBoYXMtYmxvY2stcGFyYW1zKCR7dGhpcy5pbm5lci50b0pTT04oKX0pYDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBpbGVkR2V0QmxvY2sge1xuICBldmFsdWF0ZSh2bTogVk0pOiBPcHRpb248SW5saW5lQmxvY2s+O1xuICB0b0pTT04oKTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ29tcGlsZWRHZXRCbG9ja0J5U3ltYm9sIGltcGxlbWVudHMgQ29tcGlsZWRHZXRCbG9jayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3ltYm9sOiBudW1iZXIsIHByaXZhdGUgZGVidWc6IHN0cmluZykge1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFZNKTogSW5saW5lQmxvY2sge1xuICAgIHJldHVybiB2bS5zY29wZSgpLmdldEJsb2NrKHRoaXMuc3ltYm9sKTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgZ2V0LWJsb2NrKCQke3RoaXMuc3ltYm9sfSgke3RoaXMuZGVidWd9KSlgO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21waWxlZEluUGFydGlhbEdldEJsb2NrIGltcGxlbWVudHMgQ29tcGlsZWRHZXRCbG9jayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3ltYm9sOiBudW1iZXIsIHByaXZhdGUgbmFtZTogc3RyaW5nKSB7XG4gIH1cblxuICBldmFsdWF0ZSh2bTogVk0pOiBJbmxpbmVCbG9jayB7XG4gICAgbGV0IHsgc3ltYm9sLCBuYW1lIH0gPSB0aGlzO1xuICAgIGxldCBhcmdzID0gdm0uc2NvcGUoKS5nZXRQYXJ0aWFsQXJncyhzeW1ib2wpO1xuICAgIHJldHVybiBhcmdzLmJsb2Nrc1tuYW1lXTtcbiAgfVxuXG4gIHRvSlNPTigpOiBzdHJpbmcge1xuICAgIHJldHVybiBgZ2V0LWJsb2NrKCQke3RoaXMuc3ltYm9sfSgkQVJHUykuJHt0aGlzLm5hbWV9KSlgO1xuICB9XG59XG4iXX0=