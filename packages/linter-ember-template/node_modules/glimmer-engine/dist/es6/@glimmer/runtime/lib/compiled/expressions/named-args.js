import { UNDEFINED_REFERENCE } from '../../references';
import { EMPTY_ARRAY, EMPTY_DICT } from '../../utils';
import { combineTagged } from '@glimmer/reference';
import { assert, dict } from '@glimmer/util';
export class CompiledNamedArgs {
    constructor(keys, values) {
        this.keys = keys;
        this.values = values;
        this.length = keys.length;
        assert(keys.length === values.length, 'Keys and values do not have the same length');
    }
    static empty() {
        return COMPILED_EMPTY_NAMED_ARGS;
    }
    static create(map) {
        let keys = Object.keys(map);
        let length = keys.length;
        if (length > 0) {
            let values = [];
            for (let i = 0; i < length; i++) {
                values[i] = map[keys[i]];
            }
            return new this(keys, values);
        }
        else {
            return COMPILED_EMPTY_NAMED_ARGS;
        }
    }
    evaluate(vm) {
        let { keys, values, length } = this;
        let evaluated = new Array(length);
        for (let i = 0; i < length; i++) {
            evaluated[i] = values[i].evaluate(vm);
        }
        return new EvaluatedNamedArgs(keys, evaluated);
    }
    toJSON() {
        let { keys, values } = this;
        let inner = keys.map((key, i) => `${key}: ${values[i].toJSON()}`).join(", ");
        return `{${inner}}`;
    }
}
export const COMPILED_EMPTY_NAMED_ARGS = new (class extends CompiledNamedArgs {
    constructor() {
        super(EMPTY_ARRAY, EMPTY_ARRAY);
    }
    evaluate(_vm) {
        return EVALUATED_EMPTY_NAMED_ARGS;
    }
    toJSON() {
        return `<EMPTY>`;
    }
});
export class EvaluatedNamedArgs {
    constructor(keys, values, _map = null) {
        this.keys = keys;
        this.values = values;
        this._map = _map;
        this.tag = combineTagged(values);
        this.length = keys.length;
        assert(keys.length === values.length, 'Keys and values do not have the same length');
    }
    static create(map) {
        let keys = Object.keys(map);
        let length = keys.length;
        if (length > 0) {
            let values = new Array(length);
            for (let i = 0; i < length; i++) {
                values[i] = map[keys[i]];
            }
            return new this(keys, values, map);
        }
        else {
            return EVALUATED_EMPTY_NAMED_ARGS;
        }
    }
    static empty() {
        return EVALUATED_EMPTY_NAMED_ARGS;
    }
    get map() {
        let { _map: map } = this;
        if (map) {
            return map;
        }
        map = this._map = dict();
        let { keys, values, length } = this;
        for (let i = 0; i < length; i++) {
            map[keys[i]] = values[i];
        }
        return map;
    }
    get(key) {
        let { keys, values } = this;
        let index = keys.indexOf(key);
        return (index === -1) ? UNDEFINED_REFERENCE : values[index];
    }
    has(key) {
        return this.keys.indexOf(key) !== -1;
    }
    value() {
        let { keys, values } = this;
        let out = dict();
        for (let i = 0; i < keys.length; i++) {
            let key = keys[i];
            let ref = values[i];
            out[key] = ref.value();
        }
        return out;
    }
}
export const EVALUATED_EMPTY_NAMED_ARGS = new (class extends EvaluatedNamedArgs {
    constructor() {
        super(EMPTY_ARRAY, EMPTY_ARRAY, EMPTY_DICT);
    }
    get() {
        return UNDEFINED_REFERENCE;
    }
    has(_key) {
        return false;
    }
    value() {
        return EMPTY_DICT;
    }
});
//# sourceMappingURL=data:application/json;base64,