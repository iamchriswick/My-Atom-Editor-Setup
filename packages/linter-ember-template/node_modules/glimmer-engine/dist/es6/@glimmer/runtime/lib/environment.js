import { A } from '@glimmer/util';
import { populateBuiltins } from './syntax/functions';
import { Constants } from './opcodes';
import { UNDEFINED_REFERENCE, ConditionalReference } from './references';
import { defaultManagers } from './dom/attribute-managers';
import { ensureGuid, expect, assert } from '@glimmer/util';
export class Scope {
    constructor(references, callerScope = null) {
        this.callerScope = null;
        this.slots = references;
        this.callerScope = callerScope;
    }
    static root(self, size = 0) {
        let refs = new Array(size + 1);
        for (let i = 0; i <= size; i++) {
            refs[i] = UNDEFINED_REFERENCE;
        }
        return new Scope(refs).init({ self });
    }
    init({ self }) {
        this.slots[0] = self;
        return this;
    }
    getSelf() {
        return this.slots[0];
    }
    getSymbol(symbol) {
        return this.slots[symbol];
    }
    getBlock(symbol) {
        return this.slots[symbol];
    }
    getPartialArgs(symbol) {
        return this.slots[symbol];
    }
    bindSymbol(symbol, value) {
        this.slots[symbol] = value;
    }
    bindBlock(symbol, value) {
        this.slots[symbol] = value;
    }
    bindPartialArgs(symbol, value) {
        this.slots[symbol] = value;
    }
    bindCallerScope(scope) {
        this.callerScope = scope;
    }
    getCallerScope() {
        return this.callerScope;
    }
    child() {
        return new Scope(this.slots.slice(), this.callerScope);
    }
}
class Transaction {
    constructor() {
        this.scheduledInstallManagers = [];
        this.scheduledInstallModifiers = [];
        this.scheduledUpdateModifierManagers = [];
        this.scheduledUpdateModifiers = [];
        this.createdComponents = [];
        this.createdManagers = [];
        this.updatedComponents = [];
        this.updatedManagers = [];
        this.destructors = [];
    }
    didCreate(component, manager) {
        this.createdComponents.push(component);
        this.createdManagers.push(manager);
    }
    didUpdate(component, manager) {
        this.updatedComponents.push(component);
        this.updatedManagers.push(manager);
    }
    scheduleInstallModifier(modifier, manager) {
        this.scheduledInstallManagers.push(manager);
        this.scheduledInstallModifiers.push(modifier);
    }
    scheduleUpdateModifier(modifier, manager) {
        this.scheduledUpdateModifierManagers.push(manager);
        this.scheduledUpdateModifiers.push(modifier);
    }
    didDestroy(d) {
        this.destructors.push(d);
    }
    commit() {
        let { createdComponents, createdManagers } = this;
        for (let i = 0; i < createdComponents.length; i++) {
            let component = createdComponents[i];
            let manager = createdManagers[i];
            manager.didCreate(component);
        }
        let { updatedComponents, updatedManagers } = this;
        for (let i = 0; i < updatedComponents.length; i++) {
            let component = updatedComponents[i];
            let manager = updatedManagers[i];
            manager.didUpdate(component);
        }
        let { destructors } = this;
        for (let i = 0; i < destructors.length; i++) {
            destructors[i].destroy();
        }
        let { scheduledInstallManagers, scheduledInstallModifiers } = this;
        for (let i = 0; i < scheduledInstallManagers.length; i++) {
            let manager = scheduledInstallManagers[i];
            let modifier = scheduledInstallModifiers[i];
            manager.install(modifier);
        }
        let { scheduledUpdateModifierManagers, scheduledUpdateModifiers } = this;
        for (let i = 0; i < scheduledUpdateModifierManagers.length; i++) {
            let manager = scheduledUpdateModifierManagers[i];
            let modifier = scheduledUpdateModifiers[i];
            manager.update(modifier);
        }
    }
}
export class Opcode {
    constructor(array) {
        this.array = array;
        this.offset = 0;
    }
    get type() {
        return this.array[this.offset];
    }
    get op1() {
        return this.array[this.offset + 1];
    }
    get op2() {
        return this.array[this.offset + 2];
    }
    get op3() {
        return this.array[this.offset + 3];
    }
}
export class Program {
    constructor() {
        this.opcodes = new A(0x100000);
        this._offset = 0;
        this._opcode = new Opcode(this.opcodes);
    }
    get next() {
        return this._offset;
    }
    get current() {
        return this._offset - 4;
    }
    opcode(offset) {
        this._opcode.offset = offset;
        return this._opcode;
    }
    set(pos, opcode) {
        let [type, op1, op2, op3] = opcode;
        this.opcodes[pos] = type;
        this.opcodes[pos + 1] = op1;
        this.opcodes[pos + 2] = op2;
        this.opcodes[pos + 3] = op3;
    }
    push(opcode) {
        let offset = this._offset;
        let [type, op1, op2, op3] = opcode;
        this.opcodes[this._offset++] = type;
        this.opcodes[this._offset++] = op1;
        this.opcodes[this._offset++] = op2;
        this.opcodes[this._offset++] = op3;
        return offset;
    }
}
export class Environment {
    constructor({ appendOperations, updateOperations }) {
        this._macros = null;
        this._transaction = null;
        this.constants = new Constants();
        this.program = new Program();
        this.appendOperations = appendOperations;
        this.updateOperations = updateOperations;
    }
    toConditionalReference(reference) {
        return new ConditionalReference(reference);
    }
    getAppendOperations() { return this.appendOperations; }
    getDOM() { return this.updateOperations; }
    getIdentity(object) {
        return ensureGuid(object) + '';
    }
    begin() {
        assert(!this._transaction, 'Cannot start a nested transaction');
        this._transaction = new Transaction();
    }
    get transaction() {
        return expect(this._transaction, 'must be in a transaction');
    }
    didCreate(component, manager) {
        this.transaction.didCreate(component, manager);
    }
    didUpdate(component, manager) {
        this.transaction.didUpdate(component, manager);
    }
    scheduleInstallModifier(modifier, manager) {
        this.transaction.scheduleInstallModifier(modifier, manager);
    }
    scheduleUpdateModifier(modifier, manager) {
        this.transaction.scheduleUpdateModifier(modifier, manager);
    }
    didDestroy(d) {
        this.transaction.didDestroy(d);
    }
    commit() {
        this.transaction.commit();
        this._transaction = null;
    }
    attributeFor(element, attr, isTrusting, namespace) {
        return defaultManagers(element, attr, isTrusting, namespace === undefined ? null : namespace);
    }
    macros() {
        let macros = this._macros;
        if (!macros) {
            this._macros = macros = populateBuiltins();
        }
        return macros;
    }
}
export default Environment;
//# sourceMappingURL=data:application/json;base64,