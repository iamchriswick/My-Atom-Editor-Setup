import { dict } from '@glimmer/util';
export function entryPoint(meta) {
    return new ProgramSymbolTable(meta);
}
export function layout(meta, wireNamed, wireYields, hasPartials) {
    let { named, yields, partialSymbol, size } = symbols(wireNamed, wireYields, hasPartials);
    return new ProgramSymbolTable(meta, named, yields, partialSymbol, size);
}
export function block(parent, locals) {
    let localsMap = null;
    let program = parent['program'];
    if (locals.length !== 0) {
        let map = localsMap = dict();
        locals.forEach(l => map[l] = program.size++);
    }
    return new BlockSymbolTable(parent, program, localsMap);
}
function symbols(named, yields, hasPartials) {
    let yieldsMap = null;
    let namedMap = null;
    let size = 1;
    if (yields.length !== 0) {
        let map = yieldsMap = dict();
        yields.forEach(y => map[y] = size++);
    }
    if (named.length !== 0) {
        let map = namedMap = dict();
        named.forEach(y => map[y] = size++);
    }
    let partialSymbol = hasPartials ? size++ : null;
    return { named: namedMap, yields: yieldsMap, partialSymbol, size };
}
export class ProgramSymbolTable {
    constructor(meta, named = null, yields = null, partialArgs = null, size = 1) {
        this.meta = meta;
        this.named = named;
        this.yields = yields;
        this.partialArgs = partialArgs;
        this.size = size;
        this.program = this;
    }
    getMeta() {
        return this.meta;
    }
    getSymbols() {
        return {
            named: this.named,
            yields: this.yields,
            locals: null,
            partialArgs: this.partialArgs
        };
    }
    getSymbol(kind, name) {
        if (kind === 'local')
            return null;
        return this[kind] && this[kind][name];
    }
    getPartialArgs() {
        return this.partialArgs || 0;
    }
}
export class BlockSymbolTable {
    constructor(parent, program, locals) {
        this.parent = parent;
        this.program = program;
        this.locals = locals;
    }
    getMeta() {
        return this.program.getMeta();
    }
    getSymbols() {
        return {
            named: null,
            yields: null,
            locals: this.locals,
            partialArgs: null
        };
    }
    getSymbol(kind, name) {
        if (kind === 'local') {
            return this.getLocal(name);
        }
        else {
            return this.program.getSymbol(kind, name);
        }
    }
    getLocal(name) {
        let { locals, parent } = this;
        let symbol = locals && locals[name];
        if (!symbol && parent) {
            symbol = parent.getSymbol('local', name);
        }
        return symbol;
    }
    getPartialArgs() {
        return this.program.getPartialArgs();
    }
}
export const EMPTY_SYMBOL_TABLE = {
    getMeta() {
        return null;
    },
    getSymbols() {
        return {
            named: null,
            yields: null,
            locals: null,
            partialArgs: null
        };
    },
    getSymbol(_kind, _name) {
        throw new Error("BUG: Calling getSymbol on EMPTY_SYMBOL_TABLE");
    },
    getPartialArgs() {
        return null;
    }
};
//# sourceMappingURL=data:application/json;base64,