import { UNDEFINED_REFERENCE } from '../../references';
import { EMPTY_ARRAY } from '../../utils';
import { combineTagged } from '@glimmer/reference';
export class CompiledPositionalArgs {
    constructor(values) {
        this.values = values;
        this.length = values.length;
    }
    static create(values) {
        if (values.length) {
            return new this(values);
        }
        else {
            return COMPILED_EMPTY_POSITIONAL_ARGS;
        }
    }
    static empty() {
        return COMPILED_EMPTY_POSITIONAL_ARGS;
    }
    evaluate(vm) {
        let { values, length } = this;
        let references = new Array(length);
        for (let i = 0; i < length; i++) {
            references[i] = values[i].evaluate(vm);
        }
        return EvaluatedPositionalArgs.create(references);
    }
    toJSON() {
        return `[${this.values.map(value => value.toJSON()).join(", ")}]`;
    }
}
export const COMPILED_EMPTY_POSITIONAL_ARGS = new (class extends CompiledPositionalArgs {
    constructor() {
        super(EMPTY_ARRAY);
    }
    evaluate(_vm) {
        return EVALUATED_EMPTY_POSITIONAL_ARGS;
    }
    toJSON() {
        return `<EMPTY>`;
    }
});
export class EvaluatedPositionalArgs {
    constructor(values) {
        this.values = values;
        this.tag = combineTagged(values);
        this.length = values.length;
    }
    static create(values) {
        return new this(values);
    }
    static empty() {
        return EVALUATED_EMPTY_POSITIONAL_ARGS;
    }
    at(index) {
        let { values, length } = this;
        return (index < length) ? values[index] : UNDEFINED_REFERENCE;
    }
    value() {
        let { values, length } = this;
        let ret = new Array(length);
        for (let i = 0; i < length; i++) {
            ret[i] = values[i].value();
        }
        return ret;
    }
}
export const EVALUATED_EMPTY_POSITIONAL_ARGS = new (class extends EvaluatedPositionalArgs {
    constructor() {
        super(EMPTY_ARRAY);
    }
    at() {
        return UNDEFINED_REFERENCE;
    }
    value() {
        return this.values;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb25hbC1hcmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvcG9zaXRpb25hbC1hcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3ZELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUE4QixhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUcvRSxNQUFNO0lBZUosWUFBbUIsTUFBaUQ7UUFBakQsV0FBTSxHQUFOLE1BQU0sQ0FBMkM7UUFDbEUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFoQkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFvQztRQUNoRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDMUIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLDhCQUE4QixDQUFDO1FBQ3hDLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixNQUFNLENBQUMsOEJBQThCLENBQUM7SUFDeEMsQ0FBQztJQVFELFFBQVEsQ0FBQyxFQUFNO1FBQ2IsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxVQUFVLEdBQTRCLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTVELEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDaEMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVELE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELE1BQU07UUFDSixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDcEUsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQTJCLElBQUksQ0FBQyxLQUFNLFNBQVEsc0JBQXNCO0lBQzdHO1FBQ0UsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBTztRQUNkLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQztJQUN6QyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVILE1BQU07SUFZSixZQUFtQixNQUE0QztRQUE1QyxXQUFNLEdBQU4sTUFBTSxDQUFzQztRQUM3RCxJQUFJLENBQUMsR0FBRyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQWRELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBNEM7UUFDeEQsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLE1BQU0sQ0FBQywrQkFBK0IsQ0FBQztJQUN6QyxDQUFDO0lBVUQsRUFBRSxDQUFDLEtBQWE7UUFDZCxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUM5QixNQUFNLENBQUMsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLG1CQUFtQixDQUFDO0lBQ2hFLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxHQUFHLEdBQWEsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNoQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzdCLENBQUM7UUFFRCxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2IsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQTRCLElBQUksQ0FBQyxLQUFNLFNBQVEsdUJBQXVCO0lBQ2hIO1FBQ0UsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxFQUFFO1FBQ0EsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVOREVGSU5FRF9SRUZFUkVOQ0UgfSBmcm9tICcuLi8uLi9yZWZlcmVuY2VzJztcbmltcG9ydCB7IENvbXBpbGVkRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb25zJztcbmltcG9ydCBWTSBmcm9tICcuLi8uLi92bS9hcHBlbmQnO1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBQYXRoUmVmZXJlbmNlLCBSZXZpc2lvblRhZywgY29tYmluZVRhZ2dlZCB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IGNsYXNzIENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICBzdGF0aWMgY3JlYXRlKHZhbHVlczogQ29tcGlsZWRFeHByZXNzaW9uPE9wYXF1ZT5bXSk6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3Mge1xuICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXModmFsdWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENPTVBJTEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZW1wdHkoKSB7XG4gICAgcmV0dXJuIENPTVBJTEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgfVxuXG4gIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWVzOiBSZWFkb25seUFycmF5PENvbXBpbGVkRXhwcmVzc2lvbjxPcGFxdWU+Pikge1xuICAgIHRoaXMubGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcbiAgfVxuXG4gIGV2YWx1YXRlKHZtOiBWTSk6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgICBsZXQgeyB2YWx1ZXMsIGxlbmd0aCB9ID0gdGhpcztcbiAgICBsZXQgcmVmZXJlbmNlczogUGF0aFJlZmVyZW5jZTxPcGFxdWU+W10gPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlZmVyZW5jZXNbaV0gPSB2YWx1ZXNbaV0uZXZhbHVhdGUodm0pO1xuICAgIH1cblxuICAgIHJldHVybiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncy5jcmVhdGUocmVmZXJlbmNlcyk7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYFske3RoaXMudmFsdWVzLm1hcCh2YWx1ZSA9PiB2YWx1ZS50b0pTT04oKSkuam9pbihcIiwgXCIpfV1gO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBDT01QSUxFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M6IENvbXBpbGVkUG9zaXRpb25hbEFyZ3MgPSBuZXcgKGNsYXNzIGV4dGVuZHMgQ29tcGlsZWRQb3NpdGlvbmFsQXJncyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKEVNUFRZX0FSUkFZKTtcbiAgfVxuXG4gIGV2YWx1YXRlKF92bTogVk0pOiBFdmFsdWF0ZWRQb3NpdGlvbmFsQXJncyB7XG4gICAgcmV0dXJuIEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M7XG4gIH1cblxuICB0b0pTT04oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYDxFTVBUWT5gO1xuICB9XG59KTtcblxuZXhwb3J0IGNsYXNzIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgc3RhdGljIGNyZWF0ZSh2YWx1ZXM6IFJlYWRvbmx5QXJyYXk8UGF0aFJlZmVyZW5jZTxPcGFxdWU+Pikge1xuICAgIHJldHVybiBuZXcgdGhpcyh2YWx1ZXMpO1xuICB9XG5cbiAgc3RhdGljIGVtcHR5KCk6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgICByZXR1cm4gRVZBTFVBVEVEX0VNUFRZX1BPU0lUSU9OQUxfQVJHUztcbiAgfVxuXG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnO1xuICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHZhbHVlczogUmVhZG9ubHlBcnJheTxQYXRoUmVmZXJlbmNlPE9wYXF1ZT4+KSB7XG4gICAgdGhpcy50YWcgPSBjb21iaW5lVGFnZ2VkKHZhbHVlcyk7XG4gICAgdGhpcy5sZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICB9XG5cbiAgYXQoaW5kZXg6IG51bWJlcik6IFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgbGV0IHsgdmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgcmV0dXJuIChpbmRleCA8IGxlbmd0aCkgPyB2YWx1ZXNbaW5kZXhdIDogVU5ERUZJTkVEX1JFRkVSRU5DRTtcbiAgfVxuXG4gIHZhbHVlKCk6IFJlYWRvbmx5QXJyYXk8T3BhcXVlPiB7XG4gICAgbGV0IHsgdmFsdWVzLCBsZW5ndGggfSA9IHRoaXM7XG4gICAgbGV0IHJldDogT3BhcXVlW10gPSBuZXcgQXJyYXkobGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHZhbHVlc1tpXS52YWx1ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVWQUxVQVRFRF9FTVBUWV9QT1NJVElPTkFMX0FSR1M6IEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzID0gbmV3IChjbGFzcyBleHRlbmRzIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoRU1QVFlfQVJSQVkpO1xuICB9XG5cbiAgYXQoKTogUGF0aFJlZmVyZW5jZTxPcGFxdWU+IHtcbiAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRTtcbiAgfVxuXG4gIHZhbHVlKCk6IFJlYWRvbmx5QXJyYXk8T3BhcXVlPiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzO1xuICB9XG59KTtcbiJdfQ==