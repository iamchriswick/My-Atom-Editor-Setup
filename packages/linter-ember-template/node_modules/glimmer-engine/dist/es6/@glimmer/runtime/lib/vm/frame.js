import { unwrap, expect } from '@glimmer/util';
export class CapturedFrame {
    constructor(operand, args, condition) {
        this.operand = operand;
        this.args = args;
        this.condition = condition;
    }
}
class Frame {
    constructor(ops, component = null, manager = null, shadow = null) {
        this.ops = ops;
        this.component = component;
        this.manager = manager;
        this.shadow = shadow;
        this.operand = null;
        this.immediate = null;
        this.args = null;
        this.callerScope = null;
        this.blocks = null;
        this.condition = null;
        this.iterator = null;
        this.key = null;
        this.ip = ops[0];
    }
    capture() {
        return new CapturedFrame(this.operand, this.args, this.condition);
    }
    restore(frame) {
        this.operand = frame['operand'];
        this.args = frame['args'];
        this.condition = frame['condition'];
    }
}
export class FrameStack {
    constructor() {
        this.frames = [];
        this.frame = null;
    }
    get currentFrame() {
        return this.frames[unwrap(this.frame)];
    }
    push(ops, component = null, manager = null, shadow = null) {
        let frame = (this.frame === null) ? (this.frame = 0) : ++this.frame;
        if (this.frames.length <= frame) {
            this.frames.push(null);
        }
        this.frames[frame] = new Frame(ops, component, manager, shadow);
    }
    pop() {
        let { frames, frame } = this;
        frames[expect(frame, 'only pop after pushing')] = null;
        this.frame = frame === 0 ? null : frame - 1;
    }
    capture() {
        return this.currentFrame.capture();
    }
    restore(frame) {
        this.currentFrame.restore(frame);
    }
    getOps() {
        return this.currentFrame.ops;
    }
    getCurrent() {
        return this.currentFrame.ip;
    }
    setCurrent(ip) {
        return this.currentFrame.ip = ip;
    }
    getOperand() {
        return unwrap(this.currentFrame.operand);
    }
    setOperand(operand) {
        return this.currentFrame.operand = operand;
    }
    getImmediate() {
        return this.currentFrame.immediate;
    }
    setImmediate(value) {
        return this.currentFrame.immediate = value;
    }
    // FIXME: These options are required in practice by the existing code, but
    // figure out why.
    getArgs() {
        return this.currentFrame.args;
    }
    setArgs(args) {
        return this.currentFrame.args = args;
    }
    getCondition() {
        return unwrap(this.currentFrame.condition);
    }
    setCondition(condition) {
        return this.currentFrame.condition = condition;
    }
    getIterator() {
        return unwrap(this.currentFrame.iterator);
    }
    setIterator(iterator) {
        return this.currentFrame.iterator = iterator;
    }
    getKey() {
        return this.currentFrame.key;
    }
    setKey(key) {
        return this.currentFrame.key = key;
    }
    getBlocks() {
        return unwrap(this.currentFrame.blocks);
    }
    setBlocks(blocks) {
        return this.currentFrame.blocks = blocks;
    }
    getCallerScope() {
        return unwrap(this.currentFrame.callerScope);
    }
    setCallerScope(callerScope) {
        return this.currentFrame.callerScope = callerScope;
    }
    getComponent() {
        return unwrap(this.currentFrame.component);
    }
    getManager() {
        return unwrap(this.currentFrame.manager);
    }
    getShadow() {
        return this.currentFrame.shadow;
    }
    goto(ip) {
        this.setCurrent(ip);
    }
    hasOpcodes() {
        return this.frame !== null;
    }
    nextStatement(env) {
        let ip = this.frames[unwrap(this.frame)].ip;
        let ops = this.getOps();
        if (ip <= ops[1]) {
            let program = env.program;
            this.setCurrent(ip + 4);
            return program.opcode(ip);
        }
        else {
            this.pop();
            return null;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,