export class Cursor {
    constructor(element, nextSibling) {
        this.element = element;
        this.nextSibling = nextSibling;
    }
}
export class RealDOMBounds {
    constructor(bounds) {
        this.bounds = bounds;
    }
    parentElement() { return this.bounds.parentElement(); }
    firstNode() { return this.bounds.firstNode(); }
    lastNode() { return this.bounds.lastNode(); }
}
export class ConcreteBounds {
    constructor(parentNode, first, last) {
        this.parentNode = parentNode;
        this.first = first;
        this.last = last;
    }
    parentElement() { return this.parentNode; }
    firstNode() { return this.first; }
    lastNode() { return this.last; }
}
export class SingleNodeBounds {
    constructor(parentNode, node) {
        this.parentNode = parentNode;
        this.node = node;
    }
    parentElement() { return this.parentNode; }
    firstNode() { return this.node; }
    lastNode() { return this.node; }
}
export function bounds(parent, first, last) {
    return new ConcreteBounds(parent, first, last);
}
export function single(parent, node) {
    return new SingleNodeBounds(parent, node);
}
export function move(bounds, reference) {
    let parent = bounds.parentElement();
    let first = bounds.firstNode();
    let last = bounds.lastNode();
    let node = first;
    while (node) {
        let next = node.nextSibling;
        parent.insertBefore(node, reference);
        if (node === last)
            return next;
        node = next;
    }
    return null;
}
export function clear(bounds) {
    let parent = bounds.parentElement();
    let first = bounds.firstNode();
    let last = bounds.lastNode();
    let node = first;
    while (node) {
        let next = node.nextSibling;
        parent.removeChild(node);
        if (node === last)
            return next;
        node = next;
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvcnVudGltZS9saWIvYm91bmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLE1BQU07SUFDSixZQUFtQixPQUF1QixFQUFTLFdBQWdDO1FBQWhFLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO0lBQUcsQ0FBQztDQUN4RjtBQU1ELE1BQU07SUFDSixZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFdEMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBYSxDQUFDLENBQUMsQ0FBQztJQUNsRSxTQUFTLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELFFBQVEsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQVUsQ0FBQyxDQUFDLENBQUM7Q0FDdEQ7QUFFRCxNQUFNO0lBQ0osWUFBbUIsVUFBMEIsRUFBVSxLQUEwQixFQUFVLElBQXlCO1FBQWpHLGVBQVUsR0FBVixVQUFVLENBQWdCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBcUI7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFxQjtJQUFHLENBQUM7SUFFeEgsYUFBYSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMzQyxTQUFTLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLFFBQVEsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDakM7QUFFRCxNQUFNO0lBSUosWUFBWSxVQUEwQixFQUFFLElBQWlCO1FBQ3ZELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBcUIsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsYUFBYSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMzQyxTQUFTLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLFFBQVEsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDakM7QUFFRCxNQUFNLGlCQUFpQixNQUFzQixFQUFFLEtBQWtCLEVBQUUsSUFBaUI7SUFDbEYsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUVELE1BQU0saUJBQWlCLE1BQXNCLEVBQUUsSUFBaUI7SUFDOUQsTUFBTSxDQUFDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFFRCxNQUFNLGVBQWUsTUFBYyxFQUFFLFNBQThCO0lBQ2pFLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNwQyxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDL0IsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRTdCLElBQUksSUFBSSxHQUF3QixLQUFLLENBQUM7SUFFdEMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNaLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDNUIsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztZQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDL0IsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sZ0JBQWdCLE1BQWM7SUFDbEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3BDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMvQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsSUFBSSxJQUFJLEdBQXdCLEtBQUssQ0FBQztJQUV0QyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksR0FBRyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBTaW1wbGUgZnJvbSAnLi9kb20vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBPcHRpb24sIERlc3Ryb3lhYmxlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQm91bmRzIHtcbiAgLy8gYSBtZXRob2QgdG8gZnV0dXJlLXByb29mIGZvciB3b3JtaG9saW5nOyBtYXkgbm90IGJlIG5lZWRlZCB1bHRpbWF0ZWx5XG4gIHBhcmVudEVsZW1lbnQoKTogU2ltcGxlLkVsZW1lbnQ7XG4gIGZpcnN0Tm9kZSgpOiBPcHRpb248U2ltcGxlLk5vZGU+O1xuICBsYXN0Tm9kZSgpOiBPcHRpb248U2ltcGxlLk5vZGU+O1xufVxuXG5leHBvcnQgY2xhc3MgQ3Vyc29yIHtcbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnQ6IFNpbXBsZS5FbGVtZW50LCBwdWJsaWMgbmV4dFNpYmxpbmc6IE9wdGlvbjxTaW1wbGUuTm9kZT4pIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJvdW5kcztcblxuZXhwb3J0IGludGVyZmFjZSBEZXN0cm95YWJsZUJvdW5kcyBleHRlbmRzIEJvdW5kcywgRGVzdHJveWFibGUge31cblxuZXhwb3J0IGNsYXNzIFJlYWxET01Cb3VuZHMgaW1wbGVtZW50cyBCb3VuZHMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGJvdW5kczogQm91bmRzKSB7fVxuXG4gIHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLmJvdW5kcy5wYXJlbnRFbGVtZW50KCkgYXMgRWxlbWVudDsgfVxuICBmaXJzdE5vZGUoKSB7IHJldHVybiB0aGlzLmJvdW5kcy5maXJzdE5vZGUoKSBhcyBOb2RlOyB9XG4gIGxhc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5ib3VuZHMubGFzdE5vZGUoKSBhcyBOb2RlOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25jcmV0ZUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXJlbnROb2RlOiBTaW1wbGUuRWxlbWVudCwgcHJpdmF0ZSBmaXJzdDogT3B0aW9uPFNpbXBsZS5Ob2RlPiwgcHJpdmF0ZSBsYXN0OiBPcHRpb248U2ltcGxlLk5vZGU+KSB7fVxuXG4gIHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLnBhcmVudE5vZGU7IH1cbiAgZmlyc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5maXJzdDsgfVxuICBsYXN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubGFzdDsgfVxufVxuXG5leHBvcnQgY2xhc3MgU2luZ2xlTm9kZUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG4gIHByaXZhdGUgcGFyZW50Tm9kZTogRWxlbWVudDtcbiAgcHJpdmF0ZSBub2RlOiBOb2RlO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudE5vZGU6IFNpbXBsZS5FbGVtZW50LCBub2RlOiBTaW1wbGUuTm9kZSkge1xuICAgIHRoaXMucGFyZW50Tm9kZSA9IHBhcmVudE5vZGUgYXMgRWxlbWVudDtcbiAgICB0aGlzLm5vZGUgPSBub2RlIGFzIE5vZGU7XG4gIH1cblxuICBwYXJlbnRFbGVtZW50KCkgeyByZXR1cm4gdGhpcy5wYXJlbnROb2RlOyB9XG4gIGZpcnN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubm9kZTsgfVxuICBsYXN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubm9kZTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYm91bmRzKHBhcmVudDogU2ltcGxlLkVsZW1lbnQsIGZpcnN0OiBTaW1wbGUuTm9kZSwgbGFzdDogU2ltcGxlLk5vZGUpOiBCb3VuZHMge1xuICByZXR1cm4gbmV3IENvbmNyZXRlQm91bmRzKHBhcmVudCwgZmlyc3QsIGxhc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlKHBhcmVudDogU2ltcGxlLkVsZW1lbnQsIG5vZGU6IFNpbXBsZS5Ob2RlKTogQm91bmRzIHtcbiAgcmV0dXJuIG5ldyBTaW5nbGVOb2RlQm91bmRzKHBhcmVudCwgbm9kZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlKGJvdW5kczogQm91bmRzLCByZWZlcmVuY2U6IE9wdGlvbjxTaW1wbGUuTm9kZT4pIHtcbiAgbGV0IHBhcmVudCA9IGJvdW5kcy5wYXJlbnRFbGVtZW50KCk7XG4gIGxldCBmaXJzdCA9IGJvdW5kcy5maXJzdE5vZGUoKTtcbiAgbGV0IGxhc3QgPSBib3VuZHMubGFzdE5vZGUoKTtcblxuICBsZXQgbm9kZTogT3B0aW9uPFNpbXBsZS5Ob2RlPiA9IGZpcnN0O1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgbGV0IG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgcmVmZXJlbmNlKTtcbiAgICBpZiAobm9kZSA9PT0gbGFzdCkgcmV0dXJuIG5leHQ7XG4gICAgbm9kZSA9IG5leHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyKGJvdW5kczogQm91bmRzKTogT3B0aW9uPFNpbXBsZS5Ob2RlPiB7XG4gIGxldCBwYXJlbnQgPSBib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICBsZXQgZmlyc3QgPSBib3VuZHMuZmlyc3ROb2RlKCk7XG4gIGxldCBsYXN0ID0gYm91bmRzLmxhc3ROb2RlKCk7XG5cbiAgbGV0IG5vZGU6IE9wdGlvbjxTaW1wbGUuTm9kZT4gPSBmaXJzdDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgaWYgKG5vZGUgPT09IGxhc3QpIHJldHVybiBuZXh0O1xuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=