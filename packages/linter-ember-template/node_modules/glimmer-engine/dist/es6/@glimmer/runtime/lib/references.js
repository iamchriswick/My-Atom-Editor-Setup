import { ConstReference } from '@glimmer/reference';
export class PrimitiveReference extends ConstReference {
    constructor(value) {
        super(value);
    }
    static create(value) {
        if (value === undefined) {
            return UNDEFINED_REFERENCE;
        }
        else if (value === null) {
            return NULL_REFERENCE;
        }
        else if (value === true) {
            return TRUE_REFERENCE;
        }
        else if (value === false) {
            return FALSE_REFERENCE;
        }
        else if (typeof value === 'number') {
            return new ValueReference(value);
        }
        else {
            return new StringReference(value);
        }
    }
    get(_key) {
        return UNDEFINED_REFERENCE;
    }
}
class StringReference extends PrimitiveReference {
    constructor() {
        super(...arguments);
        this.lengthReference = null;
    }
    get(key) {
        if (key === 'length') {
            let { lengthReference } = this;
            if (lengthReference === null) {
                lengthReference = this.lengthReference = new ValueReference(this.inner.length);
            }
            return lengthReference;
        }
        else {
            return super.get(key);
        }
    }
}
class ValueReference extends PrimitiveReference {
    constructor(value) {
        super(value);
    }
}
export const UNDEFINED_REFERENCE = new ValueReference(undefined);
export const NULL_REFERENCE = new ValueReference(null);
const TRUE_REFERENCE = new ValueReference(true);
const FALSE_REFERENCE = new ValueReference(false);
export class ConditionalReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = inner.tag;
    }
    value() {
        return this.toBool(this.inner.value());
    }
    toBool(value) {
        return !!value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3JlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLGNBQWMsRUFBNEIsTUFBTSxvQkFBb0IsQ0FBQztBQUszRixNQUFNLHlCQUErQyxTQUFRLGNBQWlCO0lBaUI1RSxZQUFzQixLQUFRO1FBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNmLENBQUM7SUFsQkQsTUFBTSxDQUFDLE1BQU0sQ0FBc0IsS0FBUTtRQUN6QyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMsbUJBQTRDLENBQUM7UUFDdEQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsY0FBdUMsQ0FBQztRQUNqRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxjQUF1QyxDQUFDO1FBQ2pELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxDQUFDLGVBQXdDLENBQUM7UUFDbEQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxLQUFlLENBQTBCLENBQUM7UUFDdEUsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sTUFBTSxDQUFDLElBQUksZUFBZSxDQUFDLEtBQWUsQ0FBaUMsQ0FBQztRQUM5RSxDQUFDO0lBQ0gsQ0FBQztJQU1ELEdBQUcsQ0FBQyxJQUFZO1FBQ2QsTUFBTSxDQUFDLG1CQUFtQixDQUFDO0lBQzdCLENBQUM7Q0FDRjtBQUVELHFCQUFzQixTQUFRLGtCQUEwQjtJQUF4RDs7UUFDVSxvQkFBZSxHQUF1QyxJQUFJLENBQUM7SUFlckUsQ0FBQztJQWJDLEdBQUcsQ0FBQyxHQUFXO1FBQ2IsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckIsSUFBSSxFQUFFLGVBQWUsRUFBRSxHQUFHLElBQUksQ0FBQztZQUUvQixFQUFFLENBQUMsQ0FBQyxlQUFlLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDN0IsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNqRixDQUFDO1lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQztRQUN6QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBSUQsb0JBQXNDLFNBQVEsa0JBQXFCO0lBQ2pFLFlBQVksS0FBUTtRQUNsQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDZixDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBa0MsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEcsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUE2QixJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRixNQUFNLGNBQWMsR0FBZ0MsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0UsTUFBTSxlQUFlLEdBQWdDLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRS9FLE1BQU07SUFHSixZQUFvQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUMxQyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVTLE1BQU0sQ0FBQyxLQUFhO1FBQzVCLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJldmlzaW9uVGFnLCBDb25zdFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSwgUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IE9wdGlvbiwgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmV4cG9ydCB0eXBlIFByaW1pdGl2ZSA9IHVuZGVmaW5lZCB8IG51bGwgfCBib29sZWFuIHwgbnVtYmVyIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgUHJpbWl0aXZlUmVmZXJlbmNlPFQgZXh0ZW5kcyBQcmltaXRpdmU+IGV4dGVuZHMgQ29uc3RSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBQYXRoUmVmZXJlbmNlPFQ+IHtcbiAgc3RhdGljIGNyZWF0ZTxUIGV4dGVuZHMgUHJpbWl0aXZlPih2YWx1ZTogVCk6IFByaW1pdGl2ZVJlZmVyZW5jZTxUPiB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBVTkRFRklORURfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gTlVMTF9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBUUlVFX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBGQUxTRV9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIG5ldyBWYWx1ZVJlZmVyZW5jZSh2YWx1ZSBhcyBudW1iZXIpIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTdHJpbmdSZWZlcmVuY2UodmFsdWUgYXMgc3RyaW5nKSBhcyBhbnkgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHN1cGVyKHZhbHVlKTtcbiAgfVxuXG4gIGdldChfa2V5OiBzdHJpbmcpOiBQcmltaXRpdmVSZWZlcmVuY2U8UHJpbWl0aXZlPiB7XG4gICAgcmV0dXJuIFVOREVGSU5FRF9SRUZFUkVOQ0U7XG4gIH1cbn1cblxuY2xhc3MgU3RyaW5nUmVmZXJlbmNlIGV4dGVuZHMgUHJpbWl0aXZlUmVmZXJlbmNlPHN0cmluZz4ge1xuICBwcml2YXRlIGxlbmd0aFJlZmVyZW5jZTogT3B0aW9uPFByaW1pdGl2ZVJlZmVyZW5jZTxudW1iZXI+PiA9IG51bGw7XG5cbiAgZ2V0KGtleTogc3RyaW5nKTogUHJpbWl0aXZlUmVmZXJlbmNlPFByaW1pdGl2ZT4ge1xuICAgIGlmIChrZXkgPT09ICdsZW5ndGgnKSB7XG4gICAgICBsZXQgeyBsZW5ndGhSZWZlcmVuY2UgfSA9IHRoaXM7XG5cbiAgICAgIGlmIChsZW5ndGhSZWZlcmVuY2UgPT09IG51bGwpIHtcbiAgICAgICAgbGVuZ3RoUmVmZXJlbmNlID0gdGhpcy5sZW5ndGhSZWZlcmVuY2UgPSBuZXcgVmFsdWVSZWZlcmVuY2UodGhpcy5pbm5lci5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGVuZ3RoUmVmZXJlbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gICAgfVxuICB9XG59XG5cbnR5cGUgVmFsdWUgPSB1bmRlZmluZWQgfCBudWxsIHwgbnVtYmVyIHwgYm9vbGVhbjtcblxuY2xhc3MgVmFsdWVSZWZlcmVuY2U8VCBleHRlbmRzIFZhbHVlPiBleHRlbmRzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgc3VwZXIodmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBVTkRFRklORURfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8dW5kZWZpbmVkPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh1bmRlZmluZWQpO1xuZXhwb3J0IGNvbnN0IE5VTExfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8bnVsbD4gPSBuZXcgVmFsdWVSZWZlcmVuY2UobnVsbCk7XG5jb25zdCBUUlVFX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPGJvb2xlYW4+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKHRydWUpO1xuY29uc3QgRkFMU0VfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8Ym9vbGVhbj4gPSBuZXcgVmFsdWVSZWZlcmVuY2UoZmFsc2UpO1xuXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uYWxSZWZlcmVuY2UgaW1wbGVtZW50cyBSZWZlcmVuY2U8Ym9vbGVhbj4ge1xuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBSZWZlcmVuY2U8T3BhcXVlPikge1xuICAgIHRoaXMudGFnID0gaW5uZXIudGFnO1xuICB9XG5cbiAgdmFsdWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9Cb29sKHRoaXMuaW5uZXIudmFsdWUoKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Cb29sKHZhbHVlOiBPcGFxdWUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF2YWx1ZTtcbiAgfVxufVxuIl19