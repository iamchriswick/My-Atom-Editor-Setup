import * as WireFormat from '@glimmer/wire-format';
import { dict, assert } from '@glimmer/util';
export class Specialize {
    constructor() {
        this.names = dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    specialize(sexp, table) {
        let name = sexp[0];
        let index = this.names[name];
        if (index === undefined)
            return sexp;
        let func = this.funcs[index];
        assert(!!func, `expected a specialization for ${sexp[0]}`);
        return func(sexp, table);
    }
}
export const SPECIALIZE = new Specialize();
var E = WireFormat.Expressions;
SPECIALIZE.add('append', (sexp, _symbolTable) => {
    let path = sexp[1];
    if (Array.isArray(path) && (E.isUnknown(path) || E.isGet(path))) {
        if (path[1].length !== 1) {
            return ['unoptimized-append', sexp[1], sexp[2]];
        }
    }
    return ['optimized-append', sexp[1], sexp[2]];
});
SPECIALIZE.add('dynamic-attr', (sexp, _symbolTable) => {
    return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], false];
});
SPECIALIZE.add('trusting-attr', (sexp, _symbolTable) => {
    return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], true];
});
SPECIALIZE.add('partial', (sexp, _table) => {
    let expression = sexp[1];
    if (typeof expression === 'string') {
        return ['static-partial', expression];
    }
    else {
        return ['dynamic-partial', expression];
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY2lhbGl6ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3J1bnRpbWUvbGliL3N5bnRheC9zcGVjaWFsaXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxVQUFVLE1BQU0sc0JBQXNCLENBQUM7QUFFbkQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPN0MsTUFBTTtJQUFOO1FBQ1UsVUFBSyxHQUFHLElBQUksRUFBVSxDQUFDO1FBQ3ZCLFVBQUssR0FBeUIsRUFBRSxDQUFDO0lBaUIzQyxDQUFDO0lBZkMsR0FBRyxDQUFDLElBQVUsRUFBRSxJQUF3QjtRQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsVUFBVSxDQUFDLElBQVksRUFBRSxLQUFrQjtRQUN6QyxJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU3QixFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUVyQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLGlDQUFpQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFDO0FBRzNDLElBQU8sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUM7QUFFbEMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFjLEVBQUUsWUFBWTtJQUNwRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFekIsTUFBTSxDQUFDLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hELENBQUMsQ0FBQyxDQUFDO0FBRUgsVUFBVSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFtQixFQUFFLFlBQVk7SUFDL0QsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDaEUsQ0FBQyxDQUFDLENBQUM7QUFFSCxVQUFVLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQW9CLEVBQUUsWUFBWTtJQUNqRSxNQUFNLENBQUMsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUMsQ0FBQztBQUVILFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBZSxFQUFFLE1BQU07SUFDaEQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXpCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sVUFBVSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDekMsQ0FBQztBQUNILENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgV2lyZUZvcm1hdCBmcm9tICdAZ2xpbW1lci93aXJlLWZvcm1hdCc7XHJcbmltcG9ydCB7IEJhc2VsaW5lU3ludGF4IH0gZnJvbSAnLi4vc2Nhbm5lcic7XHJcbmltcG9ydCB7IGRpY3QsIGFzc2VydCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xyXG5pbXBvcnQgeyBTeW1ib2xUYWJsZSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU3ludGF4ID0gQmFzZWxpbmVTeW50YXguQW55U3RhdGVtZW50O1xyXG5leHBvcnQgdHlwZSBOYW1lID0gQmFzZWxpbmVTeW50YXguQW55U3RhdGVtZW50WzBdO1xyXG5leHBvcnQgdHlwZSBTcGVjaWFsaXplRnVuY3Rpb24gPSAoc2V4cDogU3ludGF4LCBzeW1ib2xUYWJsZTogU3ltYm9sVGFibGUpID0+IFN5bnRheDtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcGVjaWFsaXplIHtcclxuICBwcml2YXRlIG5hbWVzID0gZGljdDxudW1iZXI+KCk7XHJcbiAgcHJpdmF0ZSBmdW5jczogU3BlY2lhbGl6ZUZ1bmN0aW9uW10gPSBbXTtcclxuXHJcbiAgYWRkKG5hbWU6IE5hbWUsIGZ1bmM6IFNwZWNpYWxpemVGdW5jdGlvbikge1xyXG4gICAgdGhpcy5mdW5jcy5wdXNoKGZ1bmMpO1xyXG4gICAgdGhpcy5uYW1lc1tuYW1lXSA9IHRoaXMuZnVuY3MubGVuZ3RoIC0gMTtcclxuICB9XHJcblxyXG4gIHNwZWNpYWxpemUoc2V4cDogU3ludGF4LCB0YWJsZTogU3ltYm9sVGFibGUpOiBTeW50YXgge1xyXG4gICAgbGV0IG5hbWU6IE5hbWUgPSBzZXhwWzBdO1xyXG4gICAgbGV0IGluZGV4ID0gdGhpcy5uYW1lc1tuYW1lXTtcclxuXHJcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkgcmV0dXJuIHNleHA7XHJcblxyXG4gICAgbGV0IGZ1bmMgPSB0aGlzLmZ1bmNzW2luZGV4XTtcclxuICAgIGFzc2VydCghIWZ1bmMsIGBleHBlY3RlZCBhIHNwZWNpYWxpemF0aW9uIGZvciAke3NleHBbMF19YCk7XHJcbiAgICByZXR1cm4gZnVuYyhzZXhwLCB0YWJsZSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU1BFQ0lBTElaRSA9IG5ldyBTcGVjaWFsaXplKCk7XHJcblxyXG5pbXBvcnQgUyA9IFdpcmVGb3JtYXQuU3RhdGVtZW50cztcclxuaW1wb3J0IEUgPSBXaXJlRm9ybWF0LkV4cHJlc3Npb25zO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ2FwcGVuZCcsIChzZXhwOiBTLkFwcGVuZCwgX3N5bWJvbFRhYmxlKSA9PiB7XHJcbiAgbGV0IHBhdGggPSBzZXhwWzFdO1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSAmJiAoRS5pc1Vua25vd24ocGF0aCkgfHwgRS5pc0dldChwYXRoKSkpIHtcclxuICAgIGlmIChwYXRoWzFdLmxlbmd0aCAhPT0gMSkge1xyXG5cclxuICAgICAgcmV0dXJuIFsndW5vcHRpbWl6ZWQtYXBwZW5kJywgc2V4cFsxXSwgc2V4cFsyXV07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gWydvcHRpbWl6ZWQtYXBwZW5kJywgc2V4cFsxXSwgc2V4cFsyXV07XHJcbn0pO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ2R5bmFtaWMtYXR0cicsIChzZXhwOiBTLkR5bmFtaWNBdHRyLCBfc3ltYm9sVGFibGUpID0+IHtcclxuICByZXR1cm4gWydhbnktZHluYW1pYy1hdHRyJywgc2V4cFsxXSwgc2V4cFsyXSwgc2V4cFszXSwgZmFsc2VdO1xyXG59KTtcclxuXHJcblNQRUNJQUxJWkUuYWRkKCd0cnVzdGluZy1hdHRyJywgKHNleHA6IFMuVHJ1c3RpbmdBdHRyLCBfc3ltYm9sVGFibGUpID0+IHtcclxuICByZXR1cm4gWydhbnktZHluYW1pYy1hdHRyJywgc2V4cFsxXSwgc2V4cFsyXSwgc2V4cFszXSwgdHJ1ZV07XHJcbn0pO1xyXG5cclxuU1BFQ0lBTElaRS5hZGQoJ3BhcnRpYWwnLCAoc2V4cDogUy5QYXJ0aWFsLCBfdGFibGUpID0+IHtcclxuICBsZXQgZXhwcmVzc2lvbiA9IHNleHBbMV07XHJcblxyXG4gIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgIHJldHVybiBbJ3N0YXRpYy1wYXJ0aWFsJywgZXhwcmVzc2lvbl07XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBbJ2R5bmFtaWMtcGFydGlhbCcsIGV4cHJlc3Npb25dO1xyXG4gIH1cclxufSk7XHJcbiJdfQ==