import { EMPTY_CACHE } from '../utils';
import { dict } from '@glimmer/util';
import Meta from '../meta';
import { PropertyReference } from './descriptors';
import { VOLATILE_TAG } from '@glimmer/reference';
class UnchainFromPath {
    constructor(set, child) {
        this.set = set;
        this.child = child;
    }
    destroy() {
        this.set.delete(this.child);
    }
}
export default class PathReference {
    constructor(parent, property) {
        this.cache = EMPTY_CACHE;
        this.inner = null;
        this.chains = null;
        this.lastParentValue = EMPTY_CACHE;
        this._guid = null;
        this.tag = VOLATILE_TAG;
        this.parent = parent;
        this.property = property;
    }
    value() {
        let { lastParentValue, property, inner } = this;
        let parentValue = this._parentValue();
        if (parentValue === null || parentValue === undefined) {
            return (this.cache = undefined);
        }
        if (lastParentValue === parentValue) {
            inner = this.inner;
        }
        else {
            let ReferenceType = typeof parentValue === 'object' ? Meta.for(parentValue).referenceTypeFor(property) : PropertyReference;
            inner = this.inner = new ReferenceType(parentValue, property, this);
        }
        // if (typeof parentValue === 'object') {
        //   Meta.for(parentValue).addReference(property, this);
        // }
        return (this.cache = inner.value());
    }
    get(prop) {
        let chains = this._getChains();
        if (prop in chains)
            return chains[prop];
        return (chains[prop] = new PathReference(this, prop));
    }
    label() {
        return '[reference Direct]';
    }
    _getChains() {
        if (this.chains)
            return this.chains;
        return (this.chains = dict());
    }
    _parentValue() {
        let parent = this.parent.value();
        this.lastParentValue = parent;
        return parent;
    }
}
export { PathReference };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1yZWZlcmVuY2UvbGliL3JlZmVyZW5jZXMvcGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3ZDLE9BQU8sRUFBVyxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUMsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFDO0FBQzNCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUEyRCxNQUFNLG9CQUFvQixDQUFDO0FBRzNHO0lBSUUsWUFBWSxHQUEwQyxFQUFFLEtBQW1DO1FBQ3pGLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE9BQU87SUFVWixZQUFZLE1BQXlCLEVBQUUsUUFBZ0I7UUFQN0MsVUFBSyxHQUFRLFdBQVcsQ0FBQztRQUMzQixVQUFLLEdBQWlCLElBQUksQ0FBQztRQUMzQixXQUFNLEdBQTZCLElBQUksQ0FBQztRQUN4QyxvQkFBZSxHQUFRLFdBQVcsQ0FBQztRQUNwQyxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2IsUUFBRyxHQUFnQixZQUFZLENBQUM7UUFHckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7UUFDaEQsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXRDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsZUFBZSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDcEMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDckIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxhQUFhLEdBQUcsT0FBTyxXQUFXLEtBQUssUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsaUJBQWlCLENBQUM7WUFDM0gsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxhQUFhLENBQUMsV0FBVyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBRUQseUNBQXlDO1FBQ3pDLHdEQUF3RDtRQUN4RCxJQUFJO1FBRUosTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVk7UUFDZCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0IsRUFBRSxDQUFDLENBQVMsSUFBSSxJQUFJLE1BQU0sQ0FBQztZQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUFDO0lBQzlCLENBQUM7SUFFTyxVQUFVO1FBQ2hCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNwQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksRUFBc0IsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTyxZQUFZO1FBQ2xCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7UUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsYUFBYSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFTVBUWV9DQUNIRSB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IERpY3RTZXQsIGRpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCBNZXRhIGZyb20gJy4uL21ldGEnO1xuaW1wb3J0IHsgUHJvcGVydHlSZWZlcmVuY2UgfSBmcm9tICcuL2Rlc2NyaXB0b3JzJztcbmltcG9ydCB7IFZPTEFUSUxFX1RBRywgUGF0aFJlZmVyZW5jZSBhcyBJUGF0aFJlZmVyZW5jZSwgUmVmZXJlbmNlLCBSZXZpc2lvblRhZyB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyBEaWN0LCBIYXNHdWlkIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmNsYXNzIFVuY2hhaW5Gcm9tUGF0aCB7XG4gIHByaXZhdGUgc2V0OiBEaWN0U2V0PFBhdGhSZWZlcmVuY2U8YW55PiAmIEhhc0d1aWQ+O1xuICBwcml2YXRlIGNoaWxkOiBQYXRoUmVmZXJlbmNlPGFueT4gJiBIYXNHdWlkO1xuXG4gIGNvbnN0cnVjdG9yKHNldDogRGljdFNldDxQYXRoUmVmZXJlbmNlPGFueT4gJiBIYXNHdWlkPiwgY2hpbGQ6IFBhdGhSZWZlcmVuY2U8YW55PiAmIEhhc0d1aWQpIHtcbiAgICB0aGlzLnNldCA9IHNldDtcbiAgICB0aGlzLmNoaWxkID0gY2hpbGQ7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuc2V0LmRlbGV0ZSh0aGlzLmNoaWxkKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXRoUmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgSVBhdGhSZWZlcmVuY2U8VD4sIEhhc0d1aWQge1xuICBwcml2YXRlIHBhcmVudDogSVBhdGhSZWZlcmVuY2U8YW55PjtcbiAgcHJpdmF0ZSBwcm9wZXJ0eTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgY2FjaGU6IGFueSA9IEVNUFRZX0NBQ0hFO1xuICBwcml2YXRlIGlubmVyOiBSZWZlcmVuY2U8VD4gPSBudWxsO1xuICBwcml2YXRlIGNoYWluczogRGljdDxQYXRoUmVmZXJlbmNlPGFueT4+ID0gbnVsbDtcbiAgcHJpdmF0ZSBsYXN0UGFyZW50VmFsdWU6IGFueSA9IEVNUFRZX0NBQ0hFO1xuICBwdWJsaWMgX2d1aWQgPSBudWxsO1xuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZyA9IFZPTEFUSUxFX1RBRztcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IElQYXRoUmVmZXJlbmNlPFQ+LCBwcm9wZXJ0eTogc3RyaW5nKSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5wcm9wZXJ0eSA9IHByb3BlcnR5O1xuICB9XG5cbiAgdmFsdWUoKTogYW55IHtcbiAgICBsZXQgeyBsYXN0UGFyZW50VmFsdWUsIHByb3BlcnR5LCBpbm5lciB9ID0gdGhpcztcbiAgICBsZXQgcGFyZW50VmFsdWUgPSB0aGlzLl9wYXJlbnRWYWx1ZSgpO1xuXG4gICAgaWYgKHBhcmVudFZhbHVlID09PSBudWxsIHx8IHBhcmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAodGhpcy5jYWNoZSA9IHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgaWYgKGxhc3RQYXJlbnRWYWx1ZSA9PT0gcGFyZW50VmFsdWUpIHtcbiAgICAgIGlubmVyID0gdGhpcy5pbm5lcjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFJlZmVyZW5jZVR5cGUgPSB0eXBlb2YgcGFyZW50VmFsdWUgPT09ICdvYmplY3QnID8gTWV0YS5mb3IocGFyZW50VmFsdWUpLnJlZmVyZW5jZVR5cGVGb3IocHJvcGVydHkpIDogUHJvcGVydHlSZWZlcmVuY2U7XG4gICAgICBpbm5lciA9IHRoaXMuaW5uZXIgPSBuZXcgUmVmZXJlbmNlVHlwZShwYXJlbnRWYWx1ZSwgcHJvcGVydHksIHRoaXMpO1xuICAgIH1cblxuICAgIC8vIGlmICh0eXBlb2YgcGFyZW50VmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gICBNZXRhLmZvcihwYXJlbnRWYWx1ZSkuYWRkUmVmZXJlbmNlKHByb3BlcnR5LCB0aGlzKTtcbiAgICAvLyB9XG5cbiAgICByZXR1cm4gKHRoaXMuY2FjaGUgPSBpbm5lci52YWx1ZSgpKTtcbiAgfVxuXG4gIGdldChwcm9wOiBzdHJpbmcpOiBJUGF0aFJlZmVyZW5jZTxhbnk+IHtcbiAgICBsZXQgY2hhaW5zID0gdGhpcy5fZ2V0Q2hhaW5zKCk7XG4gICAgaWYgKDxzdHJpbmc+cHJvcCBpbiBjaGFpbnMpIHJldHVybiBjaGFpbnNbcHJvcF07XG4gICAgcmV0dXJuIChjaGFpbnNbcHJvcF0gPSBuZXcgUGF0aFJlZmVyZW5jZSh0aGlzLCBwcm9wKSk7XG4gIH1cblxuICBsYWJlbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnW3JlZmVyZW5jZSBEaXJlY3RdJztcbiAgfVxuXG4gIHByaXZhdGUgX2dldENoYWlucygpOiBEaWN0PFBhdGhSZWZlcmVuY2U8YW55Pj4ge1xuICAgIGlmICh0aGlzLmNoYWlucykgcmV0dXJuIHRoaXMuY2hhaW5zO1xuICAgIHJldHVybiAodGhpcy5jaGFpbnMgPSBkaWN0PFBhdGhSZWZlcmVuY2U8YW55Pj4oKSk7XG4gIH1cblxuICBwcml2YXRlIF9wYXJlbnRWYWx1ZSgpIHtcbiAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQudmFsdWUoKTtcbiAgICB0aGlzLmxhc3RQYXJlbnRWYWx1ZSA9IHBhcmVudDtcbiAgICByZXR1cm4gcGFyZW50O1xuICB9XG59XG5cbmV4cG9ydCB7IFBhdGhSZWZlcmVuY2UgfTtcbiJdfQ==