import Meta from '../meta';
import { VOLATILE_TAG } from '@glimmer/reference';
export class PropertyReference {
    constructor(object, property, outer) {
        this.tag = VOLATILE_TAG;
        this.object = object;
        this.property = property;
    }
    value() { return this.object[this.property]; }
    label() {
        return '[reference Property]';
    }
}
export function ComputedReferenceBlueprint(property, dependencies) {
    return class ComputedReference {
        constructor(object, property, outer) {
            this.installed = false;
            this.tag = VOLATILE_TAG;
            this.object = object;
            this.property = property;
            this.dependencies = dependencies;
            this.outer = outer;
        }
        value() {
            if (!this.installed) {
                let root = Meta.for(this.object).root();
                this.dependencies.forEach(dep => {
                    let ref = root.referenceFromParts(dep);
                    ref.value();
                });
                this.installed = true;
            }
            return this.object[this.property];
        }
        label() {
            return '[reference Computed]';
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzY3JpcHRvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJAZ2xpbW1lci9vYmplY3QtcmVmZXJlbmNlL2xpYi9yZWZlcmVuY2VzL2Rlc2NyaXB0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUMzQixPQUFPLEVBQWEsWUFBWSxFQUFlLE1BQU0sb0JBQW9CLENBQUM7QUFPMUUsTUFBTTtJQUtKLFlBQVksTUFBVyxFQUFFLFFBQWdCLEVBQUUsS0FBNkI7UUFGakUsUUFBRyxHQUFnQixZQUFZLENBQUM7UUFHckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELEtBQUssS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTlDLEtBQUs7UUFDSCxNQUFNLENBQUMsc0JBQXNCLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxxQ0FBd0MsUUFBUSxFQUFFLFlBQVk7SUFDbEUsTUFBTSxDQUFDO1FBUUwsWUFBWSxNQUFXLEVBQUUsUUFBZ0IsRUFBRSxLQUE2QjtZQUhoRSxjQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ25CLFFBQUcsR0FBZ0IsWUFBWSxDQUFDO1lBR3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1lBQ2pDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLENBQUM7UUFFRCxLQUFLO1lBQ0gsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRXhDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUc7b0JBQzNCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDdkMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUNkLENBQUMsQ0FBQyxDQUFDO2dCQUVILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ3hCLENBQUM7WUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELEtBQUs7WUFDSCxNQUFNLENBQUMsc0JBQXNCLENBQUM7UUFDaEMsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1ldGEgZnJvbSAnLi4vbWV0YSc7XG5pbXBvcnQgeyBSZWZlcmVuY2UsIFZPTEFUSUxFX1RBRywgUmV2aXNpb25UYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgTm90aWZpYWJsZVJlZmVyZW5jZSB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBJbm5lclJlZmVyZW5jZUZhY3Rvcnk8VD4ge1xuICBuZXcgKG9iamVjdDogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZTxhbnk+KTogUmVmZXJlbmNlPFQ+O1xufVxuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBSZWZlcmVuY2U8VD4ge1xuICBwcml2YXRlIG9iamVjdDogYW55O1xuICBwcml2YXRlIHByb3BlcnR5OiBzdHJpbmc7XG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnID0gVk9MQVRJTEVfVEFHO1xuXG4gIGNvbnN0cnVjdG9yKG9iamVjdDogYW55LCBwcm9wZXJ0eTogc3RyaW5nLCBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZTxUPikge1xuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgfVxuXG4gIHZhbHVlKCkgeyByZXR1cm4gdGhpcy5vYmplY3RbdGhpcy5wcm9wZXJ0eV07IH1cblxuICBsYWJlbCgpIHtcbiAgICByZXR1cm4gJ1tyZWZlcmVuY2UgUHJvcGVydHldJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29tcHV0ZWRSZWZlcmVuY2VCbHVlcHJpbnQ8VD4ocHJvcGVydHksIGRlcGVuZGVuY2llcyk6IElubmVyUmVmZXJlbmNlRmFjdG9yeTxUPiB7XG4gIHJldHVybiBjbGFzcyBDb21wdXRlZFJlZmVyZW5jZTxUPiBpbXBsZW1lbnRzIFJlZmVyZW5jZTxUPiB7XG4gICAgcHJpdmF0ZSBvYmplY3Q6IGFueTtcbiAgICBwcml2YXRlIHByb3BlcnR5OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBkZXBlbmRlbmNpZXM6IHN0cmluZ1tdW107XG4gICAgcHJpdmF0ZSBvdXRlcjogTm90aWZpYWJsZVJlZmVyZW5jZTxUPjtcbiAgICBwcml2YXRlIGluc3RhbGxlZCA9IGZhbHNlO1xuICAgIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnID0gVk9MQVRJTEVfVEFHO1xuXG4gICAgY29uc3RydWN0b3Iob2JqZWN0OiBhbnksIHByb3BlcnR5OiBzdHJpbmcsIG91dGVyOiBOb3RpZmlhYmxlUmVmZXJlbmNlPFQ+KSB7XG4gICAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICAgIHRoaXMucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzO1xuICAgICAgdGhpcy5vdXRlciA9IG91dGVyO1xuICAgIH1cblxuICAgIHZhbHVlKCk6IFQge1xuICAgICAgaWYgKCF0aGlzLmluc3RhbGxlZCkge1xuICAgICAgICBsZXQgcm9vdCA9IE1ldGEuZm9yKHRoaXMub2JqZWN0KS5yb290KCk7XG5cbiAgICAgICAgdGhpcy5kZXBlbmRlbmNpZXMuZm9yRWFjaChkZXAgPT4ge1xuICAgICAgICAgIGxldCByZWYgPSByb290LnJlZmVyZW5jZUZyb21QYXJ0cyhkZXApO1xuICAgICAgICAgIHJlZi52YWx1ZSgpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluc3RhbGxlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLm9iamVjdFt0aGlzLnByb3BlcnR5XTtcbiAgICB9XG5cbiAgICBsYWJlbCgpIHtcbiAgICAgIHJldHVybiAnW3JlZmVyZW5jZSBDb21wdXRlZF0nO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==