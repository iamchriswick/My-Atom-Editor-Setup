import { dict } from '@glimmer/util';
import { PathReference } from './path';
import { VOLATILE_TAG } from '@glimmer/reference';
export default class RootReference {
    constructor(object) {
        this.chains = dict();
        this.tag = VOLATILE_TAG;
        this.object = object;
    }
    value() { return this.object; }
    update(object) {
        this.object = object;
        // this.notify();
    }
    get(prop) {
        let chains = this.chains;
        if (prop in chains)
            return chains[prop];
        return (chains[prop] = new PathReference(this, prop));
    }
    chainFor(prop) {
        let chains = this.chains;
        if (prop in chains)
            return chains[prop];
        return null;
    }
    path(string) {
        return string.split('.').reduce((ref, part) => ref.get(part), this);
    }
    referenceFromParts(parts) {
        return parts.reduce((ref, part) => ref.get(part), this);
    }
    label() {
        return '[reference Root]';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1yZWZlcmVuY2UvbGliL3JlZmVyZW5jZXMvcm9vdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdkMsT0FBTyxFQUFFLFlBQVksRUFBZ0QsTUFBTSxvQkFBb0IsQ0FBQztBQUVoRyxNQUFNLENBQUMsT0FBTztJQUtaLFlBQVksTUFBUztRQUhiLFdBQU0sR0FBRyxJQUFJLEVBQXNCLENBQUM7UUFDckMsUUFBRyxHQUFnQixZQUFZLENBQUM7UUFHckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELEtBQUssS0FBUSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFbEMsTUFBTSxDQUFDLE1BQVM7UUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixpQkFBaUI7SUFDbkIsQ0FBQztJQUVELEdBQUcsQ0FBSSxJQUFZO1FBQ2pCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsRUFBRSxDQUFDLENBQVMsSUFBSSxJQUFJLE1BQU0sQ0FBQztZQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEQsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxRQUFRLENBQUksSUFBWTtRQUN0QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFTLElBQUksSUFBSSxNQUFNLENBQUM7WUFBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLE1BQU07UUFDVCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQWU7UUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUEyQixFQUFFLElBQThCLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIGRpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFBhdGhSZWZlcmVuY2UgfSBmcm9tICcuL3BhdGgnO1xuaW1wb3J0IHsgUm9vdFJlZmVyZW5jZSBhcyBJUm9vdFJlZmVyZW5jZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFZPTEFUSUxFX1RBRywgUGF0aFJlZmVyZW5jZSBhcyBJUGF0aFJlZmVyZW5jZSwgUmV2aXNpb25UYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb290UmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgSVJvb3RSZWZlcmVuY2U8VD4sIElQYXRoUmVmZXJlbmNlPFQ+IHtcbiAgcHJpdmF0ZSBvYmplY3Q6IFQ7XG4gIHByaXZhdGUgY2hhaW5zID0gZGljdDxQYXRoUmVmZXJlbmNlPGFueT4+KCk7XG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnID0gVk9MQVRJTEVfVEFHO1xuXG4gIGNvbnN0cnVjdG9yKG9iamVjdDogVCkge1xuICAgIHRoaXMub2JqZWN0ID0gb2JqZWN0O1xuICB9XG5cbiAgdmFsdWUoKTogVCB7IHJldHVybiB0aGlzLm9iamVjdDsgfVxuXG4gIHVwZGF0ZShvYmplY3Q6IFQpIHtcbiAgICB0aGlzLm9iamVjdCA9IG9iamVjdDtcbiAgICAvLyB0aGlzLm5vdGlmeSgpO1xuICB9XG5cbiAgZ2V0PFU+KHByb3A6IHN0cmluZyk6IElQYXRoUmVmZXJlbmNlPFU+IHtcbiAgICBsZXQgY2hhaW5zID0gdGhpcy5jaGFpbnM7XG4gICAgaWYgKDxzdHJpbmc+cHJvcCBpbiBjaGFpbnMpIHJldHVybiBjaGFpbnNbcHJvcF07XG4gICAgcmV0dXJuIChjaGFpbnNbcHJvcF0gPSBuZXcgUGF0aFJlZmVyZW5jZSh0aGlzLCBwcm9wKSk7XG4gIH1cblxuICBjaGFpbkZvcjxVPihwcm9wOiBzdHJpbmcpOiBJUGF0aFJlZmVyZW5jZTxVPiB7XG4gICAgbGV0IGNoYWlucyA9IHRoaXMuY2hhaW5zO1xuICAgIGlmICg8c3RyaW5nPnByb3AgaW4gY2hhaW5zKSByZXR1cm4gY2hhaW5zW3Byb3BdO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcGF0aChzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcuJykucmVkdWNlKChyZWYsIHBhcnQpID0+IHJlZi5nZXQocGFydCksIHRoaXMpO1xuICB9XG5cbiAgcmVmZXJlbmNlRnJvbVBhcnRzKHBhcnRzOiBzdHJpbmdbXSk6IElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4ge1xuICAgIHJldHVybiBwYXJ0cy5yZWR1Y2UoKHJlZiwgcGFydCkgPT4gcmVmLmdldChwYXJ0KSBhcyBJUGF0aFJlZmVyZW5jZTxPcGFxdWU+LCB0aGlzIGFzIElQYXRoUmVmZXJlbmNlPE9wYXF1ZT4pO1xuICB9XG5cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuICdbcmVmZXJlbmNlIFJvb3RdJztcbiAgfVxufVxuIl19