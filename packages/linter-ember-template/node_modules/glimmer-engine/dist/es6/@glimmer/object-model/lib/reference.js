import Meta, { ClassMeta } from './meta';
import { CURRENT_TAG, CONSTANT_TAG, combine } from '@glimmer/reference';
import { HAS_NATIVE_WEAKMAP } from '@glimmer/util';
export let classMeta;
export let meta;
if (HAS_NATIVE_WEAKMAP) {
    const META = new WeakMap();
    const CLASS_META = new WeakMap();
    classMeta = function _classMetaNative(object) {
        let m = CLASS_META.get(object);
        if (m === undefined) {
            m = new ClassMeta();
            CLASS_META.set(object, m);
        }
        return m;
    };
    meta = function _metaNative(object) {
        let m = META.get(object);
        if (m === undefined) {
            m = new Meta();
            META.set(object, m);
        }
        return m;
    };
}
else {
    const GLIMMER_META = 'META__glimmer__1484170086860394543206811';
    const GLIMMER_CLASS_META = 'CLASS_META__glimmer__14841708559821468834708062';
    classMeta = function _classMetaFaux(object) {
        let m = object[GLIMMER_CLASS_META];
        if (m === undefined) {
            m = new ClassMeta();
            object[GLIMMER_CLASS_META] = m;
        }
        return m;
    };
    meta = function _metaFaux(object) {
        let m = object[GLIMMER_META];
        if (m === undefined) {
            m = new Meta();
            object[GLIMMER_META] = m;
        }
        return m;
    };
}
export function set(object, key, value) {
    object[key] = value;
    meta(object).dirty(key);
}
export function root(object) {
    return new VersionedRootReference(object);
}
export class VersionedRootReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = CONSTANT_TAG;
    }
    value() {
        return this.inner;
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
export class VersionedObjectReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = CURRENT_TAG;
    }
    value() {
        let { parent, key } = this;
        let parentObject = this.parent.value();
        let computed = classMeta(Object.getPrototypeOf(parentObject)).getComputed(key);
        let tags = [meta(parentObject).tag(key)];
        if (computed) {
            tags.push(...computed.dependentKeys.map(key => path(this, key).tag));
        }
        this.tag = combine(tags);
        return parentObject[key];
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
function path(parent, key) {
    return key.split('.').reduce((ref, part) => ref.get(part), parent);
}
//# sourceMappingURL=data:application/json;base64,