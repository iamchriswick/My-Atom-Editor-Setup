import { GlimmerDescriptor, ValueBlueprint } from './blueprint';
export class GlimmerObjectBase {
}
export default class GlimmerObject {
    static create(properties) {
        return new this(properties);
    }
    static extend(extensions) {
        // This method intentionally uses internal typecasts to convince TypeScript
        // that what we're doing is legitimate. The real action of this method is in
        // its signature (and the signature of GlimmerClass).
        let sub = class extends this {
        };
        if (extensions !== undefined) {
            let blueprints = Object.keys(extensions).map(k => {
                let extension = extensions[k];
                if (extension instanceof GlimmerDescriptor) {
                    return extension.blueprint(k);
                }
                else {
                    return new ValueBlueprint(k, extensions[k]);
                }
            });
            blueprints.forEach(b => b.define(sub.prototype));
        }
        return sub;
    }
    constructor(properties) {
        if (properties !== undefined) {
            Object.assign(this, properties);
        }
    }
}
/**
 * Adapter for TypeScript.
 *
 * A shim library could just declare the variable as the type
 * GlimmerClass<FirstInstance>. The key point is that shimming
 * between the two worlds requires writing a static interface
 * definition, as TypeScript isn't willing to treat the dynamic
 * intersection as a valid constructor return type.
 *
 * This function is a noop and is used like this:
 *
 * ```ts
 * // in one file
 * let Person = GlimmerObject.extend({
 *   named: 'Dan'
 * });
 *
 *
 * // in a TypeScript wrapper file
 * import { Person as OriginalPerson } from 'original-definition';
 *
 * interface PersonInstance {
 *   named: string
 * }
 *
 * export let Person = classof<PersonInstance>(OriginalPerson);
 *
 * // in a subclassing file
 * import { Person } from 'wrapped-definition';
 *
 * class FancyPerson extends Person {
 *   salutation: string;
 *
 *   fullName() {
 *     return `${this.salutation} ${this.named}`;
 *   }
 * }
 *
 * FancyPerson.create({ name: 'Tom Dale', salutation: 'Mr.' }).fullName();
 * // typechecks and returns 'Mr. Tom Dale'
 * ```
*/
export function classof(klass) {
    return klass;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvb2JqZWN0LW1vZGVsL2xpYi9vYmplY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQWNoRSxNQUFNO0NBRUw7QUFFRCxNQUFNLENBQUMsT0FBTztJQUNaLE1BQU0sQ0FBQyxNQUFNLENBQXdJLFVBQTBCO1FBQzdLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQStDLENBQUM7SUFDNUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQWlHLFVBQXVCO1FBQ25JLDJFQUEyRTtRQUMzRSw0RUFBNEU7UUFDNUUscURBQXFEO1FBRXJELElBQUksR0FBRyxHQUFHLEtBQU0sU0FBUyxJQUFpQztTQUFHLENBQUM7UUFFOUQsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDNUMsSUFBSSxTQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixFQUFFLENBQUMsQ0FBQyxTQUFTLFlBQVksaUJBQWlCLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEMsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QyxDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFFSCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFFRCxNQUFNLENBQUMsR0FBVSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxZQUFZLFVBQW1CO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF5Q0U7QUFDRixNQUFNLGtCQUFxQixLQUFVO0lBQ25DLE1BQU0sQ0FBQyxLQUFZLENBQUM7QUFDdEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdsaW1tZXJEZXNjcmlwdG9yLCBWYWx1ZUJsdWVwcmludCB9IGZyb20gJy4vYmx1ZXByaW50JztcclxuZXhwb3J0IHR5cGUgR2xpbW1lck9iamVjdENsYXNzID0gdHlwZW9mIEdsaW1tZXJPYmplY3Q7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvbnN0cnVjdG9yPFQgZXh0ZW5kcyBHbGltbWVyT2JqZWN0PiB7XHJcbiAgbmV3KC4uLmFyZ3MpOiBUO1xyXG4gIHByb3RvdHlwZTogVDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHbGltbWVyQ2xhc3M8RXh0ZW5zaW9ucyBleHRlbmRzIEdsaW1tZXJPYmplY3Q+IGV4dGVuZHMgQ29uc3RydWN0b3I8RXh0ZW5zaW9ucz4ge1xyXG4gIG5ldyguLi5hcmdzKTogRXh0ZW5zaW9ucztcclxuICBjcmVhdGU8RXh0ZW5zaW9ucywgQ3JlYXRlT3B0aW9ucywgVCBleHRlbmRzIHR5cGVvZiBHbGltbWVyT2JqZWN0Pih0aGlzOiBUICYgR2xpbW1lckNsYXNzPEV4dGVuc2lvbnM+LCBwcm9wZXJ0aWVzPzogQ3JlYXRlT3B0aW9ucyk6IEV4dGVuc2lvbnMgJiBDcmVhdGVPcHRpb25zICYgR2xpbW1lck9iamVjdDtcclxuICBleHRlbmQ8T3JpZ2luYWwgZXh0ZW5kcyBHbGltbWVyT2JqZWN0LCBFeHRlbnNpb25zIGV4dGVuZHMgR2xpbW1lck9iamVjdD4odGhpczogR2xpbW1lckNsYXNzPE9yaWdpbmFsPiwgZXh0ZW5zaW9ucz86IEV4dGVuc2lvbnMpOiBHbGltbWVyQ2xhc3M8T3JpZ2luYWwgJiBFeHRlbnNpb25zPjtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEdsaW1tZXJPYmplY3RCYXNlPEV4dGVuc2lvbnM+IHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdsaW1tZXJPYmplY3Qge1xyXG4gIHN0YXRpYyBjcmVhdGU8RXh0ZW5zaW9ucyBleHRlbmRzIEdsaW1tZXJPYmplY3QsIENyZWF0ZU9wdGlvbnMgZXh0ZW5kcyBHbGltbWVyT2JqZWN0LCBUIGV4dGVuZHMgdHlwZW9mIEdsaW1tZXJPYmplY3Q+KHRoaXM6IEdsaW1tZXJDbGFzczxFeHRlbnNpb25zPiwgcHJvcGVydGllcz86IENyZWF0ZU9wdGlvbnMpIHtcclxuICAgIHJldHVybiBuZXcgdGhpcyhwcm9wZXJ0aWVzKSBhcyBFeHRlbnNpb25zICYgQ3JlYXRlT3B0aW9ucyAmIEdsaW1tZXJPYmplY3Q7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXh0ZW5kPE9yaWdpbmFsIGV4dGVuZHMgR2xpbW1lck9iamVjdCwgRXh0ZW5zaW9ucyBleHRlbmRzIEdsaW1tZXJPYmplY3Q+KHRoaXM6IEdsaW1tZXJDbGFzczxPcmlnaW5hbD4sIGV4dGVuc2lvbnM/OiBFeHRlbnNpb25zKTogR2xpbW1lckNsYXNzPE9yaWdpbmFsICYgRXh0ZW5zaW9ucyAmIEdsaW1tZXJPYmplY3Q+IHtcclxuICAgIC8vIFRoaXMgbWV0aG9kIGludGVudGlvbmFsbHkgdXNlcyBpbnRlcm5hbCB0eXBlY2FzdHMgdG8gY29udmluY2UgVHlwZVNjcmlwdFxyXG4gICAgLy8gdGhhdCB3aGF0IHdlJ3JlIGRvaW5nIGlzIGxlZ2l0aW1hdGUuIFRoZSByZWFsIGFjdGlvbiBvZiB0aGlzIG1ldGhvZCBpcyBpblxyXG4gICAgLy8gaXRzIHNpZ25hdHVyZSAoYW5kIHRoZSBzaWduYXR1cmUgb2YgR2xpbW1lckNsYXNzKS5cclxuXHJcbiAgICBsZXQgc3ViID0gY2xhc3MgZXh0ZW5kcyAodGhpcyBhcyBhbnkgYXMgT2JqZWN0Q29uc3RydWN0b3IpIHt9O1xyXG5cclxuICAgIGlmIChleHRlbnNpb25zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbGV0IGJsdWVwcmludHMgPSBPYmplY3Qua2V5cyhleHRlbnNpb25zKS5tYXAoayA9PiB7XHJcbiAgICAgICAgbGV0IGV4dGVuc2lvbiA9IGV4dGVuc2lvbnNba107XHJcbiAgICAgICAgaWYgKGV4dGVuc2lvbiBpbnN0YW5jZW9mIEdsaW1tZXJEZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uLmJsdWVwcmludChrKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZUJsdWVwcmludChrLCBleHRlbnNpb25zW2tdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYmx1ZXByaW50cy5mb3JFYWNoKGIgPT4gYi5kZWZpbmUoc3ViLnByb3RvdHlwZSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdWIgYXMgYW55O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJvcGVydGllcz86IE9iamVjdCkge1xyXG4gICAgaWYgKHByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BlcnRpZXMpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkYXB0ZXIgZm9yIFR5cGVTY3JpcHQuXHJcbiAqXHJcbiAqIEEgc2hpbSBsaWJyYXJ5IGNvdWxkIGp1c3QgZGVjbGFyZSB0aGUgdmFyaWFibGUgYXMgdGhlIHR5cGVcclxuICogR2xpbW1lckNsYXNzPEZpcnN0SW5zdGFuY2U+LiBUaGUga2V5IHBvaW50IGlzIHRoYXQgc2hpbW1pbmdcclxuICogYmV0d2VlbiB0aGUgdHdvIHdvcmxkcyByZXF1aXJlcyB3cml0aW5nIGEgc3RhdGljIGludGVyZmFjZVxyXG4gKiBkZWZpbml0aW9uLCBhcyBUeXBlU2NyaXB0IGlzbid0IHdpbGxpbmcgdG8gdHJlYXQgdGhlIGR5bmFtaWNcclxuICogaW50ZXJzZWN0aW9uIGFzIGEgdmFsaWQgY29uc3RydWN0b3IgcmV0dXJuIHR5cGUuXHJcbiAqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBub29wIGFuZCBpcyB1c2VkIGxpa2UgdGhpczpcclxuICpcclxuICogYGBgdHNcclxuICogLy8gaW4gb25lIGZpbGVcclxuICogbGV0IFBlcnNvbiA9IEdsaW1tZXJPYmplY3QuZXh0ZW5kKHtcclxuICogICBuYW1lZDogJ0RhbidcclxuICogfSk7XHJcbiAqXHJcbiAqXHJcbiAqIC8vIGluIGEgVHlwZVNjcmlwdCB3cmFwcGVyIGZpbGVcclxuICogaW1wb3J0IHsgUGVyc29uIGFzIE9yaWdpbmFsUGVyc29uIH0gZnJvbSAnb3JpZ2luYWwtZGVmaW5pdGlvbic7XHJcbiAqXHJcbiAqIGludGVyZmFjZSBQZXJzb25JbnN0YW5jZSB7XHJcbiAqICAgbmFtZWQ6IHN0cmluZ1xyXG4gKiB9XHJcbiAqXHJcbiAqIGV4cG9ydCBsZXQgUGVyc29uID0gY2xhc3NvZjxQZXJzb25JbnN0YW5jZT4oT3JpZ2luYWxQZXJzb24pO1xyXG4gKlxyXG4gKiAvLyBpbiBhIHN1YmNsYXNzaW5nIGZpbGVcclxuICogaW1wb3J0IHsgUGVyc29uIH0gZnJvbSAnd3JhcHBlZC1kZWZpbml0aW9uJztcclxuICpcclxuICogY2xhc3MgRmFuY3lQZXJzb24gZXh0ZW5kcyBQZXJzb24ge1xyXG4gKiAgIHNhbHV0YXRpb246IHN0cmluZztcclxuICpcclxuICogICBmdWxsTmFtZSgpIHtcclxuICogICAgIHJldHVybiBgJHt0aGlzLnNhbHV0YXRpb259ICR7dGhpcy5uYW1lZH1gO1xyXG4gKiAgIH1cclxuICogfVxyXG4gKlxyXG4gKiBGYW5jeVBlcnNvbi5jcmVhdGUoeyBuYW1lOiAnVG9tIERhbGUnLCBzYWx1dGF0aW9uOiAnTXIuJyB9KS5mdWxsTmFtZSgpO1xyXG4gKiAvLyB0eXBlY2hlY2tzIGFuZCByZXR1cm5zICdNci4gVG9tIERhbGUnXHJcbiAqIGBgYFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NvZjxUPihrbGFzczogYW55KTogR2xpbW1lckNsYXNzPFQ+IHtcclxuICByZXR1cm4ga2xhc3MgYXMgYW55O1xyXG59XHJcbiJdfQ==