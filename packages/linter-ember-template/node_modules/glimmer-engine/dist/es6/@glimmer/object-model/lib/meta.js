import { dict } from '@glimmer/util';
import { DirtyableTag } from '@glimmer/reference';
export default class {
    constructor() {
        this.bookkeeping = dict();
    }
    tag(name) {
        let bookkeeping = this.bookkeeping;
        let tag = bookkeeping[name];
        if (tag === undefined) {
            tag = new DirtyableTag();
            bookkeeping[name] = tag;
        }
        return tag;
    }
    dirty(name) {
        let tag = this.tag(name);
        tag.dirty();
    }
}
export class ClassMeta {
    constructor() {
        this.computed = dict();
    }
    defineComputed(name, value) {
        this.computed[name] = value;
    }
    getComputed(name) {
        return this.computed[name];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL29iamVjdC1tb2RlbC9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHL0QsTUFBTSxDQUFDLE9BQU87SUFBZDtRQUNFLGdCQUFXLEdBQXVCLElBQUksRUFBZ0IsQ0FBQztJQWtCekQsQ0FBQztJQWhCQyxHQUFHLENBQUMsSUFBaUI7UUFDbkIsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNuQyxJQUFJLEdBQUcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFNUIsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdEIsR0FBRyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7WUFDekIsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUMxQixDQUFDO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxLQUFLLENBQUMsSUFBaUI7UUFDckIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQWlCLENBQUM7UUFDekMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGO0FBRUQsTUFBTTtJQUFOO1FBQ1UsYUFBUSxHQUEyQixJQUFJLEVBQW9CLENBQUM7SUFTdEUsQ0FBQztJQVBDLGNBQWMsQ0FBQyxJQUFpQixFQUFFLEtBQXVCO1FBQ3ZELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBaUI7UUFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlLCBEaWN0LCBkaWN0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XHJcbmltcG9ydCB7IFJldmlzaW9uVGFnLCBEaXJ0eWFibGVUYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xyXG5pbXBvcnQgeyBDb21wdXRlZCB9IGZyb20gJy4vYmx1ZXByaW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuICBib29ra2VlcGluZzogRGljdDxEaXJ0eWFibGVUYWc+ID0gZGljdDxEaXJ0eWFibGVUYWc+KCk7XHJcblxyXG4gIHRhZyhuYW1lOiBQcm9wZXJ0eUtleSk6IFJldmlzaW9uVGFnIHtcclxuICAgIGxldCBib29ra2VlcGluZyA9IHRoaXMuYm9va2tlZXBpbmc7XHJcbiAgICBsZXQgdGFnID0gYm9va2tlZXBpbmdbbmFtZV07XHJcblxyXG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRhZyA9IG5ldyBEaXJ0eWFibGVUYWcoKTtcclxuICAgICAgYm9va2tlZXBpbmdbbmFtZV0gPSB0YWc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRhZztcclxuICB9XHJcblxyXG4gIGRpcnR5KG5hbWU6IFByb3BlcnR5S2V5KSB7XHJcbiAgICBsZXQgdGFnID0gdGhpcy50YWcobmFtZSkgYXMgRGlydHlhYmxlVGFnO1xyXG4gICAgdGFnLmRpcnR5KCk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2xhc3NNZXRhIHtcclxuICBwcml2YXRlIGNvbXB1dGVkOiBEaWN0PENvbXB1dGVkPE9wYXF1ZT4+ID0gZGljdDxDb21wdXRlZDxPcGFxdWU+PigpO1xyXG5cclxuICBkZWZpbmVDb21wdXRlZChuYW1lOiBQcm9wZXJ0eUtleSwgdmFsdWU6IENvbXB1dGVkPE9wYXF1ZT4pIHtcclxuICAgIHRoaXMuY29tcHV0ZWRbbmFtZV0gPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIGdldENvbXB1dGVkKG5hbWU6IFByb3BlcnR5S2V5KTogQ29tcHV0ZWQ8T3BhcXVlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZFtuYW1lXTtcclxuICB9XHJcbn1cclxuIl19