import { classMeta } from './reference';
export class Blueprint {
    constructor(key) {
        this.key = key;
    }
}
const VALUE_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
};
const ACCESSOR_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    get: undefined,
    set: undefined
};
export class ValueBlueprint extends Blueprint {
    constructor(key, value) {
        super(key);
        this.value = value;
    }
    define(home) {
        VALUE_DESCRIPTOR.value = this.value;
        Object.defineProperty(home, this.key, VALUE_DESCRIPTOR);
    }
}
export class GlimmerDescriptor {
}
export class Computed extends GlimmerDescriptor {
    constructor(dependentKeys, accessor) {
        super();
        this.dependentKeys = dependentKeys;
        this.accessor = accessor;
    }
    blueprint(key) {
        return new ComputedBlueprint(key, this);
    }
    reference(root, key) {
    }
    define(home, key) {
        classMeta(home).defineComputed(key, this);
        ACCESSOR_DESCRIPTOR.get = this.accessor.get;
        ACCESSOR_DESCRIPTOR.set = this.accessor.set;
        Object.defineProperty(home, key, ACCESSOR_DESCRIPTOR);
    }
}
export function computed(...args) {
    let depKeys = args.slice(0, -1);
    let accessor = args[args.length - 1];
    return new Computed(depKeys, accessor);
}
export class ComputedBlueprint extends Blueprint {
    constructor(key, computed) {
        super(key);
        this.computed = computed;
    }
    define(home) {
        this.computed.define(home, this.key);
    }
}
export class DescriptorBlueprint extends Blueprint {
    constructor(key, descriptor) {
        super(key);
        this.descriptor = descriptor;
    }
    define(home) {
        Object.defineProperty(home, this.key, this.descriptor);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXByaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQGdsaW1tZXIvb2JqZWN0LW1vZGVsL2xpYi9ibHVlcHJpbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUd4QyxNQUFNO0lBQ0osWUFBc0IsR0FBZ0I7UUFBaEIsUUFBRyxHQUFILEdBQUcsQ0FBYTtJQUFHLENBQUM7Q0FFM0M7QUFFRCxNQUFNLGdCQUFnQixHQUF1QjtJQUMzQyxVQUFVLEVBQUUsSUFBSTtJQUNoQixZQUFZLEVBQUUsSUFBSTtJQUNsQixRQUFRLEVBQUUsSUFBSTtJQUNkLEtBQUssRUFBRSxTQUFTO0NBQ2pCLENBQUM7QUFFRixNQUFNLG1CQUFtQixHQUF1QjtJQUM5QyxVQUFVLEVBQUUsSUFBSTtJQUNoQixZQUFZLEVBQUUsSUFBSTtJQUNsQixHQUFHLEVBQUUsU0FBUztJQUNkLEdBQUcsRUFBRSxTQUFTO0NBQ2YsQ0FBQztBQUVGLE1BQU0scUJBQXNCLFNBQVEsU0FBUztJQUMzQyxZQUFZLEdBQWdCLEVBQVUsS0FBYTtRQUNqRCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEeUIsVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUVuRCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVk7UUFDakIsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDRjtBQU9ELE1BQU07Q0FHTDtBQUVELE1BQU0sZUFBbUIsU0FBUSxpQkFBaUI7SUFDaEQsWUFBbUIsYUFBdUIsRUFBVSxRQUFxQjtRQUN2RSxLQUFLLEVBQUUsQ0FBQztRQURTLGtCQUFhLEdBQWIsYUFBYSxDQUFVO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBYTtJQUV6RSxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQWdCO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQW1CLEVBQUUsR0FBZ0I7SUFFL0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZLEVBQUUsR0FBZ0I7UUFDbkMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFMUMsbUJBQW1CLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQzVDLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUM1QyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0Y7QUFPRCxNQUFNLG1CQUFtQixHQUFHLElBQVc7SUFDckMsSUFBSSxPQUFPLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFJLFFBQVEsR0FBcUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFdkQsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBRUQsTUFBTSx3QkFBeUIsU0FBUSxTQUFTO0lBQzlDLFlBQVksR0FBZ0IsRUFBVSxRQUEwQjtRQUM5RCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEeUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFFaEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBRUQsTUFBTSwwQkFBMkIsU0FBUSxTQUFTO0lBQ2hELFlBQVksR0FBZ0IsRUFBVSxVQUE4QjtRQUNsRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEeUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7SUFFcEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wYXF1ZSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xyXG5pbXBvcnQgeyBjbGFzc01ldGEgfSBmcm9tICcuL3JlZmVyZW5jZSc7XHJcbmltcG9ydCBHbGltbWVyT2JqZWN0IGZyb20gJy4vb2JqZWN0JztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBrZXk6IFByb3BlcnR5S2V5KSB7fVxyXG4gIGFic3RyYWN0IGRlZmluZShob21lOiBPYmplY3QpO1xyXG59XHJcblxyXG5jb25zdCBWQUxVRV9ERVNDUklQVE9SOiBQcm9wZXJ0eURlc2NyaXB0b3IgPSB7XHJcbiAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgd3JpdGFibGU6IHRydWUsXHJcbiAgdmFsdWU6IHVuZGVmaW5lZFxyXG59O1xyXG5cclxuY29uc3QgQUNDRVNTT1JfREVTQ1JJUFRPUjogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xyXG4gIGVudW1lcmFibGU6IHRydWUsXHJcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gIGdldDogdW5kZWZpbmVkLFxyXG4gIHNldDogdW5kZWZpbmVkXHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVmFsdWVCbHVlcHJpbnQgZXh0ZW5kcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKGtleTogUHJvcGVydHlLZXksIHByaXZhdGUgdmFsdWU6IE9wYXF1ZSkge1xyXG4gICAgc3VwZXIoa2V5KTtcclxuICB9XHJcblxyXG4gIGRlZmluZShob21lOiBPYmplY3QpIHtcclxuICAgIFZBTFVFX0RFU0NSSVBUT1IudmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGhvbWUsIHRoaXMua2V5LCBWQUxVRV9ERVNDUklQVE9SKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzb3I8VD4ge1xyXG4gIGdldCgpOiBUO1xyXG4gIHNldCh2YWw6IFQpOiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgR2xpbW1lckRlc2NyaXB0b3Ige1xyXG4gIGFic3RyYWN0IGJsdWVwcmludChrZXk6IFByb3BlcnR5S2V5KTogQmx1ZXByaW50O1xyXG4gIGFic3RyYWN0IGRlZmluZShob21lOiBPYmplY3QsIGtleTogUHJvcGVydHlLZXkpO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29tcHV0ZWQ8VD4gZXh0ZW5kcyBHbGltbWVyRGVzY3JpcHRvciB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIGRlcGVuZGVudEtleXM6IHN0cmluZ1tdLCBwcml2YXRlIGFjY2Vzc29yOiBBY2Nlc3NvcjxUPikge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIGJsdWVwcmludChrZXk6IFByb3BlcnR5S2V5KTogQ29tcHV0ZWRCbHVlcHJpbnQge1xyXG4gICAgcmV0dXJuIG5ldyBDb21wdXRlZEJsdWVwcmludChrZXksIHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcmVmZXJlbmNlKHJvb3Q6IEdsaW1tZXJPYmplY3QsIGtleTogUHJvcGVydHlLZXkpIHtcclxuXHJcbiAgfVxyXG5cclxuICBkZWZpbmUoaG9tZTogT2JqZWN0LCBrZXk6IFByb3BlcnR5S2V5KSB7XHJcbiAgICBjbGFzc01ldGEoaG9tZSkuZGVmaW5lQ29tcHV0ZWQoa2V5LCB0aGlzKTtcclxuXHJcbiAgICBBQ0NFU1NPUl9ERVNDUklQVE9SLmdldCA9IHRoaXMuYWNjZXNzb3IuZ2V0O1xyXG4gICAgQUNDRVNTT1JfREVTQ1JJUFRPUi5zZXQgPSB0aGlzLmFjY2Vzc29yLnNldDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShob21lLCBrZXksIEFDQ0VTU09SX0RFU0NSSVBUT1IpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkPFQ+KGRlcDE6IHN0cmluZywgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KTogVDtcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkPFQ+KGRlcDE6IHN0cmluZywgZGVwMjogc3RyaW5nLCBhY2Nlc3NvcjogQWNjZXNzb3I8VD4pOiBUO1xyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQ8VD4oZGVwMTogc3RyaW5nLCBkZXAyOiBzdHJpbmcsIGRlcDM6IHN0cmluZywgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KTogVDtcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVkPFQ+KGRlcDE6IHN0cmluZywgZGVwMjogc3RyaW5nLCBkZXAzOiBzdHJpbmcsIGRlcDQ6IHN0cmluZywgYWNjZXNzb3I6IEFjY2Vzc29yPFQ+KTogVDtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlZCguLi5hcmdzOiBhbnlbXSk6IE9wYXF1ZSB7XHJcbiAgbGV0IGRlcEtleXM6IHN0cmluZ1tdID0gYXJncy5zbGljZSgwLCAtMSk7XHJcbiAgbGV0IGFjY2Vzc29yOiBBY2Nlc3NvcjxPcGFxdWU+ID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xyXG5cclxuICByZXR1cm4gbmV3IENvbXB1dGVkKGRlcEtleXMsIGFjY2Vzc29yKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbXB1dGVkQmx1ZXByaW50IGV4dGVuZHMgQmx1ZXByaW50IHtcclxuICBjb25zdHJ1Y3RvcihrZXk6IFByb3BlcnR5S2V5LCBwcml2YXRlIGNvbXB1dGVkOiBDb21wdXRlZDxPcGFxdWU+KSB7XHJcbiAgICBzdXBlcihrZXkpO1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKGhvbWU6IE9iamVjdCkge1xyXG4gICAgdGhpcy5jb21wdXRlZC5kZWZpbmUoaG9tZSwgdGhpcy5rZXkpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERlc2NyaXB0b3JCbHVlcHJpbnQgZXh0ZW5kcyBCbHVlcHJpbnQge1xyXG4gIGNvbnN0cnVjdG9yKGtleTogUHJvcGVydHlLZXksIHByaXZhdGUgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yKSB7XHJcbiAgICBzdXBlcihrZXkpO1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lKGhvbWU6IE9iamVjdCkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGhvbWUsIHRoaXMua2V5LCB0aGlzLmRlc2NyaXB0b3IpO1xyXG4gIH1cclxufVxyXG4iXX0=