import { DirtyableTag } from '@glimmer/reference';
import { TestEnvironment, TestDynamicScope } from './environment';
import { assign } from './helpers';
export function skip(target, name, descriptor) {
    descriptor.value['skip'] = true;
}
export class VersionedObject {
    constructor(value) {
        this.tag = new DirtyableTag();
        assign(this, value);
    }
    update(value) {
        assign(this, value);
        this.dirty();
    }
    set(key, value) {
        this[key] = value;
        this.dirty();
    }
    dirty() {
        this.tag.dirty();
    }
}
export class SimpleRootReference {
    constructor(object) {
        this.object = object;
        this.tag = object.tag;
    }
    get(key) {
        return new SimplePathReference(this, key);
    }
    value() {
        return this.object;
    }
}
class SimplePathReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = parent.tag;
    }
    get(key) {
        return new SimplePathReference(this, key);
    }
    value() {
        return this.parent.value()[this.key];
    }
}
function isMarker(node) {
    if (node instanceof Comment && node.textContent === '') {
        return true;
    }
    if (node instanceof Text && node.textContent === '') {
        return true;
    }
    return false;
}
export class RenderingTest {
    constructor(env = new TestEnvironment(), template, appendTo) {
        this.env = env;
        this.appendTo = appendTo;
        this.context = null;
        this.result = null;
        this.template = this.env.compile(template);
        this.assert = QUnit.config.current.assert;
    }
    teardown() { }
    render(context) {
        this.env.begin();
        let dynamicScope = new TestDynamicScope();
        let appendTo = this.appendTo;
        let rootObject = new VersionedObject(context);
        let root = new SimpleRootReference(rootObject);
        this.context = rootObject;
        this.result = this.template.render(root, appendTo, dynamicScope);
        this.env.commit();
        this.element = document.getElementById('qunit-fixture').firstChild;
    }
    assertContent(expected, message) {
        let actual = document.getElementById('qunit-fixture').innerHTML;
        QUnit.equal(actual, expected);
    }
    takeSnapshot() {
        let snapshot = this.snapshot = [];
        let node = this.element.firstChild;
        while (node) {
            if (!isMarker(node)) {
                snapshot.push(node);
            }
            node = node.nextSibling;
        }
        return snapshot;
    }
    assertStableRerender() {
        this.takeSnapshot();
        this.rerender();
        this.assertInvariants();
    }
    rerender() {
        this.result.rerender();
    }
    assertInvariants(oldSnapshot, newSnapshot) {
        oldSnapshot = oldSnapshot || this.snapshot;
        newSnapshot = newSnapshot || this.takeSnapshot();
        this.assert.strictEqual(newSnapshot.length, oldSnapshot.length, 'Same number of nodes');
        for (let i = 0; i < oldSnapshot.length; i++) {
            this.assertSameNode(newSnapshot[i], oldSnapshot[i]);
        }
    }
    assertSameNode(actual, expected) {
        this.assert.strictEqual(actual, expected, 'DOM node stability');
    }
    runTask(callback) {
        callback();
        this.env.begin();
        this.result.rerender();
        this.env.commit();
    }
}
export function testModule(description) {
    return function (TestClass) {
        let context;
        QUnit.module(`[Browser] ${description || TestClass.name}`, {
            afterEach() {
                context.teardown();
            }
        });
        let keys = Object.getOwnPropertyNames(TestClass.prototype);
        keys.forEach(key => {
            if (key === 'constructor')
                return;
            let value = Object.getOwnPropertyDescriptor(TestClass.prototype, key).value;
            let isSkipped = value.skip;
            if (typeof value === 'function' && !isSkipped) {
                QUnit.test(key, (assert) => {
                    let env = new TestEnvironment();
                    context = new TestClass(env, value['template'], document.getElementById('qunit-fixture'));
                    value.call(context, assert);
                });
            }
            else if (isSkipped) {
                QUnit.skip(key, () => { });
            }
        });
    };
}
export function template(t) {
    return function template(target, name, descriptor) {
        if (typeof descriptor.value !== 'function') {
            throw new Error("Can't decorator a non-function with the @template decorator");
        }
        descriptor.value['template'] = t;
    };
}
//# sourceMappingURL=data:application/json;base64,