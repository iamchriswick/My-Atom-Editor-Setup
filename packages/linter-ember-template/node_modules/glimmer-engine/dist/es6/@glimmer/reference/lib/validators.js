export const CONSTANT = 0;
export const INITIAL = 1;
export const VOLATILE = NaN;
export class RevisionTag {
    validate(snapshot) {
        return this.value() === snapshot;
    }
}
let $REVISION = INITIAL;
export class DirtyableTag extends RevisionTag {
    constructor(revision = $REVISION) {
        super();
        this.revision = revision;
    }
    value() {
        return this.revision;
    }
    dirty() {
        this.revision = ++$REVISION;
    }
}
export function combineTagged(tagged) {
    let optimized = [];
    for (let i = 0, l = tagged.length; i < l; i++) {
        let tag = tagged[i].tag;
        if (tag === VOLATILE_TAG)
            return VOLATILE_TAG;
        if (tag === CONSTANT_TAG)
            continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
export function combineSlice(slice) {
    let optimized = [];
    let node = slice.head();
    while (node !== null) {
        let tag = node.tag;
        if (tag === VOLATILE_TAG)
            return VOLATILE_TAG;
        if (tag !== CONSTANT_TAG)
            optimized.push(tag);
        node = slice.nextNode(node);
    }
    return _combine(optimized);
}
export function combine(tags) {
    let optimized = [];
    for (let i = 0, l = tags.length; i < l; i++) {
        let tag = tags[i];
        if (tag === VOLATILE_TAG)
            return VOLATILE_TAG;
        if (tag === CONSTANT_TAG)
            continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
function _combine(tags) {
    switch (tags.length) {
        case 0:
            return CONSTANT_TAG;
        case 1:
            return tags[0];
        case 2:
            return new TagsPair(tags[0], tags[1]);
        default:
            return new TagsCombinator(tags);
    }
    ;
}
export class CachedTag extends RevisionTag {
    constructor() {
        super(...arguments);
        this.lastChecked = null;
        this.lastValue = null;
    }
    value() {
        let { lastChecked, lastValue } = this;
        if (lastChecked !== $REVISION) {
            this.lastChecked = $REVISION;
            this.lastValue = lastValue = this.compute();
        }
        return this.lastValue;
    }
    invalidate() {
        this.lastChecked = null;
    }
}
class TagsPair extends CachedTag {
    constructor(first, second) {
        super();
        this.first = first;
        this.second = second;
    }
    compute() {
        return Math.max(this.first.value(), this.second.value());
    }
}
class TagsCombinator extends CachedTag {
    constructor(tags) {
        super();
        this.tags = tags;
    }
    compute() {
        let { tags } = this;
        let max = -1;
        for (let i = 0; i < tags.length; i++) {
            let value = tags[i].value();
            max = Math.max(value, max);
        }
        return max;
    }
}
export class UpdatableTag extends CachedTag {
    constructor(tag) {
        super();
        this.tag = tag;
        this.lastUpdated = INITIAL;
    }
    compute() {
        return Math.max(this.lastUpdated, this.tag.value());
    }
    update(tag) {
        if (tag !== this.tag) {
            this.tag = tag;
            this.lastUpdated = $REVISION;
            this.invalidate();
        }
    }
}
//////////
export const CONSTANT_TAG = new (class ConstantTag extends RevisionTag {
    value() {
        return CONSTANT;
    }
});
export const VOLATILE_TAG = new (class VolatileTag extends RevisionTag {
    value() {
        return VOLATILE;
    }
});
export const CURRENT_TAG = new (class CurrentTag extends DirtyableTag {
    value() {
        return $REVISION;
    }
});
export class CachedReference {
    constructor() {
        this.lastRevision = null;
        this.lastValue = null;
    }
    value() {
        let { tag, lastRevision, lastValue } = this;
        if (!lastRevision || !tag.validate(lastRevision)) {
            lastValue = this.lastValue = this.compute();
            this.lastRevision = tag.value();
        }
        return lastValue;
    }
    invalidate() {
        this.lastRevision = null;
    }
}
class MapperReference extends CachedReference {
    constructor(reference, mapper) {
        super();
        this.tag = reference.tag;
        this.reference = reference;
        this.mapper = mapper;
    }
    compute() {
        let { reference, mapper } = this;
        return mapper(reference.value());
    }
}
export function map(reference, mapper) {
    return new MapperReference(reference, mapper);
}
//////////
export class ReferenceCache {
    constructor(reference) {
        this.lastValue = null;
        this.lastRevision = null;
        this.initialized = false;
        this.tag = reference.tag;
        this.reference = reference;
    }
    peek() {
        if (!this.initialized) {
            return this.initialize();
        }
        return this.lastValue;
    }
    revalidate() {
        if (!this.initialized) {
            return this.initialize();
        }
        let { reference, lastRevision } = this;
        let tag = reference.tag;
        if (tag.validate(lastRevision))
            return NOT_MODIFIED;
        this.lastRevision = tag.value();
        let { lastValue } = this;
        let value = reference.value();
        if (value === lastValue)
            return NOT_MODIFIED;
        this.lastValue = value;
        return value;
    }
    initialize() {
        let { reference } = this;
        let value = this.lastValue = reference.value();
        this.lastRevision = reference.tag.value();
        this.initialized = true;
        return value;
    }
}
const NOT_MODIFIED = "adb3b78e-3d22-4e4b-877a-6317c2c5c145";
export function isModified(value) {
    return value !== NOT_MODIFIED;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkBnbGltbWVyL3JlZmVyZW5jZS9saWIvdmFsaWRhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFhLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQWMsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBYSxHQUFHLENBQUM7QUFFdEMsTUFBTTtJQUdKLFFBQVEsQ0FBQyxRQUFrQjtRQUN6QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLFFBQVEsQ0FBQztJQUNuQyxDQUFDO0NBQ0Y7QUFFRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFFeEIsTUFBTSxtQkFBb0IsU0FBUSxXQUFXO0lBRzNDLFlBQVksUUFBUSxHQUFHLFNBQVM7UUFDOUIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLFNBQVMsQ0FBQztJQUM5QixDQUFDO0NBQ0Y7QUFFRCxNQUFNLHdCQUF3QixNQUF1QztJQUNuRSxJQUFJLFNBQVMsR0FBMEIsRUFBRSxDQUFDO0lBRTFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDeEMsSUFBSSxHQUFHLEdBQXdCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDN0MsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLFlBQVksQ0FBQztZQUFDLE1BQU0s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Q0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFFeEIsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRjtBQU1ELE1BQU0sWUFBWSxHQUFnQixzQ0FBc0MsQ0FBQztBQUV6RSxNQUFNLHFCQUF3QixLQUFvQjtJQUNoRCxNQUFNLENBQUMsS0FBSyxLQUFLLFlBQVksQ0FBQztBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlZmVyZW5jZSwgeyBQYXRoUmVmZXJlbmNlIH0gZnJvbSAnLi9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgT3BhcXVlLCBPcHRpb24sIFNsaWNlLCBMaW5rZWRMaXN0Tm9kZSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG4vLy8vLy8vLy8vXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5VGFnPFQ+IGV4dGVuZHMgUmVmZXJlbmNlPFQ+IHtcbiAgdmFsdWUoKTogVDtcbiAgdmFsaWRhdGUoc25hcHNob3Q6IFQpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZ2dlZDxUPiB7XG4gIHRhZzogRW50aXR5VGFnPFQ+O1xufVxuXG4vLy8vLy8vLy8vXG5cbmV4cG9ydCB0eXBlIFJldmlzaW9uID0gbnVtYmVyO1xuXG5leHBvcnQgY29uc3QgQ09OU1RBTlQ6IFJldmlzaW9uID0gMDtcbmV4cG9ydCBjb25zdCBJTklUSUFMOiAgUmV2aXNpb24gPSAxO1xuZXhwb3J0IGNvbnN0IFZPTEFUSUxFOiBSZXZpc2lvbiA9IE5hTjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJldmlzaW9uVGFnIGltcGxlbWVudHMgRW50aXR5VGFnPFJldmlzaW9uPiB7XG4gIGFic3RyYWN0IHZhbHVlKCk6IFJldmlzaW9uO1xuXG4gIHZhbGlkYXRlKHNuYXBzaG90OiBSZXZpc2lvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnZhbHVlKCkgPT09IHNuYXBzaG90O1xuICB9XG59XG5cbmxldCAkUkVWSVNJT04gPSBJTklUSUFMO1xuXG5leHBvcnQgY2xhc3MgRGlydHlhYmxlVGFnIGV4dGVuZHMgUmV2aXNpb25UYWcge1xuICBwcml2YXRlIHJldmlzaW9uOiBSZXZpc2lvbjtcblxuICBjb25zdHJ1Y3RvcihyZXZpc2lvbiA9ICRSRVZJU0lPTikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yZXZpc2lvbiA9IHJldmlzaW9uO1xuICB9XG5cbiAgdmFsdWUoKTogUmV2aXNpb24ge1xuICAgIHJldHVybiB0aGlzLnJldmlzaW9uO1xuICB9XG5cbiAgZGlydHkoKSB7XG4gICAgdGhpcy5yZXZpc2lvbiA9ICsrJFJFVklTSU9OO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lVGFnZ2VkKHRhZ2dlZDogUmVhZG9ubHlBcnJheTxUYWdnZWQ8UmV2aXNpb24+Pik6IFJldmlzaW9uVGFnIHtcbiAgbGV0IG9wdGltaXplZDogRW50aXR5VGFnPFJldmlzaW9uPltdID0gW107XG5cbiAgZm9yIChsZXQgaT0wLCBsPXRhZ2dlZC5sZW5ndGg7IGk8bDsgaSsrKSB7XG4gICAgbGV0IHRhZzogRW50aXR5VGFnPFJldmlzaW9uPiA9IHRhZ2dlZFtpXS50YWc7XG4gICAgaWYgKHRhZyA9PT0gVk9MQVRJTEVfVEFHKSByZXR1cm4gVk9MQVRJTEVfVEFHO1xuICAgIGlmICh0YWcgPT09IENPTlNUQU5UX1RBRykgY29udGludWU7XG4gICAgb3B0aW1pemVkLnB1c2godGFnKTtcbiAgfVxuXG4gIHJldHVybiBfY29tYmluZShvcHRpbWl6ZWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tYmluZVNsaWNlKHNsaWNlOiBTbGljZTxUYWdnZWQ8UmV2aXNpb24+ICYgTGlua2VkTGlzdE5vZGU+KTogUmV2aXNpb25UYWcge1xuICBsZXQgb3B0aW1pemVkID0gW107XG5cbiAgbGV0IG5vZGUgPSBzbGljZS5oZWFkKCk7XG5cbiAgd2hpbGUobm9kZSAhPT0gbnVsbCkge1xuICAgIGxldCB0YWcgPSBub2RlLnRhZztcblxuICAgIGlmICh0YWcgPT09IFZPTEFUSUxFX1RBRykgcmV0dXJuIFZPTEFUSUxFX1RBRztcbiAgICBpZiAodGFnICE9PSBDT05TVEFOVF9UQUcpIG9wdGltaXplZC5wdXNoKHRhZyk7XG5cbiAgICBub2RlID0gc2xpY2UubmV4dE5vZGUobm9kZSk7XG4gIH1cblxuICByZXR1cm4gX2NvbWJpbmUob3B0aW1pemVkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmUodGFnczogUmV2aXNpb25UYWdbXSk6IFJldmlzaW9uVGFnIHtcbiAgbGV0IG9wdGltaXplZCA9IFtdO1xuXG4gIGZvciAobGV0IGk9MCwgbD10YWdzLmxlbmd0aDsgaTxsOyBpKyspIHtcbiAgICBsZXQgdGFnID0gdGFnc1tpXTtcbiAgICBpZiAodGFnID09PSBWT0xBVElMRV9UQUcpIHJldHVybiBWT0xBVElMRV9UQUc7XG4gICAgaWYgKHRhZyA9PT0gQ09OU1RBTlRfVEFHKSBjb250aW51ZTtcbiAgICBvcHRpbWl6ZWQucHVzaCh0YWcpO1xuICB9XG5cbiAgcmV0dXJuIF9jb21iaW5lKG9wdGltaXplZCk7XG59XG5cbmZ1bmN0aW9uIF9jb21iaW5lKHRhZ3M6IEVudGl0eVRhZzxSZXZpc2lvbj5bXSk6IFJldmlzaW9uVGFnIHtcbiAgc3dpdGNoICh0YWdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBDT05TVEFOVF9UQUc7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHRhZ3NbMF0gYXMgRW50aXR5VGFnPFJldmlzaW9uPjtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gbmV3IFRhZ3NQYWlyKHRhZ3NbMF0sIHRhZ3NbMV0pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbmV3IFRhZ3NDb21iaW5hdG9yKHRhZ3MpO1xuICB9O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2FjaGVkVGFnIGV4dGVuZHMgUmV2aXNpb25UYWcge1xuICBwcml2YXRlIGxhc3RDaGVja2VkOiBPcHRpb248UmV2aXNpb24+ID0gbnVsbDtcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IE9wdGlvbjxSZXZpc2lvbj4gPSBudWxsO1xuXG4gIHZhbHVlKCk6IFJldmlzaW9uIHtcbiAgICBsZXQgeyBsYXN0Q2hlY2tlZCwgbGFzdFZhbHVlIH0gPSB0aGlzO1xuXG4gICAgaWYgKGxhc3RDaGVja2VkICE9PSAkUkVWSVNJT04pIHtcbiAgICAgIHRoaXMubGFzdENoZWNrZWQgPSAkUkVWSVNJT047XG4gICAgICB0aGlzLmxhc3RWYWx1ZSA9IGxhc3RWYWx1ZSA9IHRoaXMuY29tcHV0ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxhc3RWYWx1ZSBhcyBSZXZpc2lvbjtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbnZhbGlkYXRlKCkge1xuICAgIHRoaXMubGFzdENoZWNrZWQgPSBudWxsO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNvbXB1dGUoKTogUmV2aXNpb247XG59XG5cbmNsYXNzIFRhZ3NQYWlyIGV4dGVuZHMgQ2FjaGVkVGFnIHtcbiAgcHJpdmF0ZSBmaXJzdDogUmV2aXNpb25UYWc7XG4gIHByaXZhdGUgc2Vjb25kOiBSZXZpc2lvblRhZztcblxuICBjb25zdHJ1Y3RvcihmaXJzdDogUmV2aXNpb25UYWcsIHNlY29uZDogUmV2aXNpb25UYWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZmlyc3QgPSBmaXJzdDtcbiAgICB0aGlzLnNlY29uZCA9IHNlY29uZDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wdXRlKCk6IFJldmlzaW9uIHtcbiAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5maXJzdC52YWx1ZSgpLCB0aGlzLnNlY29uZC52YWx1ZSgpKTtcbiAgfVxufVxuXG5jbGFzcyBUYWdzQ29tYmluYXRvciBleHRlbmRzIENhY2hlZFRhZyB7XG4gIHByaXZhdGUgdGFnczogUmV2aXNpb25UYWdbXTtcblxuICBjb25zdHJ1Y3Rvcih0YWdzOiBSZXZpc2lvblRhZ1tdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRhZ3MgPSB0YWdzO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbXB1dGUoKTogUmV2aXNpb24ge1xuICAgIGxldCB7IHRhZ3MgfSA9IHRoaXM7XG5cbiAgICBsZXQgbWF4ID0gLTE7XG5cbiAgICBmb3IgKGxldCBpPTA7IGk8dGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHZhbHVlID0gdGFnc1tpXS52YWx1ZSgpO1xuICAgICAgbWF4ID0gTWF0aC5tYXgodmFsdWUsIG1heCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXBkYXRhYmxlVGFnIGV4dGVuZHMgQ2FjaGVkVGFnIHtcbiAgcHJpdmF0ZSB0YWc6IFJldmlzaW9uVGFnO1xuICBwcml2YXRlIGxhc3RVcGRhdGVkOiBSZXZpc2lvbjtcblxuICBjb25zdHJ1Y3Rvcih0YWc6IFJldmlzaW9uVGFnKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnRhZyA9IHRhZztcbiAgICB0aGlzLmxhc3RVcGRhdGVkID0gSU5JVElBTDtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wdXRlKCk6IFJldmlzaW9uIHtcbiAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5sYXN0VXBkYXRlZCwgdGhpcy50YWcudmFsdWUoKSk7XG4gIH1cblxuICB1cGRhdGUodGFnOiBSZXZpc2lvblRhZykge1xuICAgIGlmICh0YWcgIT09IHRoaXMudGFnKSB7XG4gICAgICB0aGlzLnRhZyA9IHRhZztcbiAgICAgIHRoaXMubGFzdFVwZGF0ZWQgPSAkUkVWSVNJT047XG4gICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8vLy8vLy8vL1xuXG5leHBvcnQgY29uc3QgQ09OU1RBTlRfVEFHOiBSZXZpc2lvblRhZyA9IG5ldyAoXG4gIGNsYXNzIENvbnN0YW50VGFnIGV4dGVuZHMgUmV2aXNpb25UYWcge1xuICAgIHZhbHVlKCk6IFJldmlzaW9uIHtcbiAgICAgIHJldHVybiBDT05TVEFOVDtcbiAgICB9XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBWT0xBVElMRV9UQUc6IFJldmlzaW9uVGFnID0gbmV3IChcbiAgY2xhc3MgVm9sYXRpbGVUYWcgZXh0ZW5kcyBSZXZpc2lvblRhZyB7XG4gICAgdmFsdWUoKTogUmV2aXNpb24ge1xuICAgICAgcmV0dXJuIFZPTEFUSUxFO1xuICAgIH1cbiAgfVxuKTtcblxuZXhwb3J0IGNvbnN0IENVUlJFTlRfVEFHOiBEaXJ0eWFibGVUYWcgPSBuZXcgKFxuICBjbGFzcyBDdXJyZW50VGFnIGV4dGVuZHMgRGlydHlhYmxlVGFnIHtcbiAgICB2YWx1ZSgpOiBSZXZpc2lvbiB7XG4gICAgICByZXR1cm4gJFJFVklTSU9OO1xuICAgIH1cbiAgfVxuKTtcblxuLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIFZlcnNpb25lZFJlZmVyZW5jZTxUPiBleHRlbmRzIFJlZmVyZW5jZTxUPiwgVGFnZ2VkPFJldmlzaW9uPiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlcnNpb25lZFBhdGhSZWZlcmVuY2U8VD4gZXh0ZW5kcyBQYXRoUmVmZXJlbmNlPFQ+LCBUYWdnZWQ8UmV2aXNpb24+IHtcbiAgZ2V0KHByb3BlcnR5OiBzdHJpbmcpOiBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPE9wYXF1ZT47XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDYWNoZWRSZWZlcmVuY2U8VD4gaW1wbGVtZW50cyBWZXJzaW9uZWRSZWZlcmVuY2U8VD4ge1xuICBwdWJsaWMgYWJzdHJhY3QgdGFnOiBSZXZpc2lvblRhZztcblxuICBwcml2YXRlIGxhc3RSZXZpc2lvbjogT3B0aW9uPFJldmlzaW9uPiA9IG51bGw7XG4gIHByaXZhdGUgbGFzdFZhbHVlOiBPcHRpb248VD4gPSBudWxsO1xuXG4gIHZhbHVlKCk6IFQge1xuICAgIGxldCB7IHRhZywgbGFzdFJldmlzaW9uLCBsYXN0VmFsdWUgfSA9IHRoaXM7XG5cbiAgICBpZiAoIWxhc3RSZXZpc2lvbiB8fCAhdGFnLnZhbGlkYXRlKGxhc3RSZXZpc2lvbikpIHtcbiAgICAgIGxhc3RWYWx1ZSA9IHRoaXMubGFzdFZhbHVlID0gdGhpcy5jb21wdXRlKCk7XG4gICAgICB0aGlzLmxhc3RSZXZpc2lvbiA9IHRhZy52YWx1ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBsYXN0VmFsdWUgYXMgVDtcbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBjb21wdXRlKCk6IFQ7XG5cbiAgcHJvdGVjdGVkIGludmFsaWRhdGUoKSB7XG4gICAgdGhpcy5sYXN0UmV2aXNpb24gPSBudWxsO1xuICB9XG59XG5cbi8vLy8vLy8vLy9cblxuZXhwb3J0IHR5cGUgTWFwcGVyPFQsIFU+ID0gKHZhbHVlOiBUKSA9PiBVO1xuXG5jbGFzcyBNYXBwZXJSZWZlcmVuY2U8VCwgVT4gZXh0ZW5kcyBDYWNoZWRSZWZlcmVuY2U8VT4ge1xuICBwdWJsaWMgdGFnOiBSZXZpc2lvblRhZztcblxuICBwcml2YXRlIHJlZmVyZW5jZTogVmVyc2lvbmVkUmVmZXJlbmNlPFQ+O1xuICBwcml2YXRlIG1hcHBlcjogTWFwcGVyPFQsIFU+O1xuXG4gIGNvbnN0cnVjdG9yKHJlZmVyZW5jZTogVmVyc2lvbmVkUmVmZXJlbmNlPFQ+LCBtYXBwZXI6IE1hcHBlcjxULCBVPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50YWcgPSByZWZlcmVuY2UudGFnO1xuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlO1xuICAgIHRoaXMubWFwcGVyID0gbWFwcGVyO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbXB1dGUoKTogVSB7XG4gICAgbGV0IHsgcmVmZXJlbmNlLCBtYXBwZXIgfSA9IHRoaXM7XG4gICAgcmV0dXJuIG1hcHBlcihyZWZlcmVuY2UudmFsdWUoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcDxULCBVPihyZWZlcmVuY2U6IFZlcnNpb25lZFJlZmVyZW5jZTxUPiwgbWFwcGVyOiBNYXBwZXI8VCwgVT4pOiBWZXJzaW9uZWRSZWZlcmVuY2U8VT4ge1xuICByZXR1cm4gbmV3IE1hcHBlclJlZmVyZW5jZTxULCBVPihyZWZlcmVuY2UsIG1hcHBlcik7XG59XG5cbi8vLy8vLy8vLy9cblxuZXhwb3J0IGNsYXNzIFJlZmVyZW5jZUNhY2hlPFQ+IGltcGxlbWVudHMgVGFnZ2VkPFJldmlzaW9uPiB7XG4gIHB1YmxpYyB0YWc6IFJldmlzaW9uVGFnO1xuXG4gIHByaXZhdGUgcmVmZXJlbmNlOiBWZXJzaW9uZWRSZWZlcmVuY2U8VD47XG4gIHByaXZhdGUgbGFzdFZhbHVlOiBPcHRpb248VD4gPSBudWxsO1xuICBwcml2YXRlIGxhc3RSZXZpc2lvbjogT3B0aW9uPFJldmlzaW9uPiA9IG51bGw7XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihyZWZlcmVuY2U6IFZlcnNpb25lZFJlZmVyZW5jZTxUPikge1xuICAgIHRoaXMudGFnID0gcmVmZXJlbmNlLnRhZztcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgfVxuXG4gIHBlZWsoKTogVCB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubGFzdFZhbHVlIGFzIFQ7XG4gIH1cblxuICByZXZhbGlkYXRlKCk6IFZhbGlkYXRpb248VD4ge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIGxldCB7IHJlZmVyZW5jZSwgbGFzdFJldmlzaW9uIH0gPSB0aGlzO1xuICAgIGxldCB0YWcgPSByZWZlcmVuY2UudGFnO1xuXG4gICAgaWYgKHRhZy52YWxpZGF0ZShsYXN0UmV2aXNpb24gYXMgbnVtYmVyKSkgcmV0dXJuIE5PVF9NT0RJRklFRDtcbiAgICB0aGlzLmxhc3RSZXZpc2lvbiA9IHRhZy52YWx1ZSgpO1xuXG4gICAgbGV0IHsgbGFzdFZhbHVlIH0gPSB0aGlzO1xuICAgIGxldCB2YWx1ZSA9IHJlZmVyZW5jZS52YWx1ZSgpO1xuICAgIGlmICh2YWx1ZSA9PT0gbGFzdFZhbHVlKSByZXR1cm4gTk9UX01PRElGSUVEO1xuICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemUoKTogVCB7XG4gICAgbGV0IHsgcmVmZXJlbmNlIH0gPSB0aGlzO1xuXG4gICAgbGV0IHZhbHVlID0gdGhpcy5sYXN0VmFsdWUgPSByZWZlcmVuY2UudmFsdWUoKTtcbiAgICB0aGlzLmxhc3RSZXZpc2lvbiA9IHJlZmVyZW5jZS50YWcudmFsdWUoKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBWYWxpZGF0aW9uPFQ+ID0gVCB8IE5vdE1vZGlmaWVkO1xuXG5leHBvcnQgdHlwZSBOb3RNb2RpZmllZCA9IFwiYWRiM2I3OGUtM2QyMi00ZTRiLTg3N2EtNjMxN2MyYzVjMTQ1XCI7XG5cbmNvbnN0IE5PVF9NT0RJRklFRDogTm90TW9kaWZpZWQgPSBcImFkYjNiNzhlLTNkMjItNGU0Yi04NzdhLTYzMTdjMmM1YzE0NVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNNb2RpZmllZDxUPih2YWx1ZTogVmFsaWRhdGlvbjxUPik6IHZhbHVlIGlzIFQge1xuICByZXR1cm4gdmFsdWUgIT09IE5PVF9NT0RJRklFRDtcbn1cbiJdfQ==