enifed('@glimmer/test-helpers/index', ['exports', '@glimmer/test-helpers/lib/helpers', '@glimmer/test-helpers/lib/environment', '@glimmer/test-helpers/lib/abstract-test-case'], function (exports, _glimmerTestHelpersLibHelpers, _glimmerTestHelpersLibEnvironment, _glimmerTestHelpersLibAbstractTestCase) {
  'use strict';

  exports.compile = _glimmerTestHelpersLibHelpers.compile;
  exports.compileLayout = _glimmerTestHelpersLibHelpers.compileLayout;
  exports.equalInnerHTML = _glimmerTestHelpersLibHelpers.equalInnerHTML;
  exports.equalHTML = _glimmerTestHelpersLibHelpers.equalHTML;
  exports.equalTokens = _glimmerTestHelpersLibHelpers.equalTokens;
  exports.generateSnapshot = _glimmerTestHelpersLibHelpers.generateSnapshot;
  exports.equalSnapshots = _glimmerTestHelpersLibHelpers.equalSnapshots;
  exports.normalizeInnerHTML = _glimmerTestHelpersLibHelpers.normalizeInnerHTML;
  exports.isCheckedInputHTML = _glimmerTestHelpersLibHelpers.isCheckedInputHTML;
  exports.getTextContent = _glimmerTestHelpersLibHelpers.getTextContent;
  exports.strip = _glimmerTestHelpersLibHelpers.strip;
  exports.stripTight = _glimmerTestHelpersLibHelpers.stripTight;
  exports.trimLines = _glimmerTestHelpersLibHelpers.trimLines;
  exports.Attrs = _glimmerTestHelpersLibEnvironment.Attrs;
  exports.BasicComponent = _glimmerTestHelpersLibEnvironment.BasicComponent;
  exports.EmberishCurlyComponent = _glimmerTestHelpersLibEnvironment.EmberishCurlyComponent;
  exports.EmberishGlimmerComponent = _glimmerTestHelpersLibEnvironment.EmberishGlimmerComponent;
  exports.TestModifierManager = _glimmerTestHelpersLibEnvironment.TestModifierManager;
  exports.TestEnvironment = _glimmerTestHelpersLibEnvironment.TestEnvironment;
  exports.TestDynamicScope = _glimmerTestHelpersLibEnvironment.TestDynamicScope;
  exports.equalsElement = _glimmerTestHelpersLibEnvironment.equalsElement;
  exports.inspectHooks = _glimmerTestHelpersLibEnvironment.inspectHooks;
  exports.regex = _glimmerTestHelpersLibEnvironment.regex;
  exports.classes = _glimmerTestHelpersLibEnvironment.classes;
  exports.VersionedObject = _glimmerTestHelpersLibAbstractTestCase.VersionedObject;
  exports.testModule = _glimmerTestHelpersLibAbstractTestCase.testModule;
  exports.template = _glimmerTestHelpersLibAbstractTestCase.template;
  exports.RenderingTest = _glimmerTestHelpersLibAbstractTestCase.RenderingTest;
  exports.SimpleRootReference = _glimmerTestHelpersLibAbstractTestCase.SimpleRootReference;
});

enifed('@glimmer/test-helpers/lib/abstract-test-case', ['exports', '@glimmer/reference', '@glimmer/test-helpers/lib/environment', '@glimmer/test-helpers/lib/helpers'], function (exports, _glimmerReference, _glimmerTestHelpersLibEnvironment, _glimmerTestHelpersLibHelpers) {
    'use strict';

    exports.skip = skip;
    exports.testModule = testModule;
    exports.template = template;

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

    function skip(target, name, descriptor) {
        descriptor.value['skip'] = true;
    }

    var VersionedObject = (function () {
        function VersionedObject(value) {
            _classCallCheck(this, VersionedObject);

            this.tag = new _glimmerReference.DirtyableTag();
            _glimmerTestHelpersLibHelpers.assign(this, value);
        }

        VersionedObject.prototype.update = function update(value) {
            _glimmerTestHelpersLibHelpers.assign(this, value);
            this.dirty();
        };

        VersionedObject.prototype.set = function set(key, value) {
            this[key] = value;
            this.dirty();
        };

        VersionedObject.prototype.dirty = function dirty() {
            this.tag.dirty();
        };

        return VersionedObject;
    })();

    exports.VersionedObject = VersionedObject;

    var SimpleRootReference = (function () {
        function SimpleRootReference(object) {
            _classCallCheck(this, SimpleRootReference);

            this.object = object;
            this.tag = object.tag;
        }

        SimpleRootReference.prototype.get = function get(key) {
            return new SimplePathReference(this, key);
        };

        SimpleRootReference.prototype.value = function value() {
            return this.object;
        };

        return SimpleRootReference;
    })();

    exports.SimpleRootReference = SimpleRootReference;

    var SimplePathReference = (function () {
        function SimplePathReference(parent, key) {
            _classCallCheck(this, SimplePathReference);

            this.parent = parent;
            this.key = key;
            this.tag = parent.tag;
        }

        SimplePathReference.prototype.get = function get(key) {
            return new SimplePathReference(this, key);
        };

        SimplePathReference.prototype.value = function value() {
            return this.parent.value()[this.key];
        };

        return SimplePathReference;
    })();

    function isMarker(node) {
        if (node instanceof Comment && node.textContent === '') {
            return true;
        }
        if (node instanceof Text && node.textContent === '') {
            return true;
        }
        return false;
    }

    var RenderingTest = (function () {
        function RenderingTest(env, template, appendTo) {
            if (env === undefined) env = new _glimmerTestHelpersLibEnvironment.TestEnvironment();

            _classCallCheck(this, RenderingTest);

            this.env = env;
            this.appendTo = appendTo;
            this.context = null;
            this.result = null;
            this.template = this.env.compile(template);
            this.assert = QUnit.config.current.assert;
        }

        RenderingTest.prototype.teardown = function teardown() {};

        RenderingTest.prototype.render = function render(context) {
            this.env.begin();
            var dynamicScope = new _glimmerTestHelpersLibEnvironment.TestDynamicScope();
            var appendTo = this.appendTo;
            var rootObject = new VersionedObject(context);
            var root = new SimpleRootReference(rootObject);
            this.context = rootObject;
            this.result = this.template.render(root, appendTo, dynamicScope);
            this.env.commit();
            this.element = document.getElementById('qunit-fixture').firstChild;
        };

        RenderingTest.prototype.assertContent = function assertContent(expected, message) {
            var actual = document.getElementById('qunit-fixture').innerHTML;
            QUnit.equal(actual, expected);
        };

        RenderingTest.prototype.takeSnapshot = function takeSnapshot() {
            var snapshot = this.snapshot = [];
            var node = this.element.firstChild;
            while (node) {
                if (!isMarker(node)) {
                    snapshot.push(node);
                }
                node = node.nextSibling;
            }
            return snapshot;
        };

        RenderingTest.prototype.assertStableRerender = function assertStableRerender() {
            this.takeSnapshot();
            this.rerender();
            this.assertInvariants();
        };

        RenderingTest.prototype.rerender = function rerender() {
            this.result.rerender();
        };

        RenderingTest.prototype.assertInvariants = function assertInvariants(oldSnapshot, newSnapshot) {
            oldSnapshot = oldSnapshot || this.snapshot;
            newSnapshot = newSnapshot || this.takeSnapshot();
            this.assert.strictEqual(newSnapshot.length, oldSnapshot.length, 'Same number of nodes');
            for (var i = 0; i < oldSnapshot.length; i++) {
                this.assertSameNode(newSnapshot[i], oldSnapshot[i]);
            }
        };

        RenderingTest.prototype.assertSameNode = function assertSameNode(actual, expected) {
            this.assert.strictEqual(actual, expected, 'DOM node stability');
        };

        RenderingTest.prototype.runTask = function runTask(callback) {
            callback();
            this.env.begin();
            this.result.rerender();
            this.env.commit();
        };

        return RenderingTest;
    })();

    exports.RenderingTest = RenderingTest;

    function testModule(description) {
        return function (TestClass) {
            var context = undefined;
            QUnit.module('[Browser] ' + (description || TestClass.name), {
                afterEach: function () {
                    context.teardown();
                }
            });
            var keys = Object.getOwnPropertyNames(TestClass.prototype);
            keys.forEach(function (key) {
                if (key === 'constructor') return;
                var value = Object.getOwnPropertyDescriptor(TestClass.prototype, key).value;
                var isSkipped = value.skip;
                if (typeof value === 'function' && !isSkipped) {
                    QUnit.test(key, function (assert) {
                        var env = new _glimmerTestHelpersLibEnvironment.TestEnvironment();
                        context = new TestClass(env, value['template'], document.getElementById('qunit-fixture'));
                        value.call(context, assert);
                    });
                } else if (isSkipped) {
                    QUnit.skip(key, function () {});
                }
            });
        };
    }

    function template(t) {
        return function template(target, name, descriptor) {
            if (typeof descriptor.value !== 'function') {
                throw new Error("Can't decorator a non-function with the @template decorator");
            }
            descriptor.value['template'] = t;
        };
    }
});

enifed("@glimmer/test-helpers/lib/environment", ["exports", "@glimmer/runtime", "@glimmer/test-helpers/lib/helpers", "@glimmer/util", "@glimmer/object", "@glimmer/reference", "@glimmer/object-reference"], function (exports, _glimmerRuntime, _glimmerTestHelpersLibHelpers, _glimmerUtil, _glimmerObject, _glimmerReference, _glimmerObjectReference) {
    "use strict";

    exports.inspectHooks = inspectHooks;
    exports.equalsElement = equalsElement;
    exports.equalsAttr = equalsAttr;
    exports.equals = equals;
    exports.regex = regex;
    exports.classes = classes;

    function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    var ArrayIterator = (function () {
        function ArrayIterator(array, keyFor) {
            _classCallCheck(this, ArrayIterator);

            this.position = 0;
            this.array = array;
            this.keyFor = keyFor;
        }

        ArrayIterator.prototype.isEmpty = function isEmpty() {
            return this.array.length === 0;
        };

        ArrayIterator.prototype.next = function next() {
            var position = this.position;
            var array = this.array;
            var keyFor = this.keyFor;

            if (position >= array.length) return null;
            var value = array[position];
            var key = keyFor(value, position);
            var memo = position;
            this.position++;
            return { key: key, value: value, memo: memo };
        };

        return ArrayIterator;
    })();

    var ObjectKeysIterator = (function () {
        function ObjectKeysIterator(keys, values, keyFor) {
            _classCallCheck(this, ObjectKeysIterator);

            this.position = 0;
            this.keys = keys;
            this.values = values;
            this.keyFor = keyFor;
        }

        ObjectKeysIterator.prototype.isEmpty = function isEmpty() {
            return this.keys.length === 0;
        };

        ObjectKeysIterator.prototype.next = function next() {
            var position = this.position;
            var keys = this.keys;
            var values = this.values;
            var keyFor = this.keyFor;

            if (position >= keys.length) return null;
            var value = values[position];
            var memo = keys[position];
            var key = keyFor(value, memo);
            this.position++;
            return { key: key, value: value, memo: memo };
        };

        return ObjectKeysIterator;
    })();

    var EmptyIterator = (function () {
        function EmptyIterator() {
            _classCallCheck(this, EmptyIterator);
        }

        EmptyIterator.prototype.isEmpty = function isEmpty() {
            return true;
        };

        EmptyIterator.prototype.next = function next() {
            throw new Error("Cannot call next() on an empty iterator");
        };

        return EmptyIterator;
    })();

    var EMPTY_ITERATOR = new EmptyIterator();

    var Iterable = (function () {
        function Iterable(ref, keyFor) {
            _classCallCheck(this, Iterable);

            this.tag = ref.tag;
            this.ref = ref;
            this.keyFor = keyFor;
        }

        Iterable.prototype.iterate = function iterate() {
            var ref = this.ref;
            var keyFor = this.keyFor;

            var iterable = ref.value();
            if (Array.isArray(iterable)) {
                return iterable.length > 0 ? new ArrayIterator(iterable, keyFor) : EMPTY_ITERATOR;
            } else if (iterable === undefined || iterable === null) {
                return EMPTY_ITERATOR;
            } else if (iterable.forEach !== undefined) {
                var _ret = (function () {
                    var array = [];
                    iterable.forEach(function (item) {
                        array.push(item);
                    });
                    return {
                        v: array.length > 0 ? new ArrayIterator(array, keyFor) : EMPTY_ITERATOR
                    };
                })();

                if (typeof _ret === "object") return _ret.v;
            } else if (typeof iterable === 'object') {
                var _keys = Object.keys(iterable);
                return _keys.length > 0 ? new ObjectKeysIterator(_keys, _keys.map(function (key) {
                    return iterable[key];
                }), keyFor) : EMPTY_ITERATOR;
            } else {
                throw new Error("Don't know how to {{#each " + iterable + "}}");
            }
        };

        Iterable.prototype.valueReferenceFor = function valueReferenceFor(item) {
            return new _glimmerObjectReference.UpdatableReference(item.value);
        };

        Iterable.prototype.updateValueReference = function updateValueReference(reference, item) {
            reference.update(item.value);
        };

        Iterable.prototype.memoReferenceFor = function memoReferenceFor(item) {
            return new _glimmerObjectReference.UpdatableReference(item.memo);
        };

        Iterable.prototype.updateMemoReference = function updateMemoReference(reference, item) {
            reference.update(item.memo);
        };

        return Iterable;
    })();

    var BasicComponent = function BasicComponent(attrs) {
        _classCallCheck(this, BasicComponent);

        this.attrs = attrs;
    };

    exports.BasicComponent = BasicComponent;

    var EmberishCurlyComponent = (function (_GlimmerObject) {
        _inherits(EmberishCurlyComponent, _GlimmerObject);

        function EmberishCurlyComponent() {
            _classCallCheck(this, EmberishCurlyComponent);

            _GlimmerObject.apply(this, arguments);
            this.dirtinessTag = new _glimmerReference.DirtyableTag();
            this.tagName = null;
            this.attributeBindings = null;
            this.parentView = null;
        }

        EmberishCurlyComponent.create = function create(args) {
            return _GlimmerObject.create.call(this, args);
        };

        EmberishCurlyComponent.prototype.recompute = function recompute() {
            this.dirtinessTag.dirty();
        };

        EmberishCurlyComponent.prototype.didInitAttrs = function didInitAttrs(options) {};

        EmberishCurlyComponent.prototype.didUpdateAttrs = function didUpdateAttrs(diff) {};

        EmberishCurlyComponent.prototype.didReceiveAttrs = function didReceiveAttrs(diff) {};

        EmberishCurlyComponent.prototype.willInsertElement = function willInsertElement() {};

        EmberishCurlyComponent.prototype.willUpdate = function willUpdate() {};

        EmberishCurlyComponent.prototype.willRender = function willRender() {};

        EmberishCurlyComponent.prototype.didInsertElement = function didInsertElement() {};

        EmberishCurlyComponent.prototype.didUpdate = function didUpdate() {};

        EmberishCurlyComponent.prototype.didRender = function didRender() {};

        return EmberishCurlyComponent;
    })(_glimmerObject.default);

    exports.EmberishCurlyComponent = EmberishCurlyComponent;

    var EmberishGlimmerComponent = (function (_GlimmerObject2) {
        _inherits(EmberishGlimmerComponent, _GlimmerObject2);

        function EmberishGlimmerComponent() {
            _classCallCheck(this, EmberishGlimmerComponent);

            _GlimmerObject2.apply(this, arguments);
            this.dirtinessTag = new _glimmerReference.DirtyableTag();
            this.parentView = null;
        }

        EmberishGlimmerComponent.create = function create(args) {
            return _GlimmerObject2.create.call(this, args);
        };

        EmberishGlimmerComponent.prototype.recompute = function recompute() {
            this.dirtinessTag.dirty();
        };

        EmberishGlimmerComponent.prototype.didInitAttrs = function didInitAttrs(options) {};

        EmberishGlimmerComponent.prototype.didUpdateAttrs = function didUpdateAttrs(diff) {};

        EmberishGlimmerComponent.prototype.didReceiveAttrs = function didReceiveAttrs(diff) {};

        EmberishGlimmerComponent.prototype.willInsertElement = function willInsertElement() {};

        EmberishGlimmerComponent.prototype.willUpdate = function willUpdate() {};

        EmberishGlimmerComponent.prototype.willRender = function willRender() {};

        EmberishGlimmerComponent.prototype.didInsertElement = function didInsertElement() {};

        EmberishGlimmerComponent.prototype.didUpdate = function didUpdate() {};

        EmberishGlimmerComponent.prototype.didRender = function didRender() {};

        return EmberishGlimmerComponent;
    })(_glimmerObject.default);

    exports.EmberishGlimmerComponent = EmberishGlimmerComponent;

    var BasicComponentManager = (function () {
        function BasicComponentManager() {
            _classCallCheck(this, BasicComponentManager);
        }

        BasicComponentManager.prototype.prepareArgs = function prepareArgs(definition, args) {
            return args;
        };

        BasicComponentManager.prototype.create = function create(environment, definition, args) {
            var klass = definition.ComponentClass || BasicComponent;
            return new klass(args.named.value());
        };

        BasicComponentManager.prototype.layoutFor = function layoutFor(definition, component, env) {
            var layout = env.compiledLayouts[definition.name];
            if (layout) {
                return layout;
            }
            return env.compiledLayouts[definition.name] = _glimmerRuntime.compileLayout(new BasicComponentLayoutCompiler(definition.layoutString), env);
        };

        BasicComponentManager.prototype.getSelf = function getSelf(component) {
            return new _glimmerObjectReference.UpdatableReference(component);
        };

        BasicComponentManager.prototype.didCreateElement = function didCreateElement(component, element) {
            component.element = element;
        };

        BasicComponentManager.prototype.didRenderLayout = function didRenderLayout(component, bounds) {
            component.bounds = bounds;
        };

        BasicComponentManager.prototype.didCreate = function didCreate() {};

        BasicComponentManager.prototype.getTag = function getTag() {
            return null;
        };

        BasicComponentManager.prototype.update = function update(component, attrs) {
            component.attrs = attrs.named.value();
        };

        BasicComponentManager.prototype.didUpdateLayout = function didUpdateLayout() {};

        BasicComponentManager.prototype.didUpdate = function didUpdate() {};

        BasicComponentManager.prototype.getDestructor = function getDestructor() {
            return null;
        };

        return BasicComponentManager;
    })();

    var BASIC_COMPONENT_MANAGER = new BasicComponentManager();

    var StaticTaglessComponentManager = (function (_BasicComponentManager) {
        _inherits(StaticTaglessComponentManager, _BasicComponentManager);

        function StaticTaglessComponentManager() {
            _classCallCheck(this, StaticTaglessComponentManager);

            _BasicComponentManager.apply(this, arguments);
        }

        StaticTaglessComponentManager.prototype.layoutFor = function layoutFor(definition, component, env) {
            var layout = env.compiledLayouts[definition.name];
            if (layout) {
                return layout;
            }
            return env.compiledLayouts[definition.name] = _glimmerRuntime.compileLayout(new StaticTaglessComponentLayoutCompiler(definition.layoutString), env);
        };

        return StaticTaglessComponentManager;
    })(BasicComponentManager);

    var STATIC_TAGLESS_COMPONENT_MANAGER = new StaticTaglessComponentManager();
    var BaseEmberishGlimmerComponent = EmberishGlimmerComponent.extend();

    var EmberishGlimmerComponentManager = (function () {
        function EmberishGlimmerComponentManager() {
            _classCallCheck(this, EmberishGlimmerComponentManager);
        }

        EmberishGlimmerComponentManager.prototype.prepareArgs = function prepareArgs(definition, args) {
            return args;
        };

        EmberishGlimmerComponentManager.prototype.create = function create(environment, definition, args, dynamicScope, callerSelf, hasDefaultBlock) {
            var klass = definition.ComponentClass || BaseEmberishGlimmerComponent;
            var attrs = args.named.value();
            var component = klass.create({ attrs: attrs });
            component.didInitAttrs({ attrs: attrs });
            component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
            component.willInsertElement();
            component.willRender();
            return component;
        };

        EmberishGlimmerComponentManager.prototype.layoutFor = function layoutFor(definition, component, env) {
            if (env.compiledLayouts[definition.name]) {
                return env.compiledLayouts[definition.name];
            }
            return env.compiledLayouts[definition.name] = _glimmerRuntime.compileLayout(new EmberishGlimmerComponentLayoutCompiler(definition.layoutString), env);
        };

        EmberishGlimmerComponentManager.prototype.getSelf = function getSelf(component) {
            return new _glimmerObjectReference.UpdatableReference(component);
        };

        EmberishGlimmerComponentManager.prototype.didCreateElement = function didCreateElement(component, element) {
            component.element = element;
        };

        EmberishGlimmerComponentManager.prototype.didRenderLayout = function didRenderLayout(component, bounds) {
            component.bounds = bounds;
        };

        EmberishGlimmerComponentManager.prototype.didCreate = function didCreate(component) {
            component.didInsertElement();
            component.didRender();
        };

        EmberishGlimmerComponentManager.prototype.getTag = function getTag(component) {
            return component.dirtinessTag;
        };

        EmberishGlimmerComponentManager.prototype.update = function update(component, args) {
            var oldAttrs = component.attrs;
            var newAttrs = args.named.value();
            component.set('attrs', newAttrs);
            component.didUpdateAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
            component.didReceiveAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
            component.willUpdate();
            component.willRender();
        };

        EmberishGlimmerComponentManager.prototype.didUpdateLayout = function didUpdateLayout() {};

        EmberishGlimmerComponentManager.prototype.didUpdate = function didUpdate(component) {
            component.didUpdate();
            component.didRender();
        };

        EmberishGlimmerComponentManager.prototype.getDestructor = function getDestructor(component) {
            return {
                destroy: function () {
                    component.destroy();
                }
            };
        };

        return EmberishGlimmerComponentManager;
    })();

    var ProcessedArgs = (function () {
        function ProcessedArgs(args, positionalParamsDefinition) {
            _classCallCheck(this, ProcessedArgs);

            this.tag = args.tag;
            this.named = args.named;
            this.positional = args.positional;
            this.positionalParamNames = positionalParamsDefinition;
        }

        ProcessedArgs.prototype.value = function value() {
            var named = this.named;
            var positional = this.positional;
            var positionalParamNames = this.positionalParamNames;

            var merged = Object.assign({}, named.value());
            if (positionalParamNames && positionalParamNames.length) {
                for (var i = 0; i < positionalParamNames.length; i++) {
                    var _name = positionalParamNames[i];
                    var reference = positional.at(i);
                    merged[_name] = reference.value();
                }
            }
            return {
                attrs: merged,
                props: merged
            };
        };

        return ProcessedArgs;
    })();

    exports.ProcessedArgs = ProcessedArgs;

    function processArgs(args, positionalParamsDefinition) {
        return new ProcessedArgs(args, positionalParamsDefinition);
    }
    var EMBERISH_GLIMMER_COMPONENT_MANAGER = new EmberishGlimmerComponentManager();
    var BaseEmberishCurlyComponent = EmberishCurlyComponent.extend();

    var EmberishCurlyComponentManager = (function () {
        function EmberishCurlyComponentManager() {
            _classCallCheck(this, EmberishCurlyComponentManager);
        }

        EmberishCurlyComponentManager.prototype.prepareArgs = function prepareArgs(definition, args, dynamicScope) {
            var dyn = definition.ComponentClass ? definition.ComponentClass['fromDynamicScope'] : null;
            if (dyn) {
                (function () {
                    var map = _glimmerUtil.assign({}, args.named.map);
                    dyn.forEach(function (name) {
                        return map[name] = dynamicScope.get(name);
                    });
                    args = _glimmerRuntime.EvaluatedArgs.create(args.positional, _glimmerRuntime.EvaluatedNamedArgs.create(map), args.blocks);
                })();
            }
            return args;
        };

        EmberishCurlyComponentManager.prototype.create = function create(environment, definition, args, dynamicScope, callerSelf) {
            var klass = definition.ComponentClass || BaseEmberishCurlyComponent;
            var processedArgs = processArgs(args, klass['positionalParams']);

            var _processedArgs$value = processedArgs.value();

            var attrs = _processedArgs$value.attrs;

            var self = callerSelf.value();
            var merged = _glimmerUtil.assign({}, attrs, { attrs: attrs }, { args: processedArgs }, { targetObject: self });
            var component = klass.create(merged);
            component.didInitAttrs({ attrs: attrs });
            component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
            component.willInsertElement();
            component.willRender();
            return component;
        };

        EmberishCurlyComponentManager.prototype.layoutFor = function layoutFor(definition, component, env) {
            var layout = env.compiledLayouts[definition.name];
            if (layout) {
                return layout;
            }
            var layoutString = definition.layoutString;
            var lateBound = !layoutString;
            if (!layoutString && layoutString !== '') {
                layoutString = component['layout'];
            }
            layout = _glimmerRuntime.compileLayout(new EmberishCurlyComponentLayoutCompiler(layoutString), env);
            return lateBound ? layout : env.compiledLayouts[definition.name] = layout;
        };

        EmberishCurlyComponentManager.prototype.getSelf = function getSelf(component) {
            return new _glimmerObjectReference.UpdatableReference(component);
        };

        EmberishCurlyComponentManager.prototype.didCreateElement = function didCreateElement(component, element, operations) {
            component.element = element;
            var bindings = component.attributeBindings;
            var rootRef = new _glimmerObjectReference.UpdatableReference(component);
            if (bindings) {
                for (var i = 0; i < bindings.length; i++) {
                    var attribute = bindings[i];
                    var reference = rootRef.get(attribute);
                    operations.addDynamicAttribute(element, attribute, reference, false);
                }
            }
        };

        EmberishCurlyComponentManager.prototype.didRenderLayout = function didRenderLayout(component, bounds) {
            component.bounds = bounds;
        };

        EmberishCurlyComponentManager.prototype.didCreate = function didCreate(component) {
            component.didInsertElement();
            component.didRender();
        };

        EmberishCurlyComponentManager.prototype.getTag = function getTag(component) {
            return component.dirtinessTag;
        };

        EmberishCurlyComponentManager.prototype.update = function update(component, args) {
            var oldAttrs = component.attrs;
            var newAttrs = component.args.value().attrs;
            var merged = _glimmerUtil.assign({}, newAttrs, { attrs: newAttrs });
            component.setProperties(merged);
            component.didUpdateAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
            component.didReceiveAttrs({ oldAttrs: oldAttrs, newAttrs: newAttrs });
            component.willUpdate();
            component.willRender();
        };

        EmberishCurlyComponentManager.prototype.didUpdateLayout = function didUpdateLayout() {};

        EmberishCurlyComponentManager.prototype.didUpdate = function didUpdate(component) {
            component.didUpdate();
            component.didRender();
        };

        EmberishCurlyComponentManager.prototype.getDestructor = function getDestructor(component) {
            return {
                destroy: function () {
                    component.destroy();
                }
            };
        };

        return EmberishCurlyComponentManager;
    })();

    var EMBERISH_CURLY_COMPONENT_MANAGER = new EmberishCurlyComponentManager();
    function emberToBool(value) {
        if (Array.isArray(value)) {
            return value.length > 0;
        } else {
            return !!value;
        }
    }

    var EmberishConditionalReference = (function (_ConditionalReference) {
        _inherits(EmberishConditionalReference, _ConditionalReference);

        function EmberishConditionalReference() {
            _classCallCheck(this, EmberishConditionalReference);

            _ConditionalReference.apply(this, arguments);
        }

        EmberishConditionalReference.prototype.toBool = function toBool(value) {
            return emberToBool(value);
        };

        return EmberishConditionalReference;
    })(_glimmerRuntime.ConditionalReference);

    var SimplePathReference = (function () {
        function SimplePathReference(parent, property) {
            _classCallCheck(this, SimplePathReference);

            this.tag = _glimmerReference.VOLATILE_TAG;
            this.parent = parent;
            this.property = property;
        }

        SimplePathReference.prototype.value = function value() {
            return this.parent.value()[this.property];
        };

        SimplePathReference.prototype.get = function get(prop) {
            return new SimplePathReference(this, prop);
        };

        return SimplePathReference;
    })();

    exports.SimplePathReference = SimplePathReference;

    var HelperReference = (function () {
        function HelperReference(helper, args) {
            _classCallCheck(this, HelperReference);

            this.tag = _glimmerReference.VOLATILE_TAG;
            this.helper = helper;
            this.args = args;
        }

        HelperReference.prototype.value = function value() {
            var helper = this.helper;
            var _args = this.args;
            var positional = _args.positional;
            var named = _args.named;

            return helper(positional.value(), named.value());
        };

        HelperReference.prototype.get = function get(prop) {
            return new SimplePathReference(this, prop);
        };

        return HelperReference;
    })();

    var InertModifierManager = (function () {
        function InertModifierManager() {
            _classCallCheck(this, InertModifierManager);
        }

        InertModifierManager.prototype.create = function create() {};

        InertModifierManager.prototype.install = function install(modifier) {};

        InertModifierManager.prototype.update = function update(modifier) {};

        InertModifierManager.prototype.getDestructor = function getDestructor(modifier) {
            return null;
        };

        return InertModifierManager;
    })();

    var TestModifier = function TestModifier(element, args, dom) {
        _classCallCheck(this, TestModifier);

        this.element = element;
        this.args = args;
        this.dom = dom;
    };

    exports.TestModifier = TestModifier;

    var TestModifierManager = (function () {
        function TestModifierManager() {
            _classCallCheck(this, TestModifierManager);

            this.installedElements = [];
            this.updatedElements = [];
            this.destroyedModifiers = [];
        }

        TestModifierManager.prototype.create = function create(element, args, dynamicScope, dom) {
            return new TestModifier(element, args, dom);
        };

        TestModifierManager.prototype.install = function install(_ref) {
            var element = _ref.element;
            var args = _ref.args;
            var dom = _ref.dom;

            this.installedElements.push(element);
            var param = args.positional.at(0).value();
            dom.setAttribute(element, 'data-modifier', "installed - " + param);
            return;
        };

        TestModifierManager.prototype.update = function update(_ref2) {
            var element = _ref2.element;
            var args = _ref2.args;
            var dom = _ref2.dom;

            this.updatedElements.push(element);
            var param = args.positional.at(0).value();
            dom.setAttribute(element, 'data-modifier', "updated - " + param);
            return;
        };

        TestModifierManager.prototype.getDestructor = function getDestructor(modifier) {
            var _this = this;

            return {
                destroy: function () {
                    _this.destroyedModifiers.push(modifier);
                    var element = modifier.element;
                    var dom = modifier.dom;

                    dom.removeAttribute(element, 'data-modifier');
                }
            };
        };

        return TestModifierManager;
    })();

    exports.TestModifierManager = TestModifierManager;

    var TestEnvironment = (function (_Environment) {
        _inherits(TestEnvironment, _Environment);

        function TestEnvironment() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {
                document: document,
                appendOperations: new _glimmerRuntime.DOMTreeConstruction(document)
            } : arguments[0];

            _classCallCheck(this, TestEnvironment);

            _Environment.call(this, { appendOperations: options.appendOperations, updateOperations: new _glimmerRuntime.DOMChanges(options.document) });
            this.helpers = _glimmerUtil.dict();
            this.modifiers = _glimmerUtil.dict();
            this.partials = _glimmerUtil.dict();
            this.components = _glimmerUtil.dict();
            this.compiledLayouts = _glimmerUtil.dict();
            this.uselessAnchor = options.document.createElement('a');
            this.registerHelper("if", function (_ref3) {
                var cond = _ref3[0];
                var yes = _ref3[1];
                var no = _ref3[2];
                return cond ? yes : no;
            });
            this.registerHelper("unless", function (_ref4) {
                var cond = _ref4[0];
                var yes = _ref4[1];
                var no = _ref4[2];
                return cond ? no : yes;
            });
            this.registerInternalHelper("-get-dynamic-var", _glimmerRuntime.getDynamicVar);
            this.registerModifier("action", new InertModifierManager());
            this.registerInternalHelper("component", function (vm, args, symbolTable) {
                return new DynamicComponentReference(args.positional.at(0), vm.env, symbolTable);
            });
            this.registerInternalHelper("hash", function (vm, args) {
                return args.named;
            });
        }

        TestEnvironment.prototype.protocolForURL = function protocolForURL(url) {
            this.uselessAnchor.href = url;
            return this.uselessAnchor.protocol;
        };

        TestEnvironment.prototype.registerHelper = function registerHelper(name, helper) {
            this.helpers[name] = function (vm, args) {
                return new HelperReference(helper, args);
            };
        };

        TestEnvironment.prototype.registerInternalHelper = function registerInternalHelper(name, helper) {
            this.helpers[name] = helper;
        };

        TestEnvironment.prototype.registerModifier = function registerModifier(name, modifier) {
            this.modifiers[name] = modifier;
        };

        TestEnvironment.prototype.registerPartial = function registerPartial(name, source) {
            this.partials[name] = new _glimmerRuntime.PartialDefinition(name, _glimmerTestHelpersLibHelpers.compile(source, { env: this }));
        };

        TestEnvironment.prototype.registerComponent = function registerComponent(name, definition) {
            this.components[name] = definition;
            return definition;
        };

        TestEnvironment.prototype.registerBasicComponent = function registerBasicComponent(name, Component, layout) {
            var definition = new BasicComponentDefinition(name, BASIC_COMPONENT_MANAGER, Component, layout);
            return this.registerComponent(name, definition);
        };

        TestEnvironment.prototype.registerStaticTaglessComponent = function registerStaticTaglessComponent(name, Component, layout) {
            var definition = new StaticTaglessComponentDefinition(name, STATIC_TAGLESS_COMPONENT_MANAGER, Component, layout);
            return this.registerComponent(name, definition);
        };

        TestEnvironment.prototype.registerEmberishCurlyComponent = function registerEmberishCurlyComponent(name, Component, layout) {
            var definition = new EmberishCurlyComponentDefinition(name, EMBERISH_CURLY_COMPONENT_MANAGER, Component, layout);
            return this.registerComponent(name, definition);
        };

        TestEnvironment.prototype.registerEmberishGlimmerComponent = function registerEmberishGlimmerComponent(name, Component, layout) {
            var definition = new EmberishGlimmerComponentDefinition(name, EMBERISH_GLIMMER_COMPONENT_MANAGER, Component, layout);
            return this.registerComponent(name, definition);
        };

        TestEnvironment.prototype.toConditionalReference = function toConditionalReference(reference) {
            if (_glimmerReference.isConst(reference)) {
                return _glimmerRuntime.PrimitiveReference.create(emberToBool(reference.value()));
            }
            return new EmberishConditionalReference(reference);
        };

        TestEnvironment.prototype.macros = function macros() {
            var macros = _Environment.prototype.macros.call(this);
            populateBlocks(macros.blocks, macros.inlines);
            return macros;
        };

        TestEnvironment.prototype.hasHelper = function hasHelper(helperName) {
            return helperName.length === 1 && helperName[0] in this.helpers;
        };

        TestEnvironment.prototype.lookupHelper = function lookupHelper(helperParts) {
            var helperName = helperParts[0];
            var helper = this.helpers[helperName];
            if (!helper) throw new Error("Helper for " + helperParts.join('.') + " not found.");
            return helper;
        };

        TestEnvironment.prototype.hasPartial = function hasPartial(partialName) {
            return partialName in this.partials;
        };

        TestEnvironment.prototype.lookupPartial = function lookupPartial(partialName) {
            var partial = this.partials[partialName];
            return partial;
        };

        TestEnvironment.prototype.hasComponentDefinition = function hasComponentDefinition(name) {
            return !!this.components[name[0]];
        };

        TestEnvironment.prototype.getComponentDefinition = function getComponentDefinition(name, blockMeta) {
            return this.components[name[0]];
        };

        TestEnvironment.prototype.hasModifier = function hasModifier(modifierName) {
            return modifierName.length === 1 && modifierName[0] in this.modifiers;
        };

        TestEnvironment.prototype.lookupModifier = function lookupModifier(modifierName) {
            var name = modifierName[0];

            var modifier = this.modifiers[name];
            if (!modifier) throw new Error("Modifier for " + modifierName.join('.') + " not found.");
            return modifier;
        };

        TestEnvironment.prototype.compile = function compile(template) {
            return _glimmerTestHelpersLibHelpers.compile(template, { env: this });
        };

        TestEnvironment.prototype.compileLayout = function compileLayout(template) {
            return _glimmerTestHelpersLibHelpers.compileLayout(template, { env: this });
        };

        TestEnvironment.prototype.iterableFor = function iterableFor(ref, args) {
            var keyPath = args.named.get("key").value();
            var keyFor = undefined;
            if (!keyPath) {
                throw new Error('Must specify a key for #each');
            }
            switch (keyPath) {
                case '@index':
                    keyFor = function (_, index) {
                        return String(index);
                    };
                    break;
                case '@primitive':
                    keyFor = function (item) {
                        return String(item);
                    };
                    break;
                default:
                    keyFor = function (item) {
                        return item[keyPath];
                    };
                    break;
            }
            return new Iterable(ref, keyFor);
        };

        return TestEnvironment;
    })(_glimmerRuntime.Environment);

    exports.TestEnvironment = TestEnvironment;

    var TestDynamicScope = (function () {
        function TestDynamicScope() {
            var bucket = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

            _classCallCheck(this, TestDynamicScope);

            if (bucket) {
                this.bucket = _glimmerUtil.assign({}, bucket);
            } else {
                this.bucket = {};
            }
        }

        TestDynamicScope.prototype.get = function get(key) {
            return this.bucket[key];
        };

        TestDynamicScope.prototype.set = function set(key, reference) {
            return this.bucket[key] = reference;
        };

        TestDynamicScope.prototype.child = function child() {
            return new TestDynamicScope(this.bucket);
        };

        return TestDynamicScope;
    })();

    exports.TestDynamicScope = TestDynamicScope;

    var DynamicComponentReference = (function () {
        function DynamicComponentReference(nameRef, env, symbolTable) {
            _classCallCheck(this, DynamicComponentReference);

            this.nameRef = nameRef;
            this.env = env;
            this.symbolTable = symbolTable;
            this.tag = nameRef.tag;
        }

        DynamicComponentReference.prototype.value = function value() {
            var env = this.env;
            var nameRef = this.nameRef;

            var nameOrDef = nameRef.value();
            if (typeof nameOrDef === 'string') {
                return env.getComponentDefinition([nameOrDef], this.symbolTable);
            } else if (_glimmerRuntime.isComponentDefinition(nameOrDef)) {
                return nameOrDef;
            }
            return null;
        };

        DynamicComponentReference.prototype.get = function get() {
            return null;
        };

        return DynamicComponentReference;
    })();

    function dynamicComponentFor(vm, symbolTable) {
        var args = vm.getArgs();
        var nameRef = args.positional.at(0);
        var env = vm.env;
        return new DynamicComponentReference(nameRef, env, symbolTable);
    }
    ;

    var GenericComponentDefinition = (function (_ComponentDefinition) {
        _inherits(GenericComponentDefinition, _ComponentDefinition);

        function GenericComponentDefinition(name, manager, ComponentClass, layout) {
            _classCallCheck(this, GenericComponentDefinition);

            _ComponentDefinition.call(this, name, manager, ComponentClass);
            this.layoutString = layout;
        }

        return GenericComponentDefinition;
    })(_glimmerRuntime.ComponentDefinition);

    exports.GenericComponentDefinition = GenericComponentDefinition;

    var BasicComponentDefinition = (function (_GenericComponentDefinition) {
        _inherits(BasicComponentDefinition, _GenericComponentDefinition);

        function BasicComponentDefinition() {
            _classCallCheck(this, BasicComponentDefinition);

            _GenericComponentDefinition.apply(this, arguments);
        }

        return BasicComponentDefinition;
    })(GenericComponentDefinition);

    exports.BasicComponentDefinition = BasicComponentDefinition;

    var StaticTaglessComponentDefinition = (function (_GenericComponentDefinition2) {
        _inherits(StaticTaglessComponentDefinition, _GenericComponentDefinition2);

        function StaticTaglessComponentDefinition() {
            _classCallCheck(this, StaticTaglessComponentDefinition);

            _GenericComponentDefinition2.apply(this, arguments);
        }

        return StaticTaglessComponentDefinition;
    })(GenericComponentDefinition);

    var EmberishCurlyComponentDefinition = (function (_GenericComponentDefinition3) {
        _inherits(EmberishCurlyComponentDefinition, _GenericComponentDefinition3);

        function EmberishCurlyComponentDefinition() {
            _classCallCheck(this, EmberishCurlyComponentDefinition);

            _GenericComponentDefinition3.apply(this, arguments);
        }

        return EmberishCurlyComponentDefinition;
    })(GenericComponentDefinition);

    exports.EmberishCurlyComponentDefinition = EmberishCurlyComponentDefinition;

    var EmberishGlimmerComponentDefinition = (function (_GenericComponentDefinition4) {
        _inherits(EmberishGlimmerComponentDefinition, _GenericComponentDefinition4);

        function EmberishGlimmerComponentDefinition() {
            _classCallCheck(this, EmberishGlimmerComponentDefinition);

            _GenericComponentDefinition4.apply(this, arguments);
        }

        return EmberishGlimmerComponentDefinition;
    })(GenericComponentDefinition);

    exports.EmberishGlimmerComponentDefinition = EmberishGlimmerComponentDefinition;

    var GenericComponentLayoutCompiler = (function () {
        function GenericComponentLayoutCompiler(layoutString) {
            _classCallCheck(this, GenericComponentLayoutCompiler);

            this.layoutString = layoutString;
        }

        GenericComponentLayoutCompiler.prototype.compileLayout = function compileLayout(env) {
            return _glimmerTestHelpersLibHelpers.compileLayout(this.layoutString, { env: env });
        };

        return GenericComponentLayoutCompiler;
    })();

    var BasicComponentLayoutCompiler = (function (_GenericComponentLayoutCompiler) {
        _inherits(BasicComponentLayoutCompiler, _GenericComponentLayoutCompiler);

        function BasicComponentLayoutCompiler() {
            _classCallCheck(this, BasicComponentLayoutCompiler);

            _GenericComponentLayoutCompiler.apply(this, arguments);
        }

        BasicComponentLayoutCompiler.prototype.compile = function compile(builder) {
            builder.fromLayout(this.compileLayout(builder.env));
        };

        return BasicComponentLayoutCompiler;
    })(GenericComponentLayoutCompiler);

    var StaticTaglessComponentLayoutCompiler = (function (_GenericComponentLayoutCompiler2) {
        _inherits(StaticTaglessComponentLayoutCompiler, _GenericComponentLayoutCompiler2);

        function StaticTaglessComponentLayoutCompiler() {
            _classCallCheck(this, StaticTaglessComponentLayoutCompiler);

            _GenericComponentLayoutCompiler2.apply(this, arguments);
        }

        StaticTaglessComponentLayoutCompiler.prototype.compile = function compile(builder) {
            builder.wrapLayout(this.compileLayout(builder.env));
        };

        return StaticTaglessComponentLayoutCompiler;
    })(GenericComponentLayoutCompiler);

    function EmberTagName(vm) {
        var self = vm.getSelf().value();
        var tagName = self['tagName'];
        tagName = tagName === '' ? null : self['tagName'] || 'div';
        return _glimmerRuntime.PrimitiveReference.create(tagName);
    }
    function EmberID(vm) {
        var self = vm.getSelf().value();
        return _glimmerRuntime.PrimitiveReference.create("ember" + self._guid);
    }

    var EmberishCurlyComponentLayoutCompiler = (function (_GenericComponentLayoutCompiler3) {
        _inherits(EmberishCurlyComponentLayoutCompiler, _GenericComponentLayoutCompiler3);

        function EmberishCurlyComponentLayoutCompiler() {
            _classCallCheck(this, EmberishCurlyComponentLayoutCompiler);

            _GenericComponentLayoutCompiler3.apply(this, arguments);
        }

        EmberishCurlyComponentLayoutCompiler.prototype.compile = function compile(builder) {
            builder.wrapLayout(this.compileLayout(builder.env));
            builder.tag.dynamic(EmberTagName);
            builder.attrs.static('class', 'ember-view');
            builder.attrs.dynamic('id', EmberID);
        };

        return EmberishCurlyComponentLayoutCompiler;
    })(GenericComponentLayoutCompiler);

    var EmberishGlimmerComponentLayoutCompiler = (function (_GenericComponentLayoutCompiler4) {
        _inherits(EmberishGlimmerComponentLayoutCompiler, _GenericComponentLayoutCompiler4);

        function EmberishGlimmerComponentLayoutCompiler() {
            _classCallCheck(this, EmberishGlimmerComponentLayoutCompiler);

            _GenericComponentLayoutCompiler4.apply(this, arguments);
        }

        EmberishGlimmerComponentLayoutCompiler.prototype.compile = function compile(builder) {
            builder.fromLayout(this.compileLayout(builder.env));
            builder.attrs.static('class', 'ember-view');
            builder.attrs.dynamic('id', EmberID);
        };

        return EmberishGlimmerComponentLayoutCompiler;
    })(GenericComponentLayoutCompiler);

    function inspectHooks(ComponentClass) {
        return ComponentClass.extend({
            init: function () {
                this._super.apply(this, arguments);
                this.hooks = {
                    didInitAttrs: 0,
                    didUpdateAttrs: 0,
                    didReceiveAttrs: 0,
                    willInsertElement: 0,
                    willUpdate: 0,
                    willRender: 0,
                    didInsertElement: 0,
                    didUpdate: 0,
                    didRender: 0
                };
            },
            didInitAttrs: function () {
                this._super.apply(this, arguments);
                this.hooks['didInitAttrs']++;
            },
            didUpdateAttrs: function () {
                this._super.apply(this, arguments);
                this.hooks['didUpdateAttrs']++;
            },
            didReceiveAttrs: function () {
                this._super.apply(this, arguments);
                this.hooks['didReceiveAttrs']++;
            },
            willInsertElement: function () {
                this._super.apply(this, arguments);
                this.hooks['willInsertElement']++;
            },
            willUpdate: function () {
                this._super.apply(this, arguments);
                this.hooks['willUpdate']++;
            },
            willRender: function () {
                this._super.apply(this, arguments);
                this.hooks['willRender']++;
            },
            didInsertElement: function () {
                this._super.apply(this, arguments);
                this.hooks['didInsertElement']++;
            },
            didUpdate: function () {
                this._super.apply(this, arguments);
                this.hooks['didUpdate']++;
            },
            didRender: function () {
                this._super.apply(this, arguments);
                this.hooks['didRender']++;
            }
        });
    }

    var _BaselineSyntax$NestedBlock = _glimmerRuntime.BaselineSyntax.NestedBlock;
    var defaultBlock = _BaselineSyntax$NestedBlock.defaultBlock;
    var inverseBlock = _BaselineSyntax$NestedBlock.inverseBlock;
    var params = _BaselineSyntax$NestedBlock.params;
    var hash = _BaselineSyntax$NestedBlock.hash;

    function populateBlocks(blocks, inlines) {
        blocks.add('identity', function (sexp, builder) {
            builder.evaluate(sexp[4]);
        });
        blocks.add('render-inverse', function (sexp, builder) {
            builder.evaluate(sexp[5]);
        });
        blocks.add('-with-dynamic-vars', function (sexp, builder) {
            var block = defaultBlock(sexp);
            var args = _glimmerRuntime.compileArgs(params(sexp), hash(sexp), builder);
            builder.unit(function (b) {
                b.putArgs(args);
                b.pushDynamicScope();
                b.bindDynamicScope(args.named.keys);
                b.evaluate(_glimmerUtil.unwrap(block));
                b.popDynamicScope();
            });
        });
        blocks.add('-in-element', function (sexp, builder) {
            var block = defaultBlock(sexp);
            var args = _glimmerRuntime.compileArgs(params(sexp), hash(sexp), builder);
            builder.putArgs(args);
            builder.test('simple');
            builder.labelled(null, function (b) {
                b.jumpUnless('END');
                b.pushRemoteElement();
                b.evaluate(_glimmerUtil.unwrap(block));
                b.popRemoteElement();
            });
        });
        blocks.add('component', function (sexp, builder) {
            var path = sexp[1];
            var params = sexp[2];
            var hash = sexp[3];
            var _default = sexp[4];
            var inverse = sexp[5];

            var definitionArgs = [params.slice(0, 1), null, null, null];
            var args = [params.slice(1), hash, _default, inverse];
            builder.component.dynamic(definitionArgs, dynamicComponentFor, args, builder.symbolTable);
            return true;
        });
        blocks.addMissing(function (sexp, builder) {
            var path = sexp[1];
            var params = sexp[2];
            var hash = sexp[3];
            var _default = sexp[4];
            var inverse = sexp[5];

            var table = builder.symbolTable;
            if (!params) {
                params = [];
            }
            if (path.length > 1) {
                var definitionArgs = [[['get', path]], hash, _default, inverse];
                var args = [params, hash, _default, inverse];
                builder.component.dynamic(definitionArgs, dynamicComponentFor, args, table);
                return true;
            }
            var definition = builder.env.getComponentDefinition(path, builder.symbolTable);
            if (definition) {
                builder.component.static(definition, [params, hash, _default, inverse], table);
                return true;
            }
            return false;
        });
        inlines.add('component', function (path, params, hash, builder) {
            var definitionArgs = [params.slice(0, 1), null, null, null];
            var args = [params.slice(1), hash, null, null];
            builder.component.dynamic(definitionArgs, dynamicComponentFor, args, builder.symbolTable);
            return true;
        });
        inlines.addMissing(function (path, params, hash, builder) {
            var table = builder.symbolTable;
            var definition = builder.env.getComponentDefinition(path, builder.symbolTable);
            if (path.length > 1) {
                var definitionArgs = [[['get', path]], hash, null, null];
                var args = [params, hash, null, null];
                builder.component.dynamic(definitionArgs, dynamicComponentFor, args, table);
                return true;
            }
            if (definition) {
                builder.component.static(definition, [params, hash, null, null], table);
                return true;
            }
            return false;
        });
        return { blocks: blocks, inlines: inlines };
    }

    function equalsElement(element, tagName, attributes, content) {
        QUnit.push(element.tagName === tagName.toUpperCase(), element.tagName.toLowerCase(), tagName, "expect tagName to be " + tagName);
        var expectedAttrs = _glimmerUtil.dict();
        var expectedCount = 0;
        for (var prop in attributes) {
            expectedCount++;
            var expected = attributes[prop];
            var matcher = typeof expected === 'object' && MATCHER in expected ? expected : equalsAttr(expected);
            expectedAttrs[prop] = matcher;
            QUnit.push(expectedAttrs[prop].match(element.getAttribute(prop)), matcher.fail(element.getAttribute(prop)), matcher.fail(element.getAttribute(prop)), "Expected element's " + prop + " attribute " + matcher.expected());
        }
        var actualAttributes = {};
        for (var i = 0, l = element.attributes.length; i < l; i++) {
            actualAttributes[element.attributes[i].name] = element.attributes[i].value;
        }
        if (!(element instanceof HTMLElement)) {
            QUnit.push(element instanceof HTMLElement, null, null, "Element must be an HTML Element, not an SVG Element");
        } else {
            QUnit.push(element.attributes.length === expectedCount, element.attributes.length, expectedCount, "Expected " + expectedCount + " attributes; got " + element.outerHTML);
            if (content !== null) {
                QUnit.push(element.innerHTML === content, element.innerHTML, content, "The element had '" + content + "' as its content");
            }
        }
    }

    var MATCHER = "3d4ef194-13be-4ccf-8dc7-862eea02c93e";
    exports.MATCHER = MATCHER;

    function equalsAttr(expected) {
        return {
            "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
            match: function (actual) {
                return expected === actual;
            },
            expected: function () {
                return "to equal " + expected;
            },
            fail: function (actual) {
                return actual + " did not equal " + expected;
            }
        };
    }

    function equals(expected) {
        return {
            "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
            match: function (actual) {
                return expected === actual;
            },
            expected: function () {
                return "to equal " + expected;
            },
            fail: function (actual) {
                return actual + " did not equal " + expected;
            }
        };
    }

    function regex(r) {
        return {
            "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
            match: function (v) {
                return r.test(v);
            },
            expected: function () {
                return "to match " + r;
            },
            fail: function (actual) {
                return actual + " did not match " + r;
            }
        };
    }

    function classes(expected) {
        return {
            "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
            match: function (actual) {
                return actual && expected.split(' ').sort().join(' ') === actual.split(' ').sort().join(' ');
            },
            expected: function () {
                return "to include '" + expected + "'";
            },
            fail: function (actual) {
                return "'" + actual + "'' did not match '" + expected + "'";
            }
        };
    }
});

// Environment

// Partials

// Values

// References

enifed("@glimmer/test-helpers/lib/helpers", ["exports", "simple-html-tokenizer", "@glimmer/runtime", "@glimmer/compiler"], function (exports, _simpleHtmlTokenizer, _glimmerRuntime, _glimmerCompiler) {
    "use strict";

    exports.compile = compile;
    exports.compileLayout = compileLayout;
    exports.equalInnerHTML = equalInnerHTML;
    exports.equalHTML = equalHTML;
    exports.equalTokens = equalTokens;
    exports.generateSnapshot = generateSnapshot;
    exports.equalSnapshots = equalSnapshots;
    exports.normalizeInnerHTML = normalizeInnerHTML;
    exports.getTextContent = getTextContent;
    exports.strip = strip;
    exports.stripTight = stripTight;
    exports.trimLines = trimLines;

    // For Phantom
    function toObject(val) {
        if (val === null || val === undefined) {
            throw new TypeError('Object.assign cannot be called with null or undefined');
        }
        return Object(val);
    }
    if (typeof Object.assign !== 'function') {
        Object.assign = function (target, source) {
            var from = undefined;
            var to = toObject(target);
            var symbols = undefined;
            for (var s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                    if (Object.prototype.hasOwnProperty.call(from, key)) {
                        to[key] = from[key];
                    }
                }
                if (Object.getOwnPropertySymbols) {
                    symbols = Object.getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        if (Object.prototype.propertyIsEnumerable.call(from, symbols[i])) {
                            to[symbols[i]] = from[symbols[i]];
                        }
                    }
                }
            }
            return to;
        };
    }
    var assign = Object.assign;
    exports.assign = assign;
    function isMarker(node) {
        var TextNode = window.Text;
        var Comment = window.Comment;
        if (node instanceof Comment && node.textContent === '') {
            return true;
        }
        if (node instanceof TextNode && node.textContent === '') {
            return true;
        }
        return false;
    }

    function compile(string, options) {
        var js = _glimmerCompiler.precompile(string, options);
        var factory = _glimmerRuntime.templateFactory(JSON.parse(js));
        return factory.create(options.env);
    }

    function compileLayout(string, options) {
        return compile(string, options).asLayout();
    }

    function equalInnerHTML(fragment, html, msg) {
        var actualHTML = normalizeInnerHTML(fragment.innerHTML);
        QUnit.push(actualHTML === html, actualHTML, html, msg);
    }

    function equalHTML(node, html) {
        var fragment = undefined;
        if (!node.nodeType && node.length) {
            fragment = document.createDocumentFragment();
            while (node[0]) {
                fragment.appendChild(node[0]);
            }
        } else {
            fragment = node;
        }
        var div = document.createElement("div");
        div.appendChild(fragment.cloneNode(true));
        equalInnerHTML(div, html);
    }

    function generateTokens(divOrHTML) {
        var div = undefined;
        if (typeof divOrHTML === 'string') {
            div = document.createElement("div");
            div.innerHTML = divOrHTML;
        } else {
            div = divOrHTML;
        }
        return { tokens: _simpleHtmlTokenizer.tokenize(div.innerHTML), html: div.innerHTML };
    }

    function equalTokens(fragment, html) {
        var message = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

        if (fragment.fragment) {
            fragment = fragment.fragment;
        }
        if (html.fragment) {
            html = html.fragment;
        }
        var fragTokens = generateTokens(fragment);
        var htmlTokens = generateTokens(html);
        function normalizeTokens(token) {
            if (token.type === 'StartTag') {
                token.attributes = token.attributes.sort(function (a, b) {
                    if (a[0] > b[0]) {
                        return 1;
                    }
                    if (a[0] < b[0]) {
                        return -1;
                    }
                    return 0;
                });
            }
        }
        fragTokens.tokens.forEach(normalizeTokens);
        htmlTokens.tokens.forEach(normalizeTokens);
        // let msg = "Expected: " + htmlTokens.html + "; Actual: " + fragTokens.html;
        // if (message) { msg += " (" + message + ")"; }
        var equiv = QUnit.equiv(fragTokens.tokens, htmlTokens.tokens);
        if (equiv && fragTokens.html !== htmlTokens.html) {
            QUnit.deepEqual(fragTokens.tokens, htmlTokens.tokens, message);
        } else {
            QUnit.push(QUnit.equiv(fragTokens.tokens, htmlTokens.tokens), fragTokens.html, htmlTokens.html, message);
        }
        // deepEqual(fragTokens.tokens, htmlTokens.tokens, msg);
    }

    function generateSnapshot(element) {
        var snapshot = [];
        var node = element.firstChild;
        while (node) {
            if (!isMarker(node)) {
                snapshot.push(node);
            }
            node = node.nextSibling;
        }
        return snapshot;
    }

    function equalSnapshots(a, b) {
        QUnit.strictEqual(a.length, b.length, 'Same number of nodes');
        for (var i = 0; i < b.length; i++) {
            QUnit.strictEqual(a[i], b[i], 'Nodes are the same');
        }
    }

    // detect side-effects of cloning svg elements in IE9-11
    var ieSVGInnerHTML = (function () {
        if (typeof document === 'undefined' || !document.createElementNS) {
            return false;
        }
        var div = document.createElement('div');
        var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        div.appendChild(node);
        var clone = div.cloneNode(true);
        return clone.innerHTML === '<svg xmlns="http://www.w3.org/2000/svg" />';
    })();

    function normalizeInnerHTML(actualHTML) {
        if (ieSVGInnerHTML) {
            // Replace `<svg xmlns="http://www.w3.org/2000/svg" height="50%" />` with `<svg height="50%"></svg>`, etc.
            // drop namespace attribute
            actualHTML = actualHTML.replace(/ xmlns="[^"]+"/, '');
            // replace self-closing elements
            actualHTML = actualHTML.replace(/<([^ >]+) [^\/>]*\/>/gi, function (tag, tagName) {
                return tag.slice(0, tag.length - 3) + '></' + tagName + '>';
            });
        }
        return actualHTML;
    }

    var isCheckedInputHTML = undefined;
    if (typeof document === 'undefined') {
        exports.isCheckedInputHTML = isCheckedInputHTML = function (element) {};
    } else {
        (function () {
            // detect weird IE8 checked element string
            var checkedInput = document.createElement('input');
            checkedInput.setAttribute('checked', 'checked');
            var checkedInputString = checkedInput.outerHTML;
            exports.isCheckedInputHTML = isCheckedInputHTML = function (element) {
                QUnit.equal(element.outerHTML, checkedInputString);
            };
        })();
    }
    exports.isCheckedInputHTML = isCheckedInputHTML;

    // check which property has the node's text content
    var textProperty = typeof document === 'object' && document.createElement('div').textContent === undefined ? 'innerText' : 'textContent';

    function getTextContent(el) {
        // textNode
        if (el.nodeType === 3) {
            return el.nodeValue;
        } else {
            return el[textProperty];
        }
    }

    function strip(strings) {
        return strings[0].split('\n').map(function (s) {
            return s.trim();
        }).join(' ');
    }

    function stripTight(strings) {
        return strings[0].split('\n').map(function (s) {
            return s.trim();
        }).join('');
    }

    function trimLines(strings) {
        return strings[0].trim().split('\n').map(function (s) {
            return s.trim();
        }).join('\n');
    }
});

enifed('glimmer-benchmarks/index', ['exports', 'glimmer-benchmarks/lib/bench-init', 'glimmer-benchmarks/lib/stats', 'glimmer-benchmarks/lib/bench-suites'], function (exports, _glimmerBenchmarksLibBenchInit, _glimmerBenchmarksLibStats, _glimmerBenchmarksLibBenchSuites) {
  'use strict';

  var Benchmark = _glimmerBenchmarksLibBenchInit;
  exports.Benchmark = Benchmark;
  var Stats = _glimmerBenchmarksLibStats;
  exports.Stats = Stats;
  var Suites = _glimmerBenchmarksLibBenchSuites.default;
  exports.Suites = Suites;
});
//# sourceMappingURL=glimmer-benchmarks.amd.map
