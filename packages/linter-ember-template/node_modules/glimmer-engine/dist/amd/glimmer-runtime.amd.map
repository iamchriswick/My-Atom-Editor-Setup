{"version":3,"sources":["@glimmer/public-runtime/index.ts","@glimmer/runtime/index.ts","@glimmer/runtime/lib/bootstrap.ts","@glimmer/runtime/lib/bounds.ts","@glimmer/runtime/lib/builder.ts","@glimmer/runtime/lib/compat/inner-html-fix.ts","@glimmer/runtime/lib/compat/svg-inner-html-fix.ts","@glimmer/runtime/lib/compat/text-node-merging-fix.ts","@glimmer/runtime/lib/compiled/blocks.ts","@glimmer/runtime/lib/compiled/expressions.ts","@glimmer/runtime/lib/compiled/expressions/args.ts","@glimmer/runtime/lib/compiled/expressions/concat.ts","@glimmer/runtime/lib/compiled/expressions/function.ts","@glimmer/runtime/lib/compiled/expressions/has-block.ts","@glimmer/runtime/lib/compiled/expressions/helper.ts","@glimmer/runtime/lib/compiled/expressions/lookups.ts","@glimmer/runtime/lib/compiled/expressions/named-args.ts","@glimmer/runtime/lib/compiled/expressions/positional-args.ts","@glimmer/runtime/lib/compiled/expressions/value.ts","@glimmer/runtime/lib/compiled/opcodes/blocks.ts","@glimmer/runtime/lib/compiled/opcodes/builder.ts","@glimmer/runtime/lib/compiled/opcodes/component.ts","@glimmer/runtime/lib/compiled/opcodes/content.ts","@glimmer/runtime/lib/compiled/opcodes/dom.ts","@glimmer/runtime/lib/compiled/opcodes/lists.ts","@glimmer/runtime/lib/compiled/opcodes/partial.ts","@glimmer/runtime/lib/compiled/opcodes/vm.ts","@glimmer/runtime/lib/compiler.ts","@glimmer/runtime/lib/component/interfaces.ts","@glimmer/runtime/lib/dom/attribute-managers.ts","@glimmer/runtime/lib/dom/helper.ts","@glimmer/runtime/lib/dom/interfaces.ts","@glimmer/runtime/lib/dom/props.ts","@glimmer/runtime/lib/dom/sanitized-values.ts","@glimmer/runtime/lib/environment.ts","@glimmer/runtime/lib/helpers/get-dynamic-var.ts","@glimmer/runtime/lib/modifier/interfaces.ts","@glimmer/runtime/lib/opcode-builder.ts","@glimmer/runtime/lib/opcodes.ts","@glimmer/runtime/lib/partial.ts","@glimmer/runtime/lib/references.ts","@glimmer/runtime/lib/scanner.ts","@glimmer/runtime/lib/symbol-table.ts","@glimmer/runtime/lib/syntax/functions.ts","@glimmer/runtime/lib/syntax/specialize.ts","@glimmer/runtime/lib/template.ts","@glimmer/runtime/lib/upsert.ts","@glimmer/runtime/lib/utils.ts","@glimmer/runtime/lib/vm.ts","@glimmer/runtime/lib/vm/append.ts","@glimmer/runtime/lib/vm/frame.ts","@glimmer/runtime/lib/vm/render-result.ts","@glimmer/runtime/lib/vm/update.ts"],"sourcesContent":[null,"import './lib/bootstrap';\n\nexport { default as templateFactory, TemplateFactory, Template } from './lib/template';\n\nexport { NULL_REFERENCE, UNDEFINED_REFERENCE, PrimitiveReference, ConditionalReference } from './lib/references';\n\nexport {\n   default as OpcodeBuilderDSL\n} from './lib/compiled/opcodes/builder';\n\nexport {\n  CompilableLayout,\n  compileLayout\n} from './lib/compiler';\n\nexport {\n  ComponentBuilder,\n  StaticDefinition,\n  DynamicDefinition\n} from './lib/opcode-builder';\n\nexport {\n  CompiledBlock,\n  CompiledProgram\n} from './lib/compiled/blocks';\n\nexport {\n  AttributeManager as IAttributeManager,\n  AttributeManager,\n  PropertyManager,\n  INPUT_VALUE_PROPERTY_MANAGER,\n  defaultManagers,\n  defaultAttributeManagers,\n  defaultPropertyManagers,\n  readDOMAttr\n} from './lib/dom/attribute-managers';\n\nexport {\n  normalizeTextValue\n} from './lib/compiled/opcodes/content';\n\nexport {\n  CompiledExpression\n} from './lib/compiled/expressions';\n\nexport {\n  CompiledArgs,\n  CompiledNamedArgs,\n  CompiledPositionalArgs,\n  EvaluatedArgs,\n  EvaluatedNamedArgs,\n  EvaluatedPositionalArgs\n} from './lib/compiled/expressions/args';\n\nexport {\n  FunctionExpression\n} from './lib/compiled/expressions/function';\n\nexport {\n  default as getDynamicVar\n} from './lib/helpers/get-dynamic-var';\n\nexport {\n  Blocks as BlockMacros,\n  Inlines as InlineMacros,\n  NestedBlockSyntax,\n  CompileBlockMacro,\n  compileArgs,\n  setDebuggerCallback,\n  resetDebuggerCallback,\n  debugCallback\n} from './lib/syntax/functions';\n\nexport {\n  BaselineSyntax,\n  Layout\n} from './lib/scanner';\n\nexport { PublicVM as VM, UpdatingVM, RenderResult } from './lib/vm';\n\nexport { SafeString, isSafeString } from './lib/upsert';\n\nexport {\n  Scope,\n  default as Environment,\n  Helper,\n  DynamicScope,\n} from './lib/environment';\n\nexport {\n  PartialDefinition\n} from './lib/partial';\n\nexport {\n  Component,\n  ComponentClass,\n  ComponentManager,\n  ComponentDefinition,\n  ComponentLayoutBuilder,\n  ComponentAttrsBuilder,\n  isComponentDefinition\n} from './lib/component/interfaces';\n\nexport {\n  ModifierManager\n} from './lib/modifier/interfaces';\n\nexport { default as DOMChanges, DOMChanges as IDOMChanges, DOMTreeConstruction, isWhitespace, insertHTMLBefore } from './lib/dom/helper';\nimport  * as Simple from './lib/dom/interfaces';\nexport { Simple };\nexport { ElementStack, ElementOperations } from './lib/builder';\nexport { default as Bounds, ConcreteBounds } from './lib/bounds';\n",null,"import * as Simple from './dom/interfaces';\nimport { Option, Destroyable } from '@glimmer/util';\n\nexport interface Bounds {\n  // a method to future-proof for wormholing; may not be needed ultimately\n  parentElement(): Simple.Element;\n  firstNode(): Option<Simple.Node>;\n  lastNode(): Option<Simple.Node>;\n}\n\nexport class Cursor {\n  constructor(public element: Simple.Element, public nextSibling: Option<Simple.Node>) {}\n}\n\nexport default Bounds;\n\nexport interface DestroyableBounds extends Bounds, Destroyable {}\n\nexport class RealDOMBounds implements Bounds {\n  constructor(private bounds: Bounds) {}\n\n  parentElement() { return this.bounds.parentElement() as Element; }\n  firstNode() { return this.bounds.firstNode() as Node; }\n  lastNode() { return this.bounds.lastNode() as Node; }\n}\n\nexport class ConcreteBounds implements Bounds {\n  constructor(public parentNode: Simple.Element, private first: Option<Simple.Node>, private last: Option<Simple.Node>) {}\n\n  parentElement() { return this.parentNode; }\n  firstNode() { return this.first; }\n  lastNode() { return this.last; }\n}\n\nexport class SingleNodeBounds implements Bounds {\n  private parentNode: Element;\n  private node: Node;\n\n  constructor(parentNode: Simple.Element, node: Simple.Node) {\n    this.parentNode = parentNode as Element;\n    this.node = node as Node;\n  }\n\n  parentElement() { return this.parentNode; }\n  firstNode() { return this.node; }\n  lastNode() { return this.node; }\n}\n\nexport function bounds(parent: Simple.Element, first: Simple.Node, last: Simple.Node): Bounds {\n  return new ConcreteBounds(parent, first, last);\n}\n\nexport function single(parent: Simple.Element, node: Simple.Node): Bounds {\n  return new SingleNodeBounds(parent, node);\n}\n\nexport function move(bounds: Bounds, reference: Option<Simple.Node>) {\n  let parent = bounds.parentElement();\n  let first = bounds.firstNode();\n  let last = bounds.lastNode();\n\n  let node: Option<Simple.Node> = first;\n\n  while (node) {\n    let next = node.nextSibling;\n    parent.insertBefore(node, reference);\n    if (node === last) return next;\n    node = next;\n  }\n\n  return null;\n}\n\nexport function clear(bounds: Bounds): Option<Simple.Node> {\n  let parent = bounds.parentElement();\n  let first = bounds.firstNode();\n  let last = bounds.lastNode();\n\n  let node: Option<Simple.Node> = first;\n\n  while (node) {\n    let next = node.nextSibling;\n    parent.removeChild(node);\n    if (node === last) return next;\n    node = next;\n  }\n\n  return null;\n}\n","import Bounds, { Cursor, DestroyableBounds, clear } from './bounds';\n\nimport { DOMChanges, DOMTreeConstruction } from './dom/helper';\n\nimport { LOGGER, Option, Destroyable, Stack, LinkedList, LinkedListNode, assert, expect } from '@glimmer/util';\n\nimport { Environment } from './environment';\n\nimport { VM } from './vm';\n\nimport {\n  PathReference\n} from '@glimmer/reference';\n\nimport {\n  SimpleElementOperations\n} from './compiled/opcodes/dom';\n\nimport * as Simple from './dom/interfaces';\n\nexport interface FirstNode {\n  firstNode(): Option<Simple.Node>;\n}\n\nexport interface LastNode {\n  lastNode(): Option<Simple.Node>;\n}\n\nclass First {\n  constructor(private node: Node) { }\n\n  firstNode(): Node {\n    return this.node;\n  }\n}\n\nclass Last {\n  constructor(private node: Node) { }\n\n  lastNode(): Node {\n    return this.node;\n  }\n}\n\nexport interface ElementOperations {\n  addStaticAttribute(element: Simple.Element, name: string, value: string): void;\n  addStaticAttributeNS(element: Simple.Element, namespace: string, name: string, value: string): void;\n  addDynamicAttribute(element: Simple.Element, name: string, value: PathReference<string>, isTrusting: boolean): void;\n  addDynamicAttributeNS(element: Simple.Element, namespace: string, name: string, value: PathReference<string>, isTrusting: boolean): void;\n  flush(element: Simple.Element, vm: VM): void;\n}\n\nexport class Fragment implements Bounds {\n  private bounds: Bounds;\n\n  constructor(bounds: Bounds) {\n    this.bounds = bounds;\n  }\n\n  parentElement(): Simple.Element {\n    return this.bounds.parentElement();\n  }\n\n  firstNode(): Option<Simple.Node> {\n    return this.bounds.firstNode();\n  }\n\n  lastNode(): Option<Simple.Node> {\n    return this.bounds.lastNode();\n  }\n\n  update(bounds: Bounds) {\n    this.bounds = bounds;\n  }\n}\n\nexport class ElementStack implements Cursor {\n  public nextSibling: Option<Simple.Node>;\n  public dom: DOMTreeConstruction;\n  public updateOperations: DOMChanges;\n  public constructing: Option<Simple.Element> = null;\n  public operations: Option<ElementOperations> = null;\n  public element: Simple.Element;\n  public env: Environment;\n\n  private elementStack = new Stack<Simple.Element>();\n  private nextSiblingStack = new Stack<Option<Simple.Node>>();\n  private blockStack = new Stack<Tracker>();\n\n  private defaultOperations: ElementOperations;\n\n  static forInitialRender(env: Environment, parentNode: Simple.Element, nextSibling: Option<Simple.Node>) {\n    return new ElementStack(env, parentNode, nextSibling);\n  }\n\n  static resume(env: Environment, tracker: Tracker, nextSibling: Option<Simple.Node>) {\n    let parentNode = tracker.parentElement();\n\n    let stack = new ElementStack(env, parentNode, nextSibling);\n    stack.pushBlockTracker(tracker);\n\n    return stack;\n  }\n\n  constructor(env: Environment, parentNode: Simple.Element, nextSibling: Option<Simple.Node>) {\n    this.env = env;\n    this.dom = env.getAppendOperations();\n    this.updateOperations = env.getDOM();\n    this.element = parentNode;\n    this.nextSibling = nextSibling;\n\n    this.defaultOperations = new SimpleElementOperations(env);\n\n    this.elementStack.push(this.element);\n    this.nextSiblingStack.push(this.nextSibling);\n  }\n\n  expectConstructing(method: string): Simple.Element {\n    return expect(this.constructing, `${method} should only be called while constructing an element`);\n  }\n\n  expectOperations(method: string): ElementOperations {\n    return expect(this.operations, `${method} should only be called while constructing an element`);\n  }\n\n  block(): Tracker {\n    return expect(this.blockStack.current, \"Expected a current block tracker\");\n  }\n\n  popElement() {\n    let { elementStack, nextSiblingStack }  = this;\n\n    let topElement = elementStack.pop();\n    nextSiblingStack.pop();\n    LOGGER.debug(`-> element stack ${this.elementStack.toArray().map(e => e.tagName).join(', ')}`);\n\n    this.element = expect(elementStack.current, \"can't pop past the last element\");\n    this.nextSibling = nextSiblingStack.current;\n\n    return topElement;\n  }\n\n  pushSimpleBlock(): Tracker {\n    let tracker = new SimpleBlockTracker(this.element);\n    this.pushBlockTracker(tracker);\n    return tracker;\n  }\n\n  pushUpdatableBlock(): UpdatableTracker {\n    let tracker = new UpdatableBlockTracker(this.element);\n    this.pushBlockTracker(tracker);\n    return tracker;\n  }\n\n  private pushBlockTracker(tracker: Tracker, isRemote = false) {\n    let current = this.blockStack.current;\n\n    if (current !== null) {\n      current.newDestroyable(tracker);\n\n      if (!isRemote) {\n        current.newBounds(tracker);\n      }\n    }\n\n    this.blockStack.push(tracker);\n    return tracker;\n  }\n\n  pushBlockList(list: LinkedList<LinkedListNode & Bounds & Destroyable>): Tracker {\n    let tracker = new BlockListTracker(this.element, list);\n    let current = this.blockStack.current;\n\n    if (current !== null) {\n      current.newDestroyable(tracker);\n      current.newBounds(tracker);\n    }\n\n    this.blockStack.push(tracker);\n    return tracker;\n  }\n\n  popBlock(): Tracker {\n    this.block().finalize(this);\n\n    return expect(this.blockStack.pop(), \"Expected popBlock to return a block\");\n  }\n\n  openElement(tag: string, operations = this.defaultOperations): Simple.Element {\n    let element = this.dom.createElement(tag, this.element);\n\n    this.constructing = element;\n    this.operations = operations;\n\n    return element;\n  }\n\n  flushElement() {\n    let parent  = this.element;\n    let element = expect(this.constructing, `flushElement should only be called when constructing an element`);\n\n    this.dom.insertBefore(parent, element, this.nextSibling);\n\n    this.constructing = null;\n    this.operations = null;\n\n    this.pushElement(element);\n    this.block().openElement(element);\n  }\n\n  pushRemoteElement(element: Simple.Element) {\n    this.pushElement(element);\n\n    let tracker = new RemoteBlockTracker(element);\n    this.pushBlockTracker(tracker, true);\n  }\n\n  popRemoteElement() {\n    this.popBlock();\n    this.popElement();\n  }\n\n  private pushElement(element: Simple.Element) {\n    this.element = element;\n    this.elementStack.push(element);\n    LOGGER.debug(`-> element stack ${this.elementStack.toArray().map(e => e.tagName).join(', ')}`);\n\n    this.nextSibling = null;\n    this.nextSiblingStack.push(null);\n  }\n\n  newDestroyable(d: Destroyable) {\n    this.block().newDestroyable(d);\n  }\n\n  newBounds(bounds: Bounds) {\n    this.block().newBounds(bounds);\n  }\n\n  appendText(string: string): Simple.Text {\n    let { dom } = this;\n    let text = dom.createTextNode(string);\n    dom.insertBefore(this.element, text, this.nextSibling);\n    this.block().newNode(text);\n    return text;\n  }\n\n  appendComment(string: string): Simple.Comment {\n    let { dom } = this;\n    let comment = dom.createComment(string);\n    dom.insertBefore(this.element, comment, this.nextSibling);\n    this.block().newNode(comment);\n    return comment;\n  }\n\n  setStaticAttribute(name: string, value: string) {\n    this.expectOperations('setStaticAttribute').addStaticAttribute(this.expectConstructing('setStaticAttribute'), name, value);\n  }\n\n  setStaticAttributeNS(namespace: string, name: string, value: string) {\n    this.expectOperations('setStaticAttributeNS').addStaticAttributeNS(this.expectConstructing('setStaticAttributeNS'), namespace, name, value);\n  }\n\n  setDynamicAttribute(name: string, reference: PathReference<string>, isTrusting: boolean) {\n    this.expectOperations('setDynamicAttribute').addDynamicAttribute(this.expectConstructing('setDynamicAttribute'), name, reference, isTrusting);\n  }\n\n  setDynamicAttributeNS(namespace: string, name: string, reference: PathReference<string>, isTrusting: boolean) {\n    this.expectOperations('setDynamicAttributeNS').addDynamicAttributeNS(this.expectConstructing('setDynamicAttributeNS'), namespace, name, reference, isTrusting);\n  }\n\n  closeElement() {\n    this.block().closeElement();\n    this.popElement();\n  }\n}\n\nexport interface Tracker extends DestroyableBounds {\n  openElement(element: Simple.Element): void;\n  closeElement(): void;\n  newNode(node: Simple.Node): void;\n  newBounds(bounds: Bounds): void;\n  newDestroyable(d: Destroyable): void;\n  finalize(stack: ElementStack): void;\n}\n\nexport class SimpleBlockTracker implements Tracker {\n  protected first: Option<FirstNode> = null;\n  protected last: Option<LastNode> = null;\n  protected destroyables: Option<Destroyable[]> = null;\n  protected nesting = 0;\n\n  constructor(private parent: Simple.Element){}\n\n  destroy() {\n    let { destroyables } = this;\n\n    if (destroyables && destroyables.length) {\n      for (let i=0; i<destroyables.length; i++) {\n        destroyables[i].destroy();\n      }\n    }\n  }\n\n  parentElement() {\n    return this.parent;\n  }\n\n  firstNode(): Option<Simple.Node> {\n    return this.first && this.first.firstNode();\n  }\n\n  lastNode(): Option<Simple.Node> {\n    return this.last && this.last.lastNode();\n  }\n\n  openElement(element: Element) {\n    this.newNode(element);\n    this.nesting++;\n  }\n\n  closeElement() {\n    this.nesting--;\n  }\n\n  newNode(node: Node) {\n    if (this.nesting !== 0) return;\n\n    if (!this.first) {\n      this.first = new First(node);\n    }\n\n    this.last = new Last(node);\n  }\n\n  newBounds(bounds: Bounds) {\n    if (this.nesting !== 0) return;\n\n    if (!this.first) {\n      this.first = bounds;\n    }\n\n    this.last = bounds;\n  }\n\n  newDestroyable(d: Destroyable) {\n    this.destroyables = this.destroyables || [];\n    this.destroyables.push(d);\n  }\n\n  finalize(stack: ElementStack) {\n    if (!this.first) {\n      stack.appendComment('');\n    }\n  }\n}\n\nclass RemoteBlockTracker extends SimpleBlockTracker {\n  destroy() {\n    super.destroy();\n\n    clear(this);\n  }\n}\n\nexport interface UpdatableTracker extends Tracker {\n  reset(env: Environment): Option<Simple.Node>;\n}\n\nexport class UpdatableBlockTracker extends SimpleBlockTracker implements UpdatableTracker {\n  reset(env: Environment): Option<Simple.Node> {\n    let { destroyables } = this;\n\n    if (destroyables && destroyables.length) {\n      for (let i=0; i<destroyables.length; i++) {\n        env.didDestroy(destroyables[i]);\n      }\n    }\n\n    let nextSibling = clear(this);\n\n    this.destroyables = null;\n    this.first = null;\n    this.last = null;\n\n    return nextSibling;\n  }\n}\n\nclass BlockListTracker implements Tracker {\n  constructor(private parent: Simple.Element, private boundList: LinkedList<LinkedListNode & Bounds & Destroyable>) {\n    this.parent = parent;\n    this.boundList = boundList;\n  }\n\n  destroy() {\n    this.boundList.forEachNode(node => node.destroy());\n  }\n\n  parentElement() {\n    return this.parent;\n  }\n\n  firstNode(): Option<Simple.Node> {\n    let head = this.boundList.head();\n    return head && head.firstNode();\n  }\n\n  lastNode(): Option<Simple.Node> {\n    let tail = this.boundList.tail();\n    return tail && tail.lastNode();\n  }\n\n  openElement(_element: Element) {\n    assert(false, 'Cannot openElement directly inside a block list');\n  }\n\n  closeElement() {\n    assert(false, 'Cannot closeElement directly inside a block list');\n  }\n\n  newNode(_node: Node) {\n    assert(false, 'Cannot create a new node directly inside a block list');\n  }\n\n  newBounds(_bounds: Bounds) {\n  }\n\n  newDestroyable(_d: Destroyable) {\n  }\n\n  finalize(_stack: ElementStack) {\n  }\n}\n","import { Bounds, ConcreteBounds } from '../bounds';\nimport { moveNodesBefore, DOMChanges, DOMTreeConstruction } from '../dom/helper';\nimport { Option } from '@glimmer/util';\n\ninterface Wrapper {\n  depth: number;\n  before: string;\n  after: string;\n}\n\nlet innerHTMLWrapper = {\n  colgroup: { depth: 2, before: '<table><colgroup>', after: '</colgroup></table>' },\n  table:    { depth: 1, before: '<table>', after: '</table>' },\n  tbody:    { depth: 2, before: '<table><tbody>', after: '</tbody></table>' },\n  tfoot:    { depth: 2, before: '<table><tfoot>', after: '</tfoot></table>' },\n  thead:    { depth: 2, before: '<table><thead>', after: '</thead></table>' },\n  tr:       { depth: 3, before: '<table><tbody><tr>', after: '</tr></tbody></table>' }\n};\n\n// Patch:    innerHTML Fix\n// Browsers: IE9\n// Reason:   IE9 don't allow us to set innerHTML on col, colgroup, frameset,\n//           html, style, table, tbody, tfoot, thead, title, tr.\n// Fix:      Wrap the innerHTML we are about to set in its parents, apply the\n//           wrapped innerHTML on a div, then move the unwrapped nodes into the\n//           target position.\nexport function domChanges(document: Option<Document>, DOMChangesClass: typeof DOMChanges): typeof DOMChanges {\n  if (!document) return DOMChangesClass;\n\n  if (!shouldApplyFix(document)) {\n    return DOMChangesClass;\n  }\n\n  let div = document.createElement('div');\n\n  return class DOMChangesWithInnerHTMLFix extends DOMChangesClass {\n    insertHTMLBefore(parent: HTMLElement, nextSibling: Node, html: string): Bounds {\n      if (html === null || html === '') {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      let parentTag = parent.tagName.toLowerCase();\n      let wrapper = innerHTMLWrapper[parentTag];\n\n      if(wrapper === undefined) {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      return fixInnerHTML(parent, wrapper, div, html, nextSibling);\n    }\n  };\n}\n\nexport function treeConstruction(document: Option<Document>, DOMTreeConstructionClass: typeof DOMTreeConstruction): typeof DOMTreeConstruction {\n  if (!document) return DOMTreeConstructionClass;\n\n  if (!shouldApplyFix(document)) {\n    return DOMTreeConstructionClass;\n  }\n\n  let div = document.createElement('div');\n\n  return class DOMTreeConstructionWithInnerHTMLFix extends DOMTreeConstructionClass {\n    insertHTMLBefore(parent: HTMLElement, html: string, reference: Node): Bounds {\n      if (html === null || html === '') {\n        return super.insertHTMLBefore(parent, html, reference);\n      }\n\n      let parentTag = parent.tagName.toLowerCase();\n      let wrapper = innerHTMLWrapper[parentTag];\n\n      if(wrapper === undefined) {\n        return super.insertHTMLBefore(parent, html, reference);\n      }\n\n      return fixInnerHTML(parent, wrapper, div, html, reference);\n    }\n  };\n}\n\nfunction fixInnerHTML(parent: HTMLElement, wrapper: Wrapper, div: HTMLElement, html: string, reference: Node): Bounds {\n  let wrappedHtml = wrapper.before + html + wrapper.after;\n\n  div.innerHTML = wrappedHtml;\n\n  let parentNode: Node = div;\n\n  for (let i=0; i<wrapper.depth; i++) {\n    parentNode = parentNode.childNodes[0];\n  }\n\n  let [first, last] = moveNodesBefore(parentNode, parent, reference);\n  return new ConcreteBounds(parent, first, last);\n}\n\nfunction shouldApplyFix(document: Document) {\n  let table = document.createElement('table');\n  try {\n    table.innerHTML = '<tbody></tbody>';\n  } catch (e) {\n  } finally {\n    if (table.childNodes.length !== 0) {\n      // It worked as expected, no fix required\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { Bounds, ConcreteBounds } from '../bounds';\nimport { moveNodesBefore, DOMChanges, DOMTreeConstruction } from '../dom/helper';\nimport { Option, unwrap } from '@glimmer/util';\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nexport type SVG_NAMESPACE = typeof SVG_NAMESPACE;\n\n// Patch:    insertAdjacentHTML on SVG Fix\n// Browsers: Safari, IE, Edge, Firefox ~33-34\n// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is\n//           present but throws an exception on IE and Edge. Old versions of\n//           Firefox create nodes in the incorrect namespace.\n// Fix:      Since IE and Edge silently fail to create SVG nodes using\n//           innerHTML, and because Firefox may create nodes in the incorrect\n//           namespace using innerHTML on SVG elements, an HTML-string wrapping\n//           approach is used. A pre/post SVG tag is added to the string, then\n//           that whole string is added to a div. The created nodes are plucked\n//           out and applied to the target location on DOM.\nexport function domChanges(document: Option<Document>, DOMChangesClass: typeof DOMChanges, svgNamespace: SVG_NAMESPACE): typeof DOMChanges {\n  if (!document) return DOMChangesClass;\n\n  if (!shouldApplyFix(document, svgNamespace)) {\n    return DOMChangesClass;\n  }\n\n  let div = document.createElement('div');\n\n  return class DOMChangesWithSVGInnerHTMLFix extends DOMChangesClass {\n    insertHTMLBefore(parent: HTMLElement, nextSibling: Node, html: string): Bounds {\n      if (html === null || html === '') {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      if (parent.namespaceURI !== svgNamespace) {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      return fixSVG(parent, div, html, nextSibling);\n    }\n  };\n}\n\nexport function treeConstruction(document: Option<Document>, TreeConstructionClass: typeof DOMTreeConstruction, svgNamespace: SVG_NAMESPACE): typeof DOMTreeConstruction {\n  if (!document) return TreeConstructionClass;\n\n  if (!shouldApplyFix(document, svgNamespace)) {\n    return TreeConstructionClass;\n  }\n\n  let div = document.createElement('div');\n\n  return class TreeConstructionWithSVGInnerHTMLFix extends TreeConstructionClass {\n    insertHTMLBefore(parent: HTMLElement, html: string,  reference: Node,): Bounds {\n      if (html === null || html === '') {\n        return super.insertHTMLBefore(parent, html, reference);\n      }\n\n      if (parent.namespaceURI !== svgNamespace) {\n        return super.insertHTMLBefore(parent, html, reference);\n      }\n\n      return fixSVG(parent, div, html, reference);\n    }\n  };\n}\n\nfunction fixSVG(parent: Element, div: HTMLElement, html: string, reference: Node): Bounds {\n  // IE, Edge: also do not correctly support using `innerHTML` on SVG\n  // namespaced elements. So here a wrapper is used.\n  let wrappedHtml = '<svg>' + html + '</svg>';\n\n  div.innerHTML = wrappedHtml;\n\n  let [first, last] = moveNodesBefore(div.firstChild as Node, parent, reference);\n  return new ConcreteBounds(parent, first, last);\n}\n\nfunction shouldApplyFix(document: Document, svgNamespace: SVG_NAMESPACE) {\n  let svg = document.createElementNS(svgNamespace, 'svg');\n\n  try {\n    svg['insertAdjacentHTML']('beforeEnd', '<circle></circle>');\n  } catch (e) {\n    // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG\n    // Safari: Will throw, insertAdjacentHTML is not present on SVG\n  } finally {\n    // FF: Old versions will create a node in the wrong namespace\n    if (svg.childNodes.length === 1 && unwrap(svg.firstChild).namespaceURI === SVG_NAMESPACE) {\n      // The test worked as expected, no fix required\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { Bounds } from '../bounds';\nimport { DOMChanges, DOMTreeConstruction } from '../dom/helper';\nimport { Option } from '@glimmer/util';\n\n// Patch:    Adjacent text node merging fix\n// Browsers: IE, Edge, Firefox w/o inspector open\n// Reason:   These browsers will merge adjacent text nodes. For exmaple given\n//           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers\n//           with proper behavior will populate div.childNodes with two items.\n//           These browsers will populate it with one merged node instead.\n// Fix:      Add these nodes to a wrapper element, then iterate the childNodes\n//           of that wrapper and move the nodes to their target location. Note\n//           that potential SVG bugs will have been handled before this fix.\n//           Note that this fix must only apply to the previous text node, as\n//           the base implementation of `insertHTMLBefore` already handles\n//           following text nodes correctly.\nexport function domChanges(document: Option<Document>, DOMChangesClass: typeof DOMChanges): typeof DOMChanges {\n  if (!document) return DOMChangesClass;\n\n  if (!shouldApplyFix(document)) {\n    return DOMChangesClass;\n  }\n\n  return class DOMChangesWithTextNodeMergingFix extends DOMChangesClass {\n    private uselessComment: Comment;\n\n    constructor(document: Document) {\n      super(document);\n      this.uselessComment = document.createComment('');\n    }\n\n    insertHTMLBefore(parent: HTMLElement, nextSibling: Node, html: string): Bounds {\n      if (html === null) {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      let didSetUselessComment = false;\n\n      let nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n      if (nextPrevious && nextPrevious instanceof Text) {\n        didSetUselessComment = true;\n        parent.insertBefore(this.uselessComment, nextSibling);\n      }\n\n      let bounds = super.insertHTMLBefore(parent, nextSibling, html);\n\n      if (didSetUselessComment) {\n        parent.removeChild(this.uselessComment);\n      }\n\n      return bounds;\n    }\n  };\n}\n\nexport function treeConstruction(document: Option<Document>, TreeConstructionClass: typeof DOMTreeConstruction): typeof DOMTreeConstruction {\n  if (!document) return TreeConstructionClass;\n\n  if (!shouldApplyFix(document)) {\n    return TreeConstructionClass;\n  }\n\n  return class TreeConstructionWithTextNodeMergingFix extends TreeConstructionClass {\n    private uselessComment: Comment;\n\n    constructor(document: Document) {\n      super(document);\n      this.uselessComment = this.createComment('') as Comment;\n    }\n\n    insertHTMLBefore(parent: HTMLElement, html: string, reference: Node): Bounds {\n      if (html === null) {\n        return super.insertHTMLBefore(parent, html, reference);\n      }\n\n      let didSetUselessComment = false;\n\n      let nextPrevious = reference ? reference.previousSibling : parent.lastChild;\n      if (nextPrevious && nextPrevious instanceof Text) {\n        didSetUselessComment = true;\n        parent.insertBefore(this.uselessComment, reference);\n      }\n\n      let bounds = super.insertHTMLBefore(parent, html, reference);\n\n      if (didSetUselessComment) {\n        parent.removeChild(this.uselessComment);\n      }\n\n      return bounds;\n    }\n  };\n}\n\nfunction shouldApplyFix(document: Document) {\n  let mergingTextDiv: HTMLDivElement = document.createElement('div');\n\n  mergingTextDiv.innerHTML = 'first';\n  mergingTextDiv.insertAdjacentHTML('beforeEnd', 'second');\n\n  if (mergingTextDiv.childNodes.length === 2) {\n    // It worked as expected, no fix required\n    return false;\n  }\n\n  return true;\n}\n","import { Slice } from '../opcodes';\n\nexport class CompiledBlock {\n  public start: number;\n  public end: number;\n  public slice: Slice;\n\n  constructor(slice: Slice) {\n    this.start = slice[0];\n    this.end = slice[1];\n    this.slice = slice;\n  }\n}\n\nexport class CompiledProgram extends CompiledBlock {\n  constructor(slice: Slice, public symbols: number) {\n    super(slice);\n  }\n}\n","import VM from '../vm/append';\nimport { PathReference } from '@glimmer/reference';\n\nexport { CompiledArgs } from './expressions/args';\n\nexport abstract class CompiledExpression<T> {\n  type: string;\n  abstract evaluate(vm: VM): PathReference<T>;\n\n  toJSON(): string {\n    return `UNIMPL: ${this.type.toUpperCase()}`;\n  }\n}\n","import VM from '../../vm/append';\nimport { COMPILED_EMPTY_POSITIONAL_ARGS, EVALUATED_EMPTY_POSITIONAL_ARGS, CompiledPositionalArgs, EvaluatedPositionalArgs } from './positional-args';\nimport { COMPILED_EMPTY_NAMED_ARGS, EVALUATED_EMPTY_NAMED_ARGS, CompiledNamedArgs, EvaluatedNamedArgs } from './named-args';\nimport { RevisionTag, PathReference, combineTagged } from '@glimmer/reference';\nimport { InlineBlock } from '../../scanner';\nimport { Opaque, Option, Dict } from '@glimmer/util';\n\nexport { COMPILED_EMPTY_POSITIONAL_ARGS, COMPILED_EMPTY_NAMED_ARGS };\n\nexport interface Blocks {\n  default: Option<InlineBlock>;\n  inverse: Option<InlineBlock>;\n}\n\nexport const EMPTY_BLOCKS: Blocks = {\n  default: null,\n  inverse: null\n};\n\nexport class CompiledArgs {\n  static create(positional: CompiledPositionalArgs, named: CompiledNamedArgs, blocks: Blocks): CompiledArgs {\n    if (positional === COMPILED_EMPTY_POSITIONAL_ARGS && named === COMPILED_EMPTY_NAMED_ARGS && blocks === EMPTY_BLOCKS) {\n      return this.empty();\n    } else {\n      return new this(positional, named, blocks);\n    }\n  }\n\n  static empty(): CompiledArgs {\n    return COMPILED_EMPTY_ARGS;\n  }\n\n  public type = \"compiled-args\";\n\n  constructor(\n    public positional: CompiledPositionalArgs,\n    public named: CompiledNamedArgs,\n    public blocks: Blocks\n  ) {\n  }\n\n  evaluate(vm: VM): EvaluatedArgs {\n    let { positional, named, blocks } = this;\n    return EvaluatedArgs.create(positional.evaluate(vm), named.evaluate(vm), blocks);\n  }\n}\n\nexport const COMPILED_EMPTY_ARGS: CompiledArgs = new (class extends CompiledArgs {\n  constructor() {\n    super(COMPILED_EMPTY_POSITIONAL_ARGS, COMPILED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS);\n  }\n\n  evaluate(_vm: VM): EvaluatedArgs {\n    return EMPTY_EVALUATED_ARGS;\n  }\n});\n\nexport class EvaluatedArgs {\n  static empty(): EvaluatedArgs {\n    return EMPTY_EVALUATED_ARGS;\n  }\n\n  static create(positional: EvaluatedPositionalArgs, named: EvaluatedNamedArgs, blocks: Blocks): EvaluatedArgs {\n    return new this(positional, named, blocks);\n  }\n\n  static positional(values: PathReference<Opaque>[], blocks = EMPTY_BLOCKS): EvaluatedArgs {\n    return new this(EvaluatedPositionalArgs.create(values), EVALUATED_EMPTY_NAMED_ARGS, blocks);\n  }\n\n  static named(map: Dict<PathReference<Opaque>>, blocks = EMPTY_BLOCKS) {\n    return new this(EVALUATED_EMPTY_POSITIONAL_ARGS, EvaluatedNamedArgs.create(map), blocks);\n  }\n\n  public tag: RevisionTag;\n\n  constructor(\n    public positional: EvaluatedPositionalArgs,\n    public named: EvaluatedNamedArgs,\n    public blocks: Blocks\n  ) {\n    this.tag = combineTagged([positional, named]);\n  }\n}\n\nconst EMPTY_EVALUATED_ARGS = new EvaluatedArgs(EVALUATED_EMPTY_POSITIONAL_ARGS, EVALUATED_EMPTY_NAMED_ARGS, EMPTY_BLOCKS);\n\nexport { CompiledPositionalArgs, EvaluatedPositionalArgs, CompiledNamedArgs, EvaluatedNamedArgs };\n","import { CompiledExpression } from '../expressions';\nimport { FIXME } from '@glimmer/util';\nimport VM from '../../vm/append';\nimport { PathReference, CachedReference, RevisionTag, combineTagged } from '@glimmer/reference';\nimport { Option, Opaque } from '@glimmer/util';\n\nexport default class CompiledConcat {\n  public type = \"concat\";\n\n  constructor(private parts: CompiledExpression<Opaque>[]) {}\n\n  evaluate(vm: VM): CachedReference<Option<string>> {\n    let parts: PathReference<Opaque>[] = new Array(this.parts.length);\n    for (let i = 0; i < this.parts.length; i++) {\n      parts[i] = this.parts[i].evaluate(vm);\n    }\n    return new ConcatReference(parts);\n  }\n\n  toJSON(): string {\n    return `concat(${this.parts.map(expr => expr.toJSON()).join(\", \")})`;\n  }\n}\n\nexport class ConcatReference extends CachedReference<Option<string>> {\n  public tag: RevisionTag;\n\n  constructor(private parts: PathReference<Opaque>[]) {\n    super();\n    this.tag = combineTagged(parts);\n  }\n\n  protected compute(): Option<string> {\n    let parts = new Array<string>();\n\n    for (let i = 0; i < this.parts.length; i++) {\n      let value = this.parts[i].value();\n\n      if (value !== null && value !== undefined) {\n        parts[i] = castToString(value as FIXME<any, 'This works with strict null checks'>) as FIXME<string, 'Coerce falsy values to strings'>;\n      }\n    }\n\n    if (parts.length > 0) {\n      return parts.join('');\n    }\n\n    return null;\n  }\n}\n\nfunction castToString(value: Object) {\n  if (typeof value['toString'] !== 'function') {\n    return '';\n  }\n\n  return String(value);\n}\n","import { PathReference } from '@glimmer/reference';\nimport { CompiledExpression } from '../expressions';\nimport { PublicVM as VM } from '../../vm';\nimport { SymbolTable } from '@glimmer/interfaces';\n\nexport type FunctionExpression<T> = (VM: VM, symbolTable: SymbolTable) => PathReference<T>;\n\nexport class CompiledFunctionExpression<T> extends CompiledExpression<T> {\n  public type = \"function\";\n\n  constructor(private func: FunctionExpression<T>, private symbolTable: SymbolTable) {\n    super();\n    this.func = func;\n  }\n\n  evaluate(vm: VM): PathReference<T> {\n    let { func, symbolTable } = this;\n    return func(vm, symbolTable);\n  }\n\n  toJSON(): string {\n    let { func } = this;\n\n    if (func.name) {\n      return `\\`${func.name}(...)\\``;\n    } else {\n      return \"`func(...)`\";\n    }\n  }\n}\n","import { PathReference } from '@glimmer/reference';\nimport { Option } from '@glimmer/util';\nimport VM from '../../vm/append';\nimport { InlineBlock } from '../../scanner';\nimport { CompiledExpression } from '../expressions';\nimport { PrimitiveReference } from '../../references';\n\nexport default class CompiledHasBlock extends CompiledExpression<boolean> {\n  public type = \"has-block\";\n\n  constructor(private inner: CompiledGetBlock) {\n    super();\n  }\n\n  evaluate(vm: VM): PathReference<boolean> {\n    let block = this.inner.evaluate(vm);\n    return PrimitiveReference.create(!!block);\n  }\n\n  toJSON(): string {\n    return `has-block(${this.inner.toJSON()})`;\n  }\n}\n\nexport class CompiledHasBlockParams extends CompiledExpression<boolean> {\n  public type = \"has-block-params\";\n\n  constructor(private inner: CompiledGetBlock) {\n    super();\n  }\n\n  evaluate(vm: VM): PathReference<boolean> {\n    let block = this.inner.evaluate(vm);\n    let hasLocals = block && block.symbolTable.getSymbols().locals;\n    return PrimitiveReference.create(!!hasLocals);\n  }\n\n  toJSON(): string {\n    return `has-block-params(${this.inner.toJSON()})`;\n  }\n}\n\nexport interface CompiledGetBlock {\n  evaluate(vm: VM): Option<InlineBlock>;\n  toJSON(): string;\n}\n\nexport class CompiledGetBlockBySymbol implements CompiledGetBlock {\n  constructor(private symbol: number, private debug: string) {\n  }\n\n  evaluate(vm: VM): InlineBlock {\n    return vm.scope().getBlock(this.symbol);\n  }\n\n  toJSON(): string {\n    return `get-block($${this.symbol}(${this.debug}))`;\n  }\n}\n\nexport class CompiledInPartialGetBlock implements CompiledGetBlock {\n  constructor(private symbol: number, private name: string) {\n  }\n\n  evaluate(vm: VM): InlineBlock {\n    let { symbol, name } = this;\n    let args = vm.scope().getPartialArgs(symbol);\n    return args.blocks[name];\n  }\n\n  toJSON(): string {\n    return `get-block($${this.symbol}($ARGS).${this.name}))`;\n  }\n}\n","import { CompiledExpression } from '../expressions';\nimport { CompiledArgs } from './args';\nimport VM from '../../vm/append';\nimport { Helper } from '../../environment';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { PathReference } from '@glimmer/reference';\nimport { Opaque, Option } from '@glimmer/util';\n\nexport default class CompiledHelper extends CompiledExpression<Opaque> {\n  public type = \"helper\";\n\n  constructor(public name: Option<string>[], public helper: Helper, public args: CompiledArgs, public symbolTable: SymbolTable) {\n    super();\n  }\n\n  evaluate(vm: VM): PathReference<Opaque> {\n    let { helper } = this;\n    return helper(vm, this.args.evaluate(vm), this.symbolTable);\n  }\n\n  toJSON(): string {\n    return `\\`${this.name.join('.')}($ARGS)\\``;\n  }\n}\n","import { Opaque } from '@glimmer/util';\nimport { CompiledExpression } from '../expressions';\nimport VM from '../../vm/append';\nimport { PathReference } from '@glimmer/reference';\nimport { referenceFromParts } from '@glimmer/reference';\n\nexport default class CompiledLookup extends CompiledExpression<Opaque> {\n  public type = \"lookup\";\n\n  static create(base: CompiledExpression<Opaque>, path: string[]): CompiledExpression<Opaque> {\n    if (path.length === 0) {\n      return base;\n    } else {\n      return new this(base, path);\n    }\n  }\n\n  private constructor(\n    private base: CompiledExpression<Opaque>,\n    private path: string[]\n  ) {\n    super();\n  }\n\n  evaluate(vm: VM): PathReference<Opaque> {\n    let { base, path } = this;\n    return referenceFromParts(base.evaluate(vm), path);\n  }\n\n  toJSON(): string {\n    return `${this.base.toJSON()}.${this.path.join('.')}`;\n  }\n}\n\nexport class CompiledSelf extends CompiledExpression<Opaque> {\n  evaluate(vm: VM): PathReference<Opaque> {\n    return vm.getSelf();\n  }\n\n  toJSON(): string {\n    return 'self';\n  }\n}\n\nexport class CompiledSymbol extends CompiledExpression<Opaque> {\n  constructor(private symbol: number, private debug: string) {\n    super();\n  }\n\n  evaluate(vm: VM): PathReference<Opaque> {\n    return vm.referenceForSymbol(this.symbol);\n  }\n\n  toJSON(): string {\n    return `$${this.symbol}(${this.debug})`;\n  }\n}\n\nexport class CompiledInPartialName extends CompiledExpression<Opaque> {\n  constructor(private symbol: number, private name: string) {\n    super();\n  }\n\n  evaluate(vm: VM): PathReference<Opaque> {\n    let { symbol, name } = this;\n    let args = vm.scope().getPartialArgs(symbol);\n    return args.named.get(name);\n  }\n\n  toJSON(): string {\n    return `$${this.symbol}($ARGS).${this.name}`;\n  }\n}\n","import { UNDEFINED_REFERENCE } from '../../references';\nimport { CompiledExpression } from '../expressions';\nimport VM from '../../vm/append';\nimport { EMPTY_ARRAY, EMPTY_DICT } from '../../utils';\nimport { PathReference, RevisionTag, combineTagged } from '@glimmer/reference';\nimport { Option, Dict, Opaque, assert, dict } from '@glimmer/util';\n\nexport class CompiledNamedArgs {\n  static empty(): CompiledNamedArgs {\n    return COMPILED_EMPTY_NAMED_ARGS;\n  }\n\n  static create(map: Dict<CompiledExpression<Opaque>>): CompiledNamedArgs {\n    let keys = Object.keys(map);\n    let length = keys.length;\n\n    if (length > 0) {\n      let values: CompiledExpression<Opaque>[] = [];\n\n      for (let i = 0; i < length; i++) {\n        values[i] = map[keys[i]];\n      }\n\n      return new this(keys, values);\n    } else {\n      return COMPILED_EMPTY_NAMED_ARGS;\n    }\n  }\n\n  public length: number;\n\n  constructor(\n    public keys: ReadonlyArray<string>,\n    public values: ReadonlyArray<CompiledExpression<Opaque>>\n  ) {\n    this.length = keys.length;\n    assert(keys.length === values.length, 'Keys and values do not have the same length');\n  }\n\n  evaluate(vm: VM): EvaluatedNamedArgs {\n    let { keys, values, length } = this;\n    let evaluated: PathReference<Opaque>[] = new Array(length);\n\n    for (let i=0; i<length; i++) {\n      evaluated[i] = values[i].evaluate(vm);\n    }\n\n    return new EvaluatedNamedArgs(keys, evaluated);\n  }\n\n  toJSON(): string {\n    let { keys, values } = this;\n    let inner = keys.map((key, i) => `${key}: ${values[i].toJSON()}`).join(\", \");\n    return `{${inner}}`;\n  }\n}\n\nexport const COMPILED_EMPTY_NAMED_ARGS: CompiledNamedArgs = new (class extends CompiledNamedArgs {\n  constructor() {\n    super(EMPTY_ARRAY, EMPTY_ARRAY);\n  }\n\n  evaluate(_vm: VM): EvaluatedNamedArgs {\n    return EVALUATED_EMPTY_NAMED_ARGS;\n  }\n\n  toJSON(): string {\n    return `<EMPTY>`;\n  }\n});\n\nexport class EvaluatedNamedArgs {\n  static create(map: Dict<PathReference<Opaque>>) {\n    let keys = Object.keys(map);\n    let length = keys.length;\n\n    if (length > 0) {\n      let values: PathReference<Opaque>[] = new Array(length);\n\n      for (let i=0; i<length; i++) {\n        values[i] = map[keys[i]];\n      }\n\n      return new this(keys, values, map);\n    } else {\n      return EVALUATED_EMPTY_NAMED_ARGS;\n    }\n  }\n\n  static empty(): EvaluatedNamedArgs {\n    return EVALUATED_EMPTY_NAMED_ARGS;\n  }\n\n  public tag: RevisionTag;\n  public length: number;\n\n  constructor(\n    public keys: ReadonlyArray<string>,\n    public values: ReadonlyArray<PathReference<Opaque>>,\n    private _map: Option<Dict<PathReference<Opaque>>> = null\n  ) {\n    this.tag = combineTagged(values);\n    this.length = keys.length;\n    assert(keys.length === values.length, 'Keys and values do not have the same length');\n  }\n\n  get map(): Dict<PathReference<Opaque>> {\n    let { _map: map } = this;\n\n    if (map) {\n      return map;\n    }\n\n    map = this._map = dict<PathReference<Opaque>>();\n\n    let { keys, values, length } = this;\n\n    for(let i=0; i<length; i++) {\n      map[keys[i]] = values[i];\n    }\n\n    return map;\n  }\n\n  get(key: string): PathReference<Opaque> {\n    let { keys, values } = this;\n    let index = keys.indexOf(key);\n    return (index === -1) ? UNDEFINED_REFERENCE : values[index];\n  }\n\n  has(key: string): boolean {\n    return this.keys.indexOf(key) !== -1;\n  }\n\n  value(): Dict<Opaque> {\n    let { keys, values } = this;\n\n    let out = dict<Opaque>();\n\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i];\n      let ref = values[i];\n      out[key] = ref.value();\n    }\n\n    return out;\n  }\n}\n\nexport const EVALUATED_EMPTY_NAMED_ARGS: EvaluatedNamedArgs = new (class extends EvaluatedNamedArgs {\n  constructor() {\n    super(EMPTY_ARRAY, EMPTY_ARRAY, EMPTY_DICT);\n  }\n\n  get(): PathReference<Opaque> {\n    return UNDEFINED_REFERENCE;\n  }\n\n  has(_key: string): boolean {\n    return false;\n  }\n\n  value(): Dict<Opaque> {\n    return EMPTY_DICT;\n  }\n});\n","import { UNDEFINED_REFERENCE } from '../../references';\nimport { CompiledExpression } from '../expressions';\nimport VM from '../../vm/append';\nimport { EMPTY_ARRAY } from '../../utils';\nimport { PathReference, RevisionTag, combineTagged } from '@glimmer/reference';\nimport { Opaque } from '@glimmer/util';\n\nexport class CompiledPositionalArgs {\n  static create(values: CompiledExpression<Opaque>[]): CompiledPositionalArgs {\n    if (values.length) {\n      return new this(values);\n    } else {\n      return COMPILED_EMPTY_POSITIONAL_ARGS;\n    }\n  }\n\n  static empty() {\n    return COMPILED_EMPTY_POSITIONAL_ARGS;\n  }\n\n  public length: number;\n\n  constructor(public values: ReadonlyArray<CompiledExpression<Opaque>>) {\n    this.length = values.length;\n  }\n\n  evaluate(vm: VM): EvaluatedPositionalArgs {\n    let { values, length } = this;\n    let references: PathReference<Opaque>[] = new Array(length);\n\n    for (let i = 0; i < length; i++) {\n      references[i] = values[i].evaluate(vm);\n    }\n\n    return EvaluatedPositionalArgs.create(references);\n  }\n\n  toJSON(): string {\n    return `[${this.values.map(value => value.toJSON()).join(\", \")}]`;\n  }\n}\n\nexport const COMPILED_EMPTY_POSITIONAL_ARGS: CompiledPositionalArgs = new (class extends CompiledPositionalArgs {\n  constructor() {\n    super(EMPTY_ARRAY);\n  }\n\n  evaluate(_vm: VM): EvaluatedPositionalArgs {\n    return EVALUATED_EMPTY_POSITIONAL_ARGS;\n  }\n\n  toJSON(): string {\n    return `<EMPTY>`;\n  }\n});\n\nexport class EvaluatedPositionalArgs {\n  static create(values: ReadonlyArray<PathReference<Opaque>>) {\n    return new this(values);\n  }\n\n  static empty(): EvaluatedPositionalArgs {\n    return EVALUATED_EMPTY_POSITIONAL_ARGS;\n  }\n\n  public tag: RevisionTag;\n  public length: number;\n\n  constructor(public values: ReadonlyArray<PathReference<Opaque>>) {\n    this.tag = combineTagged(values);\n    this.length = values.length;\n  }\n\n  at(index: number): PathReference<Opaque> {\n    let { values, length } = this;\n    return (index < length) ? values[index] : UNDEFINED_REFERENCE;\n  }\n\n  value(): ReadonlyArray<Opaque> {\n    let { values, length } = this;\n    let ret: Opaque[] = new Array(length);\n\n    for (let i = 0; i < length; i++) {\n      ret[i] = values[i].value();\n    }\n\n    return ret;\n  }\n}\n\nexport const EVALUATED_EMPTY_POSITIONAL_ARGS: EvaluatedPositionalArgs = new (class extends EvaluatedPositionalArgs {\n  constructor() {\n    super(EMPTY_ARRAY);\n  }\n\n  at(): PathReference<Opaque> {\n    return UNDEFINED_REFERENCE;\n  }\n\n  value(): ReadonlyArray<Opaque> {\n    return this.values;\n  }\n});\n","import { VM } from '../../vm';\nimport { CompiledExpression } from '../expressions';\nimport { Primitive, PrimitiveReference } from '../../references';\n\nexport default class CompiledValue<T extends Primitive> extends CompiledExpression<T> {\n  public type = \"value\";\n  private reference: PrimitiveReference<T>;\n\n  constructor(value: T) {\n    super();\n    this.reference = PrimitiveReference.create(value);\n  }\n\n  evaluate(_vm: VM): PrimitiveReference<T> {\n    return this.reference;\n  }\n\n  toJSON(): string {\n    return JSON.stringify(this.reference.value());\n  }\n}\n","import { CompiledGetBlock } from '../expressions/has-block';\r\nimport { CompiledArgs, EvaluatedArgs } from '../expressions/args';\r\nimport { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';\r\nimport { Option } from '@glimmer/util';\r\n\r\nAPPEND_OPCODES.add(Op.OpenBlock, (vm, { op1: _getBlock, op2: _args }) => {\r\n  let inner = vm.constants.getOther<CompiledGetBlock>(_getBlock);\r\n  let rawArgs = vm.constants.getExpression<CompiledArgs>(_args);\r\n  let args: Option<EvaluatedArgs> = null;\r\n\r\n  let block = inner.evaluate(vm);\r\n\r\n  if (block) {\r\n    args = rawArgs.evaluate(vm);\r\n  }\r\n\r\n  // FIXME: can we avoid doing this when we don't have a block?\r\n  vm.pushCallerScope();\r\n\r\n  if (block) {\r\n    vm.invokeBlock(block, args || null);\r\n  }\r\n});\r\n\r\nAPPEND_OPCODES.add(Op.CloseBlock, vm => vm.popScope());\r\n","import * as content from './content';\nimport * as vm from './vm';\n\nimport { Insertion } from '../../upsert';\n\nimport {\n  CompiledGetBlock,\n  CompiledGetBlockBySymbol,\n  CompiledInPartialGetBlock\n} from '../../compiled/expressions/has-block';\n\nimport { Option, Stack, Dict, Opaque, dict, expect } from '@glimmer/util';\nimport { expr } from '../../syntax/functions';\nimport { Constants, Slice } from '../../opcodes';\nimport { CompiledArgs } from '../expressions/args';\nimport { CompiledExpression } from '../expressions';\nimport { ComponentDefinition } from '../../component/interfaces';\nimport { PartialDefinition } from '../../partial';\nimport Environment, { Program } from '../../environment';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { ComponentBuilder as IComponentBuilder } from '../../opcode-builder';\nimport { ComponentBuilder } from '../../compiler';\nimport { BaselineSyntax, InlineBlock, Template } from '../../scanner';\n\nimport {\n  APPEND_OPCODES,\n  OpcodeName as Op,\n  AppendOpcode,\n  ConstantArray,\n  ConstantOther,\n  ConstantExpression,\n  ConstantBlock\n} from '../../opcodes';\n\nfunction appendOpcode(name: Op, op1?: number, op2?: number, op3?: number): AppendOpcode {\n  return APPEND_OPCODES.construct(name, null, op1, op2, op3);\n}\n\nexport interface CompilesInto<E> {\n  compile(builder: OpcodeBuilder): E;\n}\n\nexport type RepresentsExpression = BaselineSyntax.AnyExpression | CompiledExpression<Opaque>;\n\nexport type Represents<E> = CompilesInto<E> | E;\n\nexport type Label = string;\n\nexport interface SymbolLookup {\n  symbolTable: SymbolTable;\n}\n\ntype TargetOpcode = Op.Jump | Op.JumpIf | Op.JumpUnless | Op.NextIter;\ntype RangeOpcode = Op.Enter | Op.EnterList | Op.EnterWithKey | Op.NextIter;\n\nclass Labels {\n  labels = dict<number>();\n  jumps: { at: number, target: string, Target: TargetOpcode }[] = [];\n  ranges: { at: number, start: string, end: string, Range: RangeOpcode }[] = [];\n\n  label(name: string, index: number) {\n    this.labels[name] = index;\n  }\n\n  jump(at: number, Target: TargetOpcode, target: string) {\n    this.jumps.push({ at, target, Target });\n  }\n\n  range(at: number, Range: RangeOpcode, start: string, end: string) {\n    this.ranges.push({ at, start, end, Range });\n  }\n\n  patch(constants: Constants, opcodes: Program): void {\n    for (let i = 0; i < this.jumps.length; i++) {\n      let { at, target, Target } = this.jumps[i];\n      opcodes.set(at, APPEND_OPCODES.construct(Target, null, this.labels[target]));\n    }\n\n    for (let i = 0; i < this.ranges.length; i++) {\n      let { at, start, end, Range } = this.ranges[i];\n      let slice = constants.slice([this.labels[start], this.labels[end] - 1]);\n      opcodes.set(at, APPEND_OPCODES.construct(Range, null, slice));\n    }\n  }\n}\n\nexport abstract class BasicOpcodeBuilder implements SymbolLookup {\n  private labelsStack = new Stack<Labels>();\n  public constants: Constants;\n  private start: number;\n\n  constructor(public symbolTable: SymbolTable, public env: Environment, public program: Program) {\n    this.constants = env.constants;\n    this.start = program.next;\n  }\n\n  abstract compile<E>(expr: Represents<E>): E;\n  abstract compileExpression(expr: RepresentsExpression): CompiledExpression<Opaque>;\n\n  private get pos() {\n    return this.program.current;\n  }\n\n  private get nextPos() {\n    return this.program.next;\n  }\n\n  protected opcode(name: Op, op1?: number, op2?: number, op3?: number) {\n    this.push(appendOpcode(name, op1, op2, op3));\n  }\n\n  push(op: Option<AppendOpcode>) {\n    // console.log(`pushing ${op && op.type}`);\n    if (op === null) {\n      this.program.push([0, 0, 0, 0]);\n    } else {\n      this.program.push(op);\n    }\n  }\n\n  toSlice(): Slice {\n    return [this.start, this.program.current];\n  }\n\n  // helpers\n\n  private get labels(): Labels {\n    return expect(this.labelsStack.current, 'bug: not in a label stack');\n  }\n\n  startLabels() {\n    this.labelsStack.push(new Labels());\n  }\n\n  stopLabels() {\n    let label = expect(this.labelsStack.pop(), 'unbalanced push and pop labels');\n    label.patch(this.constants, this.program);\n  }\n\n  // partials\n\n  putPartialDefinition(_definition: PartialDefinition<Opaque>) {\n    let definition = this.constants.other(_definition);\n    this.opcode(Op.PutPartial, definition);\n  }\n\n  putDynamicPartialDefinition() {\n    this.opcode(Op.PutDynamicPartial, this.constants.other(this.symbolTable));\n  }\n\n  evaluatePartial() {\n    this.opcode(Op.EvaluatePartial, this.constants.other(this.symbolTable), this.constants.other(dict()));\n  }\n\n  // components\n\n  putComponentDefinition(definition: ComponentDefinition<Opaque>) {\n    this.opcode(Op.PutComponent, this.other(definition));\n  }\n\n  putDynamicComponentDefinition() {\n    this.opcode(Op.PutDynamicComponent);\n  }\n\n  openComponent(args: Represents<CompiledArgs>, shadow?: InlineBlock) {\n    this.opcode(Op.OpenComponent, this.args(args), shadow ? this.block(shadow) : 0);\n  }\n\n  didCreateElement() {\n    this.opcode(Op.DidCreateElement);\n  }\n\n  shadowAttributes() {\n    this.opcode(Op.ShadowAttributes);\n    this.opcode(Op.CloseBlock);\n  }\n\n  didRenderLayout() {\n    this.opcode(Op.DidRenderLayout);\n  }\n\n  closeComponent() {\n    this.opcode(Op.CloseComponent);\n  }\n\n  // content\n\n  dynamicContent(Opcode: content.AppendDynamicOpcode<Insertion>) {\n    this.opcode(Op.DynamicContent, this.other(Opcode));\n  }\n\n  cautiousAppend() {\n    this.dynamicContent(new content.OptimizedCautiousAppendOpcode());\n  }\n\n  trustingAppend() {\n    this.dynamicContent(new content.OptimizedTrustingAppendOpcode());\n  }\n\n  guardedCautiousAppend(expression: RepresentsExpression) {\n    this.dynamicContent(new content.GuardedCautiousAppendOpcode(this.compileExpression(expression), this.symbolTable));\n  }\n\n  guardedTrustingAppend(expression: RepresentsExpression) {\n    this.dynamicContent(new content.GuardedTrustingAppendOpcode(this.compileExpression(expression), this.symbolTable));\n  }\n\n  // dom\n\n  text(text: string) {\n    this.opcode(Op.Text, this.constants.string(text));\n  }\n\n  openPrimitiveElement(tag: string) {\n    this.opcode(Op.OpenElement, this.constants.string(tag));\n  }\n\n  openComponentElement(tag: string) {\n    this.opcode(Op.OpenComponentElement, this.constants.string(tag));\n  }\n\n  openDynamicPrimitiveElement() {\n    this.opcode(Op.OpenDynamicElement);\n  }\n\n  flushElement() {\n    this.opcode(Op.FlushElement);\n  }\n\n  closeElement() {\n    this.opcode(Op.CloseElement);\n  }\n\n  staticAttr(_name: string, _namespace: Option<string>, _value: string) {\n    let name = this.constants.string(_name);\n    let namespace = _namespace ? this.constants.string(_namespace) : 0;\n    let value = this.constants.string(_value);\n\n    this.opcode(Op.StaticAttr, name, value, namespace);\n  }\n\n  dynamicAttrNS(_name: string, _namespace: string, trusting: boolean) {\n    let name = this.constants.string(_name);\n    let namespace = this.constants.string(_namespace);\n\n    this.opcode(Op.DynamicAttrNS, name, namespace, (trusting as any)|0);\n  }\n\n  dynamicAttr(_name: string, trusting: boolean) {\n    let name = this.constants.string(_name);\n    this.opcode(Op.DynamicAttr, name, (trusting as any)|0);\n  }\n\n  comment(_comment: string) {\n    let comment = this.constants.string(_comment);\n    this.opcode(Op.Comment, comment);\n  }\n\n  modifier(_name: string, _args: Represents<CompiledArgs>) {\n    let args = this.constants.expression(this.compile(_args));\n    let _modifierManager = this.env.lookupModifier([_name], this.symbolTable);\n    let modifierManager = this.constants.other(_modifierManager);\n    let name = this.constants.string(_name);\n    this.opcode(Op.Modifier, name, modifierManager, args);\n  }\n\n  // lists\n\n  putIterator() {\n    this.opcode(Op.PutIterator);\n  }\n\n  enterList(start: string, end: string) {\n    this.push(null);\n    this.labels.range(this.pos, Op.EnterList, start, end);\n  }\n\n  exitList() {\n    this.opcode(Op.ExitList);\n  }\n\n  enterWithKey(start: string, end: string) {\n    this.push(null);\n    this.labels.range(this.pos, Op.EnterWithKey, start, end);\n  }\n\n  nextIter(end: string) {\n    this.push(null);\n    this.labels.jump(this.pos, Op.NextIter, end);\n  }\n\n  // vm\n\n  openBlock(_args: Represents<CompiledArgs>, _inner: CompiledGetBlock) {\n    let args = this.constants.expression(this.compile(_args));\n    let inner = this.constants.other(_inner);\n    this.opcode(Op.OpenBlock, inner, args);\n  }\n\n  closeBlock() {\n    this.opcode(Op.CloseBlock);\n  }\n\n  pushRemoteElement() {\n    this.opcode(Op.PushRemoteElement);\n  }\n\n  popRemoteElement() {\n    this.opcode(Op.PopRemoteElement);\n  }\n\n  popElement() {\n    this.opcode(Op.PopElement);\n  }\n\n  label(name: string) {\n    this.labels.label(name, this.nextPos);\n  }\n\n  pushChildScope() {\n    this.opcode(Op.PushChildScope);\n  }\n\n  popScope() {\n    this.opcode(Op.PopScope);\n  }\n\n  pushDynamicScope() {\n    this.opcode(Op.PushDynamicScope);\n  }\n\n  popDynamicScope() {\n    this.opcode(Op.PopDynamicScope);\n  }\n\n  putNull() {\n    this.opcode(Op.Put, this.constants.NULL_REFERENCE);\n  }\n\n  putValue(_expression: RepresentsExpression) {\n    let expr = this.constants.expression(this.compileExpression(_expression));\n    this.opcode(Op.EvaluatePut, expr);\n  }\n\n  putArgs(_args: Represents<CompiledArgs>) {\n    let args = this.constants.expression(this.compile(_args));\n    this.opcode(Op.PutArgs, args);\n  }\n\n  bindDynamicScope(_names: string[]) {\n    this.opcode(Op.BindDynamicScope, this.names(_names));\n  }\n\n  bindPositionalArgs(_names: string[], _symbols: number[]) {\n    this.opcode(Op.BindPositionalArgs, this.names(_names), this.symbols(_symbols));\n  }\n\n  bindNamedArgs(_names: string[], _symbols: number[]) {\n    this.opcode(Op.BindNamedArgs, this.names(_names), this.symbols(_symbols));\n  }\n\n  bindBlocks(_names: string[], _symbols: number[]) {\n    this.opcode(Op.BindBlocks, this.names(_names), this.symbols(_symbols));\n  }\n\n  enter(enter: string, exit: string) {\n    this.push(null);\n    this.labels.range(this.pos, Op.Enter, enter, exit);\n  }\n\n  exit() {\n    this.opcode(Op.Exit);\n  }\n\n  evaluate(_block: InlineBlock) {\n    let block = this.constants.block(_block);\n    this.opcode(Op.Evaluate, block);\n  }\n\n  test(testFunc: 'const' | 'simple' | 'environment' | vm.TestFunction) {\n    let _func: vm.TestFunction;\n\n    if (testFunc === 'const') {\n      _func = vm.ConstTest;\n    } else if (testFunc === 'simple') {\n      _func = vm.SimpleTest;\n    } else if (testFunc === 'environment') {\n      _func = vm.EnvironmentTest;\n    } else if (typeof testFunc === 'function') {\n      _func = testFunc;\n    } else {\n      throw new Error('unreachable');\n    }\n\n    let func = this.constants.function(_func);\n    this.opcode(Op.Test, func);\n  }\n\n  jump(target: string) {\n    this.push(null);\n    this.labels.jump(this.pos, Op.Jump, target);\n  }\n\n  jumpIf(target: string) {\n    this.push(null);\n    this.labels.jump(this.pos, Op.JumpIf, target);\n  }\n\n  jumpUnless(target: string) {\n    this.push(null);\n    this.labels.jump(this.pos, Op.JumpUnless, target);\n  }\n\n  protected names(_names: string[]): ConstantArray {\n    let names = _names.map(n => this.constants.string(n));\n    return this.constants.array(names);\n  }\n\n  protected symbols(symbols: number[]): ConstantArray {\n    return this.constants.array(symbols);\n  }\n\n  protected other(value: Opaque): ConstantOther {\n    return this.constants.other(value);\n  }\n\n  protected args(args: Represents<CompiledArgs>): ConstantExpression {\n    return this.constants.expression(this.compile(args));\n  }\n\n  protected block(block: InlineBlock): ConstantBlock {\n    return this.constants.block(block);\n  }\n}\n\nfunction isCompilableExpression<E>(expr: Represents<E>): expr is CompilesInto<E> {\n  return expr && typeof expr['compile'] === 'function';\n}\n\nexport default class OpcodeBuilder extends BasicOpcodeBuilder {\n  public component: IComponentBuilder;\n\n  constructor(symbolTable: SymbolTable, env: Environment, program: Program = env.program) {\n    super(symbolTable, env, program);\n    this.component = new ComponentBuilder(this);\n  }\n\n  compile<E>(expr: Represents<E>): E {\n    if (isCompilableExpression(expr)) {\n      return expr.compile(this);\n    } else {\n      return expr;\n    }\n  }\n\n  compileExpression(expression: RepresentsExpression): CompiledExpression<Opaque> {\n    if (expression instanceof CompiledExpression) {\n      return expression;\n    } else {\n      return expr(expression, this);\n    }\n  }\n\n  bindPositionalArgsForLocals(locals: Dict<number>) {\n    let symbols = Object.keys(locals).map(name => locals[name]);\n    this.opcode(Op.BindPositionalArgs, this.symbols(symbols));\n  }\n\n  preludeForLayout(layout: Template) {\n    let symbols = layout.symbolTable.getSymbols();\n\n    if (symbols.named) {\n      let named = symbols.named;\n      let namedNames = Object.keys(named);\n      let namedSymbols = namedNames.map(n => named[n]);\n      this.opcode(Op.BindNamedArgs, this.names(namedNames), this.symbols(namedSymbols));\n    }\n\n    this.opcode(Op.BindCallerScope);\n\n    if (symbols.yields) {\n      let yields = symbols.yields;\n      let yieldNames = Object.keys(yields);\n      let yieldSymbols = yieldNames.map(n => yields[n]);\n      this.opcode(Op.BindBlocks, this.names(yieldNames), this.symbols(yieldSymbols));\n    }\n\n    if (symbols.partialArgs) {\n      this.opcode(Op.BindPartialArgs, symbols.partialArgs);\n    }\n  }\n\n  yield(args: Represents<CompiledArgs>, to: string) {\n    let yields: Option<number>, partial: Option<number>;\n    let inner: CompiledGetBlock;\n\n    if (yields = this.symbolTable.getSymbol('yields', to)) {\n      inner = new CompiledGetBlockBySymbol(yields, to);\n    } else if (partial = this.symbolTable.getPartialArgs()) {\n      inner = new CompiledInPartialGetBlock(partial, to);\n    } else {\n      throw new Error('[BUG] ${to} is not a valid block name.');\n    }\n\n    this.openBlock(args, inner);\n    this.closeBlock();\n  }\n\n  // TODO\n  // come back to this\n  labelled(args: Option<Represents<CompiledArgs>>, callback: BlockCallback) {\n    if (args) this.putArgs(args);\n\n    this.startLabels();\n    this.enter('BEGIN', 'END');\n    this.label('BEGIN');\n\n    callback(this, 'BEGIN', 'END');\n\n    this.label('END');\n    this.exit();\n    this.stopLabels();\n  }\n\n  // TODO\n  // come back to this\n  iter(callback: BlockCallback) {\n    this.startLabels();\n    this.enterList('BEGIN', 'END');\n    this.label('ITER');\n    this.nextIter('BREAK');\n    this.enterWithKey('BEGIN', 'END');\n    this.label('BEGIN');\n\n    callback(this, 'BEGIN', 'END');\n\n    this.label('END');\n    this.exit();\n    this.jump('ITER');\n    this.label('BREAK');\n    this.exitList();\n    this.stopLabels();\n  }\n\n  // TODO\n  // come back to this\n  unit(callback: (builder: OpcodeBuilder) => void) {\n    this.startLabels();\n    callback(this);\n    this.stopLabels();\n  }\n}\n\nexport type BlockCallback = (dsl: OpcodeBuilder, BEGIN: Label, END: Label) => void;\n","import { OpcodeJSON, UpdatingOpcode } from '../../opcodes';\nimport { Assert } from './vm';\nimport { Component, ComponentManager, ComponentDefinition } from '../../component/interfaces';\nimport { UpdatingVM } from '../../vm';\nimport { CompiledArgs, EvaluatedArgs } from '../../compiled/expressions/args';\nimport { DynamicScope } from '../../environment';\nimport Bounds from '../../bounds';\nimport { CONSTANT_TAG, ReferenceCache, combine, isConst, RevisionTag } from '@glimmer/reference';\nimport { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';\n\nAPPEND_OPCODES.add(Op.PutDynamicComponent, vm => {\n  let reference = vm.frame.getOperand<ComponentDefinition<Component>>();\n  let cache = isConst(reference) ? undefined : new ReferenceCache(reference);\n  let definition = cache ? cache.peek() : reference.value();\n\n  vm.frame.setImmediate(definition);\n\n  if (cache) {\n    vm.updateWith(new Assert(cache));\n  }\n});\n\nAPPEND_OPCODES.add(Op.PutComponent, (vm, { op1: _component }) => {\n  let definition = vm.constants.getOther<ComponentDefinition<Component>>(_component);\n  vm.frame.setImmediate(definition);\n});\n\nAPPEND_OPCODES.add(Op.OpenComponent, (vm, { op1: _args, op2: _shadow }) => {\n  let rawArgs = vm.constants.getExpression<CompiledArgs>(_args);\n  let shadow = vm.constants.getBlock(_shadow);\n\n  let definition = vm.frame.getImmediate<ComponentDefinition<Component>>();\n  let dynamicScope = vm.pushDynamicScope();\n  let callerScope = vm.scope();\n\n  let manager = definition.manager;\n  let args = manager.prepareArgs(definition, rawArgs.evaluate(vm), dynamicScope);\n  let hasDefaultBlock = !!args.blocks.default; // TODO Cleanup?\n  let component = manager.create(vm.env, definition, args, dynamicScope, vm.getSelf(), hasDefaultBlock);\n  let destructor = manager.getDestructor(component);\n  if (destructor) vm.newDestroyable(destructor);\n\n  let layout = manager.layoutFor(definition, component, vm.env);\n  let selfRef = manager.getSelf(component);\n\n  vm.beginCacheGroup();\n  vm.stack().pushSimpleBlock();\n  vm.pushRootScope(selfRef, layout.symbols);\n  vm.invokeLayout(args, layout, callerScope, component, manager, shadow);\n\n  vm.updateWith(new UpdateComponentOpcode(definition.name, component, manager, args, dynamicScope));\n});\n\n// export class DidCreateElementOpcode extends Opcode {\n//   public type = \"did-create-element\";\n\n//   evaluate(vm: VM) {\n//     let manager = vm.frame.getManager();\n//     let component = vm.frame.getComponent();\n\n//     let action = 'DidCreateElementOpcode#evaluate';\n//     manager.didCreateElement(component, vm.stack().expectConstructing(action), vm.stack().expectOperations(action));\n//   }\n\n//   toJSON(): OpcodeJSON {\n//     return {\n//       guid: this._guid,\n//       type: this.type,\n//       args: [\"$ARGS\"]\n//     };\n//   }\n// }\n\nAPPEND_OPCODES.add(Op.DidCreateElement, vm => {\n  let manager = vm.frame.getManager();\n  let component = vm.frame.getComponent();\n\n  let action = 'DidCreateElementOpcode#evaluate';\n  manager.didCreateElement(component, vm.stack().expectConstructing(action), vm.stack().expectOperations(action));\n});\n\n// export class ShadowAttributesOpcode extends Opcode {\n//   public type = \"shadow-attributes\";\n\n//   evaluate(vm: VM) {\n//     let shadow = vm.frame.getShadow();\n\n//     vm.pushCallerScope();\n//     if (!shadow) return;\n\n//     vm.invokeBlock(shadow, EvaluatedArgs.empty());\n//   }\n\n//   toJSON(): OpcodeJSON {\n//     return {\n//       guid: this._guid,\n//       type: this.type,\n//       args: [\"$ARGS\"]\n//     };\n//   }\n// }\n\n// Slow path for non-specialized component invocations. Uses an internal\n// named lookup on the args.\nAPPEND_OPCODES.add(Op.ShadowAttributes, vm => {\n  let shadow = vm.frame.getShadow();\n\n  vm.pushCallerScope();\n  if (!shadow) return;\n\n  vm.invokeBlock(shadow, EvaluatedArgs.empty());\n});\n\n// export class DidRenderLayoutOpcode extends Opcode {\n//   public type = \"did-render-layout\";\n\n//   evaluate(vm: VM) {\n//     let manager = vm.frame.getManager();\n//     let component = vm.frame.getComponent();\n//     let bounds = vm.stack().popBlock();\n\n//     manager.didRenderLayout(component, bounds);\n\n//     vm.env.didCreate(component, manager);\n\n//     vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));\n//   }\n// }\n\nAPPEND_OPCODES.add(Op.DidRenderLayout, vm => {\n  let manager = vm.frame.getManager();\n  let component = vm.frame.getComponent();\n  let bounds = vm.stack().popBlock();\n\n  manager.didRenderLayout(component, bounds);\n\n  vm.env.didCreate(component, manager);\n\n  vm.updateWith(new DidUpdateLayoutOpcode(manager, component, bounds));\n});\n\n// export class CloseComponentOpcode extends Opcode {\n//   public type = \"close-component\";\n\n//   evaluate(vm: VM) {\n//     vm.popScope();\n//     vm.popDynamicScope();\n//     vm.commitCacheGroup();\n//   }\n// }\n\nAPPEND_OPCODES.add(Op.CloseComponent, vm => {\n  vm.popScope();\n  vm.popDynamicScope();\n  vm.commitCacheGroup();\n});\n\nexport class UpdateComponentOpcode extends UpdatingOpcode {\n  public type = \"update-component\";\n\n  constructor(\n    private name: string,\n    private component: Component,\n    private manager: ComponentManager<Component>,\n    private args: EvaluatedArgs,\n    private dynamicScope: DynamicScope,\n  ) {\n    super();\n\n    let componentTag = manager.getTag(component);\n\n    if (componentTag) {\n      this.tag = combine([args.tag, componentTag]);\n    } else {\n      this.tag = args.tag;\n    }\n  }\n\n  evaluate(_vm: UpdatingVM) {\n    let { component, manager, args, dynamicScope } = this;\n\n    manager.update(component, args, dynamicScope);\n  }\n\n  toJSON(): OpcodeJSON {\n    return {\n      guid: this._guid,\n      type: this.type,\n      args: [JSON.stringify(this.name)]\n    };\n  }\n}\n\nexport class DidUpdateLayoutOpcode extends UpdatingOpcode {\n  public type = \"did-update-layout\";\n  public tag: RevisionTag = CONSTANT_TAG;\n\n  constructor(\n    private manager: ComponentManager<Component>,\n    private component: Component,\n    private bounds: Bounds\n  ) {\n    super();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { manager, component, bounds } = this;\n\n    manager.didUpdateLayout(component, bounds);\n\n    vm.env.didUpdate(component, manager);\n  }\n}\n","import Upsert, {\n  Insertion,\n  CautiousInsertion,\n  TrustingInsertion,\n\n  isSafeString,\n  isNode,\n  isString,\n\n  cautiousInsert,\n  trustingInsert\n} from '../../upsert';\nimport { isComponentDefinition } from '../../component/interfaces';\nimport { DOMTreeConstruction } from '../../dom/helper';\nimport { OpcodeJSON, UpdatingOpcode } from '../../opcodes';\nimport { CompiledExpression, CompiledArgs } from '../expressions';\nimport { VM, UpdatingVM } from '../../vm';\nimport { TryOpcode, VMState } from '../../vm/update';\nimport { Reference, ReferenceCache, UpdatableTag, isModified, isConst, map } from '@glimmer/reference';\nimport { FIXME, Option, Opaque, LinkedList, expect } from '@glimmer/util';\nimport { Cursor, clear } from '../../bounds';\nimport { Fragment } from '../../builder';\nimport OpcodeBuilderDSL from './builder';\nimport { ConditionalReference } from '../../references';\nimport { Environment } from '../../environment';\nimport { UpdatableBlockTracker } from '../../builder';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { APPEND_OPCODES, OpcodeName as Op, Slice } from '../../opcodes';\n\nAPPEND_OPCODES.add(Op.DynamicContent, (vm, { op1: append }) => {\n  let opcode = vm.constants.getOther(append) as AppendDynamicOpcode<Insertion>;\n  opcode.evaluate(vm);\n});\n\nfunction isEmpty(value: Opaque): boolean {\n  return value === null || value === undefined || typeof value['toString'] !== 'function';\n}\n\nexport function normalizeTextValue(value: Opaque): string {\n  if (isEmpty(value)) {\n    return '';\n  }\n  return String(value);\n}\n\nfunction normalizeTrustedValue(value: Opaque): TrustingInsertion {\n  if (isEmpty(value)) {\n    return '';\n  }\n  if (isString(value)) {\n    return value;\n  }\n  if (isSafeString(value)) {\n    return value.toHTML();\n  }\n  if (isNode(value)) {\n    return value;\n  }\n  return String(value);\n}\n\nfunction normalizeValue(value: Opaque): CautiousInsertion {\n  if (isEmpty(value)) {\n    return '';\n  }\n  if (isString(value)) {\n    return value;\n  }\n  if (isSafeString(value) || isNode(value)) {\n    return value;\n  }\n  return String(value);\n}\n\nexport type AppendDynamicOpcodeConstructor =  typeof OptimizedCautiousAppendOpcode | typeof OptimizedTrustingAppendOpcode;\n\nexport abstract class AppendDynamicOpcode<T extends Insertion> {\n  protected abstract normalize(reference: Reference<Opaque>): Reference<T>;\n  protected abstract insert(dom: DOMTreeConstruction, cursor: Cursor, value: T): Upsert;\n  protected abstract updateWith(vm: VM, reference: Reference<Opaque>, cache: ReferenceCache<T>, bounds: Fragment, upsert: Upsert): UpdatingOpcode;\n\n  evaluate(vm: VM) {\n    let reference = vm.frame.getOperand();\n    let normalized = this.normalize(reference);\n\n    let value, cache;\n\n    if (isConst(reference)) {\n      value = normalized.value();\n    } else {\n      cache = new ReferenceCache(normalized);\n      value = cache.peek();\n    }\n\n    let stack = vm.stack();\n    let upsert = this.insert(vm.env.getAppendOperations(), stack, value);\n    let bounds = new Fragment(upsert.bounds);\n\n    stack.newBounds(bounds);\n\n    if (cache /* i.e. !isConst(reference) */) {\n      vm.updateWith(this.updateWith(vm, reference, cache, bounds, upsert));\n    }\n  }\n}\n\nexport abstract class GuardedAppendOpcode<T extends Insertion> extends AppendDynamicOpcode<T> {\n  protected abstract AppendOpcode: typeof OptimizedCautiousAppendOpcode | typeof OptimizedTrustingAppendOpcode;\n  private deopted: Option<Slice> = null;\n\n  constructor(private expression: CompiledExpression<any>, private symbolTable: SymbolTable) {\n    super();\n  }\n\n  evaluate(vm: VM) {\n    if (this.deopted) {\n      vm.pushEvalFrame(this.deopted);\n    } else {\n      vm.evaluateOperand(this.expression);\n\n      let value = vm.frame.getOperand().value();\n\n      if(isComponentDefinition(value)) {\n        vm.pushEvalFrame(this.deopt(vm.env));\n      } else {\n        super.evaluate(vm);\n      }\n    }\n  }\n\n  public deopt(env: Environment): Slice { // Public because it's used in the lazy deopt\n    // At compile time, we determined that this append callsite might refer\n    // to a local variable/property lookup that resolves to a component\n    // definition at runtime.\n    //\n    // We could have eagerly compiled this callsite into something like this:\n    //\n    //   {{#if (is-component-definition foo)}}\n    //     {{component foo}}\n    //   {{else}}\n    //     {{foo}}\n    //   {{/if}}\n    //\n    // However, in practice, there might be a large amout of these callsites\n    // and most of them would resolve to a simple value lookup. Therefore, we\n    // tried to be optimistic and assumed that the callsite will resolve to\n    // appending a simple value.\n    //\n    // However, we have reached here because at runtime, the guard conditional\n    // have detected that this callsite is indeed referring to a component\n    // definition object. Since this is likely going to be true for other\n    // instances of the same callsite, it is now appropiate to deopt into the\n    // expanded version that handles both cases. The compilation would look\n    // like this:\n    //\n    //               PutValue(expression)\n    //               Test(is-component-definition)\n    //               Enter(BEGIN, END)\n    //   BEGIN:      Noop\n    //               JumpUnless(VALUE)\n    //               PutDynamicComponentDefinitionOpcode\n    //               OpenComponent\n    //               CloseComponent\n    //               Jump(END)\n    //   VALUE:      Noop\n    //               OptimizedAppend\n    //   END:        Noop\n    //               Exit\n    //\n    // Keep in mind that even if we *don't* reach here at initial render time,\n    // it is still possible (although quite rare) that the simple value we\n    // encounter during initial render could later change into a component\n    // definition object at update time. That is handled by the \"lazy deopt\"\n    // code on the update side (scroll down for the next big block of comment).\n\n    let dsl = new OpcodeBuilderDSL(this.symbolTable, env);\n\n    dsl.putValue(this.expression);\n    dsl.test(IsComponentDefinitionReference.create);\n\n    dsl.labelled(null, (dsl, _BEGIN, END) => {\n      dsl.jumpUnless('VALUE');\n      dsl.putDynamicComponentDefinition();\n      dsl.openComponent(CompiledArgs.empty());\n      dsl.closeComponent();\n      dsl.jump(END);\n      dsl.label('VALUE');\n      dsl.dynamicContent(new this.AppendOpcode());\n    });\n\n    let deopted = this.deopted = dsl.toSlice();\n\n    // From this point on, we have essentially replaced ourselves with a new set\n    // of opcodes. Since we will always be executing the new/deopted code, it's\n    // a good idea (as a pattern) to null out any unneeded fields here to avoid\n    // holding on to unneeded/stale objects:\n\n    // QUESTION: Shouldn't this whole object be GCed? If not, why not?\n\n    this.expression = null as FIXME<any, 'QUESTION'>;\n\n    return deopted;\n  }\n}\n\nclass IsComponentDefinitionReference extends ConditionalReference {\n  static create(inner: Reference<Opaque>): IsComponentDefinitionReference {\n    return new IsComponentDefinitionReference(inner);\n  }\n\n  toBool(value: Opaque): boolean {\n    return isComponentDefinition(value);\n  }\n}\n\nabstract class UpdateOpcode<T extends Insertion> extends UpdatingOpcode {\n  constructor(\n    protected cache: ReferenceCache<T>,\n    protected bounds: Fragment,\n    protected upsert: Upsert\n  ) {\n    super();\n    this.tag = cache.tag;\n  }\n\n  protected abstract insert(dom: DOMTreeConstruction, cursor: Cursor, value: T): Upsert;\n\n  evaluate(vm: UpdatingVM) {\n    let value = this.cache.revalidate();\n\n    if (isModified(value)) {\n      let { bounds, upsert } = this;\n      let { dom } = vm;\n\n      if(!this.upsert.update(dom, value)) {\n        let cursor = new Cursor(bounds.parentElement(), clear(bounds));\n        upsert = this.upsert = this.insert(vm.env.getAppendOperations(), cursor, value as T);\n      }\n\n      bounds.update(upsert.bounds);\n    }\n  }\n\n  toJSON(): OpcodeJSON {\n    let { _guid: guid, type, cache } = this;\n\n    return {\n      guid,\n      type,\n      details: { lastValue: JSON.stringify(cache.peek()) }\n    };\n  }\n}\n\nabstract class GuardedUpdateOpcode<T extends Insertion> extends UpdateOpcode<T> {\n  private _tag: UpdatableTag;\n  private deopted: Option<TryOpcode> = null;\n\n  constructor(\n    private reference: Reference<Opaque>,\n    cache: ReferenceCache<T>,\n    bounds: Fragment,\n    upsert: Upsert,\n    private appendOpcode: GuardedAppendOpcode<T>,\n    private state: VMState\n  ) {\n    super(cache, bounds, upsert);\n    this.tag = this._tag = new UpdatableTag(this.tag);\n  }\n\n  evaluate(vm: UpdatingVM) {\n    if (this.deopted) {\n      vm.evaluateOpcode(this.deopted);\n    } else {\n      if (isComponentDefinition(this.reference.value())) {\n        this.lazyDeopt(vm);\n      } else {\n        super.evaluate(vm);\n      }\n    }\n  }\n\n  private lazyDeopt(vm: UpdatingVM) {\n    // Durign initial render, we know that the reference does not contain a\n    // component definition, so we optimistically assumed that this append\n    // is just a normal append. However, at update time, we discovered that\n    // the reference has switched into containing a component definition, so\n    // we need to do a \"lazy deopt\", simulating what would have happened if\n    // we had decided to perform the deopt in the first place during initial\n    // render.\n    //\n    // More concretely, we would have expanded the curly into a if/else, and\n    // based on whether the value is a component definition or not, we would\n    // have entered either the dynamic component branch or the simple value\n    // branch.\n    //\n    // Since we rendered a simple value during initial render (and all the\n    // updates up until this point), we need to pretend that the result is\n    // produced by the \"VALUE\" branch of the deopted append opcode:\n    //\n    //   Try(BEGIN, END)\n    //     Assert(IsComponentDefinition, expected=false)\n    //     OptimizedUpdate\n    //\n    // In this case, because the reference has switched from being a simple\n    // value into a component definition, what would have happened is that\n    // the assert would throw, causing the Try opcode to teardown the bounds\n    // and rerun the original append opcode.\n    //\n    // Since the Try opcode would have nuked the updating opcodes anyway, we\n    // wouldn't have to worry about simulating those. All we have to do is to\n    // execute the Try opcode and immediately throw.\n\n    let { bounds, appendOpcode, state } = this;\n    let env = vm.env;\n\n    let slice     = appendOpcode.deopt(env);\n    let enter     = expect(env.program.opcode(slice[0] + 8), 'hardcoded deopt location');\n    let ops       = vm.constants.getSlice(enter.op1);\n\n    let tracker = new UpdatableBlockTracker(bounds.parentElement());\n    tracker.newBounds(this.bounds);\n\n    let children = new LinkedList<UpdatingOpcode>();\n\n    state.frame['condition'] = IsComponentDefinitionReference.create(expect(state.frame['operand'], 'operand should be populated'));\n\n    let deopted = this.deopted = new TryOpcode(ops, state, tracker, children);\n\n    this._tag.update(deopted.tag);\n\n    vm.evaluateOpcode(deopted);\n    vm.throw();\n\n    // From this point on, we have essentially replaced ourselve with a new\n    // opcode. Since we will always be executing the new/deopted code, it's a\n    // good idea (as a pattern) to null out any unneeded fields here to avoid\n    // holding on to unneeded/stale objects:\n\n    // QUESTION: Shouldn't this whole object be GCed? If not, why not?\n\n    this._tag         = null as FIXME<any, 'QUESTION'>;\n    this.reference    = null as FIXME<any, 'QUESTION'>;\n    this.cache        = null as FIXME<any, 'QUESTION'>;\n    this.bounds       = null as FIXME<any, 'QUESTION'>;\n    this.upsert       = null as FIXME<any, 'QUESTION'>;\n    this.appendOpcode = null as FIXME<any, 'QUESTION'>;\n    this.state        = null as FIXME<any, 'QUESTION'>;\n  }\n\n  toJSON(): OpcodeJSON {\n    let { _guid: guid, type, deopted } = this;\n\n    if (deopted) {\n      return {\n        guid,\n        type,\n        deopted: true,\n        children: [deopted.toJSON()]\n      };\n    } else {\n      return super.toJSON();\n    }\n  }\n}\n\nexport class OptimizedCautiousAppendOpcode extends AppendDynamicOpcode<CautiousInsertion> {\n  type = 'optimized-cautious-append';\n\n  protected normalize(reference: Reference<Opaque>): Reference<CautiousInsertion> {\n    return map(reference, normalizeValue);\n  }\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: CautiousInsertion): Upsert {\n    return cautiousInsert(dom, cursor, value);\n  }\n\n  protected updateWith(_vm: VM, _reference: Reference<Opaque>, cache: ReferenceCache<CautiousInsertion>, bounds: Fragment, upsert: Upsert): UpdatingOpcode {\n    return new OptimizedCautiousUpdateOpcode(cache, bounds, upsert);\n  }\n}\n\nclass OptimizedCautiousUpdateOpcode extends UpdateOpcode<CautiousInsertion> {\n  type = 'optimized-cautious-update';\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: CautiousInsertion): Upsert {\n    return cautiousInsert(dom, cursor, value);\n  }\n}\n\nexport class GuardedCautiousAppendOpcode extends GuardedAppendOpcode<CautiousInsertion> {\n  type = 'guarded-cautious-append';\n\n  protected AppendOpcode = OptimizedCautiousAppendOpcode;\n\n  protected normalize(reference: Reference<Opaque>): Reference<CautiousInsertion> {\n    return map(reference, normalizeValue);\n  }\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: CautiousInsertion): Upsert {\n    return cautiousInsert(dom, cursor, value);\n  }\n\n  protected updateWith(vm: VM, reference: Reference<Opaque>, cache: ReferenceCache<CautiousInsertion>, bounds: Fragment, upsert: Upsert): UpdatingOpcode {\n    return new GuardedCautiousUpdateOpcode(reference, cache, bounds, upsert, this, vm.capture());\n  }\n}\n\nclass GuardedCautiousUpdateOpcode extends GuardedUpdateOpcode<CautiousInsertion> {\n  type = 'guarded-cautious-update';\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: CautiousInsertion): Upsert {\n    return cautiousInsert(dom, cursor, value);\n  }\n}\n\nexport class OptimizedTrustingAppendOpcode extends AppendDynamicOpcode<TrustingInsertion> {\n  type = 'optimized-trusting-append';\n\n  protected normalize(reference: Reference<Opaque>): Reference<TrustingInsertion> {\n    return map(reference, normalizeTrustedValue);\n  }\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: TrustingInsertion): Upsert {\n    return trustingInsert(dom, cursor, value);\n  }\n\n  protected updateWith(_vm: VM, _reference: Reference<Opaque>, cache: ReferenceCache<TrustingInsertion>, bounds: Fragment, upsert: Upsert): UpdatingOpcode {\n    return new OptimizedTrustingUpdateOpcode(cache, bounds, upsert);\n  }\n}\n\nclass OptimizedTrustingUpdateOpcode extends UpdateOpcode<TrustingInsertion> {\n  type = 'optimized-trusting-update';\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: TrustingInsertion): Upsert {\n    return trustingInsert(dom, cursor, value);\n  }\n}\n\nexport class GuardedTrustingAppendOpcode extends GuardedAppendOpcode<TrustingInsertion> {\n  type = 'guarded-trusting-append';\n\n  protected AppendOpcode = OptimizedTrustingAppendOpcode;\n\n  protected normalize(reference: Reference<Opaque>): Reference<TrustingInsertion> {\n    return map(reference, normalizeTrustedValue);\n  }\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: TrustingInsertion): Upsert {\n    return trustingInsert(dom, cursor, value);\n  }\n\n  protected updateWith(vm: VM, reference: Reference<Opaque>, cache: ReferenceCache<TrustingInsertion>, bounds: Fragment, upsert: Upsert): UpdatingOpcode {\n    return new GuardedTrustingUpdateOpcode(reference, cache, bounds, upsert, this, vm.capture());\n  }\n}\n\nclass GuardedTrustingUpdateOpcode extends GuardedUpdateOpcode<TrustingInsertion> {\n  type = 'trusting-update';\n\n  protected insert(dom: DOMTreeConstruction, cursor: Cursor, value: TrustingInsertion): Upsert {\n    return trustingInsert(dom, cursor, value);\n  }\n}\n","import { OpcodeJSON, UpdatingOpcode } from '../../opcodes';\nimport { VM, UpdatingVM } from '../../vm';\nimport * as Simple from '../../dom/interfaces';\nimport { FIX_REIFICATION } from '../../dom/interfaces';\nimport { Environment } from '../../environment';\nimport { FIXME, Option, Opaque, Dict, unwrap, expect } from '@glimmer/util';\nimport {\n  CachedReference,\n  Reference,\n  ReferenceCache,\n  RevisionTag,\n  Revision,\n  PathReference,\n  combineTagged,\n  isConst as isConstReference,\n  isModified\n} from '@glimmer/reference';\nimport { ModifierManager } from '../../modifier/interfaces';\nimport { NULL_REFERENCE, PrimitiveReference } from '../../references';\nimport { CompiledArgs, EvaluatedArgs } from '../../compiled/expressions/args';\nimport { AttributeManager } from '../../dom/attribute-managers';\nimport { ElementOperations } from '../../builder';\nimport { Assert } from './vm';\nimport { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';\n\nAPPEND_OPCODES.add(Op.Text, (vm, { op1: text }) => {\n  vm.stack().appendText(vm.constants.getString(text));\n});\n\nAPPEND_OPCODES.add(Op.Comment, (vm, { op1: text }) => {\n  vm.stack().appendComment(vm.constants.getString(text));\n});\n\nAPPEND_OPCODES.add(Op.OpenElement, (vm, { op1: tag }) => {\n  vm.stack().openElement(vm.constants.getString(tag));\n});\n\nAPPEND_OPCODES.add(Op.PushRemoteElement, vm => {\n  let reference = vm.frame.getOperand<Simple.Element>();\n  let cache = isConstReference(reference) ? undefined : new ReferenceCache(reference);\n  let element = cache ? cache.peek() : reference.value();\n\n  vm.stack().pushRemoteElement(element);\n\n  if (cache) {\n    vm.updateWith(new Assert(cache));\n  }\n});\n\nAPPEND_OPCODES.add(Op.PopRemoteElement, vm => vm.stack().popRemoteElement());\n\nAPPEND_OPCODES.add(Op.OpenComponentElement, (vm, { op1: _tag }) => {\n  let tag = vm.constants.getString(_tag);\n  vm.stack().openElement(tag, new ComponentElementOperations(vm.env));\n});\n\nAPPEND_OPCODES.add(Op.OpenDynamicElement, vm => {\n  let tagName = vm.frame.getOperand<string>().value();\n  vm.stack().openElement(tagName);\n});\n\nclass ClassList {\n  private list: Option<Reference<string>[]> = null;\n  private isConst = true;\n\n  append(reference: Reference<string>) {\n    let { list, isConst } = this;\n\n    if (list === null) list = this.list = [];\n\n    list.push(reference);\n    this.isConst = isConst && isConstReference(reference);\n  }\n\n  toReference(): Reference<Option<string>> {\n    let { list, isConst } = this;\n\n    if (!list) return NULL_REFERENCE;\n\n    if (isConst) return PrimitiveReference.create(toClassName(list));\n\n    return new ClassListReference(list);\n  }\n\n}\n\nclass ClassListReference extends CachedReference<Option<string>> {\n  public tag: RevisionTag;\n  private list: Reference<string>[] = [];\n\n  constructor(list: Reference<string>[]) {\n    super();\n    this.tag = combineTagged(list);\n    this.list = list;\n  }\n\n  protected compute(): Option<string> {\n    return toClassName(this.list);\n  }\n}\n\nfunction toClassName(list: Reference<string>[]): Option<string> {\n  let ret: Opaque[] = [];\n\n  for (let i = 0; i < list.length; i++) {\n    let value: FIXME<Opaque, 'use Opaque and normalize'> = list[i].value();\n    if (value !== false && value !== null && value !== undefined) ret.push(value);\n  }\n\n  return (ret.length === 0) ? null : ret.join(' ');\n}\n\nexport class SimpleElementOperations implements ElementOperations {\n  private opcodes: Option<UpdatingOpcode[]> = null;\n  private classList: Option<ClassList> = null;\n\n  constructor(private env: Environment) {\n  }\n\n  addStaticAttribute(element: Simple.Element, name: string, value: string) {\n    if (name === 'class') {\n      this.addClass(PrimitiveReference.create(value));\n    } else {\n      this.env.getAppendOperations().setAttribute(element, name, value);\n    }\n  }\n\n  addStaticAttributeNS(element: Simple.Element, namespace: string, name: string, value: string) {\n    this.env.getAppendOperations().setAttribute(element, name, value, namespace);\n  }\n\n  addDynamicAttribute(element: Simple.Element, name: string, reference: PathReference<string>, isTrusting: boolean) {\n    if (name === 'class') {\n      this.addClass(reference);\n    } else {\n      let attributeManager = this.env.attributeFor(element, name, isTrusting);\n      let attribute = new DynamicAttribute(element, attributeManager, name, reference);\n\n      this.addAttribute(attribute);\n    }\n  }\n\n  addDynamicAttributeNS(element: Simple.Element, namespace: Simple.Namespace, name: string, reference: PathReference<string>, isTrusting: boolean) {\n    let attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);\n    let nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);\n\n    this.addAttribute(nsAttribute);\n  }\n\n  flush(element: Simple.Element, vm: VM) {\n    let { env } = vm;\n    let { opcodes, classList } = this;\n\n    for (let i = 0; opcodes && i < opcodes.length; i++) {\n      vm.updateWith(opcodes[i]);\n    }\n\n    if (classList) {\n      let attributeManager = env.attributeFor(element, 'class', false);\n      let attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());\n      let opcode = attribute.flush(env);\n\n      if (opcode) {\n        vm.updateWith(opcode);\n      }\n    }\n\n    this.opcodes = null;\n    this.classList = null;\n  }\n\n  private addClass(reference: PathReference<string>) {\n    let { classList } = this;\n\n    if (!classList) {\n      classList = this.classList = new ClassList();\n    }\n\n    classList.append(reference);\n  }\n\n  private addAttribute(attribute: Attribute) {\n    let opcode = attribute.flush(this.env);\n\n    if (opcode) {\n      let { opcodes } = this;\n\n      if (!opcodes) {\n        opcodes = this.opcodes = [];\n      }\n\n      opcodes.push(opcode);\n    }\n  }\n}\n\nexport class ComponentElementOperations implements ElementOperations {\n  private attributeNames: Option<string[]> = null;\n  private attributes: Option<Attribute[]> = null;\n  private classList: Option<ClassList> = null;\n\n  constructor(private env: Environment) {\n  }\n\n  addStaticAttribute(element: Simple.Element, name: string, value: string) {\n    if (name === 'class') {\n      this.addClass(PrimitiveReference.create(value));\n    } else if (this.shouldAddAttribute(name)) {\n      this.addAttribute(name, new StaticAttribute(element, name, value));\n    }\n  }\n\n  addStaticAttributeNS(element: Simple.Element, namespace: string, name: string, value: string) {\n    if (this.shouldAddAttribute(name)) {\n      this.addAttribute(name, new StaticAttribute(element, name, value, namespace));\n    }\n  }\n\n  addDynamicAttribute(element: Simple.Element, name: string, reference: PathReference<string>, isTrusting: boolean) {\n    if (name === 'class') {\n      this.addClass(reference);\n    } else if (this.shouldAddAttribute(name)) {\n      let attributeManager = this.env.attributeFor(element, name, isTrusting);\n      let attribute = new DynamicAttribute(element, attributeManager, name, reference);\n\n      this.addAttribute(name, attribute);\n    }\n  }\n\n  addDynamicAttributeNS(element: Simple.Element, namespace: Simple.Namespace, name: string, reference: PathReference<string>, isTrusting: boolean) {\n    if (this.shouldAddAttribute(name)) {\n      let attributeManager = this.env.attributeFor(element, name, isTrusting, namespace);\n      let nsAttribute = new DynamicAttribute(element, attributeManager, name, reference, namespace);\n\n      this.addAttribute(name, nsAttribute);\n    }\n  }\n\n  flush(element: Simple.Element, vm: VM) {\n    let { env } = this;\n    let { attributes, classList } = this;\n\n    for (let i = 0; attributes && i < attributes.length; i++) {\n      let opcode = attributes[i].flush(env);\n\n      if (opcode) {\n        vm.updateWith(opcode);\n      }\n    }\n\n    if (classList) {\n      let attributeManager = env.attributeFor(element, 'class', false);\n      let attribute = new DynamicAttribute(element, attributeManager, 'class', classList.toReference());\n      let opcode = attribute.flush(env);\n\n      if (opcode) {\n        vm.updateWith(opcode);\n      }\n    }\n  }\n\n  private shouldAddAttribute(name: string): boolean {\n    return !this.attributeNames || this.attributeNames.indexOf(name) === -1;\n  }\n\n  private addClass(reference: PathReference<string>) {\n    let { classList } = this;\n\n    if (!classList) {\n      classList = this.classList = new ClassList();\n    }\n\n    classList.append(reference);\n  }\n\n  private addAttribute(name: string, attribute: Attribute) {\n    let { attributeNames, attributes } = this;\n\n    if (!attributeNames) {\n      attributeNames = this.attributeNames = [];\n      attributes = this.attributes = [];\n    }\n\n    attributeNames.push(name);\n    unwrap(attributes).push(attribute);\n  }\n}\n\nAPPEND_OPCODES.add(Op.FlushElement, vm => {\n  let stack = vm.stack();\n\n  let action = 'FlushElementOpcode#evaluate';\n  stack.expectOperations(action).flush(stack.expectConstructing(action), vm);\n  stack.flushElement();\n});\n\nAPPEND_OPCODES.add(Op.CloseElement, vm => vm.stack().closeElement());\n\nAPPEND_OPCODES.add(Op.PopElement, vm => vm.stack().popElement());\n\nAPPEND_OPCODES.add(Op.StaticAttr, (vm, { op1: _name, op2: _value, op3: _namespace }) => {\n  let name = vm.constants.getString(_name);\n  let value = vm.constants.getString(_value);\n\n  if (_namespace) {\n    let namespace = vm.constants.getString(_namespace);\n    vm.stack().setStaticAttributeNS(namespace, name, value);\n  } else {\n    vm.stack().setStaticAttribute(name, value);\n  }\n});\n\nAPPEND_OPCODES.add(Op.Modifier, (vm, { op1: _name, op2: _manager, op3: _args }) => {\n  let manager = vm.constants.getOther<ModifierManager<Opaque>>(_manager);\n  let rawArgs = vm.constants.getExpression<CompiledArgs>(_args);\n  let stack = vm.stack();\n  let { constructing: element, updateOperations } = stack;\n  let args = rawArgs.evaluate(vm);\n  let dynamicScope = vm.dynamicScope();\n  let modifier = manager.create(element as FIX_REIFICATION<Element>, args, dynamicScope, updateOperations);\n\n  vm.env.scheduleInstallModifier(modifier, manager);\n  let destructor = manager.getDestructor(modifier);\n\n  if (destructor) {\n    vm.newDestroyable(destructor);\n  }\n\n  vm.updateWith(new UpdateModifierOpcode(\n    manager,\n    modifier,\n    args\n  ));\n});\n\nexport class UpdateModifierOpcode extends UpdatingOpcode {\n  public type = \"update-modifier\";\n  private lastUpdated: Revision;\n\n  constructor(\n    private manager: ModifierManager<Opaque>,\n    private modifier: Opaque,\n    private args: EvaluatedArgs\n  ) {\n    super();\n    this.tag = args.tag;\n    this.lastUpdated = args.tag.value();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { manager, modifier, tag, lastUpdated } = this;\n\n    if (!tag.validate(lastUpdated)) {\n      vm.env.scheduleUpdateModifier(modifier, manager);\n      this.lastUpdated = tag.value();\n    }\n  }\n\n  toJSON(): OpcodeJSON {\n    return {\n      guid: this._guid,\n      type: this.type,\n      args: [JSON.stringify(this.args)]\n    };\n  }\n}\n\nexport interface Attribute {\n  name: string;\n  flush(env: Environment): Option<UpdatingOpcode>;\n}\n\nexport class StaticAttribute implements Attribute {\n  constructor(\n    private element: Simple.Element,\n    public name: string,\n    private value: string,\n    private namespace?: string\n  ) {}\n\n  flush(env: Environment): Option<UpdatingOpcode> {\n    env.getAppendOperations().setAttribute(this.element, this.name, this.value, this.namespace);\n    return null;\n  }\n}\n\nexport class DynamicAttribute implements Attribute  {\n  private cache: Option<ReferenceCache<Opaque>> = null;\n\n  public tag: RevisionTag;\n\n  constructor(\n    private element: Simple.Element,\n    private attributeManager: AttributeManager,\n    public name: string,\n    private reference: Reference<Opaque>,\n    private namespace?: Simple.Namespace\n  ) {\n    this.tag = reference.tag;\n  }\n\n  patch(env: Environment) {\n    let { element, cache } = this;\n\n    let value = expect(cache, 'must patch after flush').revalidate();\n\n    if (isModified(value)) {\n      this.attributeManager.updateAttribute(env, element as FIXME<Element, 'needs to be reified properly'>, value, this.namespace);\n    }\n  }\n\n  flush(env: Environment): Option<UpdatingOpcode> {\n    let { reference, element } = this;\n\n    if (isConstReference(reference)) {\n      let value = reference.value();\n      this.attributeManager.setAttribute(env, element, value, this.namespace);\n      return null;\n    } else {\n      let cache = this.cache = new ReferenceCache(reference);\n      let value = cache.peek();\n      this.attributeManager.setAttribute(env, element, value, this.namespace);\n      return new PatchElementOpcode(this);\n    }\n  }\n\n  toJSON(): Dict<Option<string>> {\n    let { element, namespace, name, cache } = this;\n\n    let formattedElement = formatElement(element);\n    let lastValue = expect(cache, 'must serialize after flush').peek() as string;\n\n    if (namespace) {\n      return {\n        element: formattedElement,\n        type: 'attribute',\n        namespace,\n        name,\n        lastValue\n      };\n    }\n\n    return {\n      element: formattedElement,\n      type: 'attribute',\n      namespace: namespace === undefined ? null : namespace,\n      name,\n      lastValue\n    };\n  }\n}\n\nfunction formatElement(element: Simple.Element): string {\n  return JSON.stringify(`<${element.tagName.toLowerCase()} />`);\n}\n\nAPPEND_OPCODES.add(Op.DynamicAttrNS, (vm, { op1: _name, op2: _namespace, op3: trusting }) => {\n  let name = vm.constants.getString(_name);\n  let namespace = vm.constants.getString(_namespace);\n  let reference = vm.frame.getOperand<string>();\n  vm.stack().setDynamicAttributeNS(namespace, name, reference, !!trusting);\n});\n\nAPPEND_OPCODES.add(Op.DynamicAttr, (vm, { op1: _name, op2: trusting }) => {\n  let name = vm.constants.getString(_name);\n  let reference = vm.frame.getOperand<string>();\n  vm.stack().setDynamicAttribute(name, reference, !!trusting);\n});\n\nexport class PatchElementOpcode extends UpdatingOpcode {\n  public type = \"patch-element\";\n\n  private operation: DynamicAttribute;\n\n  constructor(operation: DynamicAttribute) {\n    super();\n    this.tag = operation.tag;\n    this.operation = operation;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    this.operation.patch(vm.env);\n  }\n\n  toJSON(): OpcodeJSON {\n    let { _guid, type, operation } = this;\n\n    return {\n      guid: _guid,\n      type,\n      details: operation.toJSON()\n    };\n  }\n}\n","import { EvaluatedArgs } from '../expressions/args';\nimport { expect } from '@glimmer/util';\nimport { RevisionTag, Reference, ConstReference, ReferenceIterator, IterationArtifacts } from '@glimmer/reference';\nimport { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';\n\nclass IterablePresenceReference implements Reference<boolean> {\n  public tag: RevisionTag;\n  private artifacts: IterationArtifacts;\n\n  constructor(artifacts: IterationArtifacts) {\n    this.tag = artifacts.tag;\n    this.artifacts = artifacts;\n  }\n\n  value(): boolean {\n    return !this.artifacts.isEmpty();\n  }\n}\n\nAPPEND_OPCODES.add(Op.PutIterator, vm => {\n  let listRef = vm.frame.getOperand();\n  let args = expect(vm.frame.getArgs(), 'PutIteratorOpcode expects a populated args register');\n  let iterable = vm.env.iterableFor(listRef, args);\n  let iterator = new ReferenceIterator(iterable);\n\n  vm.frame.setIterator(iterator);\n  vm.frame.setCondition(new IterablePresenceReference(iterator.artifacts));\n});\n\nAPPEND_OPCODES.add(Op.EnterList, (vm, { op1: _slice }) => {\n  vm.enterList(vm.constants.getSlice(_slice));\n});\n\nAPPEND_OPCODES.add(Op.ExitList, vm => vm.exitList());\n\nAPPEND_OPCODES.add(Op.EnterWithKey, (vm, { op2: _slice }) => {\n  let key = expect(vm.frame.getKey(), 'EnterWithKeyOpcode expects a populated key register');\n  let slice = vm.constants.getSlice(_slice);\n  vm.enterWithKey(key, slice);\n});\n\nconst TRUE_REF = new ConstReference(true);\nconst FALSE_REF = new ConstReference(false);\n\nAPPEND_OPCODES.add(Op.NextIter, (vm, { op1: end }) => {\n  let item = vm.frame.getIterator().next();\n\n  if (item) {\n    vm.frame.setCondition(TRUE_REF);\n    vm.frame.setKey(item.key);\n    vm.frame.setOperand(item.value);\n    vm.frame.setArgs(EvaluatedArgs.positional([item.value, item.memo]));\n  } else {\n    vm.frame.setCondition(FALSE_REF);\n    vm.goto(end);\n  }\n});\n","import { Opaque, Dict } from '@glimmer/util';\nimport { ReferenceCache, isConst, map } from '@glimmer/reference';\nimport { Assert } from './vm';\nimport { PartialDefinition } from '../../partial';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { PartialBlock } from '../../scanner';\nimport { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';\n\nAPPEND_OPCODES.add(Op.PutDynamicPartial, (vm, { op1: _symbolTable }) => {\n  let env = vm.env;\n  let symbolTable = vm.constants.getOther<SymbolTable>(_symbolTable);\n\n  function lookupPartial(name: Opaque) {\n    let normalized = String(name);\n\n    if (!env.hasPartial(normalized, symbolTable)) {\n      throw new Error(`Could not find a partial named \"${normalized}\"`);\n    }\n\n    return env.lookupPartial(normalized, symbolTable);\n  }\n\n  let reference = map(vm.frame.getOperand<Opaque>(), lookupPartial);\n  let cache = isConst(reference) ? undefined : new ReferenceCache(reference);\n  let definition = cache ? cache.peek() : reference.value();\n\n  vm.frame.setImmediate(definition);\n\n  if (cache) {\n    vm.updateWith(new Assert(cache));\n  }\n});\n\nAPPEND_OPCODES.add(Op.PutPartial, (vm, { op1: _definition }) => {\n  let definition = vm.constants.getOther<PartialDefinition<Opaque>>(_definition);\n  vm.frame.setImmediate(definition);\n});\n\nAPPEND_OPCODES.add(Op.EvaluatePartial, (vm, { op1: _symbolTable, op2: _cache }) => {\n  let symbolTable = vm.constants.getOther<SymbolTable>(_symbolTable);\n  let cache = vm.constants.getOther<Dict<PartialBlock>>(_cache);\n\n  let { template } = vm.frame.getImmediate<PartialDefinition<Opaque>>();\n\n  let block = cache[template.id];\n\n  if (!block) {\n    block = template.asPartial(symbolTable);\n  }\n\n  vm.invokePartial(block);\n});\n","import { OpcodeJSON, UpdatingOpcode } from '../../opcodes';\nimport { CompiledExpression } from '../expressions';\nimport { CompiledArgs } from '../expressions/args';\nimport { UpdatingVM } from '../../vm';\nimport { Reference, ConstReference } from '@glimmer/reference';\nimport { Option, Opaque, initializeGuid } from '@glimmer/util';\nimport { CONSTANT_TAG, ReferenceCache, Revision, RevisionTag, isConst, isModified } from '@glimmer/reference';\nimport Environment from '../../environment';\nimport { APPEND_OPCODES, OpcodeName as Op } from '../../opcodes';\n\nAPPEND_OPCODES.add(Op.PushChildScope, vm => vm.pushChildScope());\n\nAPPEND_OPCODES.add(Op.PopScope, vm => vm.popScope());\n\nAPPEND_OPCODES.add(Op.PushDynamicScope, vm => vm.pushDynamicScope());\n\nAPPEND_OPCODES.add(Op.PopDynamicScope, vm => vm.popDynamicScope());\n\nAPPEND_OPCODES.add(Op.Put, (vm, { op1: reference }) => {\n  vm.frame.setOperand(vm.constants.getReference(reference));\n});\n\nAPPEND_OPCODES.add(Op.EvaluatePut, (vm, { op1: expression }) => {\n  let expr = vm.constants.getExpression<CompiledExpression<Opaque>>(expression);\n  vm.evaluateOperand(expr);\n});\n\nAPPEND_OPCODES.add(Op.PutArgs, (vm, { op1: args }) => {\n  vm.evaluateArgs(vm.constants.getExpression<CompiledArgs>(args));\n});\n\nAPPEND_OPCODES.add(Op.BindPositionalArgs, (vm, { op1: _symbols }) => {\n  let symbols = vm.constants.getArray(_symbols);\n  vm.bindPositionalArgs(symbols);\n});\n\nAPPEND_OPCODES.add(Op.BindNamedArgs, (vm, { op1: _names, op2: _symbols }) => {\n  let names = vm.constants.getArray(_names);\n  let symbols = vm.constants.getArray(_symbols);\n  vm.bindNamedArgs(names, symbols);\n});\n\nAPPEND_OPCODES.add(Op.BindBlocks, (vm, { op1: _names, op2: _symbols }) => {\n  let names = vm.constants.getArray(_names);\n  let symbols = vm.constants.getArray(_symbols);\n  vm.bindBlocks(names, symbols);\n});\n\nAPPEND_OPCODES.add(Op.BindPartialArgs, (vm, { op1: symbol }) => {\n  vm.bindPartialArgs(symbol);\n});\n\nAPPEND_OPCODES.add(Op.BindCallerScope, vm => vm.bindCallerScope());\n\nAPPEND_OPCODES.add(Op.BindDynamicScope, (vm, { op1: _names }) => {\n  let names = vm.constants.getArray(_names);\n  vm.bindDynamicScope(names);\n});\n\nAPPEND_OPCODES.add(Op.Enter, (vm, { op1: slice }) => vm.enter(slice));\n\nAPPEND_OPCODES.add(Op.Exit, (vm) => vm.exit());\n\nAPPEND_OPCODES.add(Op.Evaluate, (vm, { op1: _block }) => {\n  let block = vm.constants.getBlock(_block);\n  let args = vm.frame.getArgs();\n  vm.invokeBlock(block, args);\n});\n\nAPPEND_OPCODES.add(Op.Jump, (vm, { op1: target }) => vm.goto(target));\n\nAPPEND_OPCODES.add(Op.JumpIf, (vm, { op1: target }) => {\n  let reference = vm.frame.getCondition();\n\n  if (isConst(reference)) {\n    if (reference.value()) {\n      vm.goto(target);\n    }\n  } else {\n    let cache = new ReferenceCache(reference);\n\n    if (cache.peek()) {\n      vm.goto(target);\n    }\n\n    vm.updateWith(new Assert(cache));\n  }\n});\n\nAPPEND_OPCODES.add(Op.JumpUnless, (vm, { op1: target }) => {\n  let reference = vm.frame.getCondition();\n\n  if (isConst(reference)) {\n    if (!reference.value()) {\n      vm.goto(target);\n    }\n  } else {\n    let cache = new ReferenceCache(reference);\n\n    if (!cache.peek()) {\n      vm.goto(target);\n    }\n\n    vm.updateWith(new Assert(cache));\n  }\n});\n\nexport type TestFunction = (ref: Reference<Opaque>, env: Environment) => Reference<boolean>;\n\nexport const ConstTest: TestFunction = function(ref: Reference<Opaque>, _env: Environment): Reference<boolean> {\n  return new ConstReference(!!ref.value());\n};\n\nexport const SimpleTest: TestFunction = function(ref: Reference<Opaque>, _env: Environment): Reference<boolean> {\n  return ref as Reference<boolean>;\n};\n\nexport const EnvironmentTest: TestFunction = function(ref: Reference<Opaque>, env: Environment): Reference<boolean> {\n  return env.toConditionalReference(ref);\n};\n\nAPPEND_OPCODES.add(Op.Test, (vm, { op1: _func }) => {\n  let operand = vm.frame.getOperand();\n  let func = vm.constants.getFunction(_func);\n  vm.frame.setCondition(func(operand, vm.env));\n});\n\nexport class Assert extends UpdatingOpcode {\n  public type = \"assert\";\n\n  private cache: ReferenceCache<Opaque>;\n\n  constructor(cache: ReferenceCache<Opaque>) {\n    super();\n    this.tag = cache.tag;\n    this.cache = cache;\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { cache } = this;\n\n    if (isModified(cache.revalidate())) {\n      vm.throw();\n    }\n  }\n\n  toJSON(): OpcodeJSON {\n    let { type, _guid, cache } = this;\n\n    let expected;\n\n    try {\n      expected = JSON.stringify(cache.peek());\n    } catch(e) {\n      expected = String(cache.peek());\n    }\n\n    return {\n      guid: _guid,\n      type,\n      args: [],\n      details: { expected }\n    };\n  }\n}\n\nexport class JumpIfNotModifiedOpcode extends UpdatingOpcode {\n  public type = \"jump-if-not-modified\";\n\n  private lastRevision: Revision;\n\n  constructor(tag: RevisionTag, private target: LabelOpcode) {\n    super();\n    this.tag = tag;\n    this.lastRevision = tag.value();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { tag, target, lastRevision } = this;\n\n    if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {\n      vm.goto(target);\n    }\n  }\n\n  didModify() {\n    this.lastRevision = this.tag.value();\n  }\n\n  toJSON(): OpcodeJSON {\n    return {\n      guid: this._guid,\n      type: this.type,\n      args: [JSON.stringify(this.target.inspect())]\n    };\n  }\n}\n\nexport class DidModifyOpcode extends UpdatingOpcode {\n  public type = \"did-modify\";\n\n  constructor(private target: JumpIfNotModifiedOpcode) {\n    super();\n    this.tag = CONSTANT_TAG;\n  }\n\n  evaluate() {\n    this.target.didModify();\n  }\n}\n\nexport class LabelOpcode implements UpdatingOpcode {\n  public tag = CONSTANT_TAG;\n  public type = \"label\";\n  public label: Option<string> = null;\n  public _guid: number;\n\n  prev: any = null;\n  next: any = null;\n\n  constructor(label: string) {\n    initializeGuid(this);\n    if (label) this.label = label;\n  }\n\n  evaluate() {}\n\n  inspect(): string {\n    return `${this.label} [${this._guid}]`;\n  }\n\n  toJSON(): OpcodeJSON {\n    return {\n      guid: this._guid,\n      type: this.type,\n      args: [JSON.stringify(this.inspect())]\n    };\n  }\n}\n","import { Environment } from './environment';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { CompiledProgram } from './compiled/blocks';\nimport { Maybe, Option } from '@glimmer/util';\n\nimport {\n  BaselineSyntax,\n  Layout,\n  InlineBlock,\n  compileStatement\n} from './scanner';\n\nimport {\n  ComponentBuilder as IComponentBuilder,\n  DynamicDefinition,\n  StaticDefinition\n} from './opcode-builder';\n\nimport {\n  compileArgs,\n  compileBaselineArgs\n} from './syntax/functions';\n\nimport {\n  FunctionExpression\n} from './compiled/expressions/function';\n\nimport OpcodeBuilderDSL from './compiled/opcodes/builder';\n\nimport * as Component from './component/interfaces';\n\nimport * as WireFormat from '@glimmer/wire-format';\n\nexport interface CompilableLayout {\n  compile(builder: Component.ComponentLayoutBuilder): void;\n}\n\nexport function compileLayout(compilable: CompilableLayout, env: Environment): CompiledProgram {\n  let builder = new ComponentLayoutBuilder(env);\n\n  compilable.compile(builder);\n\n  return builder.compile();\n}\n\nclass ComponentLayoutBuilder implements Component.ComponentLayoutBuilder {\n  private inner: WrappedBuilder | UnwrappedBuilder;\n\n  constructor(public env: Environment) {}\n\n  wrapLayout(layout: Layout) {\n    this.inner = new WrappedBuilder(this.env, layout);\n  }\n\n  fromLayout(layout: Layout) {\n    this.inner = new UnwrappedBuilder(this.env, layout);\n  }\n\n  compile(): CompiledProgram {\n    return this.inner.compile();\n  }\n\n  get tag(): Component.ComponentTagBuilder {\n    return this.inner.tag;\n  }\n\n  get attrs(): Component.ComponentAttrsBuilder {\n    return this.inner.attrs;\n  }\n}\n\nclass WrappedBuilder {\n  public tag = new ComponentTagBuilder();\n  public attrs = new ComponentAttrsBuilder();\n\n  constructor(public env: Environment, private layout: Layout) {}\n\n  compile(): CompiledProgram {\n    //========DYNAMIC\n    //        PutValue(TagExpr)\n    //        Test\n    //        JumpUnless(BODY)\n    //        OpenDynamicPrimitiveElement\n    //        DidCreateElement\n    //        ...attr statements...\n    //        FlushElement\n    // BODY:  Noop\n    //        ...body statements...\n    //        PutValue(TagExpr)\n    //        Test\n    //        JumpUnless(END)\n    //        CloseElement\n    // END:   Noop\n    //        DidRenderLayout\n    //        Exit\n    //\n    //========STATIC\n    //        OpenPrimitiveElementOpcode\n    //        DidCreateElement\n    //        ...attr statements...\n    //        FlushElement\n    //        ...body statements...\n    //        CloseElement\n    //        DidRenderLayout\n    //        Exit\n\n    let { env, layout } = this;\n\n    let symbolTable = layout.symbolTable;\n    let b = builder(env, layout.symbolTable);\n\n    b.startLabels();\n\n    let dynamicTag = this.tag.getDynamic();\n    let staticTag: Maybe<string>;\n\n    if (dynamicTag) {\n      b.putValue(dynamicTag);\n      b.test('simple');\n      b.jumpUnless('BODY');\n      b.openDynamicPrimitiveElement();\n      b.didCreateElement();\n      this.attrs['buffer'].forEach(statement => compileStatement(statement, b));\n      b.flushElement();\n      b.label('BODY');\n    } else if (staticTag = this.tag.getStatic()) {\n      b.openPrimitiveElement(staticTag);\n      b.didCreateElement();\n      this.attrs['buffer'].forEach(statement => compileStatement(statement, b));\n      b.flushElement();\n    }\n\n    b.preludeForLayout(layout);\n\n    layout.statements.forEach(statement => compileStatement(statement, b));\n\n    if (dynamicTag) {\n      b.putValue(dynamicTag);\n      b.test('simple');\n      b.jumpUnless('END');\n      b.closeElement();\n      b.label('END');\n    } else if (staticTag) {\n      b.closeElement();\n    }\n\n    b.didRenderLayout();\n    b.stopLabels();\n\n    return new CompiledProgram(b.toSlice(), symbolTable.size);\n  }\n}\n\nfunction isOpenElement(value: BaselineSyntax.AnyStatement): value is (BaselineSyntax.OpenPrimitiveElement | WireFormat.Statements.OpenElement) {\n  let type = value[0];\n  return type === 'open-element' || type === 'open-primitive-element';\n}\n\nclass UnwrappedBuilder {\n  public attrs = new ComponentAttrsBuilder();\n\n  constructor(public env: Environment, private layout: Layout) {}\n\n  get tag(): Component.ComponentTagBuilder {\n    throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');\n  }\n\n  compile(): CompiledProgram {\n    let { env, layout } = this;\n\n    let b = builder(env, layout.symbolTable);\n\n    b.startLabels();\n\n    b.preludeForLayout(layout);\n\n    let attrs = this.attrs['buffer'];\n    let attrsInserted = false;\n\n    for (let i = 0; i < layout.statements.length; i++) {\n      let statement = layout.statements[i];\n      if (!attrsInserted && isOpenElement(statement)) {\n        b.openComponentElement(statement[1]);\n        b.didCreateElement();\n        b.shadowAttributes();\n        attrs.forEach(statement => compileStatement(statement, b));\n        attrsInserted = true;\n      } else {\n        compileStatement(statement, b);\n      }\n    }\n\n    b.didRenderLayout();\n    b.stopLabels();\n\n    return new CompiledProgram(b.toSlice(), layout.symbolTable.size);\n  }\n}\n\nclass ComponentTagBuilder implements Component.ComponentTagBuilder {\n  public isDynamic: Option<boolean> = null;\n  public isStatic: Option<boolean> = null;\n  public staticTagName: Option<string> = null;\n  public dynamicTagName: Option<BaselineSyntax.AnyExpression> = null;\n\n  getDynamic(): Maybe<BaselineSyntax.AnyExpression> {\n    if (this.isDynamic) {\n      return this.dynamicTagName;\n    }\n  }\n\n  getStatic(): Maybe<string> {\n    if (this.isStatic) {\n      return this.staticTagName;\n    }\n  }\n\n  static(tagName: string) {\n    this.isStatic = true;\n    this.staticTagName = tagName;\n  }\n\n  dynamic(tagName: FunctionExpression<string>) {\n    this.isDynamic = true;\n    this.dynamicTagName = ['function', tagName];\n  }\n}\n\nclass ComponentAttrsBuilder implements Component.ComponentAttrsBuilder {\n  private buffer: WireFormat.Statements.Attribute[] = [];\n\n  static(name: string, value: string) {\n    this.buffer.push(['static-attr', name, value, null]);\n  }\n\n  dynamic(name: string, value: FunctionExpression<string>) {\n    this.buffer.push(['dynamic-attr', name, ['function', value], null]);\n  }\n}\n\nexport class ComponentBuilder implements IComponentBuilder {\n  private env: Environment;\n\n  constructor(private builder: OpcodeBuilderDSL) {\n    this.env = builder.env;\n  }\n\n  static(definition: StaticDefinition, args: BaselineSyntax.Args, _symbolTable: SymbolTable, shadow: InlineBlock) {\n    this.builder.unit(b => {\n      b.putComponentDefinition(definition);\n      b.openComponent(compileBaselineArgs(args, b), shadow);\n      b.closeComponent();\n    });\n  }\n\n  dynamic(definitionArgs: BaselineSyntax.Args, definition: DynamicDefinition, args: BaselineSyntax.Args, _symbolTable: SymbolTable, shadow: InlineBlock) {\n    this.builder.unit(b => {\n      b.putArgs(compileArgs(definitionArgs[0], definitionArgs[1], b));\n      b.putValue(['function', definition]);\n      b.test('simple');\n      b.enter('BEGIN', 'END');\n      b.label('BEGIN');\n      b.jumpUnless('END');\n      b.putDynamicComponentDefinition();\n      b.openComponent(compileBaselineArgs(args, b), shadow);\n      b.closeComponent();\n      b.label('END');\n      b.exit();\n    });\n  }\n}\n\nexport function builder<S extends SymbolTable>(env: Environment, symbolTable: S) {\n  return new OpcodeBuilderDSL(symbolTable, env);\n}\n","import { EvaluatedArgs } from '../compiled/expressions/args';\nimport { FunctionExpression } from '../compiled/expressions/function';\nimport { CompiledProgram } from '../compiled/blocks';\nimport { Layout } from '../scanner';\n\nimport Environment, { DynamicScope } from '../environment';\nimport { ElementOperations } from '../builder';\nimport Bounds from '../bounds';\nimport * as Simple from '../dom/interfaces';\n\nimport { Destroyable, Opaque } from '@glimmer/util';\nimport { PathReference, RevisionTag } from '@glimmer/reference';\n\nexport type Component = Opaque;\nexport type ComponentClass = any;\n\nexport interface ComponentManager<T extends Component> {\n  // First, the component manager is asked to prepare the arguments needed\n  // for `create`. This allows for things like closure components where the\n  // args need to be curried before constructing the instance of the state\n  // bucket.\n  prepareArgs(definition: ComponentDefinition<T>, args: EvaluatedArgs, dynamicScope: DynamicScope): EvaluatedArgs;\n\n  // Then, the component manager is asked to create a bucket of state for\n  // the supplied arguments. From the perspective of Glimmer, this is\n  // an opaque token, but in practice it is probably a component object.\n  create(env: Environment, definition: ComponentDefinition<T>, args: EvaluatedArgs, dynamicScope: DynamicScope, caller: PathReference<Opaque>, hasDefaultBlock: boolean): T;\n\n  // Return the compiled layout to use for this component. This is called\n  // *after* the component instance has been created, because you might\n  // want to return a different layout per-instance for optimization reasons\n  // or to implement features like Ember's \"late-bound\" layouts.\n  layoutFor(definition: ComponentDefinition<T>, component: T, env: Environment): CompiledProgram;\n\n  // Next, Glimmer asks the manager to create a reference for the `self`\n  // it should use in the layout.\n  getSelf(component: T): PathReference<Opaque>;\n\n  // The `didCreateElement` hook is run for non-tagless components after the\n  // element as been created, but before it has been appended (\"flushed\") to\n  // the DOM. This hook allows the manager to save off the element, as well as\n  // install other dynamic attributes via the ElementOperations object.\n  //\n  // Hosts should use `didCreate`, which runs asynchronously after the rendering\n  // process, to provide hooks for user code.\n  didCreateElement(component: T, element: Simple.Element, operations: ElementOperations): void;\n\n  // This hook is run after the entire layout has been rendered.\n  //\n  // Hosts should use `didCreate`, which runs asynchronously after the rendering\n  // process, to provide hooks for user code.\n  didRenderLayout(component: T, bounds: Bounds): void;\n\n  // Once the whole top-down rendering process is complete, Glimmer invokes\n  // the `didCreate` callbacks.\n  didCreate(component: T): void;\n\n  // Convert the opaque component into a `RevisionTag` that determins when\n  // the component's update hooks need to be called, in addition to any\n  // outside changes captured in the input arguments. If it returns null,\n  // the update hooks will only be called when one or more of the input\n  // arguments has changed.\n  getTag(component: T): RevisionTag;\n\n  // When the input arguments have changed, and top-down revalidation has\n  // begun, the manager's `update` hook is called.\n  update(component: T, args: EvaluatedArgs, dynamicScope: DynamicScope): void;\n\n  // This hook is run after the entire layout has been updated.\n  //\n  // Hosts should use `didUpdate`, which runs asynchronously after the rendering\n  // process, to provide hooks for user code.\n  didUpdateLayout(component: T, bounds: Bounds): void;\n\n  // Finally, once top-down revalidation has completed, Glimmer invokes\n  // the `didUpdate` callbacks on components that changed.\n  didUpdate(component: T): void;\n\n  // Convert the opaque component into an object that implements Destroyable.\n  // If it returns null, the component will not be destroyed.\n  getDestructor(component: T): Destroyable;\n}\n\nexport interface ComponentLayoutBuilder {\n  env: Environment;\n  tag: ComponentTagBuilder;\n  attrs: ComponentAttrsBuilder;\n\n  wrapLayout(layout: Layout): void;\n  fromLayout(layout: Layout): void;\n}\n\nexport interface ComponentTagBuilder {\n  static(tagName: string): void;\n  dynamic(tagName: FunctionExpression<string>): void;\n}\n\nexport interface ComponentAttrsBuilder {\n  static(name: string, value: string): void;\n  dynamic(name: string, value: FunctionExpression<string>): void;\n}\n\nconst COMPONENT_DEFINITION_BRAND = 'COMPONENT DEFINITION [id=e59c754e-61eb-4392-8c4a-2c0ac72bfcd4]';\n\nexport function isComponentDefinition(obj: any): obj is ComponentDefinition<Opaque> {\n  return typeof obj === 'object' && obj && obj[COMPONENT_DEFINITION_BRAND];\n}\n\nexport abstract class ComponentDefinition<T> {\n  public name: string; // for debugging\n  public manager: ComponentManager<T>;\n  public ComponentClass: ComponentClass;\n\n  constructor(name: string, manager: ComponentManager<T>, ComponentClass: ComponentClass) {\n    this[COMPONENT_DEFINITION_BRAND] = true;\n    this.name = name;\n    this.manager = manager;\n    this.ComponentClass = ComponentClass;\n  }\n}\n","import { FIXME, Opaque, Option, Maybe } from '@glimmer/util';\nimport { DOMNamespace } from './helper';\nimport * as Simple from './interfaces';\nimport {\n  sanitizeAttributeValue,\n  requiresSanitization\n} from './sanitized-values';\nimport { normalizeProperty } from './props';\nimport { SVG_NAMESPACE } from './helper';\nimport { normalizeTextValue } from '../compiled/opcodes/content';\nimport { Environment } from '../environment';\n\nexport function defaultManagers(element: Simple.Element, attr: string, _isTrusting: boolean, _namespace: Option<string>): AttributeManager {\n  let tagName = element.tagName;\n  let isSVG = element.namespaceURI === SVG_NAMESPACE;\n\n  if (isSVG) {\n    return defaultAttributeManagers(tagName, attr);\n  }\n\n  let { type, normalized } = normalizeProperty(element, attr);\n\n  if (type === 'attr') {\n    return defaultAttributeManagers(tagName, normalized);\n  } else {\n    return defaultPropertyManagers(tagName, normalized);\n  }\n}\n\nexport function defaultPropertyManagers(tagName: string, attr: string): AttributeManager {\n  if (requiresSanitization(tagName, attr)) {\n    return new SafePropertyManager(attr);\n  }\n\n  if (isUserInputValue(tagName, attr)) {\n    return INPUT_VALUE_PROPERTY_MANAGER;\n  }\n\n  if (isOptionSelected(tagName, attr)) {\n    return OPTION_SELECTED_MANAGER;\n  }\n\n  return new PropertyManager(attr);\n}\n\nexport function defaultAttributeManagers(tagName: string, attr: string): AttributeManager {\n  if (requiresSanitization(tagName, attr)) {\n    return new SafeAttributeManager(attr);\n  }\n\n  return new AttributeManager(attr);\n}\n\nexport function readDOMAttr(element: Element, attr: string) {\n  let isSVG = element.namespaceURI === SVG_NAMESPACE;\n  let { type, normalized } = normalizeProperty(element, attr);\n\n  if (isSVG) {\n    return element.getAttribute(normalized);\n  }\n\n  if (type === 'attr') {\n    return element.getAttribute(normalized);\n  } {\n    return element[normalized];\n  }\n};\n\nexport class AttributeManager {\n  constructor(public attr: string) {}\n\n  setAttribute(env: Environment, element: Simple.Element, value: Opaque, namespace?: DOMNamespace) {\n    let dom = env.getAppendOperations();\n    let normalizedValue = normalizeAttributeValue(value);\n\n    if (!isAttrRemovalValue(normalizedValue)) {\n      dom.setAttribute(element, this.attr, normalizedValue, namespace);\n    }\n  }\n\n  updateAttribute(env: Environment, element: Element, value: Opaque, namespace?: DOMNamespace) {\n    if (value === null || value === undefined || value === false) {\n      if (namespace) {\n        env.getDOM().removeAttributeNS(element, namespace, this.attr);\n      } else {\n        env.getDOM().removeAttribute(element, this.attr);\n      }\n    } else {\n      this.setAttribute(env, element, value);\n    }\n  }\n};\n\nexport class PropertyManager extends AttributeManager {\n  setAttribute(_env: Environment, element: Simple.Element, value: Opaque, _namespace?: DOMNamespace) {\n    if (!isAttrRemovalValue(value)) {\n      element[this.attr] = value;\n    }\n  }\n\n  protected removeAttribute(env: Environment, element: Element, namespace?: DOMNamespace) {\n    // TODO this sucks but to preserve properties first and to meet current\n    // semantics we must do this.\n    let { attr } = this;\n    if (namespace) {\n      env.getDOM().removeAttributeNS(element, namespace, attr);\n    } else {\n      env.getDOM().removeAttribute(element, attr);\n    }\n  }\n\n  updateAttribute(env: Environment, element: Element, value: Opaque, namespace?: DOMNamespace) {\n    // ensure the property is always updated\n    element[this.attr] = value;\n\n    if (isAttrRemovalValue(value)) {\n      this.removeAttribute(env, element, namespace);\n    }\n  }\n};\n\nfunction normalizeAttributeValue(value: Opaque): Option<string> {\n  if (value === false || value === undefined || value === null) {\n    return null;\n  }\n  if (value === true) {\n    return '';\n  }\n  // onclick function etc in SSR\n  if (typeof value === 'function') {\n    return null;\n  }\n\n  return String(value);\n}\n\nfunction isAttrRemovalValue<T>(value: Maybe<T>): value is (null | undefined) {\n  return value === null || value === undefined;\n}\n\nclass SafePropertyManager extends PropertyManager {\n  setAttribute(env: Environment, element: Simple.Element, value: Opaque) {\n    super.setAttribute(env, element, sanitizeAttributeValue(env, element, this.attr, value));\n  }\n\n  updateAttribute(env: Environment, element: Element, value: Opaque) {\n    super.updateAttribute(env, element, sanitizeAttributeValue(env, element, this.attr, value));\n  }\n}\n\nfunction isUserInputValue(tagName: string, attribute: string) {\n  return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';\n}\n\nclass InputValuePropertyManager extends AttributeManager {\n  setAttribute(_env: Environment, element: Simple.Element, value: Opaque) {\n    let input = element as FIXME<HTMLInputElement, \"This breaks SSR\">;\n    input.value = normalizeTextValue(value);\n  }\n\n  updateAttribute(_env: Environment, element: Element, value: Opaque) {\n    let input = <HTMLInputElement>element;\n    let currentValue = input.value;\n    let normalizedValue = normalizeTextValue(value);\n    if (currentValue !== normalizedValue) {\n      input.value = normalizedValue;\n    }\n  }\n}\n\nexport const INPUT_VALUE_PROPERTY_MANAGER: AttributeManager = new InputValuePropertyManager('value');\n\nfunction isOptionSelected(tagName: string, attribute: string) {\n  return tagName === 'OPTION' && attribute === 'selected';\n}\n\nclass OptionSelectedManager extends PropertyManager {\n  setAttribute(_env: Environment, element: Simple.Element, value: Opaque) {\n    if (value !== null && value !== undefined && value !== false) {\n      let option = <HTMLOptionElement>element;\n      option.selected = true;\n    }\n  }\n\n  updateAttribute(_env: Environment, element: Element, value: Opaque) {\n    let option = <HTMLOptionElement>element;\n\n    if (value) {\n      option.selected = true;\n    } else {\n      option.selected = false;\n    }\n  }\n}\n\nexport const OPTION_SELECTED_MANAGER: AttributeManager = new OptionSelectedManager('selected');\n\nclass SafeAttributeManager extends AttributeManager {\n  setAttribute(env: Environment, element: Element, value: Opaque) {\n    super.setAttribute(env, element, sanitizeAttributeValue(env, element, this.attr, value));\n  }\n\n  updateAttribute(env: Environment, element: Element, value: Opaque, _namespace?: DOMNamespace) {\n    super.updateAttribute(env, element, sanitizeAttributeValue(env, element, this.attr, value));\n  }\n}\n","import { ConcreteBounds, SingleNodeBounds, Bounds } from '../bounds';\nimport {\n  domChanges as domChangesTableElementFix,\n  treeConstruction as treeConstructionTableElementFix\n} from '../compat/inner-html-fix';\nimport {\n  domChanges as domChangesSvgElementFix,\n  treeConstruction as treeConstructionSvgElementFix\n} from '../compat/svg-inner-html-fix';\nimport {\n  domChanges as domChangesNodeMergingFix,\n  treeConstruction as treeConstructionNodeMergingFix\n} from '../compat/text-node-merging-fix';\nimport * as Simple from './interfaces';\n\nimport { Option } from '@glimmer/util';\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\n// http://www.w3.org/TR/html/syntax.html#html-integration-point\nconst SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };\n\n// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes\n// TODO: Adjust SVG attributes\n\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n// TODO: Adjust SVG elements\n\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\nexport const BLACKLIST_TABLE = Object.create(null);\n\n([\n  \"b\", \"big\", \"blockquote\", \"body\", \"br\", \"center\", \"code\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"embed\",\n  \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"hr\", \"i\", \"img\", \"li\", \"listing\", \"main\", \"meta\", \"nobr\",\n  \"ol\", \"p\", \"pre\", \"ruby\", \"s\", \"small\", \"span\", \"strong\", \"strike\", \"sub\", \"sup\", \"table\", \"tt\", \"u\",\n  \"ul\", \"var\"\n]).forEach(tag => BLACKLIST_TABLE[tag] = 1);\n\nconst WHITESPACE = /[\\t-\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/;\n\nlet doc: Option<Document> = typeof document === 'undefined' ? null : document;\n\nexport function isWhitespace(string: string) {\n  return WHITESPACE.test(string);\n}\n\nexport function moveNodesBefore(source: Simple.Node, target: Simple.Element, nextSibling: Simple.Node) {\n  let first = source.firstChild;\n  let last = null;\n  let current = first;\n  while (current) {\n    last = current;\n    current = current.nextSibling;\n    target.insertBefore(last, nextSibling);\n  }\n  return [first, last];\n}\n\nexport namespace DOM {\n  export type Node = Simple.Node;\n  export type Element = Simple.Element;\n  export type Document = Simple.Document;\n  export type Comment = Simple.Comment;\n  export type Text = Simple.Text;\n  export type Namespace = Simple.Namespace;\n  export type HTMLElement = Simple.HTMLElement;\n\n  export class TreeConstruction {\n    protected uselessElement: HTMLElement;\n    constructor(protected document: Document) {\n      this.setupUselessElement();\n    }\n\n    protected setupUselessElement() {\n      this.uselessElement = this.document.createElement('div');\n    }\n\n    createElement(tag: string, context?: Element): Element {\n      let isElementInSVGNamespace, isHTMLIntegrationPoint;\n\n      if (context) {\n        isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE || tag === 'svg';\n        isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];\n      } else {\n        isElementInSVGNamespace = tag === 'svg';\n        isHTMLIntegrationPoint = false;\n      }\n\n      if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n        // FIXME: This does not properly handle <font> with color, face, or\n        // size attributes, which is also disallowed by the spec. We should fix\n        // this.\n        if (BLACKLIST_TABLE[tag]) {\n          throw new Error(`Cannot create a ${tag} inside an SVG context`);\n        }\n\n        return this.document.createElementNS(SVG_NAMESPACE as Namespace, tag);\n      } else {\n        return this.document.createElement(tag);\n      }\n    }\n\n    createElementNS(namespace: Namespace, tag: string): Element {\n      return this.document.createElementNS(namespace, tag);\n    }\n\n    setAttribute(element: Element, name: string, value: string, namespace?: string) {\n      if (namespace) {\n        element.setAttributeNS(namespace, name, value);\n      } else {\n        element.setAttribute(name, value);\n      }\n    }\n\n    createTextNode(text: string): Text {\n      return this.document.createTextNode(text);\n    }\n\n    createComment(data: string): Comment {\n      return this.document.createComment(data);\n    }\n\n    insertBefore(parent: Element, node: Node, reference: Option<Node>) {\n      parent.insertBefore(node, reference);\n    }\n\n    insertHTMLBefore(parent: Element, html: string, reference: Option<Node>): Bounds {\n      return insertHTMLBefore(this.uselessElement, parent, reference, html);\n    };\n  }\n\n  let appliedTreeContruction = TreeConstruction;\n  appliedTreeContruction = treeConstructionNodeMergingFix(doc, appliedTreeContruction);\n  appliedTreeContruction = treeConstructionTableElementFix(doc, appliedTreeContruction);\n  appliedTreeContruction = treeConstructionSvgElementFix(doc, appliedTreeContruction, SVG_NAMESPACE);\n\n  export const DOMTreeConstruction = appliedTreeContruction;\n  export type DOMTreeConstruction = TreeConstruction;\n}\n\nexport class DOMChanges {\n  protected namespace: Option<string>;\n  private uselessElement: HTMLElement;\n\n  constructor(protected document: HTMLDocument) {\n    this.namespace = null;\n    this.uselessElement = this.document.createElement('div');\n  }\n\n  setAttribute(element: Simple.Element, name: string, value: string) {\n    element.setAttribute(name, value);\n  }\n\n  setAttributeNS(element: Simple.Element, namespace: string, name: string, value: string) {\n    element.setAttributeNS(namespace, name, value);\n  }\n\n  removeAttribute(element: Simple.Element, name: string) {\n    element.removeAttribute(name);\n  }\n\n  removeAttributeNS(element: Simple.Element, namespace: string, name: string) {\n    element.removeAttributeNS(namespace, name);\n  }\n\n  createTextNode(text: string): Simple.Text {\n    return this.document.createTextNode(text);\n  }\n\n  createComment(data: string): Simple.Comment {\n    return this.document.createComment(data);\n  }\n\n  createElement(tag: string, context?: Simple.Element): Simple.Element {\n    let isElementInSVGNamespace, isHTMLIntegrationPoint;\n\n    if (context) {\n      isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE || tag === 'svg';\n      isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];\n    } else {\n      isElementInSVGNamespace = tag === 'svg';\n      isHTMLIntegrationPoint = false;\n    }\n\n    if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n      // FIXME: This does not properly handle <font> with color, face, or\n      // size attributes, which is also disallowed by the spec. We should fix\n      // this.\n      if (BLACKLIST_TABLE[tag]) {\n        throw new Error(`Cannot create a ${tag} inside an SVG context`);\n      }\n\n      return this.document.createElementNS(SVG_NAMESPACE as Simple.Namespace, tag);\n    } else {\n      return this.document.createElement(tag);\n    }\n  }\n\n  insertHTMLBefore(_parent: Element, nextSibling: Node, html: string): Bounds {\n    return insertHTMLBefore(this.uselessElement, _parent, nextSibling, html);\n  }\n\n  insertNodeBefore(parent: Simple.Element, node: Simple.Node, reference: Simple.Node): Bounds {\n    if (isDocumentFragment(node)) {\n      let { firstChild, lastChild } = node;\n      this.insertBefore(parent, node, reference);\n      return new ConcreteBounds(parent, firstChild, lastChild);\n    } else {\n      this.insertBefore(parent, node, reference);\n      return new SingleNodeBounds(parent, node);\n    }\n  }\n\n  insertTextBefore(parent: Simple.Element, nextSibling: Simple.Node, text: string): Simple.Text {\n    let textNode = this.createTextNode(text);\n    this.insertBefore(parent, textNode, nextSibling);\n    return textNode;\n  }\n\n  insertBefore(element: Simple.Element, node: Simple.Node, reference: Option<Simple.Node>) {\n    element.insertBefore(node, reference);\n  }\n\n  insertAfter(element: Simple.Element, node: Simple.Node, reference: Simple.Node) {\n    this.insertBefore(element, node, reference.nextSibling);\n  }\n}\n\nexport function insertHTMLBefore(this: void, _useless: Simple.HTMLElement, _parent: Simple.Element, _nextSibling: Option<Simple.Node>, html: string): Bounds { // tslint:disable-line\n  // TypeScript vendored an old version of the DOM spec where `insertAdjacentHTML`\n  // only exists on `HTMLElement` but not on `Element`. We actually work with the\n  // newer version of the DOM API here (and monkey-patch this method in `./compat`\n  // when we detect older browsers). This is a hack to work around this limitation.\n  let parent = _parent as HTMLElement;\n  let useless = _useless as HTMLElement;\n  let nextSibling = _nextSibling as Node;\n\n  let prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n  let last;\n\n  if (html === null || html === '') {\n    return new ConcreteBounds(parent, null, null);\n  }\n\n  if (nextSibling === null) {\n    parent.insertAdjacentHTML('beforeEnd', html);\n    last = parent.lastChild;\n  } else if (nextSibling instanceof HTMLElement) {\n    nextSibling.insertAdjacentHTML('beforeBegin', html);\n    last = nextSibling.previousSibling;\n  } else {\n    // Non-element nodes do not support insertAdjacentHTML, so add an\n    // element and call it on that element. Then remove the element.\n    //\n    // This also protects Edge, IE and Firefox w/o the inspector open\n    // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts\n    parent.insertBefore(useless, nextSibling);\n    useless.insertAdjacentHTML('beforeBegin', html);\n    last = useless.previousSibling;\n    parent.removeChild(useless);\n  }\n\n  let first = prev ? prev.nextSibling : parent.firstChild;\n  return new ConcreteBounds(parent, first, last);\n}\n\nfunction isDocumentFragment(node: Simple.Node): node is DocumentFragment {\n  return node.nodeType === Node.DOCUMENT_FRAGMENT_NODE;\n}\n\nlet helper = DOMChanges;\n\nhelper = domChangesNodeMergingFix(doc, helper);\nhelper = domChangesTableElementFix(doc, helper);\nhelper = domChangesSvgElementFix(doc, helper, SVG_NAMESPACE);\n\nexport default helper;\nexport const DOMTreeConstruction = DOM.DOMTreeConstruction;\nexport type DOMTreeConstruction = DOM.DOMTreeConstruction;\nexport { Namespace as DOMNamespace } from './interfaces';\n","import { FIXME, Option } from '@glimmer/util';\nexport type FIX_REIFICATION<T> = FIXME<T, 'needs to be reified properly'>;\n\nexport type Namespace =\n    \"http://www.w3.org/1999/xhtml\"\n  | \"http://www.w3.org/1998/Math/MathML\"\n  | \"http://www.w3.org/2000/svg\"\n  | \"http://www.w3.org/1999/xlink\"\n  | \"http://www.w3.org/XML/1998/namespace\"\n  | \"http://www.w3.org/2000/xmlns/\";\n\nexport enum NodeType {\n  Element,\n  Attribute,\n  Text,\n  CdataSection,\n  EntityReference,\n  Entity,\n  ProcessingInstruction,\n  Comment,\n  Document,\n  DocumentType,\n  DocumentFragment,\n  Notation\n}\n\n// This is the subset of DOM used by the appending VM. It is\n// meant to be efficient to use on the server and all operations\n// must be fully serializable to HTML as a transport.\nexport interface Node {\n  nextSibling: Option<Node>;\n  previousSibling: Option<Node>;\n  parentNode: Option<Node>;\n  nodeType: NodeType | number;\n  nodeValue: Option<string>;\n  firstChild: Option<Node>;\n}\n\nexport interface Document extends Node {\n  createElement(tag: string): Element;\n  createElementNS(namespace: Namespace, tag: string): Element;\n  createTextNode(text: string): Text;\n  createComment(data: string): Comment;\n}\n\nexport interface CharacterData extends Node {\n  data: string;\n}\n\nexport interface Text extends CharacterData {}\n\nexport interface Comment extends CharacterData {}\n\nexport interface Element extends Node {\n  namespaceURI: Option<string>;\n  tagName: string;\n  firstChild: Option<Node>;\n  lastChild: Option<Node>;\n  removeAttribute(name: string): void;\n  removeAttributeNS(namespaceURI: string, name: string): void;\n  setAttribute(name: string, value: string): void;\n  setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\n  insertBefore(node: Node, reference: Option<Node>): void;\n  removeChild(node: Node): void;\n}\n\nexport interface SVGElement extends Element {}\n\nexport interface HTMLElement extends Element {}\n","import { Opaque } from '@glimmer/util';\nimport { Simple } from '@glimmer/interfaces';\n\n/*\n * @method normalizeProperty\n * @param element {HTMLElement}\n * @param slotName {String}\n * @returns {Object} { name, type }\n */\nexport function normalizeProperty(element: Simple.Element, slotName: string) {\n  let type, normalized;\n\n  if (slotName in element) {\n    normalized = slotName;\n    type = 'prop';\n  } else {\n    let lower = slotName.toLowerCase();\n    if (lower in element) {\n      type = 'prop';\n      normalized = lower;\n    } else {\n      type = 'attr';\n      normalized = slotName;\n    }\n  }\n\n  if (type === 'prop' &&\n      (normalized.toLowerCase() === 'style' ||\n       preferAttr(element.tagName, normalized))) {\n    type = 'attr';\n  }\n\n  return { normalized, type };\n}\n\nexport function normalizePropertyValue(value: Opaque): Opaque {\n  if (value === '') {\n    return true;\n  }\n\n  return value;\n}\n\n// properties that MUST be set as attributes, due to:\n// * browser bug\n// * strange spec outlier\nconst ATTR_OVERRIDES = {\n\n  // phantomjs < 2.0 lets you set it as a prop but won't reflect it\n  // back to the attribute. button.getAttribute('type') === null\n  BUTTON: { type: true, form: true },\n\n  INPUT: {\n    // Some version of IE (like IE9) actually throw an exception\n    // if you set input.type = 'something-unknown'\n    type: true,\n    form: true,\n    // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false\n    // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false\n    // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true\n    autocorrect: true,\n    // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true\n    // Safari 9.1.3: 'list' in document.createElement('input') === false\n    list: true\n  },\n\n  // element.form is actually a legitimate readOnly property, that is to be\n  // mutated, but must be mutated by setAttribute...\n  SELECT:   { form: true },\n  OPTION:   { form: true },\n  TEXTAREA: { form: true },\n  LABEL:    { form: true },\n  FIELDSET: { form: true },\n  LEGEND:   { form: true },\n  OBJECT:   { form: true }\n};\n\nfunction preferAttr(tagName: string, propName: string) {\n  let tag = ATTR_OVERRIDES[tagName.toUpperCase()];\n  return tag && tag[propName.toLowerCase()] || false;\n}\n","import { Opaque, Option } from '@glimmer/util';\nimport { normalizeTextValue } from '../compiled/opcodes/content';\nimport { isSafeString } from '../upsert';\nimport { Environment } from '../environment';\nimport * as Simple from './interfaces';\n\nconst badProtocols = [\n  'javascript:',\n  'vbscript:'\n];\n\nconst badTags = [\n  'A',\n  'BODY',\n  'LINK',\n  'IMG',\n  'IFRAME',\n  'BASE',\n  'FORM'\n];\n\nconst badTagsForDataURI = [\n  'EMBED'\n];\n\nconst badAttributes = [\n  'href',\n  'src',\n  'background',\n  'action'\n];\n\nconst badAttributesForDataURI = [\n  'src'\n];\n\nfunction has(array: Array<string>, item: string): boolean {\n  return array.indexOf(item) !== -1;\n}\n\nfunction checkURI(tagName: Option<string>, attribute: string): boolean {\n  return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);\n}\n\nfunction checkDataURI(tagName: Option<string>, attribute: string): boolean {\n  if (tagName === null) return false;\n  return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);\n}\n\nexport function requiresSanitization(tagName: string, attribute: string): boolean {\n  return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);\n}\n\nexport function sanitizeAttributeValue(env: Environment, element: Simple.Element, attribute: string, value: Opaque): Opaque {\n  let tagName: Option<string> = null;\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (isSafeString(value)) {\n    return value.toHTML();\n  }\n\n  if (!element) {\n    tagName = null;\n  } else {\n    tagName = element.tagName.toUpperCase();\n  }\n\n  let str = normalizeTextValue(value);\n\n  if (checkURI(tagName, attribute)) {\n    let protocol = env.protocolForURL(str);\n    if (has(badProtocols, protocol)) {\n      return `unsafe:${str}`;\n    }\n  }\n\n  if (checkDataURI(tagName, attribute)) {\n    return `unsafe:${str}`;\n  }\n\n  return str;\n}\n","import { SymbolTable } from '@glimmer/interfaces';\nimport { A } from '@glimmer/util';\n\nimport { Blocks, Inlines, populateBuiltins } from './syntax/functions';\n\nimport { Constants, AppendOpcode } from './opcodes';\n\nimport * as Simple from './dom/interfaces';\nimport { DOMChanges, DOMTreeConstruction } from './dom/helper';\nimport { Reference, PathReference, OpaqueIterable } from '@glimmer/reference';\nimport { UNDEFINED_REFERENCE, ConditionalReference } from './references';\nimport {\n  defaultManagers,\n  AttributeManager\n} from './dom/attribute-managers';\n\nimport {\n  PartialDefinition\n} from './partial';\n\nimport {\n  Component,\n  ComponentManager,\n  ComponentDefinition\n} from './component/interfaces';\n\nimport {\n  ModifierManager\n} from './modifier/interfaces';\n\nimport {\n  Option,\n  Destroyable,\n  Opaque,\n  HasGuid,\n  ensureGuid,\n  expect,\n  assert\n} from '@glimmer/util';\n\nimport {\n  TemplateMeta\n} from '@glimmer/wire-format';\n\nimport { EvaluatedArgs } from './compiled/expressions/args';\n\nimport { InlineBlock } from './scanner';\n\nimport { PublicVM } from './vm/append';\n\nexport type ScopeSlot = PathReference<Opaque> | InlineBlock | EvaluatedArgs;\n\nexport interface DynamicScope {\n  get(key: string): PathReference<Opaque>;\n  set(key: string, reference: PathReference<Opaque>): PathReference<Opaque>;\n  child(): DynamicScope;\n}\n\nexport class Scope {\n  static root(self: PathReference<Opaque>, size = 0) {\n    let refs: PathReference<Opaque>[] = new Array(size + 1);\n\n    for (let i = 0; i <= size; i++) {\n      refs[i] = UNDEFINED_REFERENCE;\n    }\n\n    return new Scope(refs).init({ self });\n  }\n\n  // the 0th slot is `self`\n  private slots: ScopeSlot[];\n  private callerScope: Option<Scope> = null;\n\n  constructor(references: ScopeSlot[], callerScope: Option<Scope> = null) {\n    this.slots = references;\n    this.callerScope = callerScope;\n  }\n\n  init({ self }: { self: PathReference<Opaque> }): this {\n    this.slots[0] = self;\n    return this;\n  }\n\n  getSelf(): PathReference<Opaque> {\n    return this.slots[0] as PathReference<Opaque>;\n  }\n\n  getSymbol(symbol: number): PathReference<Opaque> {\n    return this.slots[symbol] as PathReference<Opaque>;\n  }\n\n  getBlock(symbol: number): InlineBlock {\n    return this.slots[symbol] as InlineBlock;\n  }\n\n  getPartialArgs(symbol: number): EvaluatedArgs {\n    return this.slots[symbol] as EvaluatedArgs;\n  }\n\n  bindSymbol(symbol: number, value: PathReference<Opaque>) {\n    this.slots[symbol] = value;\n  }\n\n  bindBlock(symbol: number, value: InlineBlock) {\n    this.slots[symbol] = value;\n  }\n\n  bindPartialArgs(symbol: number, value: EvaluatedArgs) {\n    this.slots[symbol] = value;\n  }\n\n  bindCallerScope(scope: Scope) {\n    this.callerScope = scope;\n  }\n\n  getCallerScope(): Option<Scope> {\n    return this.callerScope;\n  }\n\n  child(): Scope {\n    return new Scope(this.slots.slice(), this.callerScope);\n  }\n}\n\nclass Transaction {\n  public scheduledInstallManagers: ModifierManager<Opaque>[] = [];\n  public scheduledInstallModifiers: Object[] = [];\n  public scheduledUpdateModifierManagers: ModifierManager<Opaque>[] = [];\n  public scheduledUpdateModifiers: Object[] = [];\n  public createdComponents: Component[] = [];\n  public createdManagers: ComponentManager<Component>[] = [];\n  public updatedComponents: Component[] = [];\n  public updatedManagers: ComponentManager<Component>[] = [];\n  public destructors: Destroyable[] = [];\n\n  didCreate<T>(component: T, manager: ComponentManager<T>) {\n    this.createdComponents.push(component);\n    this.createdManagers.push(manager);\n  }\n\n  didUpdate<T>(component: T, manager: ComponentManager<T>) {\n    this.updatedComponents.push(component);\n    this.updatedManagers.push(manager);\n  }\n\n  scheduleInstallModifier<T>(modifier: T, manager: ModifierManager<T>) {\n    this.scheduledInstallManagers.push(manager);\n    this.scheduledInstallModifiers.push(modifier);\n  }\n\n  scheduleUpdateModifier<T>(modifier: T, manager: ModifierManager<T>) {\n    this.scheduledUpdateModifierManagers.push(manager);\n    this.scheduledUpdateModifiers.push(modifier);\n  }\n\n  didDestroy(d: Destroyable) {\n    this.destructors.push(d);\n  }\n\n  commit() {\n    let { createdComponents, createdManagers } = this;\n\n    for (let i=0; i<createdComponents.length; i++) {\n      let component = createdComponents[i];\n      let manager = createdManagers[i];\n      manager.didCreate(component);\n    }\n\n    let { updatedComponents, updatedManagers } = this;\n\n    for (let i=0; i<updatedComponents.length; i++) {\n      let component = updatedComponents[i];\n      let manager = updatedManagers[i];\n      manager.didUpdate(component);\n    }\n\n    let { destructors } = this;\n\n    for (let i=0; i<destructors.length; i++) {\n      destructors[i].destroy();\n    }\n\n    let { scheduledInstallManagers, scheduledInstallModifiers } = this;\n\n    for (let i = 0; i < scheduledInstallManagers.length; i++) {\n      let manager = scheduledInstallManagers[i];\n      let modifier = scheduledInstallModifiers[i];\n      manager.install(modifier);\n    }\n\n    let { scheduledUpdateModifierManagers, scheduledUpdateModifiers } = this;\n\n    for (let i = 0; i < scheduledUpdateModifierManagers.length; i++) {\n      let manager = scheduledUpdateModifierManagers[i];\n      let modifier = scheduledUpdateModifiers[i];\n      manager.update(modifier);\n    }\n  }\n}\n\nexport class Opcode {\n  public offset = 0;\n  constructor(private array: Uint32Array | Array<number>) {}\n\n  get type() {\n    return this.array[this.offset];\n  }\n\n  get op1() {\n    return this.array[this.offset + 1];\n  }\n\n  get op2() {\n    return this.array[this.offset + 2];\n  }\n\n  get op3() {\n    return this.array[this.offset + 3];\n  }\n}\n\nexport class Program {\n  [key: number]: never;\n\n  private opcodes = new A(0x100000);\n  private _offset = 0;\n  private _opcode: Opcode;\n\n  constructor() {\n    this._opcode = new Opcode(this.opcodes);\n  }\n\n  get next(): number {\n    return this._offset;\n  }\n\n  get current(): number {\n    return this._offset - 4;\n  }\n\n  opcode(offset: number): Opcode {\n    this._opcode.offset = offset;\n    return this._opcode;\n  }\n\n  set(pos: number, opcode: AppendOpcode) {\n    let [type, op1, op2, op3] = opcode;\n    this.opcodes[pos] = type;\n    this.opcodes[pos + 1] = op1;\n    this.opcodes[pos + 2] = op2;\n    this.opcodes[pos + 3] = op3;\n  }\n\n  push(opcode: AppendOpcode): number {\n    let offset = this._offset;\n    let [type, op1, op2, op3] = opcode;\n    this.opcodes[this._offset++] = type;\n    this.opcodes[this._offset++] = op1;\n    this.opcodes[this._offset++] = op2;\n    this.opcodes[this._offset++] = op3;\n    return offset;\n  }\n}\n\nexport abstract class Environment {\n  protected updateOperations: DOMChanges;\n  protected appendOperations: DOMTreeConstruction;\n  private _macros: Option<{ blocks: Blocks, inlines: Inlines }> = null;\n  private _transaction: Option<Transaction> = null;\n  public constants: Constants = new Constants();\n  public program = new Program();\n\n  constructor({ appendOperations, updateOperations }: { appendOperations: DOMTreeConstruction, updateOperations: DOMChanges }) {\n    this.appendOperations = appendOperations;\n    this.updateOperations = updateOperations;\n  }\n\n  toConditionalReference(reference: Reference<Opaque>): Reference<boolean> {\n    return new ConditionalReference(reference);\n  }\n\n  abstract iterableFor(reference: Reference<Opaque>, args: EvaluatedArgs): OpaqueIterable;\n  abstract protocolForURL(s: string): string;\n\n  getAppendOperations(): DOMTreeConstruction { return this.appendOperations; }\n  getDOM(): DOMChanges { return this.updateOperations; }\n\n  getIdentity(object: HasGuid): string {\n    return ensureGuid(object) + '';\n  }\n\n  begin() {\n    assert(!this._transaction, 'Cannot start a nested transaction');\n    this._transaction = new Transaction();\n  }\n\n  private get transaction(): Transaction {\n    return expect(this._transaction, 'must be in a transaction');\n  }\n\n  didCreate<T>(component: T, manager: ComponentManager<T>) {\n    this.transaction.didCreate(component, manager);\n  }\n\n  didUpdate<T>(component: T, manager: ComponentManager<T>) {\n    this.transaction.didUpdate(component, manager);\n  }\n\n  scheduleInstallModifier<T>(modifier: T, manager: ModifierManager<T>) {\n    this.transaction.scheduleInstallModifier(modifier, manager);\n  }\n\n  scheduleUpdateModifier<T>(modifier: T, manager: ModifierManager<T>) {\n    this.transaction.scheduleUpdateModifier(modifier, manager);\n  }\n\n  didDestroy(d: Destroyable) {\n    this.transaction.didDestroy(d);\n  }\n\n  commit() {\n    this.transaction.commit();\n    this._transaction = null;\n  }\n\n  attributeFor(element: Simple.Element, attr: string, isTrusting: boolean, namespace?: string): AttributeManager {\n    return defaultManagers(element, attr, isTrusting, namespace === undefined ? null : namespace);\n  }\n\n  macros(): { blocks: Blocks, inlines: Inlines } {\n    let macros = this._macros;\n    if (!macros) {\n      this._macros = macros = populateBuiltins();\n    }\n\n    return macros;\n  }\n\n  abstract hasHelper(helperName: Option<string>[], blockMeta: TemplateMeta): boolean;\n  abstract lookupHelper(helperName: Option<string>[], blockMeta: TemplateMeta): Helper;\n\n  abstract hasModifier(modifierName: string[], blockMeta: TemplateMeta): boolean;\n  abstract lookupModifier(modifierName: string[], blockMeta: TemplateMeta): ModifierManager<Opaque>;\n\n  abstract hasComponentDefinition(tagName: string[], symbolTable: SymbolTable): boolean;\n  abstract getComponentDefinition(tagName: string[], symbolTable: SymbolTable): ComponentDefinition<Opaque>;\n\n  abstract hasPartial(partialName: string, symbolTable: SymbolTable): boolean;\n  abstract lookupPartial(PartialName: string, symbolTable: SymbolTable): PartialDefinition<TemplateMeta>;\n}\n\nexport default Environment;\n\nexport interface Helper {\n  (vm: PublicVM, args: EvaluatedArgs, symbolTable: SymbolTable): PathReference<Opaque>;\n}\n","import { Helper, DynamicScope } from '../environment';\nimport { PublicVM } from '../vm/append';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { EvaluatedArgs } from '../compiled/expressions/args';\nimport { CONSTANT_TAG, RevisionTag, PathReference, UpdatableTag, combine } from '@glimmer/reference';\nimport { Opaque } from '@glimmer/util';\n\nclass DynamicVarReference implements PathReference<Opaque> {\n  public tag: RevisionTag;\n  private varTag: UpdatableTag;\n\n  constructor(private scope: DynamicScope, private nameRef: PathReference<Opaque>) {\n    let varTag = this.varTag = new UpdatableTag(CONSTANT_TAG);\n    this.tag = combine([nameRef.tag, varTag]);\n  }\n\n  value(): Opaque {\n    return this.getVar().value();\n  }\n\n  get(key: string): PathReference<Opaque> {\n    return this.getVar().get(key);\n  }\n\n  private getVar(): PathReference<Opaque> {\n    let name = String(this.nameRef.value());\n    let ref = this.scope.get(name);\n\n    this.varTag.update(ref.tag);\n\n    return ref;\n  }\n}\n\nfunction getDynamicVar(vm: PublicVM, args: EvaluatedArgs, _symbolTable: SymbolTable): PathReference<Opaque> {\n  let scope = vm.dynamicScope();\n  let nameRef = args.positional.at(0);\n\n  return new DynamicVarReference(scope, nameRef);\n}\n\nexport default (getDynamicVar as Helper);\n",null,null,"import { LOGGER, Opaque, Option, Dict, Slice as ListSlice, initializeGuid, fillNulls } from '@glimmer/util';\nimport { RevisionTag, VersionedPathReference } from '@glimmer/reference';\nimport { VM, UpdatingVM } from './vm';\nimport { CompiledExpression, CompiledArgs } from './compiled/expressions';\nimport { NULL_REFERENCE, UNDEFINED_REFERENCE } from './references';\nimport { InlineBlock } from './scanner';\nimport { Opcode } from './environment';\n\nexport type Slice = [number, number];\n\nexport interface OpcodeJSON {\n  type: number | string;\n  guid?: Option<number>;\n  deopted?: boolean;\n  args?: string[];\n  details?: Dict<Option<string>>;\n  children?: OpcodeJSON[];\n}\n\nexport function pretty(json: OpcodeJSON): string {\n  return `${json.type}(${json.args ? json.args.join(', ') : ''})`;\n}\n\nexport function defaultToJSON(opcode: AppendOpcode): OpcodeJSON {\n  return { type: opcode[0] };\n}\n\nexport const enum OpcodeName {\n  PushChildScope,            // ()\n  PopScope,                  // ()\n  PushDynamicScope,          // ()\n  PopDynamicScope,           // ()\n  Put,                       // (ConstantReference)\n  EvaluatePut,               // (ConstantExpression)\n  PutArgs,                   // (ConstantExpression)\n  BindPositionalArgs,        //\n  BindNamedArgs,             // (ConstantArray<string>, ConstantArray<number>)\n  BindBlocks,                // (ConstantArray<string>, ConstantArray<number>)\n  BindPartialArgs,           // (number)\n  BindCallerScope,           // ()\n  BindDynamicScope,          // (ConstantArray<string>)\n  Enter,                     // (ConstantSlice)\n  Exit,                      // ()\n  Evaluate,                  // (ConstantBlock)\n  Jump,                      // (number)\n  JumpIf,                    // (number)\n  JumpUnless,                // (number)\n  Test,                      // (ConstantFunction)\n  OpenBlock,                 // (Other<CompiledGetBlock>, ConstantExpression)\n  CloseBlock,                // ()\n  PutDynamicComponent,       // ()\n  PutComponent,              // (Other<ComponentDefinition>)\n  OpenComponent,             // (ConstantExpression, ConstantBlock)\n  DidCreateElement,          //\n  ShadowAttributes,          // ()\n  DidRenderLayout,           // ()\n  CloseComponent,            // ()\n  Text,                      // (ConstantString)\n  Comment,                   // (ConstantString)\n  DynamicContent,            // (Other<AppendDynamicOpcode>)\n  OpenElement,               // (ConstantString)\n  PushRemoteElement,         // ()\n  PopRemoteElement,          // ()\n  OpenComponentElement,      // (ConstantString)\n  OpenDynamicElement,        // ()\n  FlushElement,              // ()\n  CloseElement,              // ()\n  PopElement,                // ()\n  StaticAttr,                // (ConstantString, ConstantString, ConstantString)\n  Modifier,                  // (ConstantString, ConstantOther<ModifierManager>, ConstantExpression)\n  DynamicAttrNS,             // (ConstantString, ConstantString, number)\n  DynamicAttr,               // (ConstantString, number)\n  PutIterator,               // ()\n  EnterList,                 // (ConstantSlice)\n  ExitList,                  // ()\n  EnterWithKey,              // (ConstantSlice)\n  NextIter,                  // (number)\n  PutDynamicPartial,         // (Other<SymbolTable>)\n  PutPartial,                // (Other<PartialDefinition>)\n  EvaluatePartial            // (Other<SymbolTable>, Other<Dict<PartialBlock>>)\n}\n\n// export type OpcodeName =\n//     \"PushChildScope\"            // ()\n//   | \"PopScope\"                  // ()\n//   | \"PushDynamicScope\"          // ()\n//   | \"PopDynamicScope\"           // ()\n//   | \"Put\"                       // (ConstantReference)\n//   | \"EvaluatePut\"               // (ConstantExpression)\n//   | \"PutArgs\"                   // (ConstantExpression)\n//   | \"BindPositionalArgs\"        //\n//   | \"BindNamedArgs\"             // (ConstantArray<string>, ConstantArray<number>)\n//   | \"BindBlocks\"                // (ConstantArray<string>, ConstantArray<number>)\n//   | \"BindPartialArgs\"           // (number)\n//   | \"BindCallerScope\"           // ()\n//   | \"BindDynamicScope\"          // (ConstantArray<string>)\n//   | \"Enter\"                     // (ConstantSlice)\n//   | \"Exit\"                      // ()\n//   | \"Evaluate\"                  // (ConstantBlock)\n//   | \"Jump\"                      // (number)\n//   | \"JumpIf\"                    // (number)\n//   | \"JumpUnless\"                // (number)\n//   | \"Test\"                      // (ConstantFunction)\n//   | \"OpenBlock\"                 // (Other<CompiledGetBlock>, ConstantExpression)\n//   | \"CloseBlock\"                // ()\n//   | \"PutDynamicComponent\"       // ()\n//   | \"PutComponent\"              // (Other<ComponentDefinition>)\n//   | \"OpenComponent\"             // (ConstantExpression, ConstantBlock)\n//   | \"DidCreateElement\"          //\n//   | \"ShadowAttributes\"          // ()\n//   | \"DidRenderLayout\"           // ()\n//   | \"CloseComponent\"            // ()\n//   | \"Text\"                      // (ConstantString)\n//   | \"Comment\"                   // (ConstantString)\n//   | \"DynamicContent\"            // (Other<AppendDynamicOpcode>)\n//   | \"OpenElement\"               // (ConstantString)\n//   | \"PushRemoteElement\"         // ()\n//   | \"PopRemoteElement\"          // ()\n//   | \"OpenComponentElement\"      // (ConstantString)\n//   | \"OpenDynamicElement\"        // ()\n//   | \"FlushElement\"              // ()\n//   | \"CloseElement\"              // ()\n//   | \"PopElement\"                // ()\n//   | \"StaticAttr\"                // (ConstantString, ConstantString, ConstantString)\n//   | \"Modifier\"                  // (ConstantString, ConstantOther<ModifierManager>, ConstantExpression)\n//   | \"DynamicAttrNS\"             // (ConstantString, ConstantString, number)\n//   | \"DynamicAttr\"               // (ConstantString, number)\n//   | \"PutIterator\"               // ()\n//   | \"EnterList\"                 // (ConstantSlice)\n//   | \"ExitList\"                  // ()\n//   | \"EnterWithKey\"              // (ConstantSlice)\n//   | \"NextIter\"                  // (number)\n//   | \"PutDynamicPartial\"         // (Other<SymbolTable>)\n//   | \"PutPartial\"                // (Other<PartialDefinition>)\n//   | \"EvaluatePartial\"           // (Other<SymbolTable>, Other<Dict<PartialBlock>>)\n//   ;\n\nexport type ConstantType = 'slice' | 'block' | 'reference' | 'string' | 'number' | 'expression';\nexport type ConstantReference =  number;\nexport type ConstantString = number;\nexport type ConstantExpression = number;\nexport type ConstantSlice = number;\nexport type ConstantBlock = number;\nexport type ConstantFunction = number;\nexport type ConstantArray = number;\nexport type ConstantOther = number;\n\nexport class Constants {\n  // `0` means NULL\n\n  private references: VersionedPathReference<Opaque>[] = [];\n  private strings: string[] = [];\n  private expressions: Opaque[] = [];\n  private arrays: number[][] = [];\n  private slices: Slice[] = [];\n  private blocks: InlineBlock[] = [];\n  private functions: Function[] = [];\n  private others: Opaque[] = [];\n\n  public NULL_REFERENCE: number;\n  public UNDEFINED_REFERENCE: number;\n\n  constructor() {\n    this.NULL_REFERENCE = this.reference(NULL_REFERENCE);\n    this.UNDEFINED_REFERENCE = this.reference(UNDEFINED_REFERENCE);\n  }\n\n  getReference<T extends Opaque>(value: ConstantReference): VersionedPathReference<T> {\n    return this.references[value - 1] as VersionedPathReference<T>;\n  }\n\n  reference(value: VersionedPathReference<Opaque>): ConstantReference {\n    let index = this.references.length;\n    this.references.push(value);\n    return index + 1;\n  }\n\n  getString(value: ConstantString): string {\n    return this.strings[value - 1];\n  }\n\n  string(value: string): ConstantString {\n    let index = this.strings.length;\n    this.strings.push(value);\n    return index + 1;\n  }\n\n  getExpression<T>(value: ConstantExpression): T {\n    return this.expressions[value - 1] as T;\n  }\n\n  expression(value: CompiledExpression<Opaque> | CompiledArgs): ConstantExpression {\n    let index = this.expressions.length;\n    this.expressions.push(value);\n    return index + 1;\n  }\n\n  getArray(value: ConstantArray): number[] {\n    return this.arrays[value - 1];\n  }\n\n  array(values: number[]): ConstantArray {\n    let index = this.arrays.length;\n    this.arrays.push(values);\n    return index + 1;\n  }\n\n  getSlice(value: ConstantSlice): Slice {\n    return this.slices[value - 1];\n  }\n\n  slice(slice: Slice): ConstantSlice {\n    // TODO: Put the entire program in one big array\n    let index = this.slices.length;\n    this.slices.push(slice);\n    return index + 1;\n  }\n\n  getBlock(value: ConstantBlock): InlineBlock {\n    return this.blocks[value - 1];\n  }\n\n  block(block: InlineBlock): ConstantBlock {\n    let index = this.blocks.length;\n    this.blocks.push(block);\n    return index + 1;\n  }\n\n  getFunction<T extends Function>(value: ConstantFunction): T {\n    return this.functions[value - 1] as T;\n  }\n\n  function(f: Function): ConstantFunction {\n    let index = this.functions.length;\n    this.functions.push(f);\n    return index + 1;\n  }\n\n  getOther<T>(value: ConstantOther): T {\n    return this.others[value - 1] as T;\n  }\n\n  other(other: Opaque): ConstantOther {\n    let index = this.others.length;\n    this.others.push(other);\n    return index + 1;\n  }\n}\n\nexport type Operand1 = number;\nexport type Operand2 = number;\nexport type Operand3 = number;\n\nexport type OpcodeToJSON = (data: AppendOpcode, constants: Constants) => OpcodeJSON;\nexport type EvaluateOpcode = (vm: VM, opcode: Opcode) => void;\n\nexport class AppendOpcodes {\n  private evaluateOpcode: EvaluateOpcode[] = fillNulls<EvaluateOpcode>(OpcodeName.EvaluatePartial + 1);\n\n  add<Name extends OpcodeName>(name: Name, evaluate: EvaluateOpcode): void {\n    this.evaluateOpcode[name as number] = evaluate;\n  }\n\n  construct<Name extends OpcodeName>(name: Name, _debug: Option<Object>, op1?: Operand1, op2?: Operand2, op3?: Operand3): AppendOpcode {\n    return [(name as number)|0, (op1 || 0)|0, (op2 || 0)|0, (op3 || 0)|0];\n  }\n\n  evaluate(vm: VM, opcode: Opcode) {\n    LOGGER.debug(`[VM] OPCODE: ${opcode.type}`);\n    let func = this.evaluateOpcode[opcode.type];\n    func(vm, opcode);\n  }\n}\n\nexport type AppendOpcode = [number, number, number, number];\n\nexport const APPEND_OPCODES = new AppendOpcodes();\n\nexport abstract class AbstractOpcode {\n  public type: string;\n  public _guid: number;\n\n  constructor() {\n    initializeGuid(this);\n  }\n\n  toJSON(): OpcodeJSON {\n    return { guid: this._guid, type: this.type };\n  }\n}\n\nexport abstract class UpdatingOpcode extends AbstractOpcode {\n  public tag: RevisionTag;\n\n  next: Option<UpdatingOpcode> = null;\n  prev: Option<UpdatingOpcode> = null;\n\n  abstract evaluate(vm: UpdatingVM): void;\n}\n\nexport type UpdatingOpSeq = ListSlice<UpdatingOpcode>;\n\nexport function inspect(opcodes: ReadonlyArray<AbstractOpcode>): string {\n  let buffer: string[] = [];\n\n  opcodes.forEach((opcode, i) => {\n    _inspect(opcode.toJSON(), buffer, 0, i);\n  });\n\n  return buffer.join('');\n}\n\nfunction _inspect(opcode: OpcodeJSON, buffer: string[], level: number, index: number) {\n  let indentation: string[] = [];\n\n  for (let i=0; i<level; i++) {\n    indentation.push('  ');\n  }\n\n  buffer.push(...indentation);\n  buffer.push(`${index}. ${opcode.type}`);\n\n  if (opcode.args || opcode.details) {\n    buffer.push('(');\n\n    if (opcode.args) {\n      buffer.push(opcode.args.join(', '));\n    }\n\n    if (opcode.details) {\n      let keys = Object.keys(opcode.details);\n\n      if (keys.length) {\n        if (opcode.args && opcode.args.length) {\n          buffer.push(', ');\n        }\n\n        buffer.push(keys.map(key => `${key}=${opcode.details && opcode.details[key]}`).join(', '));\n      }\n    }\n\n    buffer.push(')');\n  }\n\n  buffer.push('\\n');\n\n  if (opcode.children && opcode.children.length) {\n    for (let i=0; i<opcode.children.length; i++) {\n      _inspect(opcode.children[i], buffer, level+1, i);\n    }\n  }\n}\n","import { Template } from './template';\n\nexport class PartialDefinition<T> {\n  name: string; // for debugging\n  template: Template<T>;\n\n  constructor(name: string, template: Template<T>) {\n    this.name = name;\n    this.template = template;\n  }\n}\n","import { RevisionTag, ConstReference, PathReference, Reference } from '@glimmer/reference';\nimport { Option, Opaque } from '@glimmer/util';\n\nexport type Primitive = undefined | null | boolean | number | string;\n\nexport class PrimitiveReference<T extends Primitive> extends ConstReference<T> implements PathReference<T> {\n  static create<T extends Primitive>(value: T): PrimitiveReference<T> {\n    if (value === undefined) {\n      return UNDEFINED_REFERENCE as PrimitiveReference<T>;\n    } else if (value === null) {\n      return NULL_REFERENCE as PrimitiveReference<T>;\n    } else if (value === true) {\n      return TRUE_REFERENCE as PrimitiveReference<T>;\n    } else if (value === false) {\n      return FALSE_REFERENCE as PrimitiveReference<T>;\n    } else if (typeof value === 'number') {\n      return new ValueReference(value as number) as PrimitiveReference<T>;\n    } else {\n      return new StringReference(value as string) as any as PrimitiveReference<T>;\n    }\n  }\n\n  protected constructor(value: T) {\n    super(value);\n  }\n\n  get(_key: string): PrimitiveReference<Primitive> {\n    return UNDEFINED_REFERENCE;\n  }\n}\n\nclass StringReference extends PrimitiveReference<string> {\n  private lengthReference: Option<PrimitiveReference<number>> = null;\n\n  get(key: string): PrimitiveReference<Primitive> {\n    if (key === 'length') {\n      let { lengthReference } = this;\n\n      if (lengthReference === null) {\n        lengthReference = this.lengthReference = new ValueReference(this.inner.length);\n      }\n\n      return lengthReference;\n    } else {\n      return super.get(key);\n    }\n  }\n}\n\ntype Value = undefined | null | number | boolean;\n\nclass ValueReference<T extends Value> extends PrimitiveReference<T> {\n  constructor(value: T) {\n    super(value);\n  }\n}\n\nexport const UNDEFINED_REFERENCE: PrimitiveReference<undefined> = new ValueReference(undefined);\nexport const NULL_REFERENCE: PrimitiveReference<null> = new ValueReference(null);\nconst TRUE_REFERENCE: PrimitiveReference<boolean> = new ValueReference(true);\nconst FALSE_REFERENCE: PrimitiveReference<boolean> = new ValueReference(false);\n\nexport class ConditionalReference implements Reference<boolean> {\n  public tag: RevisionTag;\n\n  constructor(private inner: Reference<Opaque>) {\n    this.tag = inner.tag;\n  }\n\n  value(): boolean {\n    return this.toBool(this.inner.value());\n  }\n\n  protected toBool(value: Opaque): boolean {\n    return !!value;\n  }\n}\n","import { CompiledProgram, CompiledBlock } from './compiled/blocks';\nimport { builder } from './compiler';\nimport OpcodeBuilder from './compiled/opcodes/builder';\nimport Environment from './environment';\nimport { Option } from '@glimmer/util';\nimport { SerializedTemplateBlock, TemplateMeta, SerializedBlock, Statement as SerializedStatement } from '@glimmer/wire-format';\nimport * as WireFormat from '@glimmer/wire-format';\nimport { entryPoint as entryPointTable, layout as layoutTable, block as blockTable } from './symbol-table';\nimport { Opaque, SymbolTable, ProgramSymbolTable } from '@glimmer/interfaces';\n\nimport {\n  STATEMENTS\n} from './syntax/functions';\n\nimport {\n  SPECIALIZE\n} from './syntax/specialize';\n\nexport type DeserializedStatement = WireFormat.Statement | WireFormat.Statements.Attribute | WireFormat.Statements.Argument;\n\nexport function compileStatement(statement: BaselineSyntax.AnyStatement, builder: OpcodeBuilder) {\n  let refined = SPECIALIZE.specialize(statement, builder.symbolTable);\n  STATEMENTS.compile(refined, builder);\n}\n\nexport class Template {\n  constructor(public statements: BaselineSyntax.AnyStatement[], public symbolTable: SymbolTable) {}\n}\n\nexport class Layout extends Template {\n  public symbolTable: ProgramSymbolTable;\n}\n\nexport class EntryPoint extends Template {\n  public symbolTable: ProgramSymbolTable;\n\n  compile(env: Environment): CompiledProgram {\n    let table = this.symbolTable;\n\n    let b = builder(env, table);\n\n    for (let i = 0; i < this.statements.length; i++) {\n      let statement = this.statements[i];\n      let refined = SPECIALIZE.specialize(statement, table);\n      STATEMENTS.compile(refined, b);\n    }\n\n    return new CompiledProgram(b.toSlice(), this.symbolTable.size);\n  }\n}\n\nexport class InlineBlock extends Template {\n  splat(builder: OpcodeBuilder) {\n    let table = builder.symbolTable;\n\n    let locals = table.getSymbols().locals;\n\n    if (locals) {\n      builder.pushChildScope();\n      builder.bindPositionalArgsForLocals(locals);\n    }\n\n    for (let i = 0; i < this.statements.length; i++) {\n      let statement = this.statements[i];\n      let refined = SPECIALIZE.specialize(statement, table);\n      STATEMENTS.compile(refined, builder);\n    }\n\n    if (locals) {\n      builder.popScope();\n    }\n  }\n\n  compile(env: Environment): CompiledBlock {\n    let table = this.symbolTable;\n    let b = builder(env, table);\n\n    this.splat(b);\n\n    return new CompiledBlock(b.toSlice());\n  }\n}\n\nexport class PartialBlock extends Template {\n  public symbolTable: ProgramSymbolTable;\n\n  compile(env: Environment): CompiledProgram {\n    let table = this.symbolTable;\n    let b = builder(env, table);\n\n    for (let i = 0; i < this.statements.length; i++) {\n      let statement = this.statements[i];\n      let refined = SPECIALIZE.specialize(statement, table);\n      STATEMENTS.compile(refined, b);\n    }\n\n    return new CompiledProgram(b.toSlice(), table.size);\n  }\n}\n\nexport default class Scanner {\n  constructor(private block: SerializedTemplateBlock, private meta: TemplateMeta, private env: Environment) {\n  }\n\n  scanEntryPoint(): EntryPoint {\n    let { block, meta } = this;\n\n    let symbolTable = entryPointTable(meta);\n    let child = scanBlock(block, symbolTable, this.env);\n    return new EntryPoint(child.statements, symbolTable);\n  }\n\n  scanLayout(): Layout {\n    let { block, meta } = this;\n    let { named, yields, hasPartials } = block;\n\n    let symbolTable = layoutTable(meta, named, yields, hasPartials);\n    let child = scanBlock(block, symbolTable, this.env);\n\n    return new Layout(child.statements, symbolTable);\n  }\n\n  scanPartial(symbolTable: SymbolTable): PartialBlock {\n    let { block } = this;\n\n    let child = scanBlock(block, symbolTable, this.env);\n\n    return new PartialBlock(child.statements, symbolTable);\n  }\n}\n\nexport function scanBlock({ statements }: SerializedBlock, symbolTable: SymbolTable, env: Environment): InlineBlock {\n  return new RawInlineBlock(env, symbolTable, statements).scan();\n}\n\nimport { PublicVM } from './vm';\nimport { PathReference } from '@glimmer/reference';\n\nexport namespace BaselineSyntax {\n  import Core = WireFormat.Core;\n\n  // TODO: use symbols for sexp[0]?\n  export type ScannedComponent = ['scanned-component', string, RawInlineBlock, WireFormat.Core.Hash, Option<RawInlineBlock>];\n  export const isScannedComponent = WireFormat.is<ScannedComponent>('scanned-component');\n\n  import Params = WireFormat.Core.Params;\n  import Hash = WireFormat.Core.Hash;\n  export type Block = InlineBlock;\n\n  export type OpenPrimitiveElement = ['open-primitive-element', string, string[]];\n  export const isPrimitiveElement = WireFormat.is<OpenPrimitiveElement>('open-primitive-element');\n\n  export type OptimizedAppend = ['optimized-append', WireFormat.Expression, boolean];\n  export const isOptimizedAppend = WireFormat.is<OptimizedAppend>('optimized-append');\n\n  export type UnoptimizedAppend = ['unoptimized-append', WireFormat.Expression, boolean];\n  export const isUnoptimizedAppend = WireFormat.is<UnoptimizedAppend>('unoptimized-append');\n\n  export type AnyDynamicAttr = ['any-dynamic-attr', string, WireFormat.Expression, Option<string>, boolean];\n  export const isAnyAttr = WireFormat.is<AnyDynamicAttr>('any-dynamic-attr');\n\n  export type StaticPartial = ['static-partial', string];\n  export const isStaticPartial = WireFormat.is<StaticPartial>('static-partial');\n  export type DynamicPartial = ['dynamic-partial', WireFormat.Expression];\n  export const isDynamicPartial = WireFormat.is<DynamicPartial>('dynamic-partial');\n\n  export type FunctionExpressionCallback<T> = (VM: PublicVM, symbolTable: SymbolTable) => PathReference<T>;\n  export type FunctionExpression = ['function', FunctionExpressionCallback<Opaque>];\n  export const isFunctionExpression = WireFormat.is<FunctionExpression>('function');\n\n  export type NestedBlock = ['nested-block', WireFormat.Core.Path, WireFormat.Core.Params, WireFormat.Core.Hash, Option<Block>, Option<Block>];\n  export const isNestedBlock = WireFormat.is<NestedBlock>('nested-block');\n\n  export type ScannedBlock = ['scanned-block', Core.Path, Core.Params, Core.Hash, Option<RawInlineBlock>, Option<RawInlineBlock>];\n  export const isScannedBlock = WireFormat.is<ScannedBlock>('scanned-block');\n\n  export type Debugger = ['debugger'];\n  export const isDebugger = WireFormat.is<Debugger>('debugger');\n\n  export type Args = [Params, Hash, Option<Block>, Option<Block>];\n\n  export namespace NestedBlock {\n    export function defaultBlock(sexp: NestedBlock): Option<InlineBlock> {\n      return sexp[4];\n    }\n\n    export function inverseBlock(sexp: NestedBlock): Option<InlineBlock> {\n      return sexp[5];\n    }\n\n    export function params(sexp: NestedBlock): WireFormat.Core.Params {\n      return sexp[2];\n    }\n\n    export function hash(sexp: NestedBlock): WireFormat.Core.Hash {\n      return sexp[3];\n    }\n  }\n\n  export type Statement =\n      ScannedComponent\n    | OpenPrimitiveElement\n    | OptimizedAppend\n    | UnoptimizedAppend\n    | StaticPartial\n    | DynamicPartial\n    | AnyDynamicAttr\n    | NestedBlock\n    | ScannedBlock\n    | Debugger\n    ;\n\n  export type AnyStatement = Statement | WireFormat.Statement;\n  export type AnyExpression = FunctionExpression | WireFormat.Expression;\n\n  export type Program = AnyStatement[];\n}\n\nexport class RawInlineBlock {\n  constructor(private env: Environment, private table: SymbolTable, private statements: SerializedStatement[]) {}\n\n  scan(): InlineBlock {\n    let buffer: BaselineSyntax.AnyStatement[] = [];\n\n    for(let i = 0; i < this.statements.length; i++) {\n      let statement = this.statements[i];\n      if (WireFormat.Statements.isBlock(statement)) {\n        buffer.push(this.specializeBlock(statement));\n      } else if (WireFormat.Statements.isComponent(statement)) {\n        buffer.push(...this.specializeComponent(statement));\n      } else {\n        buffer.push(statement);\n      }\n    }\n\n    return new InlineBlock(buffer, this.table);\n  }\n\n  private specializeBlock(block: WireFormat.Statements.Block): BaselineSyntax.ScannedBlock {\n    let [, path, params, hash, template, inverse] = block;\n    return ['scanned-block', path, params, hash, this.child(template), this.child(inverse)];\n  }\n\n  private specializeComponent(sexp: WireFormat.Statements.Component): BaselineSyntax.AnyStatement[] {\n    let [, tag, component] = sexp;\n\n    if (this.env.hasComponentDefinition([tag], this.table)) {\n      let child = this.child(component);\n      let attrs = new RawInlineBlock(this.env, this.table, component.attrs);\n      return [['scanned-component', tag, attrs, component.args, child]];\n    } else {\n      let buf: BaselineSyntax.AnyStatement[] = [];\n      buf.push(['open-element', tag, []]);\n      buf.push(...component.attrs);\n      buf.push(['flush-element']);\n      buf.push(...component.statements);\n      buf.push(['close-element']);\n      return buf;\n    }\n  }\n\n  child(block: Option<SerializedBlock>): Option<RawInlineBlock> {\n    if (!block) return null;\n    let table = blockTable(this.table, block.locals);\n    return new RawInlineBlock(this.env, table, block.statements);\n  }\n}\n","import { Option, Dict, dict } from '@glimmer/util';\nimport { TemplateMeta } from '@glimmer/wire-format';\nimport {\n  SymbolTable,\n  ProgramSymbolTable as IProgramSymbolTable,\n  BlockSymbolTable as IBlockSymbolTable,\n  Symbols\n} from '@glimmer/interfaces';\n\nexport function entryPoint(meta: Option<TemplateMeta>): ProgramSymbolTable {\n  return new ProgramSymbolTable(meta);\n}\n\nexport function layout(meta: TemplateMeta, wireNamed: string[], wireYields: string[], hasPartials: boolean): ProgramSymbolTable {\n  let { named, yields, partialSymbol, size } = symbols(wireNamed, wireYields, hasPartials);\n  return new ProgramSymbolTable(meta, named, yields, partialSymbol, size);\n}\n\nexport function block(parent: SymbolTable, locals: string[]): SymbolTable {\n  let localsMap: Option<Dict<number>> = null;\n  let program = parent['program'];\n\n  if (locals.length !== 0) {\n    let map = localsMap = dict<number>();\n    locals.forEach(l => map[l] = program.size++);\n  }\n\n  return new BlockSymbolTable(parent, program, localsMap);\n}\n\nfunction symbols(named: string[], yields: string[], hasPartials: boolean): { named: Option<Dict<number>>, yields: Option<Dict<number>>, partialSymbol: Option<number>, size: number } {\n  let yieldsMap: Option<Dict<number>> = null;\n  let namedMap: Option<Dict<number>> = null;\n\n  let size = 1;\n\n  if (yields.length !== 0) {\n    let map = yieldsMap = dict<number>();\n    yields.forEach(y => map[y] = size++);\n  }\n\n  if (named.length !== 0) {\n    let map = namedMap = dict<number>();\n    named.forEach(y => map[y] = size++);\n  }\n\n  let partialSymbol: Option<number> = hasPartials ? size++ : null;\n\n  return { named: namedMap, yields: yieldsMap, partialSymbol, size };\n}\n\nexport class ProgramSymbolTable implements IProgramSymbolTable {\n  program: this;\n\n  constructor(\n    private meta: Option<TemplateMeta>,\n    private named: Option<Dict<number>> = null,\n    private yields: Option<Dict<number>> = null,\n    private partialArgs: Option<number> = null,\n    public size = 1\n  ) {\n    this.program = this;\n  }\n\n  getMeta(): Option<TemplateMeta> {\n    return this.meta;\n  }\n\n  getSymbols(): Symbols {\n    return {\n      named: this.named,\n      yields: this.yields,\n      locals: null,\n      partialArgs: this.partialArgs\n    };\n  }\n\n  getSymbol(kind: 'local', name: string): null;\n  getSymbol(kind: 'local' | 'named' | 'yields', name: string): Option<number>;\n  getSymbol(kind: string, name: string): Option<number> {\n    if (kind === 'local') return null;\n    return this[kind] && this[kind][name];\n  }\n\n  getPartialArgs(): number {\n    return this.partialArgs || 0;\n  }\n}\n\nexport class BlockSymbolTable implements IBlockSymbolTable {\n  constructor(private parent: SymbolTable, protected program: ProgramSymbolTable, private locals: Option<Dict<number>>) {\n  }\n\n  getMeta(): Option<TemplateMeta> {\n    return this.program.getMeta();\n  }\n\n  getSymbols(): Symbols {\n    return {\n      named: null,\n      yields: null,\n      locals: this.locals,\n      partialArgs: null\n    };\n  }\n\n  getSymbol(kind: 'local' | 'named' | 'yields', name: string): Option<number> {\n    if (kind === 'local') {\n      return this.getLocal(name);\n    } else {\n      return this.program.getSymbol(kind, name);\n    }\n  }\n\n  private getLocal(name: string): Option<number> {\n    let { locals, parent } = this;\n\n    let symbol: Option<number> = locals && locals[name];\n\n    if (!symbol && parent) {\n      symbol = parent.getSymbol('local', name);\n    }\n\n    return symbol;\n  }\n\n  getPartialArgs(): Option<number> {\n    return this.program.getPartialArgs();\n  }\n}\n\nexport const EMPTY_SYMBOL_TABLE: SymbolTable = {\n  getMeta() {\n    return null;\n  },\n\n  getSymbols(): Symbols {\n    return {\n      named: null,\n      yields: null,\n      locals: null,\n      partialArgs: null\n    };\n  },\n\n  getSymbol(_kind: never, _name: string): number {\n    throw new Error(\"BUG: Calling getSymbol on EMPTY_SYMBOL_TABLE\");\n  },\n\n  getPartialArgs(): Option<number> {\n    return null;\n  }\n};\n","import * as WireFormat from '@glimmer/wire-format';\r\nimport OpcodeBuilder from '../compiled/opcodes/builder';\r\nimport { CompiledExpression } from '../compiled/expressions';\r\nimport CompiledValue from '../compiled/expressions/value';\r\nimport CompiledHasBlock, { CompiledHasBlockParams } from '../compiled/expressions/has-block';\r\nimport { BaselineSyntax } from '../scanner';\r\nimport { LOGGER, Opaque, Option, dict, assert, unwrap, unreachable } from '@glimmer/util';\r\nimport CompiledLookup, {\r\n  CompiledSelf,\r\n  CompiledSymbol,\r\n  CompiledInPartialName\r\n} from '../compiled/expressions/lookups';\r\nimport CompiledHelper from '../compiled/expressions/helper';\r\nimport CompiledConcat from '../compiled/expressions/concat';\r\nimport {\r\n  COMPILED_EMPTY_POSITIONAL_ARGS,\r\n  COMPILED_EMPTY_NAMED_ARGS,\r\n  EMPTY_BLOCKS,\r\n  CompiledArgs,\r\n  CompiledPositionalArgs,\r\n  CompiledNamedArgs,\r\n  Blocks as BlocksSyntax\r\n} from '../compiled/expressions/args';\r\nimport {\r\n  CompiledGetBlockBySymbol,\r\n  CompiledInPartialGetBlock\r\n} from '../compiled/expressions/has-block';\r\nimport { PublicVM as VM } from '../vm';\r\nimport AppendVM from '../vm/append';\r\n\r\nimport { CompiledFunctionExpression } from '../compiled/expressions/function';\r\n\r\nexport type SexpExpression = BaselineSyntax.AnyExpression & { 0: string };\r\nexport type Syntax = SexpExpression | BaselineSyntax.AnyStatement;\r\nexport type CompilerFunction<T extends Syntax, U> = ((sexp: T, builder: OpcodeBuilder) => U);\r\nexport type Name = BaselineSyntax.AnyStatement[0];\r\nexport type debugGet = ((path: string) => any);\r\n\r\nexport interface DebugContext {\r\n  context: Opaque;\r\n  get: debugGet;\r\n}\r\n\r\nexport type debugCallback = ((context: Opaque, get: debugGet) => DebugContext);\r\n\r\nfunction debugCallback(context: Opaque, get: debugGet) {\r\n  console.info('Use `context`, and `get(<path>)` to debug this template.');\r\n  /* tslint:disable */\r\n  debugger;\r\n  /* tslint:enable */\r\n  return { context, get };\r\n}\r\n\r\nfunction getter(vm: VM, builder: OpcodeBuilder) {\r\n  return (path: string) => {\r\n    let parts = path.split('.') as any;\r\n\r\n    if (parts[0] === 'this') {\r\n      parts[0] = null;\r\n    }\r\n\r\n    return compileRef(parts, builder).evaluate(vm as AppendVM);\r\n  };\r\n}\r\n\r\nlet callback = debugCallback;\r\n\r\n// For testing purposes\r\nexport function setDebuggerCallback(cb: debugCallback) {\r\n  callback = cb;\r\n}\r\n\r\nexport function resetDebuggerCallback() {\r\n  callback = debugCallback;\r\n}\r\n\r\nexport class Compilers<T extends Syntax, CompileTo> {\r\n  private names = dict<number>();\r\n  private funcs: CompilerFunction<T, CompileTo>[] = [];\r\n\r\n  add(name: string, func: CompilerFunction<T, CompileTo>): void {\r\n    this.funcs.push(func);\r\n    this.names[name] = this.funcs.length - 1;\r\n  }\r\n\r\n  compile(sexp: T, builder: OpcodeBuilder): CompileTo {\r\n    let name: string = sexp[0];\r\n    let index = this.names[name];\r\n    let func = this.funcs[index];\r\n    assert(!!func, `expected an implementation for ${sexp[0]}`);\r\n    return func(sexp, builder);\r\n  }\r\n}\r\n\r\nimport S = WireFormat.Statements;\r\n\r\nexport const STATEMENTS = new Compilers<BaselineSyntax.AnyStatement, void>();\r\n\r\nSTATEMENTS.add('text', (sexp: S.Text, builder: OpcodeBuilder) => {\r\n  builder.text(sexp[1]);\r\n});\r\n\r\nSTATEMENTS.add('comment', (sexp: S.Comment, builder: OpcodeBuilder) => {\r\n  builder.comment(sexp[1]);\r\n});\r\n\r\nSTATEMENTS.add('close-element', (_sexp, builder: OpcodeBuilder) => {\r\n  LOGGER.trace('close-element statement');\r\n  builder.closeElement();\r\n});\r\n\r\nSTATEMENTS.add('flush-element', (_sexp, builder: OpcodeBuilder) => {\r\n  builder.flushElement();\r\n});\r\n\r\nSTATEMENTS.add('modifier', (sexp: S.Modifier, builder: OpcodeBuilder) => {\r\n  let [, path, params, hash] = sexp;\r\n\r\n  let args = compileArgs(params, hash, builder);\r\n\r\n  if (builder.env.hasModifier(path, builder.symbolTable)) {\r\n    builder.modifier(path[0], args);\r\n  } else {\r\n    throw new Error(`Compile Error ${path.join('.')} is not a modifier: Helpers may not be used in the element form.`);\r\n  }\r\n});\r\n\r\nSTATEMENTS.add('static-attr', (sexp: S.StaticAttr, builder: OpcodeBuilder) => {\r\n  let [, name, value, namespace] = sexp;\r\n  builder.staticAttr(name, namespace, value as string);\r\n});\r\n\r\nSTATEMENTS.add('any-dynamic-attr', (sexp: BaselineSyntax.AnyDynamicAttr, builder: OpcodeBuilder) => {\r\n  let [, name, value, namespace, trusting] = sexp;\r\n\r\n  builder.putValue(value);\r\n\r\n  if (namespace) {\r\n    builder.dynamicAttrNS(name, namespace, trusting);\r\n  } else {\r\n    builder.dynamicAttr(name, trusting);\r\n  }\r\n});\r\n\r\nSTATEMENTS.add('open-element', (sexp: BaselineSyntax.OpenPrimitiveElement, builder: OpcodeBuilder) => {\r\n  LOGGER.trace('open-element statement');\r\n  builder.openPrimitiveElement(sexp[1]);\r\n});\r\n\r\nSTATEMENTS.add('optimized-append', (sexp: BaselineSyntax.OptimizedAppend, builder: OpcodeBuilder) => {\r\n  let [, value, trustingMorph] = sexp;\r\n\r\n  let { inlines } = builder.env.macros();\r\n  let returned = inlines.compile(sexp, builder) || value;\r\n\r\n  if (returned === true) return;\r\n\r\n  builder.putValue(returned[1]);\r\n\r\n  if (trustingMorph) {\r\n    builder.trustingAppend();\r\n  } else {\r\n    builder.cautiousAppend();\r\n  }\r\n});\r\n\r\nSTATEMENTS.add('unoptimized-append', (sexp: BaselineSyntax.UnoptimizedAppend, builder) => {\r\n  let [, value, trustingMorph] = sexp;\r\n  let { inlines } = builder.env.macros();\r\n  let returned = inlines.compile(sexp, builder) || value;\r\n\r\n  if (returned === true) return;\r\n\r\n  if (trustingMorph) {\r\n    builder.guardedTrustingAppend(returned[1]);\r\n  } else {\r\n    builder.guardedCautiousAppend(returned[1]);\r\n  }\r\n});\r\n\r\nSTATEMENTS.add('nested-block', (sexp: BaselineSyntax.NestedBlock, builder: OpcodeBuilder) => {\r\n  let { blocks } = builder.env.macros();\r\n  blocks.compile(sexp, builder);\r\n});\r\n\r\nSTATEMENTS.add('scanned-block', (sexp: BaselineSyntax.ScannedBlock, builder) => {\r\n  let [, path, params, hash, template, inverse] = sexp;\r\n\r\n  let templateBlock = template && template.scan();\r\n  let inverseBlock = inverse && inverse.scan();\r\n\r\n  let { blocks } = builder.env.macros();\r\n  blocks.compile(['nested-block', path, params, hash, templateBlock, inverseBlock], builder);\r\n});\r\n\r\nSTATEMENTS.add('scanned-component', (sexp: BaselineSyntax.ScannedComponent, builder) => {\r\n  let [, tag, attrs, rawArgs, rawBlock] = sexp;\r\n  let block = rawBlock && rawBlock.scan();\r\n\r\n  let args = compileBlockArgs(null, rawArgs, { default: block, inverse: null }, builder);\r\n\r\n  let definition = builder.env.getComponentDefinition([tag], builder.symbolTable);\r\n\r\n  builder.putComponentDefinition(definition);\r\n  builder.openComponent(args, attrs.scan());\r\n  builder.closeComponent();\r\n});\r\n\r\nSTATEMENTS.add('static-partial', (sexp: BaselineSyntax.StaticPartial, builder) => {\r\n  let [, name] = sexp;\r\n\r\n  if (!builder.env.hasPartial(name, builder.symbolTable)) {\r\n    throw new Error(`Compile Error: Could not find a partial named \"${name}\"`);\r\n  }\r\n\r\n  let definition = builder.env.lookupPartial(name, builder.symbolTable);\r\n\r\n  builder.putPartialDefinition(definition);\r\n  builder.evaluatePartial();\r\n});\r\n\r\nSTATEMENTS.add('dynamic-partial', (sexp: BaselineSyntax.DynamicPartial, builder) => {\r\n  let [, name] = sexp;\r\n\r\n    builder.startLabels();\r\n\r\n    builder.putValue(name);\r\n    builder.test('simple');\r\n    builder.enter('BEGIN', 'END');\r\n    builder.label('BEGIN');\r\n    builder.jumpUnless('END');\r\n    builder.putDynamicPartialDefinition();\r\n    builder.evaluatePartial();\r\n    builder.label('END');\r\n    builder.exit();\r\n\r\n    builder.stopLabels();\r\n});\r\n\r\nSTATEMENTS.add('yield', function(this: undefined, sexp: WireFormat.Statements.Yield, builder) {\r\n  let [, to, params] = sexp;\r\n\r\n  let args = compileArgs(params, null, builder);\r\n  builder.yield(args, to);\r\n});\r\n\r\nSTATEMENTS.add('debugger', (sexp: BaselineSyntax.Debugger, builder: OpcodeBuilder) => {\r\n\r\n  builder.putValue(['function', (vm: VM) => {\r\n    let context = vm.getSelf().value();\r\n    let get = (path: string) => {\r\n      return getter(vm, builder)(path).value();\r\n    };\r\n    callback(context, get);\r\n  }]);\r\n\r\n  return sexp;\r\n});\r\n\r\nlet EXPRESSIONS = new Compilers<SexpExpression, CompiledExpression<Opaque>>();\r\n\r\nimport E = WireFormat.Expressions;\r\nimport C = WireFormat.Core;\r\n\r\nexport function expr(expression: BaselineSyntax.AnyExpression, builder: OpcodeBuilder): CompiledExpression<Opaque> {\r\n  if (Array.isArray(expression)) {\r\n    return EXPRESSIONS.compile(expression, builder);\r\n  } else {\r\n    return new CompiledValue(expression);\r\n  }\r\n}\r\n\r\nEXPRESSIONS.add('unknown', (sexp: E.Unknown, builder: OpcodeBuilder) => {\r\n  let path = sexp[1];\r\n\r\n  if (builder.env.hasHelper(path, builder.symbolTable)) {\r\n    return new CompiledHelper(path, builder.env.lookupHelper(path, builder.symbolTable), CompiledArgs.empty(), builder.symbolTable);\r\n  } else {\r\n    return compileRef(path, builder);\r\n  }\r\n});\r\n\r\nEXPRESSIONS.add('concat', ((sexp: E.Concat, builder: OpcodeBuilder) => {\r\n  let params = sexp[1].map(p => expr(p, builder));\r\n  return new CompiledConcat(params);\r\n}) as any);\r\n\r\nEXPRESSIONS.add('function', (sexp: BaselineSyntax.FunctionExpression, builder: OpcodeBuilder) => {\r\n  return new CompiledFunctionExpression(sexp[1], builder.symbolTable);\r\n});\r\n\r\nEXPRESSIONS.add('helper', (sexp: E.Helper, builder: OpcodeBuilder) => {\r\n  let { env, symbolTable } = builder;\r\n  let [, path, params, hash] = sexp;\r\n\r\n  if (env.hasHelper(path, symbolTable)) {\r\n    let args = compileArgs(params, hash, builder);\r\n    return new CompiledHelper(path, env.lookupHelper(path, symbolTable), args, symbolTable);\r\n  } else {\r\n    throw new Error(`Compile Error: ${path.join('.')} is not a helper`);\r\n  }\r\n});\r\n\r\nEXPRESSIONS.add('get', (sexp: E.Get, builder: OpcodeBuilder) => {\r\n  return compileRef(sexp[1], builder);\r\n});\r\n\r\nEXPRESSIONS.add('undefined', (_sexp, _builder) => {\r\n  return new CompiledValue(undefined);\r\n});\r\n\r\nEXPRESSIONS.add('arg', (sexp: E.Arg, builder: OpcodeBuilder) => {\r\n  let [, parts] = sexp;\r\n  let head = parts[0];\r\n  let named: Option<number>, partial: Option<number>;\r\n\r\n  if (named = builder.symbolTable.getSymbol('named', head)) {\r\n    let path = parts.slice(1);\r\n    let inner = new CompiledSymbol(named, head);\r\n    return CompiledLookup.create(inner, path);\r\n  } else if (partial = builder.symbolTable.getPartialArgs()) {\r\n    let path = parts.slice(1);\r\n    let inner = new CompiledInPartialName(partial, head);\r\n    return CompiledLookup.create(inner, path);\r\n  } else {\r\n    throw new Error(`[BUG] @${parts.join('.')} is not a valid lookup path.`);\r\n  }\r\n});\r\n\r\nEXPRESSIONS.add('has-block', (sexp: E.HasBlock, builder) => {\r\n  let blockName = sexp[1];\r\n\r\n  let yields: Option<number>, partial: Option<number>;\r\n\r\n  if (yields = builder.symbolTable.getSymbol('yields', blockName)) {\r\n    let inner = new CompiledGetBlockBySymbol(yields, blockName);\r\n    return new CompiledHasBlock(inner);\r\n  } else if (partial = builder.symbolTable.getPartialArgs()) {\r\n    let inner = new CompiledInPartialGetBlock(partial, blockName);\r\n    return new CompiledHasBlock(inner);\r\n  } else {\r\n    throw new Error('[BUG] ${blockName} is not a valid block name.');\r\n  }\r\n});\r\n\r\nEXPRESSIONS.add('has-block-params', (sexp: E.HasBlockParams, builder) => {\r\n  let blockName = sexp[1];\r\n  let yields: Option<number>, partial: Option<number>;\r\n\r\n  if (yields = builder.symbolTable.getSymbol('yields', blockName)) {\r\n    let inner = new CompiledGetBlockBySymbol(yields, blockName);\r\n    return new CompiledHasBlockParams(inner);\r\n  } else if (partial = builder.symbolTable.getPartialArgs()) {\r\n    let inner = new CompiledInPartialGetBlock(partial, blockName);\r\n    return new CompiledHasBlockParams(inner);\r\n  } else {\r\n    throw new Error('[BUG] ${blockName} is not a valid block name.');\r\n  }\r\n\r\n});\r\n\r\nexport function compileArgs(params: Option<WireFormat.Core.Params>, hash: Option<WireFormat.Core.Hash>, builder: OpcodeBuilder): CompiledArgs {\r\n  let compiledParams = compileParams(params, builder);\r\n  let compiledHash = compileHash(hash, builder);\r\n  return CompiledArgs.create(compiledParams, compiledHash, EMPTY_BLOCKS);\r\n}\r\n\r\nexport function compileBlockArgs(params: Option<WireFormat.Core.Params>, hash: Option<WireFormat.Core.Hash>, blocks: BlocksSyntax, builder: OpcodeBuilder): CompiledArgs {\r\n  let compiledParams = compileParams(params, builder);\r\n  let compiledHash = compileHash(hash, builder);\r\n  return CompiledArgs.create(compiledParams, compiledHash, blocks);\r\n}\r\n\r\nexport function compileBaselineArgs(args: BaselineSyntax.Args, builder: OpcodeBuilder): CompiledArgs {\r\n  let [params, hash, _default, inverse] = args;\r\n  return CompiledArgs.create(compileParams(params, builder), compileHash(hash, builder), { default: _default, inverse });\r\n}\r\n\r\nfunction compileParams(params: Option<WireFormat.Core.Params>, builder: OpcodeBuilder): CompiledPositionalArgs {\r\n  if (!params || params.length === 0) return COMPILED_EMPTY_POSITIONAL_ARGS;\r\n  let compiled = params.map(p => expr(p, builder));\r\n  return CompiledPositionalArgs.create(compiled);\r\n}\r\n\r\nfunction compileHash(hash: Option<WireFormat.Core.Hash>, builder: OpcodeBuilder): CompiledNamedArgs {\r\n  if (!hash) return COMPILED_EMPTY_NAMED_ARGS;\r\n  let [keys, values] = hash;\r\n  if (keys.length === 0) return COMPILED_EMPTY_NAMED_ARGS;\r\n\r\n  let compiled = values.map(p => expr(p, builder));\r\n  return new CompiledNamedArgs(keys, compiled);\r\n}\r\n\r\nfunction compileRef(parts: string[], builder: OpcodeBuilder) {\r\n  let head = parts[0];\r\n  let local: Option<number>;\r\n\r\n  if (head === null) { // {{this.foo}}\r\n    let inner = new CompiledSelf();\r\n    let path = parts.slice(1) as string[];\r\n    return CompiledLookup.create(inner, path);\r\n  } else if (local = builder.symbolTable.getSymbol('local', head)) {\r\n    let path = parts.slice(1) as string[];\r\n    let inner = new CompiledSymbol(local, head);\r\n    return CompiledLookup.create(inner, path);\r\n  } else {\r\n    let inner = new CompiledSelf();\r\n    return CompiledLookup.create(inner, parts as string[]);\r\n  }\r\n}\r\n\r\nexport type NestedBlockSyntax = BaselineSyntax.NestedBlock;\r\nexport type CompileBlockMacro = (sexp: NestedBlockSyntax, builder: OpcodeBuilder) => void;\r\n\r\nexport class Blocks {\r\n  private names = dict<number>();\r\n  private funcs: CompileBlockMacro[] = [];\r\n  private missing: CompileBlockMacro;\r\n\r\n  add(name: string, func: CompileBlockMacro) {\r\n    this.funcs.push(func);\r\n    this.names[name] = this.funcs.length - 1;\r\n  }\r\n\r\n  addMissing(func: CompileBlockMacro) {\r\n    this.missing = func;\r\n  }\r\n\r\n  compile(sexp: BaselineSyntax.NestedBlock, builder: OpcodeBuilder): void {\r\n    // assert(sexp[1].length === 1, 'paths in blocks are not supported');\r\n\r\n    let name: string = sexp[1][0];\r\n    let index = this.names[name];\r\n\r\n    if (index === undefined) {\r\n      assert(!!this.missing, `${name} not found, and no catch-all block handler was registered`);\r\n      let func = this.missing;\r\n      let handled = func(sexp, builder);\r\n      assert(!!handled, `${name} not found, and the catch-all block handler didn't handle it`);\r\n    } else {\r\n      let func = this.funcs[index];\r\n      func(sexp, builder);\r\n    }\r\n  }\r\n}\r\n\r\nexport const BLOCKS = new Blocks();\r\n\r\nexport type AppendSyntax = BaselineSyntax.OptimizedAppend | BaselineSyntax.UnoptimizedAppend;\r\nexport type AppendMacro = (path: C.Path, params: Option<C.Params>, hash: Option<C.Hash>, builder: OpcodeBuilder) => ['expr', BaselineSyntax.AnyExpression] | true | false;\r\n\r\nexport class Inlines {\r\n  private names = dict<number>();\r\n  private funcs: AppendMacro[] = [];\r\n  private missing: AppendMacro;\r\n\r\n  add(name: string, func: AppendMacro) {\r\n    this.funcs.push(func);\r\n    this.names[name] = this.funcs.length - 1;\r\n  }\r\n\r\n  addMissing(func: AppendMacro) {\r\n    this.missing = func;\r\n  }\r\n\r\n  compile(sexp: AppendSyntax, builder: OpcodeBuilder): ['expr', BaselineSyntax.AnyExpression] | true {\r\n    let value = sexp[1];\r\n\r\n    // TODO: Fix this so that expression macros can return\r\n    // things like components, so that {{component foo}}\r\n    // is the same as {{(component foo)}}\r\n\r\n    if (!Array.isArray(value)) return ['expr', value];\r\n\r\n    let path: C.Path;\r\n    let params: Option<C.Params>;\r\n    let hash: Option<C.Hash>;\r\n\r\n    if (value[0] === 'helper') {\r\n      path = value[1];\r\n      params = value[2];\r\n      hash = value[3];\r\n    } else if (value[0] === 'unknown') {\r\n      path = value[1];\r\n      params = hash = null;\r\n    } else {\r\n      return ['expr', value];\r\n    }\r\n\r\n    if (path.length > 1 && !params && !hash) {\r\n      return ['expr', value];\r\n    }\r\n\r\n    let name = path[0];\r\n    let index = this.names[name];\r\n\r\n    if (index === undefined && this.missing) {\r\n      let func = this.missing;\r\n      let returned = func(path, params, hash, builder);\r\n      return returned === false ? ['expr', value] : returned;\r\n    } else if (index !== undefined) {\r\n      let func = this.funcs[index];\r\n      let returned = func(path, params, hash, builder);\r\n      return returned === false ? ['expr', value] : returned;\r\n    } else {\r\n      return ['expr', value];\r\n    }\r\n  }\r\n}\r\n\r\nexport const INLINES = new Inlines();\r\n\r\npopulateBuiltins(BLOCKS, INLINES);\r\n\r\nexport function populateBuiltins(blocks: Blocks = new Blocks(), inlines: Inlines = new Inlines()): { blocks: Blocks, inlines: Inlines } {\r\n  blocks.add('if', (sexp: BaselineSyntax.NestedBlock, builder: OpcodeBuilder) => {\r\n    //        PutArgs\r\n    //        Test(Environment)\r\n    //        Enter(BEGIN, END)\r\n    // BEGIN: Noop\r\n    //        JumpUnless(ELSE)\r\n    //        Evaluate(default)\r\n    //        Jump(END)\r\n    // ELSE:  Noop\r\n    //        Evalulate(inverse)\r\n    // END:   Noop\r\n    //        Exit\r\n\r\n    let [,, params, hash, _default, inverse] = sexp;\r\n    let args = compileArgs(params, hash, builder);\r\n\r\n    builder.putArgs(args);\r\n    builder.test('environment');\r\n\r\n    builder.labelled(null, b => {\r\n      if (_default && inverse) {\r\n        b.jumpUnless('ELSE');\r\n        b.evaluate(_default);\r\n        b.jump('END');\r\n        b.label('ELSE');\r\n        b.evaluate(inverse);\r\n      } else if (_default) {\r\n        b.jumpUnless('END');\r\n        b.evaluate(_default);\r\n      } else {\r\n        throw unreachable();\r\n      }\r\n    });\r\n  });\r\n\r\n  blocks.add('unless', (sexp: BaselineSyntax.NestedBlock, builder: OpcodeBuilder) => {\r\n    //        PutArgs\r\n    //        Test(Environment)\r\n    //        Enter(BEGIN, END)\r\n    // BEGIN: Noop\r\n    //        JumpUnless(ELSE)\r\n    //        Evaluate(default)\r\n    //        Jump(END)\r\n    // ELSE:  Noop\r\n    //        Evalulate(inverse)\r\n    // END:   Noop\r\n    //        Exit\r\n\r\n    let [,, params, hash, _default, inverse] = sexp;\r\n    let args = compileArgs(params, hash, builder);\r\n\r\n    builder.putArgs(args);\r\n    builder.test('environment');\r\n\r\n    builder.labelled(null, b => {\r\n      if (_default && inverse) {\r\n        b.jumpIf('ELSE');\r\n        b.evaluate(_default);\r\n        b.jump('END');\r\n        b.label('ELSE');\r\n        b.evaluate( inverse);\r\n      } else if (_default) {\r\n        b.jumpIf('END');\r\n        b.evaluate(_default);\r\n      } else {\r\n        throw unreachable();\r\n      }\r\n    });\r\n  });\r\n\r\n  blocks.add('with', (sexp: BaselineSyntax.NestedBlock, builder: OpcodeBuilder) => {\r\n    //        PutArgs\r\n    //        Test(Environment)\r\n    //        Enter(BEGIN, END)\r\n    // BEGIN: Noop\r\n    //        JumpUnless(ELSE)\r\n    //        Evaluate(default)\r\n    //        Jump(END)\r\n    // ELSE:  Noop\r\n    //        Evalulate(inverse)\r\n    // END:   Noop\r\n    //        Exit\r\n\r\n    let [,, params, hash, _default, inverse] = sexp;\r\n    let args = compileArgs(params, hash, builder);\r\n\r\n    builder.putArgs(args);\r\n    builder.test('environment');\r\n\r\n    builder.labelled(null, b => {\r\n      if (_default && inverse) {\r\n        b.jumpUnless('ELSE');\r\n        b.evaluate(_default);\r\n        b.jump('END');\r\n        b.label('ELSE');\r\n        b.evaluate(inverse);\r\n      } else if (_default) {\r\n        b.jumpUnless('END');\r\n        b.evaluate(_default);\r\n      } else {\r\n        throw unreachable();\r\n      }\r\n    });\r\n  });\r\n\r\n  blocks.add('each', (sexp: BaselineSyntax.NestedBlock, builder: OpcodeBuilder) => {\r\n    //         Enter(BEGIN, END)\r\n    // BEGIN:  Noop\r\n    //         PutArgs\r\n    //         PutIterable\r\n    //         JumpUnless(ELSE)\r\n    //         EnterList(BEGIN2, END2)\r\n    // ITER:   Noop\r\n    //         NextIter(BREAK)\r\n    //         EnterWithKey(BEGIN2, END2)\r\n    // BEGIN2: Noop\r\n    //         PushChildScope\r\n    //         Evaluate(default)\r\n    //         PopScope\r\n    // END2:   Noop\r\n    //         Exit\r\n    //         Jump(ITER)\r\n    // BREAK:  Noop\r\n    //         ExitList\r\n    //         Jump(END)\r\n    // ELSE:   Noop\r\n    //         Evalulate(inverse)\r\n    // END:    Noop\r\n    //         Exit\r\n\r\n    let [,, params, hash, _default, inverse] = sexp;\r\n    let args = compileArgs(params, hash, builder);\r\n\r\n    builder.labelled(args, b => {\r\n      b.putIterator();\r\n\r\n      if (inverse) {\r\n        b.jumpUnless('ELSE');\r\n      } else {\r\n        b.jumpUnless('END');\r\n      }\r\n\r\n      b.iter(b => {\r\n        b.evaluate(unwrap(_default));\r\n      });\r\n\r\n      if (inverse) {\r\n        b.jump('END');\r\n        b.label('ELSE');\r\n        b.evaluate(inverse);\r\n      }\r\n    });\r\n  });\r\n\r\n  return { blocks, inlines };\r\n}\r\n","import * as WireFormat from '@glimmer/wire-format';\r\nimport { BaselineSyntax } from '../scanner';\r\nimport { dict, assert } from '@glimmer/util';\r\nimport { SymbolTable } from '@glimmer/interfaces';\r\n\r\nexport type Syntax = BaselineSyntax.AnyStatement;\r\nexport type Name = BaselineSyntax.AnyStatement[0];\r\nexport type SpecializeFunction = (sexp: Syntax, symbolTable: SymbolTable) => Syntax;\r\n\r\nexport class Specialize {\r\n  private names = dict<number>();\r\n  private funcs: SpecializeFunction[] = [];\r\n\r\n  add(name: Name, func: SpecializeFunction) {\r\n    this.funcs.push(func);\r\n    this.names[name] = this.funcs.length - 1;\r\n  }\r\n\r\n  specialize(sexp: Syntax, table: SymbolTable): Syntax {\r\n    let name: Name = sexp[0];\r\n    let index = this.names[name];\r\n\r\n    if (index === undefined) return sexp;\r\n\r\n    let func = this.funcs[index];\r\n    assert(!!func, `expected a specialization for ${sexp[0]}`);\r\n    return func(sexp, table);\r\n  }\r\n}\r\n\r\nexport const SPECIALIZE = new Specialize();\r\n\r\nimport S = WireFormat.Statements;\r\nimport E = WireFormat.Expressions;\r\n\r\nSPECIALIZE.add('append', (sexp: S.Append, _symbolTable) => {\r\n  let path = sexp[1];\r\n\r\n  if (Array.isArray(path) && (E.isUnknown(path) || E.isGet(path))) {\r\n    if (path[1].length !== 1) {\r\n\r\n      return ['unoptimized-append', sexp[1], sexp[2]];\r\n    }\r\n  }\r\n\r\n  return ['optimized-append', sexp[1], sexp[2]];\r\n});\r\n\r\nSPECIALIZE.add('dynamic-attr', (sexp: S.DynamicAttr, _symbolTable) => {\r\n  return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], false];\r\n});\r\n\r\nSPECIALIZE.add('trusting-attr', (sexp: S.TrustingAttr, _symbolTable) => {\r\n  return ['any-dynamic-attr', sexp[1], sexp[2], sexp[3], true];\r\n});\r\n\r\nSPECIALIZE.add('partial', (sexp: S.Partial, _table) => {\r\n  let expression = sexp[1];\r\n\r\n  if (typeof expression === 'string') {\r\n    return ['static-partial', expression];\r\n  } else {\r\n    return ['dynamic-partial', expression];\r\n  }\r\n});\r\n","import {\n  SerializedTemplateWithLazyBlock,\n  SerializedTemplateBlock\n} from '@glimmer/wire-format';\nimport { PathReference } from '@glimmer/reference';\nimport { assign } from '@glimmer/util';\nimport { SymbolTable } from '@glimmer/interfaces';\nimport { Environment, DynamicScope } from './environment';\nimport { ElementStack } from './builder';\nimport { VM } from './vm';\nimport RenderResult from './vm/render-result';\nimport Scanner, {\n  EntryPoint,\n  PartialBlock,\n  Layout\n} from './scanner';\nimport * as Simple from './dom/interfaces';\n\n/**\n * Environment specific template.\n */\nexport interface Template<T> {\n  /**\n   * Template identifier, if precompiled will be the id of the\n   * precompiled template.\n   */\n  id: string;\n\n  /**\n   * Template meta (both compile time and environment specific).\n   */\n  meta: T;\n\n  /**\n   * Helper to render template as root entry point.\n   */\n  render(self: PathReference<any>, appendTo: Simple.Element, dynamicScope: DynamicScope): RenderResult;\n\n  // internal casts, these are lazily created and cached\n  asEntryPoint(): EntryPoint;\n  asLayout(): Layout;\n  asPartial(symbols: SymbolTable): PartialBlock;\n\n  // exposed for visualizer\n  _block: SerializedTemplateBlock;\n}\n\nexport interface TemplateFactory<T, U> {\n  /**\n   * Template identifier, if precompiled will be the id of the\n   * precompiled template.\n   */\n  id: string;\n\n  /**\n   * Compile time meta.\n   */\n  meta: T;\n\n  /**\n   * Used to create an environment specific singleton instance\n   * of the template.\n   *\n   * @param {Environment} env glimmer Environment\n   */\n  create(env: Environment): Template<T>;\n  /**\n   * Used to create an environment specific singleton instance\n   * of the template.\n   *\n   * @param {Environment} env glimmer Environment\n   * @param {Object} meta environment specific injections into meta\n   */\n  create(env: Environment, meta: U): Template<T & U>;\n}\n\nlet clientId = 0;\n\n/**\n * Wraps a template js in a template module to change it into a factory\n * that handles lazy parsing the template and to create per env singletons\n * of the template.\n */\nexport default function templateFactory<T>(serializedTemplate: SerializedTemplateWithLazyBlock<T>): TemplateFactory<T, T>;\nexport default function templateFactory<T, U>(serializedTemplate: SerializedTemplateWithLazyBlock<T>): TemplateFactory<T, U>;\nexport default function templateFactory({ id: templateId, meta, block }: SerializedTemplateWithLazyBlock<any>): TemplateFactory<{}, {}> {\n  let parsedBlock: SerializedTemplateBlock;\n  let id = templateId || `client-${clientId++}`;\n  let create = (env: Environment, envMeta?: {}) => {\n    let newMeta = envMeta ? assign({}, envMeta, meta) : meta;\n    if (!parsedBlock) {\n      parsedBlock = JSON.parse(block);\n    }\n    return template(parsedBlock, id, newMeta, env);\n  };\n  return { id, meta, create };\n}\n\nfunction template<T>(block: SerializedTemplateBlock, id: string, meta: T, env: Environment): Template<T> {\n  let scanner = new Scanner(block, meta, env);\n  let entryPoint: EntryPoint;\n  let asEntryPoint = () => {\n    if (!entryPoint) entryPoint = scanner.scanEntryPoint();\n    return entryPoint;\n  };\n  let layout: Layout;\n  let asLayout = () => {\n    if (!layout) layout = scanner.scanLayout();\n    return layout;\n  };\n  let asPartial = (symbols: SymbolTable) => scanner.scanPartial(symbols);\n  let render = (self: PathReference<any>, appendTo: Simple.Element, dynamicScope: DynamicScope) => {\n    let elementStack = ElementStack.forInitialRender(env, appendTo, null);\n    let compiled = asEntryPoint().compile(env);\n    let vm = VM.initial(env, self, dynamicScope, elementStack, compiled.symbols);\n    return vm.execute(compiled.slice);\n  };\n  return { id, meta, _block: block, asEntryPoint, asLayout, asPartial, render };\n}\n","import { Opaque, unreachable } from '@glimmer/util';\nimport { DOMChanges, DOMTreeConstruction } from './dom/helper';\nimport * as Simple from './dom/interfaces';\nimport { FIX_REIFICATION } from './dom/interfaces';\nimport { Bounds, Cursor, SingleNodeBounds, single, clear } from './bounds';\n\nexport interface SafeString {\n  toHTML(): string;\n}\n\nexport function isSafeString(value: Opaque): value is SafeString {\n  return !!value && typeof value['toHTML'] === 'function';\n}\n\nexport function isNode(value: Opaque): value is Node {\n  return value !== null && typeof value === 'object' && typeof value['nodeType'] === 'number';\n}\n\nexport function isString(value: Opaque): value is string {\n  return typeof value === 'string';\n}\n\nexport type Insertion = CautiousInsertion | TrustingInsertion;\nexport type CautiousInsertion = string | SafeString | Node;\nexport type TrustingInsertion = string | Node;\n\nabstract class Upsert {\n  constructor(public bounds: Bounds) {\n  }\n\n  abstract update(dom: DOMChanges, value: Insertion): boolean;\n}\n\nexport default Upsert;\n\nexport function cautiousInsert(dom: DOMTreeConstruction, cursor: Cursor, value: CautiousInsertion): Upsert {\n  if (isString(value)) {\n    return TextUpsert.insert(dom, cursor, value);\n  }\n  if (isSafeString(value)) {\n    return SafeStringUpsert.insert(dom, cursor, value);\n  }\n  if (isNode(value)) {\n    return NodeUpsert.insert(dom, cursor, value);\n  }\n\n  throw unreachable();\n}\n\nexport function trustingInsert(dom: DOMTreeConstruction, cursor: Cursor, value: TrustingInsertion): Upsert {\n  if (isString(value)) {\n    return HTMLUpsert.insert(dom, cursor, value);\n  }\n  if (isNode(value)) {\n    return NodeUpsert.insert(dom, cursor, value);\n  }\n\n  throw unreachable();\n}\n\nclass TextUpsert extends Upsert {\n  static insert(dom: DOMTreeConstruction, cursor: Cursor, value: string): Upsert {\n    let textNode = dom.createTextNode(value);\n    dom.insertBefore(cursor.element, textNode, cursor.nextSibling);\n    let bounds = new SingleNodeBounds(cursor.element, textNode);\n    return new TextUpsert(bounds, textNode);\n  }\n\n  private textNode: Text;\n\n  constructor(bounds: Bounds, textNode: Simple.Text) {\n    super(bounds);\n    this.textNode = textNode as Text;\n  }\n\n  update(_dom: DOMChanges, value: Insertion): boolean {\n    if (isString(value)) {\n      let { textNode } = this;\n      textNode.nodeValue = value;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nclass HTMLUpsert extends Upsert {\n  static insert(dom: DOMTreeConstruction, cursor: Cursor, value: string): Upsert {\n    let bounds = dom.insertHTMLBefore(cursor.element, value, cursor.nextSibling);\n    return new HTMLUpsert(bounds);\n  }\n\n  update(dom: DOMChanges, value: Insertion): boolean {\n    if (isString(value)) {\n      let { bounds } = this;\n\n      let parentElement = bounds.parentElement();\n      let nextSibling = clear(bounds);\n\n      this.bounds = dom.insertHTMLBefore(parentElement as FIX_REIFICATION<Element>, nextSibling as FIX_REIFICATION<Node>, value);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nclass SafeStringUpsert extends Upsert {\n  static insert(dom: DOMTreeConstruction, cursor: Cursor, value: SafeString): Upsert {\n    let stringValue = value.toHTML();\n    let bounds = dom.insertHTMLBefore(cursor.element, stringValue, cursor.nextSibling);\n    return new SafeStringUpsert(bounds, stringValue);\n  }\n\n  constructor(bounds: Bounds, private lastStringValue: string) {\n    super(bounds);\n  }\n\n  update(dom: DOMChanges, value: Insertion): boolean {\n    if (isSafeString(value)) {\n      let stringValue = value.toHTML();\n\n      if (stringValue !== this.lastStringValue) {\n        let { bounds } = this;\n\n        let parentElement = bounds.parentElement();\n        let nextSibling = clear(bounds);\n\n        this.bounds = dom.insertHTMLBefore(parentElement as FIX_REIFICATION<Element>, nextSibling as FIX_REIFICATION<Node>, stringValue);\n        this.lastStringValue = stringValue;\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nclass NodeUpsert extends Upsert {\n  static insert(dom: DOMTreeConstruction, cursor: Cursor, node: Simple.Node): Upsert {\n    dom.insertBefore(cursor.element, node, cursor.nextSibling);\n    return new NodeUpsert(single(cursor.element, node));\n  }\n\n  update(dom: DOMChanges, value: Insertion): boolean {\n    if (isNode(value)) {\n      let { bounds } = this;\n\n      let parentElement = bounds.parentElement();\n      let nextSibling = clear(bounds);\n\n      this.bounds = dom.insertNodeBefore(parentElement as FIX_REIFICATION<Element>, value, nextSibling as FIX_REIFICATION<Node>);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Option, Dict, dict, HAS_NATIVE_WEAKMAP } from '@glimmer/util';\n\nexport const EMPTY_ARRAY = HAS_NATIVE_WEAKMAP ? Object.freeze([]) : [];\nexport const EMPTY_DICT: Dict<any> = HAS_NATIVE_WEAKMAP ? Object.freeze(dict<any>()) : dict<any>();\n\nexport interface EnumerableCallback<T> {\n  (item: T): void;\n}\n\nexport interface Enumerable<T> {\n  forEach(callback: EnumerableCallback<T>): void;\n}\n\nexport interface Destroyable {\n  destroy(): void;\n}\n\nexport interface Range<T> {\n  min(): number;\n  max(): number;\n  at(index: number): Option<T>;\n}\n\nexport class ListRange<T> implements Range<T> {\n  private list: T[];\n\n  // [start, end]\n  private start: number;\n  private end: number;\n\n  constructor(list: T[], start: number, end: number) {\n    this.list = list;\n    this.start = start;\n    this.end = end;\n  }\n\n  at(index: number): Option<T> {\n    if (index >= this.list.length) return null;\n    return this.list[index];\n  }\n\n  min(): number {\n    return this.start;\n  }\n\n  max(): number {\n    return this.end;\n  }\n}\n","export { default as VM, PublicVM } from './vm/append';\nexport { default as UpdatingVM } from './vm/update';\nexport { default as RenderResult } from './vm/render-result';\n","import { Scope, DynamicScope, Environment, Opcode } from '../environment';\nimport { ElementStack } from '../builder';\nimport { Option, Destroyable, Stack, LinkedList, ListSlice, LOGGER, Opaque, assert, expect } from '@glimmer/util';\nimport { PathReference, combineSlice } from '@glimmer/reference';\nimport { CompiledBlock } from '../compiled/blocks';\nimport { InlineBlock, PartialBlock } from '../scanner';\nimport { CompiledExpression } from '../compiled/expressions';\nimport { CompiledArgs, EvaluatedArgs } from '../compiled/expressions/args';\nimport { LabelOpcode, JumpIfNotModifiedOpcode, DidModifyOpcode } from '../compiled/opcodes/vm';\nimport { Component, ComponentManager } from '../component/interfaces';\nimport { VMState, ListBlockOpcode, TryOpcode, BlockOpcode } from './update';\nimport RenderResult from './render-result';\nimport { CapturedFrame, FrameStack } from './frame';\n\nimport {\n  APPEND_OPCODES,\n  Slice,\n  UpdatingOpcode,\n  Constants,\n  ConstantString,\n  ConstantSlice,\n} from '../opcodes';\n\nexport interface PublicVM {\n  env: Environment;\n  getArgs(): Option<EvaluatedArgs>;\n  dynamicScope(): DynamicScope;\n  getSelf(): PathReference<Opaque>;\n  newDestroyable(d: Destroyable): void;\n}\n\nexport default class VM implements PublicVM {\n  private dynamicScopeStack = new Stack<DynamicScope>();\n  private scopeStack = new Stack<Scope>();\n  public updatingOpcodeStack = new Stack<LinkedList<UpdatingOpcode>>();\n  public cacheGroups = new Stack<Option<UpdatingOpcode>>();\n  public listBlockStack = new Stack<ListBlockOpcode>();\n  public frame = new FrameStack();\n  public constants: Constants;\n\n  static initial(\n    env: Environment,\n    self: PathReference<Opaque>,\n    dynamicScope: DynamicScope,\n    elementStack: ElementStack,\n    size: number\n  ) {\n    let scope = Scope.root(self, size);\n    return new VM(env, scope, dynamicScope, elementStack);\n  }\n\n  constructor(\n    public env: Environment,\n    scope: Scope,\n    dynamicScope: DynamicScope,\n    private elementStack: ElementStack,\n  ) {\n    this.env = env;\n    this.constants = env.constants;\n    this.elementStack = elementStack;\n    this.scopeStack.push(scope);\n    this.dynamicScopeStack.push(dynamicScope);\n  }\n\n  capture(): VMState {\n    return {\n      env: this.env,\n      scope: this.scope(),\n      dynamicScope: this.dynamicScope(),\n      frame: this.frame.capture()\n    };\n  }\n\n  goto(ip: number) {\n    // assert(this.frame.getOps().contains(op), `Illegal jump to ${op.label}`);\n    this.frame.goto(ip);\n  }\n\n  beginCacheGroup() {\n    this.cacheGroups.push(this.updating().tail());\n  }\n\n  commitCacheGroup() {\n    //        JumpIfNotModified(END)\n    //        (head)\n    //        (....)\n    //        (tail)\n    //        DidModify\n    // END:   Noop\n\n    let END = new LabelOpcode(\"END\");\n\n    let opcodes = this.updating();\n    let marker = this.cacheGroups.pop();\n    let head = marker ? opcodes.nextNode(marker) : opcodes.head();\n    let tail = opcodes.tail();\n    let tag = combineSlice(new ListSlice(head, tail));\n\n    let guard = new JumpIfNotModifiedOpcode(tag, END);\n\n    opcodes.insertBefore(guard, head);\n    opcodes.append(new DidModifyOpcode(guard));\n    opcodes.append(END);\n  }\n\n  enter(sliceId: ConstantSlice) {\n    let updating = new LinkedList<UpdatingOpcode>();\n\n    let tracker = this.stack().pushUpdatableBlock();\n    let state = this.capture();\n\n    let slice = this.constants.getSlice(sliceId);\n    let tryOpcode = new TryOpcode(slice, state, tracker, updating);\n\n    this.didEnter(tryOpcode, updating);\n  }\n\n  enterWithKey(key: string, ops: Slice) {\n    let updating = new LinkedList<UpdatingOpcode>();\n\n    let tracker = this.stack().pushUpdatableBlock();\n    let state = this.capture();\n\n    let tryOpcode = new TryOpcode(ops, state, tracker, updating);\n\n    this.listBlock().map[key] = tryOpcode;\n\n    this.didEnter(tryOpcode, updating);\n  }\n\n  enterList(ops: Slice) {\n    let updating = new LinkedList<BlockOpcode>();\n\n    let tracker = this.stack().pushBlockList(updating);\n    let state = this.capture();\n    let artifacts = this.frame.getIterator().artifacts;\n\n    let opcode = new ListBlockOpcode(ops, state, tracker, updating, artifacts);\n\n    this.listBlockStack.push(opcode);\n\n    this.didEnter(opcode, updating);\n  }\n\n  private didEnter(opcode: BlockOpcode, updating: LinkedList<UpdatingOpcode>) {\n    this.updateWith(opcode);\n    this.updatingOpcodeStack.push(updating);\n  }\n\n  exit() {\n    this.stack().popBlock();\n    this.updatingOpcodeStack.pop();\n\n    let parent = this.updating().tail() as BlockOpcode;\n\n    parent.didInitializeChildren();\n  }\n\n  exitList() {\n    this.exit();\n    this.listBlockStack.pop();\n  }\n\n  updateWith(opcode: UpdatingOpcode) {\n    this.updating().append(opcode);\n  }\n\n  listBlock(): ListBlockOpcode {\n    return expect(this.listBlockStack.current, 'expected a list block');\n  }\n\n  updating(): LinkedList<UpdatingOpcode> {\n    return expect(this.updatingOpcodeStack.current, 'expected updating opcode on the updating opcode stack');\n  }\n\n  stack(): ElementStack {\n    return this.elementStack;\n  }\n\n  scope(): Scope {\n    return expect(this.scopeStack.current, 'expected scope on the scope stack');\n  }\n\n  dynamicScope(): DynamicScope {\n    return expect(this.dynamicScopeStack.current, 'expected dynamic scope on the dynamic scope stack');\n  }\n\n  pushFrame(\n    block: CompiledBlock,\n    args?: Option<EvaluatedArgs>,\n    callerScope?: Scope\n  ) {\n    this.frame.push(block.slice);\n\n    if (args) this.frame.setArgs(args);\n    if (args && args.blocks) this.frame.setBlocks(args.blocks);\n    if (callerScope) this.frame.setCallerScope(callerScope);\n  }\n\n  pushComponentFrame(\n    layout: CompiledBlock,\n    args: EvaluatedArgs,\n    callerScope: Scope,\n    component: Component,\n    manager: ComponentManager<Component>,\n    shadow: Option<InlineBlock>\n  ) {\n    this.frame.push(layout.slice, component, manager, shadow);\n\n    if (args) this.frame.setArgs(args);\n    if (args && args.blocks) this.frame.setBlocks(args.blocks);\n    if (callerScope) this.frame.setCallerScope(callerScope);\n  }\n\n  pushEvalFrame(slice: Slice) {\n    this.frame.push(slice);\n  }\n\n  pushChildScope() {\n    this.scopeStack.push(this.scope().child());\n  }\n\n  pushCallerScope() {\n    this.scopeStack.push(expect(this.scope().getCallerScope(), 'pushCallerScope is called when a caller scope is present'));\n  }\n\n  pushDynamicScope(): DynamicScope {\n    let child = this.dynamicScope().child();\n    this.dynamicScopeStack.push(child);\n    return child;\n  }\n\n  pushRootScope(self: PathReference<any>, size: number): Scope {\n    let scope = Scope.root(self, size);\n    this.scopeStack.push(scope);\n    return scope;\n  }\n\n  popScope() {\n    this.scopeStack.pop();\n  }\n\n  popDynamicScope() {\n    this.dynamicScopeStack.pop();\n  }\n\n  newDestroyable(d: Destroyable) {\n    this.stack().newDestroyable(d);\n  }\n\n  /// SCOPE HELPERS\n\n  getSelf(): PathReference<any> {\n    return this.scope().getSelf();\n  }\n\n  referenceForSymbol(symbol: number): PathReference<any> {\n    return this.scope().getSymbol(symbol);\n  }\n\n  getArgs(): Option<EvaluatedArgs> {\n    return this.frame.getArgs();\n  }\n\n  /// EXECUTION\n\n  resume(opcodes: Slice, frame: CapturedFrame): RenderResult {\n    return this.execute(opcodes, vm => vm.frame.restore(frame));\n  }\n\n  execute(opcodes: Slice, initialize?: (vm: VM) => void): RenderResult {\n    LOGGER.debug(\"[VM] Begin program execution\");\n\n    let { elementStack, frame, updatingOpcodeStack, env } = this;\n\n    elementStack.pushSimpleBlock();\n\n    updatingOpcodeStack.push(new LinkedList<UpdatingOpcode>());\n    frame.push(opcodes);\n\n    if (initialize) initialize(this);\n\n    let opcode: Option<Opcode>;\n\n    while (frame.hasOpcodes()) {\n      if (opcode = frame.nextStatement(this.env)) {\n        LOGGER.trace(opcode);\n        APPEND_OPCODES.evaluate(this, opcode);\n      }\n    }\n\n    LOGGER.debug(\"[VM] Completed program execution\");\n\n    return new RenderResult(\n      env,\n      expect(updatingOpcodeStack.pop(), 'there should be a final updating opcode stack'),\n      elementStack.popBlock()\n    );\n  }\n\n  evaluateOpcode(opcode: Opcode) {\n    APPEND_OPCODES.evaluate(this, opcode);\n  }\n\n  // Make sure you have opcodes that push and pop a scope around this opcode\n  // if you need to change the scope.\n  invokeBlock(block: InlineBlock, args: Option<EvaluatedArgs>) {\n    let compiled = block.compile(this.env);\n    this.pushFrame(compiled, args);\n  }\n\n  invokePartial(block: PartialBlock) {\n    let compiled = block.compile(this.env);\n    this.pushFrame(compiled);\n  }\n\n  invokeLayout(\n    args: EvaluatedArgs,\n    layout: CompiledBlock,\n    callerScope: Scope,\n    component: Component,\n    manager: ComponentManager<Component>,\n    shadow: Option<InlineBlock>\n  ) {\n    this.pushComponentFrame(layout, args, callerScope, component, manager, shadow);\n  }\n\n  evaluateOperand(expr: CompiledExpression<any>) {\n    this.frame.setOperand(expr.evaluate(this));\n  }\n\n  evaluateArgs(args: CompiledArgs) {\n    let evaledArgs = this.frame.setArgs(args.evaluate(this));\n    this.frame.setOperand(evaledArgs.positional.at(0));\n  }\n\n  bindPositionalArgs(symbols: number[]) {\n    let args = expect(this.frame.getArgs(), 'bindPositionalArgs assumes a previous setArgs');\n\n    let { positional } = args;\n\n    let scope = this.scope();\n\n    for(let i=0; i < symbols.length; i++) {\n      scope.bindSymbol(symbols[i], positional.at(i));\n    }\n  }\n\n  bindNamedArgs(names: ConstantString[], symbols: number[]) {\n    let args = expect(this.frame.getArgs(), 'bindNamedArgs assumes a previous setArgs');\n    let scope = this.scope();\n\n    let { named } = args;\n\n    for(let i=0; i < names.length; i++) {\n      let name = this.constants.getString(names[i]);\n      scope.bindSymbol(symbols[i], named.get(name));\n    }\n  }\n\n  bindBlocks(names: ConstantString[], symbols: number[]) {\n    let blocks = this.frame.getBlocks();\n    let scope = this.scope();\n\n    for(let i=0; i < names.length; i++) {\n      let name = this.constants.getString(names[i]);\n      scope.bindBlock(symbols[i], (blocks && blocks[name]) || null);\n    }\n  }\n\n  bindPartialArgs(symbol: number) {\n    let args = expect(this.frame.getArgs(), 'bindPartialArgs assumes a previous setArgs');\n    let scope = this.scope();\n\n    assert(args, \"Cannot bind named args\");\n\n    scope.bindPartialArgs(symbol, args);\n  }\n\n  bindCallerScope() {\n    let callerScope = this.frame.getCallerScope();\n    let scope = this.scope();\n\n    assert(callerScope, \"Cannot bind caller scope\");\n\n    scope.bindCallerScope(callerScope);\n  }\n\n  bindDynamicScope(names: ConstantString[]) {\n    let args = expect(this.frame.getArgs(), 'bindDynamicScope assumes a previous setArgs');\n    let scope = this.dynamicScope();\n\n    assert(args, \"Cannot bind dynamic scope\");\n\n    for(let i=0; i < names.length; i++) {\n      let name = this.constants.getString(names[i]);\n      scope.set(name, args.named.get(name));\n    }\n  }\n}\n","import { Scope, Environment, Opcode } from '../environment';\nimport { Reference, PathReference, ReferenceIterator } from '@glimmer/reference';\nimport { TRUST, Option, unwrap, expect } from '@glimmer/util';\nimport { InlineBlock } from '../scanner';\nimport { EvaluatedArgs } from '../compiled/expressions/args';\nimport { Slice } from '../opcodes';\nimport { Component, ComponentManager } from '../component/interfaces';\n\nexport class CapturedFrame {\n  constructor(\n    public operand: Option<PathReference<any>>,\n    public args: Option<EvaluatedArgs>,\n    public condition: Option<Reference<boolean>>\n  ) {}\n}\n\nclass Frame {\n  ip: number;\n  operand: Option<PathReference<any>> = null;\n  immediate: any = null;\n  args: Option<EvaluatedArgs> = null;\n  callerScope: Option<Scope> = null;\n  blocks: Option<Blocks> = null;\n  condition: Option<Reference<boolean>> = null;\n  iterator: Option<ReferenceIterator> = null;\n  key: Option<string> = null;\n\n  constructor(\n    public ops: Slice,\n    public component: Component = null,\n    public manager: Option<ComponentManager<Component>> = null,\n    public shadow: Option<InlineBlock> = null\n  ) {\n    this.ip = ops[0];\n  }\n\n  capture(): CapturedFrame {\n    return new CapturedFrame(this.operand, this.args, this.condition);\n  }\n\n  restore(frame: CapturedFrame) {\n    this.operand = frame['operand'];\n    this.args = frame['args'];\n    this.condition = frame['condition'];\n  }\n}\n\nexport interface Blocks {\n  default: Option<InlineBlock>;\n  inverse: Option<InlineBlock>;\n}\n\nexport class FrameStack {\n  private frames: Frame[] = [];\n  private frame: Option<number> = null;\n\n  private get currentFrame(): Frame {\n    return this.frames[unwrap(this.frame)];\n  }\n\n  push(ops: Slice, component: Component = null, manager: Option<ComponentManager<Component>> = null, shadow: Option<InlineBlock> = null) {\n    let frame = (this.frame === null) ? (this.frame = 0) : ++this.frame;\n\n    if (this.frames.length <= frame) {\n      this.frames.push(null as TRUST<Frame, 'the null is replaced on the next line'>);\n    }\n\n    this.frames[frame] = new Frame(ops, component, manager, shadow);\n  }\n\n  pop() {\n    let { frames, frame } = this;\n    frames[expect(frame, 'only pop after pushing')] = null as TRUST<Frame, \"this frame won't be accessed anymore\">;\n    this.frame = frame === 0 ? null : frame - 1;\n  }\n\n  capture(): CapturedFrame {\n    return this.currentFrame.capture();\n  }\n\n  restore(frame: CapturedFrame) {\n    this.currentFrame.restore(frame);\n  }\n\n  getOps(): Slice {\n    return this.currentFrame.ops;\n  }\n\n  getCurrent(): number {\n    return this.currentFrame.ip;\n  }\n\n  setCurrent(ip: number): number {\n    return this.currentFrame.ip = ip;\n  }\n\n  getOperand<T>(): PathReference<T> {\n    return unwrap(this.currentFrame.operand);\n  }\n\n  setOperand<T>(operand: PathReference<T>): PathReference<T> {\n    return this.currentFrame.operand = operand;\n  }\n\n  getImmediate<T>(): T {\n    return this.currentFrame.immediate;\n  }\n\n  setImmediate<T>(value: T): T {\n    return this.currentFrame.immediate = value;\n  }\n\n  // FIXME: These options are required in practice by the existing code, but\n  // figure out why.\n\n  getArgs(): Option<EvaluatedArgs> {\n    return this.currentFrame.args;\n  }\n\n  setArgs(args: EvaluatedArgs): EvaluatedArgs {\n    return this.currentFrame.args = args;\n  }\n\n  getCondition(): Reference<boolean> {\n    return unwrap(this.currentFrame.condition);\n  }\n\n  setCondition(condition: Reference<boolean>): Reference<boolean> {\n    return this.currentFrame.condition = condition;\n  }\n\n  getIterator(): ReferenceIterator {\n    return unwrap(this.currentFrame.iterator);\n  }\n\n  setIterator(iterator: ReferenceIterator): ReferenceIterator {\n    return this.currentFrame.iterator = iterator;\n  }\n\n  getKey(): Option<string> {\n    return this.currentFrame.key;\n  }\n\n  setKey(key: string): string {\n    return this.currentFrame.key = key;\n  }\n\n  getBlocks(): Blocks {\n    return unwrap(this.currentFrame.blocks);\n  }\n\n  setBlocks(blocks: Blocks): Blocks {\n    return this.currentFrame.blocks = blocks;\n  }\n\n  getCallerScope(): Scope {\n    return unwrap(this.currentFrame.callerScope);\n  }\n\n  setCallerScope(callerScope: Scope): Scope {\n    return this.currentFrame.callerScope = callerScope;\n  }\n\n  getComponent(): Component {\n    return unwrap(this.currentFrame.component);\n  }\n\n  getManager(): ComponentManager<Component> {\n    return unwrap(this.currentFrame.manager);\n  }\n\n  getShadow(): Option<InlineBlock> {\n    return this.currentFrame.shadow;\n  }\n\n  goto(ip: number) {\n    this.setCurrent(ip);\n  }\n\n  hasOpcodes(): boolean {\n    return this.frame !== null;\n  }\n\n  nextStatement(env: Environment): Option<Opcode> {\n    let ip = this.frames[unwrap(this.frame)].ip;\n    let ops = this.getOps();\n\n    if (ip <= ops[1]) {\n      let program = env.program;\n      this.setCurrent(ip + 4);\n      return program.opcode(ip);\n    } else {\n      this.pop();\n      return null;\n    }\n  }\n}\n","import { Option, LinkedList } from '@glimmer/util';\nimport Environment from '../environment';\nimport { DestroyableBounds, clear } from '../bounds';\nimport UpdatingVM, { ExceptionHandler } from './update';\nimport { UpdatingOpcode } from '../opcodes';\nimport * as Simple from '../dom/interfaces';\n\nexport default class RenderResult implements DestroyableBounds, ExceptionHandler {\n  constructor(\n    private env: Environment,\n    private updating: LinkedList<UpdatingOpcode>,\n    private bounds: DestroyableBounds\n  ) {}\n\n  rerender({ alwaysRevalidate = false } = { alwaysRevalidate: false }) {\n    let { env, updating } = this;\n    let vm = new UpdatingVM(env, { alwaysRevalidate });\n    vm.execute(updating, this);\n  }\n\n  parentElement(): Simple.Element {\n    return this.bounds.parentElement();\n  }\n\n  firstNode(): Option<Simple.Node> {\n    return this.bounds.firstNode();\n  }\n\n  lastNode(): Option<Simple.Node> {\n    return this.bounds.lastNode();\n  }\n\n  opcodes(): LinkedList<UpdatingOpcode> {\n    return this.updating;\n  }\n\n  handleException() {\n    throw \"this should never happen\";\n  }\n\n  destroy() {\n    this.bounds.destroy();\n    clear(this.bounds);\n  }\n}\n","import { Scope, DynamicScope, Environment } from '../environment';\nimport { DestroyableBounds, clear, move as moveBounds } from '../bounds';\nimport { ElementStack, Tracker, UpdatableTracker } from '../builder';\nimport { LOGGER, Option, Opaque, Stack, LinkedList, Dict, dict, expect } from '@glimmer/util';\nimport {\n  ConstReference,\n  PathReference,\n  IterationArtifacts,\n  IteratorSynchronizer,\n  IteratorSynchronizerDelegate,\n\n  // Tags\n  combine,\n  Revision,\n  UpdatableTag,\n  combineSlice,\n  CONSTANT_TAG,\n  INITIAL\n} from '@glimmer/reference';\nimport { EvaluatedArgs } from '../compiled/expressions/args';\nimport { Constants, OpcodeJSON, UpdatingOpcode, UpdatingOpSeq, Slice } from '../opcodes';\nimport { DOMChanges } from '../dom/helper';\nimport * as Simple from '../dom/interfaces';\nimport { CapturedFrame } from './frame';\n\nimport VM from './append';\n\nexport default class UpdatingVM {\n  public env: Environment;\n  public dom: DOMChanges;\n  public alwaysRevalidate: boolean;\n  public constants: Constants;\n\n  private frameStack: Stack<UpdatingVMFrame> = new Stack<UpdatingVMFrame>();\n\n  constructor(env: Environment, { alwaysRevalidate = false }) {\n    this.env = env;\n    this.constants = env.constants;\n    this.dom = env.getDOM();\n    this.alwaysRevalidate = alwaysRevalidate;\n  }\n\n  execute(opcodes: UpdatingOpSeq, handler: ExceptionHandler) {\n    let { frameStack } = this;\n\n    this.try(opcodes, handler);\n\n    while (true) {\n      if (frameStack.isEmpty()) break;\n\n      let opcode = this.frame.nextStatement();\n\n      if (opcode === null) {\n        this.frameStack.pop();\n        continue;\n      }\n\n      LOGGER.debug(`[VM] OP ${opcode.type}`);\n      LOGGER.trace(opcode);\n\n      opcode.evaluate(this);\n    }\n  }\n\n  private get frame() {\n    return expect(this.frameStack.current, 'bug: expected a frame');\n  }\n\n  goto(op: UpdatingOpcode) {\n    this.frame.goto(op);\n  }\n\n  try(ops: UpdatingOpSeq, handler: Option<ExceptionHandler>) {\n    this.frameStack.push(new UpdatingVMFrame(this, ops, handler));\n  }\n\n  throw() {\n    this.frame.handleException();\n    this.frameStack.pop();\n  }\n\n  evaluateOpcode(opcode: UpdatingOpcode) {\n    opcode.evaluate(this);\n  }\n}\n\nexport interface ExceptionHandler {\n  handleException(): void;\n}\n\nexport interface VMState {\n  env: Environment;\n  scope: Scope;\n  dynamicScope: DynamicScope;\n  frame: CapturedFrame;\n}\n\nexport abstract class BlockOpcode extends UpdatingOpcode implements DestroyableBounds {\n  public type = \"block\";\n  public next = null;\n  public prev = null;\n\n  protected env: Environment;\n  protected scope: Scope;\n  protected dynamicScope: DynamicScope;\n  protected frame: CapturedFrame;\n  protected children: LinkedList<UpdatingOpcode>;\n  protected bounds: DestroyableBounds;\n\n  constructor(public ops: Slice, state: VMState, bounds: DestroyableBounds, children: LinkedList<UpdatingOpcode>) {\n    super();\n    let { env, scope, dynamicScope, frame } = state;\n    this.children = children;\n    this.env = env;\n    this.scope = scope;\n    this.dynamicScope = dynamicScope;\n    this.frame = frame;\n    this.bounds = bounds;\n  }\n\n  abstract didInitializeChildren(): void;\n\n  parentElement() {\n    return this.bounds.parentElement();\n  }\n\n  firstNode() {\n    return this.bounds.firstNode();\n  }\n\n  lastNode() {\n    return this.bounds.lastNode();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    vm.try(this.children, null);\n  }\n\n  destroy() {\n    this.bounds.destroy();\n  }\n\n  didDestroy() {\n    this.env.didDestroy(this.bounds);\n  }\n\n  toJSON() : OpcodeJSON {\n    let details = dict<string>();\n\n    details[\"guid\"] = `${this._guid}`;\n\n    return {\n      guid: this._guid,\n      type: this.type,\n      details,\n      children: this.children.toArray().map(op => op.toJSON())\n    };\n  }\n}\n\nexport class TryOpcode extends BlockOpcode implements ExceptionHandler {\n  public type = \"try\";\n\n  private _tag: UpdatableTag;\n\n  protected bounds: UpdatableTracker;\n\n  constructor(ops: Slice, state: VMState, bounds: UpdatableTracker, children: LinkedList<UpdatingOpcode>) {\n    super(ops, state, bounds, children);\n    this.tag = this._tag = new UpdatableTag(CONSTANT_TAG);\n  }\n\n  didInitializeChildren() {\n    this._tag.update(combineSlice(this.children));\n  }\n\n  evaluate(vm: UpdatingVM) {\n    vm.try(this.children, this);\n  }\n\n  handleException() {\n    let { env, scope, ops, dynamicScope, frame } = this;\n\n    let elementStack = ElementStack.resume(\n      this.env,\n      this.bounds,\n      this.bounds.reset(env)\n    );\n\n    let vm = new VM(env, scope, dynamicScope, elementStack);\n    let result = vm.resume(ops, frame);\n\n    this.children = result.opcodes();\n    this.didInitializeChildren();\n  }\n\n  toJSON() : OpcodeJSON {\n    let json = super.toJSON();\n\n    let details = json[\"details\"];\n    if (!details) {\n      details = json[\"details\"] = {};\n    }\n\n    return super.toJSON();\n  }\n}\n\nclass ListRevalidationDelegate implements IteratorSynchronizerDelegate {\n  private map: Dict<BlockOpcode>;\n  private updating: LinkedList<UpdatingOpcode>;\n\n  private didInsert = false;\n  private didDelete = false;\n\n  constructor(private opcode: ListBlockOpcode, private marker: Simple.Comment) {\n    this.map = opcode.map;\n    this.updating = opcode['children'];\n  }\n\n  insert(key: string, item: PathReference<Opaque>, memo: PathReference<Opaque>, before: string) {\n    let { map, opcode, updating } = this;\n    let nextSibling: Option<Simple.Node> = null;\n    let reference: Option<BlockOpcode> = null;\n\n    if (before) {\n      reference = map[before];\n      nextSibling = reference['bounds'].firstNode();\n    } else {\n      nextSibling = this.marker;\n    }\n\n    let vm = opcode.vmForInsertion(nextSibling);\n    let tryOpcode: Option<TryOpcode> = null;\n\n    vm.execute(opcode.ops, vm => {\n      vm.frame.setArgs(EvaluatedArgs.positional([item, memo]));\n      vm.frame.setOperand(item);\n      vm.frame.setCondition(new ConstReference(true));\n      vm.frame.setKey(key);\n\n      let state = vm.capture();\n      let tracker = vm.stack().pushUpdatableBlock();\n\n      tryOpcode = new TryOpcode(opcode.ops, state, tracker, vm.updating());\n    });\n\n    tryOpcode!.didInitializeChildren();\n\n    updating.insertBefore(tryOpcode!, reference);\n\n    map[key] = tryOpcode!;\n\n    this.didInsert = true;\n  }\n\n  retain(_key: string, _item: PathReference<Opaque>, _memo: PathReference<Opaque>) {\n  }\n\n  move(key: string, _item: PathReference<Opaque>, _memo: PathReference<Opaque>, before: string) {\n    let { map, updating } = this;\n\n    let entry = map[key];\n    let reference = map[before] || null;\n\n    if (before) {\n      moveBounds(entry, reference.firstNode());\n    } else {\n      moveBounds(entry, this.marker);\n    }\n\n    updating.remove(entry);\n    updating.insertBefore(entry, reference);\n  }\n\n  delete(key: string) {\n    let { map } = this;\n    let opcode = map[key];\n    opcode.didDestroy();\n    clear(opcode);\n    this.updating.remove(opcode);\n    delete map[key];\n\n    this.didDelete = true;\n  }\n\n  done() {\n    this.opcode.didInitializeChildren(this.didInsert || this.didDelete);\n  }\n}\n\nexport class ListBlockOpcode extends BlockOpcode {\n  public type = \"list-block\";\n  public map = dict<BlockOpcode>();\n  public artifacts: IterationArtifacts;\n\n  private lastIterated: Revision = INITIAL;\n  private _tag: UpdatableTag;\n\n  constructor(ops: Slice, state: VMState, bounds: Tracker, children: LinkedList<UpdatingOpcode>, artifacts: IterationArtifacts) {\n    super(ops, state, bounds, children);\n    this.artifacts = artifacts;\n    let _tag = this._tag = new UpdatableTag(CONSTANT_TAG);\n    this.tag = combine([artifacts.tag, _tag]);\n  }\n\n  didInitializeChildren(listDidChange = true) {\n    this.lastIterated = this.artifacts.tag.value();\n\n    if (listDidChange) {\n      this._tag.update(combineSlice(this.children));\n    }\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { artifacts, lastIterated } = this;\n\n    if (!artifacts.tag.validate(lastIterated)) {\n      let { bounds } = this;\n      let { dom } = vm;\n\n      let marker = dom.createComment('');\n      dom.insertAfter(bounds.parentElement(), marker, expect(bounds.lastNode(), \"can't insert after an empty bounds\"));\n\n      let target = new ListRevalidationDelegate(this, marker);\n      let synchronizer = new IteratorSynchronizer({ target, artifacts });\n\n      synchronizer.sync();\n\n      this.parentElement().removeChild(marker);\n    }\n\n    // Run now-updated updating opcodes\n    super.evaluate(vm);\n  }\n\n  vmForInsertion(nextSibling: Option<Simple.Node>): VM {\n    let { env, scope, dynamicScope } = this;\n\n    let elementStack = ElementStack.forInitialRender(\n      this.env,\n      this.bounds.parentElement(),\n      nextSibling\n    );\n\n    return new VM(env, scope, dynamicScope, elementStack);\n  }\n\n  toJSON() : OpcodeJSON {\n    let json = super.toJSON();\n    let map = this.map;\n\n    let inner = Object.keys(map).map(key => {\n      return `${JSON.stringify(key)}: ${map[key]._guid}`;\n    }).join(\", \");\n\n    let details = json[\"details\"];\n    if (!details) {\n      details = json[\"details\"] = {};\n    }\n\n    details[\"map\"] = `{${inner}}`;\n\n    return json;\n  }\n}\n\nclass UpdatingVMFrame {\n  private current: Option<UpdatingOpcode>;\n\n  constructor(private vm: UpdatingVM, private ops: UpdatingOpSeq, private exceptionHandler: Option<ExceptionHandler>) {\n    this.vm = vm;\n    this.ops = ops;\n    this.current = ops.head();\n  }\n\n  goto(op: UpdatingOpcode) {\n    this.current = op;\n  }\n\n  nextStatement(): Option<UpdatingOpcode> {\n    let { current, ops } = this;\n    if (current) this.current = ops.nextNode(current);\n    return current;\n  }\n\n  handleException() {\n    if (this.exceptionHandler) {\n      this.exceptionHandler.handleException();\n    }\n  }\n}\n"],"names":[],"mappings":"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","sourceRoot":"/","file":"glimmer-runtime.amd.js"}