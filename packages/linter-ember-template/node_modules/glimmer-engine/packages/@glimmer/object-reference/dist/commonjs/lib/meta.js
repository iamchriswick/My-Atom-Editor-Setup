"use strict";
const descriptors_1 = require("./references/descriptors");
const root_1 = require("./references/root");
const util_1 = require("@glimmer/util");
const reference_1 = require("@glimmer/reference");
const NOOP_DESTROY = { destroy() { } };
class ConstPath {
    constructor(parent, property) {
        this.tag = reference_1.VOLATILE_TAG;
        this.parent = parent;
    }
    chain() { return NOOP_DESTROY; }
    notify() { }
    value() {
        return this.parent[this.property];
    }
    get(prop) {
        return new ConstPath(this.parent[this.property], prop);
    }
}
class ConstRoot {
    constructor(value) {
        this.tag = reference_1.VOLATILE_TAG;
        this.inner = value;
    }
    update(inner) {
        this.inner = inner;
    }
    chain() { return NOOP_DESTROY; }
    notify() { }
    value() {
        return this.inner;
    }
    referenceFromParts(parts) {
        throw new Error("Not implemented");
    }
    chainFor(prop) {
        throw new Error("Not implemented");
    }
    get(prop) {
        return new ConstPath(this.inner, prop);
    }
}
class ConstMeta /*implements IMeta*/ {
    constructor(object) {
        this.object = object;
    }
    root() {
        return new ConstRoot(this.object);
    }
}
exports.CLASS_META = "df8be4c8-4e89-44e2-a8f9-550c8dacdca7";
const hasOwnProperty = Object.hasOwnProperty;
class Meta {
    constructor(object, { RootReferenceFactory, DefaultPathReferenceFactory }) {
        this.references = null;
        this.slots = null;
        this.referenceTypes = null;
        this.propertyMetadata = null;
        this.object = object;
        this.RootReferenceFactory = RootReferenceFactory || root_1.default;
        this.DefaultPathReferenceFactory = DefaultPathReferenceFactory || descriptors_1.PropertyReference;
    }
    static for(obj) {
        if (obj === null || obj === undefined)
            return new Meta(obj, {});
        if (hasOwnProperty.call(obj, '_meta') && obj._meta)
            return obj._meta;
        if (!Object.isExtensible(obj))
            return new ConstMeta(obj);
        let MetaToUse = Meta;
        if (obj.constructor && obj.constructor[exports.CLASS_META]) {
            let classMeta = obj.constructor[exports.CLASS_META];
            MetaToUse = classMeta.InstanceMetaConstructor;
        }
        else if (obj[exports.CLASS_META]) {
            MetaToUse = obj[exports.CLASS_META].InstanceMetaConstructor;
        }
        return (obj._meta = new MetaToUse(obj, {}));
    }
    static exists(obj) {
        return typeof obj === 'object' && obj._meta;
    }
    static metadataForProperty(key) {
        return null;
    }
    addReference(property, reference) {
        let refs = this.references = this.references || util_1.dict();
        let set = refs[property] = refs[property] || new util_1.DictSet();
        set.add(reference);
    }
    addReferenceTypeFor(property, type) {
        this.referenceTypes = this.referenceTypes || util_1.dict();
        this.referenceTypes[property] = type;
    }
    referenceTypeFor(property) {
        if (!this.referenceTypes)
            return descriptors_1.PropertyReference;
        return this.referenceTypes[property] || descriptors_1.PropertyReference;
    }
    removeReference(property, reference) {
        if (!this.references)
            return;
        let set = this.references[property];
        set.delete(reference);
    }
    getReferenceTypes() {
        this.referenceTypes = this.referenceTypes || util_1.dict();
        return this.referenceTypes;
    }
    referencesFor(property) {
        if (!this.references)
            return;
        return this.references[property];
    }
    getSlots() {
        return (this.slots = this.slots || util_1.dict());
    }
    root() {
        return (this.rootCache = this.rootCache || new this.RootReferenceFactory(this.object));
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Meta;
function metaFor(obj) {
    return Meta.for(obj);
}
exports.metaFor = metaFor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tZXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwREFBNkQ7QUFDN0QsNENBQThDO0FBRzlDLHdDQUFrRTtBQVNsRSxrREFBbUY7QUFJbkYsTUFBTSxZQUFZLEdBQUcsRUFBRSxPQUFPLEtBQUksQ0FBQyxFQUFFLENBQUM7QUFFdEM7SUFLRSxZQUFZLE1BQVcsRUFBRSxRQUFnQjtRQUZsQyxRQUFHLEdBQUcsd0JBQVksQ0FBQztRQUd4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxLQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sS0FBSSxDQUFDO0lBRVgsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsR0FBRyxDQUFDLElBQVk7UUFDZCxNQUFNLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGO0FBRUQ7SUFJRSxZQUFZLEtBQUs7UUFGVixRQUFHLEdBQUcsd0JBQVksQ0FBQztRQUd4QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVU7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBRUQsS0FBSyxLQUFLLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sS0FBSSxDQUFDO0lBRVgsS0FBSztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxLQUFlO1FBQ2hDLE1BQU0s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