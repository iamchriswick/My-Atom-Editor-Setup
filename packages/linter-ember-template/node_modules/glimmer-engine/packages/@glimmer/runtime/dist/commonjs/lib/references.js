"use strict";
const reference_1 = require("@glimmer/reference");
class PrimitiveReference extends reference_1.ConstReference {
    constructor(value) {
        super(value);
    }
    static create(value) {
        if (value === undefined) {
            return exports.UNDEFINED_REFERENCE;
        }
        else if (value === null) {
            return exports.NULL_REFERENCE;
        }
        else if (value === true) {
            return TRUE_REFERENCE;
        }
        else if (value === false) {
            return FALSE_REFERENCE;
        }
        else if (typeof value === 'number') {
            return new ValueReference(value);
        }
        else {
            return new StringReference(value);
        }
    }
    get(_key) {
        return exports.UNDEFINED_REFERENCE;
    }
}
exports.PrimitiveReference = PrimitiveReference;
class StringReference extends PrimitiveReference {
    constructor() {
        super(...arguments);
        this.lengthReference = null;
    }
    get(key) {
        if (key === 'length') {
            let { lengthReference } = this;
            if (lengthReference === null) {
                lengthReference = this.lengthReference = new ValueReference(this.inner.length);
            }
            return lengthReference;
        }
        else {
            return super.get(key);
        }
    }
}
class ValueReference extends PrimitiveReference {
    constructor(value) {
        super(value);
    }
}
exports.UNDEFINED_REFERENCE = new ValueReference(undefined);
exports.NULL_REFERENCE = new ValueReference(null);
const TRUE_REFERENCE = new ValueReference(true);
const FALSE_REFERENCE = new ValueReference(false);
class ConditionalReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = inner.tag;
    }
    value() {
        return this.toBool(this.inner.value());
    }
    toBool(value) {
        return !!value;
    }
}
exports.ConditionalReference = ConditionalReference;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9yZWZlcmVuY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxrREFBMkY7QUFLM0Ysd0JBQXFELFNBQVEsMEJBQWlCO0lBaUI1RSxZQUFzQixLQUFRO1FBQzVCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNmLENBQUM7SUFsQkQsTUFBTSxDQUFDLE1BQU0sQ0FBc0IsS0FBUTtRQUN6QyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMsMkJBQTRDLENBQUM7UUFDdEQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsc0JBQXVDLENBQUM7UUFDakQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLENBQUMsY0FBdUMsQ0FBQztRQUNqRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxlQUF3QyxDQUFDO1FBQ2xELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUMsSUFBSSxjQUFjLENBQUMsS0FBZSxDQUEwQixDQUFDO1FBQ3RFLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBQyxLQUFlLENBQWlDLENBQUM7UUFDOUUsQ0FBQztJQUNILENBQUM7SUFNRCxHQUFHLENBQUMsSUFBWTtRQUNkLE1BQU0sQ0FBQywyQkFBbUIsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUF4QkQsZ0RBd0JDO0FBRUQscUJBQXNCLFNBQVEsa0JBQTBCO0lBQXhEOztRQUNVLG9CQUFlLEdBQXVDLElBQUksQ0FBQztJQWVyRSxDQUFDO0lBYkMsR0FBRyxDQUFDLEdBQVc7UUFDYixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBRS9CLEVBQUUsQ0FBQyxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pGLENBQUM7WUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDO1FBQ3pCLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFJRCxvQkFBc0MsU0FBUSxrQkFBcUI7SUFDakUsWUFBWSxLQUFRO1FBQ2xCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNmLENBQUM7Q0FDRjtBQUVZLFFBQUEsbUJBQW1CLEdBQWtDLElBQUksY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ25GLFFBQUEsY0FBYyxHQUE2QixJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqRixNQUFNLGNBQWMsR0FBZ0MsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDN0UsTUFBTSxlQUFlLEdBQWdDLElBQUksY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRS9FO0lBR0UsWUFBb0IsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFDMUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFUyxNQUFNLENBQUMsS0FBYTtRQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0Y7QUFkRCxvREFjQyJ9