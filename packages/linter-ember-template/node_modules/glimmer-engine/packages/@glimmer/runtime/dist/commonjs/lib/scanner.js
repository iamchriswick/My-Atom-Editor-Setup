"use strict";
const blocks_1 = require("./compiled/blocks");
const compiler_1 = require("./compiler");
const WireFormat = require("@glimmer/wire-format");
const symbol_table_1 = require("./symbol-table");
const functions_1 = require("./syntax/functions");
const specialize_1 = require("./syntax/specialize");
function compileStatement(statement, builder) {
    let refined = specialize_1.SPECIALIZE.specialize(statement, builder.symbolTable);
    functions_1.STATEMENTS.compile(refined, builder);
}
exports.compileStatement = compileStatement;
class Template {
    constructor(statements, symbolTable) {
        this.statements = statements;
        this.symbolTable = symbolTable;
    }
}
exports.Template = Template;
class Layout extends Template {
}
exports.Layout = Layout;
class EntryPoint extends Template {
    compile(env) {
        let table = this.symbolTable;
        let b = compiler_1.builder(env, table);
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            let refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, b);
        }
        return new blocks_1.CompiledProgram(b.toSlice(), this.symbolTable.size);
    }
}
exports.EntryPoint = EntryPoint;
class InlineBlock extends Template {
    splat(builder) {
        let table = builder.symbolTable;
        let locals = table.getSymbols().locals;
        if (locals) {
            builder.pushChildScope();
            builder.bindPositionalArgsForLocals(locals);
        }
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            let refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, builder);
        }
        if (locals) {
            builder.popScope();
        }
    }
    compile(env) {
        let table = this.symbolTable;
        let b = compiler_1.builder(env, table);
        this.splat(b);
        return new blocks_1.CompiledBlock(b.toSlice());
    }
}
exports.InlineBlock = InlineBlock;
class PartialBlock extends Template {
    compile(env) {
        let table = this.symbolTable;
        let b = compiler_1.builder(env, table);
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            let refined = specialize_1.SPECIALIZE.specialize(statement, table);
            functions_1.STATEMENTS.compile(refined, b);
        }
        return new blocks_1.CompiledProgram(b.toSlice(), table.size);
    }
}
exports.PartialBlock = PartialBlock;
class Scanner {
    constructor(block, meta, env) {
        this.block = block;
        this.meta = meta;
        this.env = env;
    }
    scanEntryPoint() {
        let { block, meta } = this;
        let symbolTable = symbol_table_1.entryPoint(meta);
        let child = scanBlock(block, symbolTable, this.env);
        return new EntryPoint(child.statements, symbolTable);
    }
    scanLayout() {
        let { block, meta } = this;
        let { named, yields, hasPartials } = block;
        let symbolTable = symbol_table_1.layout(meta, named, yields, hasPartials);
        let child = scanBlock(block, symbolTable, this.env);
        return new Layout(child.statements, symbolTable);
    }
    scanPartial(symbolTable) {
        let { block } = this;
        let child = scanBlock(block, symbolTable, this.env);
        return new PartialBlock(child.statements, symbolTable);
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Scanner;
function scanBlock({ statements }, symbolTable, env) {
    return new RawInlineBlock(env, symbolTable, statements).scan();
}
exports.scanBlock = scanBlock;
var BaselineSyntax;
(function (BaselineSyntax) {
    BaselineSyntax.isScannedComponent = WireFormat.is('scanned-component');
    BaselineSyntax.isPrimitiveElement = WireFormat.is('open-primitive-element');
    BaselineSyntax.isOptimizedAppend = WireFormat.is('optimized-append');
    BaselineSyntax.isUnoptimizedAppend = WireFormat.is('unoptimized-append');
    BaselineSyntax.isAnyAttr = WireFormat.is('any-dynamic-attr');
    BaselineSyntax.isStaticPartial = WireFormat.is('static-partial');
    BaselineSyntax.isDynamicPartial = WireFormat.is('dynamic-partial');
    BaselineSyntax.isFunctionExpression = WireFormat.is('function');
    BaselineSyntax.isNestedBlock = WireFormat.is('nested-block');
    BaselineSyntax.isScannedBlock = WireFormat.is('scanned-block');
    BaselineSyntax.isDebugger = WireFormat.is('debugger');
    var NestedBlock;
    (function (NestedBlock) {
        function defaultBlock(sexp) {
            return sexp[4];
        }
        NestedBlock.defaultBlock = defaultBlock;
        function inverseBlock(sexp) {
            return sexp[5];
        }
        NestedBlock.inverseBlock = inverseBlock;
        function params(sexp) {
            return sexp[2];
        }
        NestedBlock.params = params;
        function hash(sexp) {
            return sexp[3];
        }
        NestedBlock.hash = hash;
    })(NestedBlock = BaselineSyntax.NestedBlock || (BaselineSyntax.NestedBlock = {}));
})(BaselineSyntax = exports.BaselineSyntax || (exports.BaselineSyntax = {}));
class RawInlineBlock {
    constructor(env, table, statements) {
        this.env = env;
        this.table = table;
        this.statements = statements;
    }
    scan() {
        let buffer = [];
        for (let i = 0; i < this.statements.length; i++) {
            let statement = this.statements[i];
            if (WireFormat.Statements.isBlock(statement)) {
                buffer.push(this.specializeBlock(statement));
            }
            else if (WireFormat.Statements.isComponent(statement)) {
                buffer.push(...this.specializeComponent(statement));
            }
            else {
                buffer.push(statement);
            }
        }
        return new InlineBlock(buffer, this.table);
    }
    specializeBlock(block) {
        let [, path, params, hash, template, inverse] = block;
        return ['scanned-block', path, params, hash, this.child(template), this.child(inverse)];
    }
    specializeComponent(sexp) {
        let [, tag, component] = sexp;
        if (this.env.hasComponentDefinition([tag], this.table)) {
            let child = this.child(component);
            let attrs = new RawInlineBlock(this.env, this.table, component.attrs);
            return [['scanned-component', tag, attrs, component.args, child]];
        }
        else {
            let buf = [];
            buf.push(['open-element', tag, []]);
            buf.push(...component.attrs);
            buf.push(['flush-element']);
            buf.push(...component.statements);
            buf.push(['close-element']);
            return buf;
        }
    }
    child(block) {
        if (!block)
            return null;
        let table = symbol_table_1.block(this.table, block.locals);
        return new RawInlineBlock(this.env, table, block.statements);
    }
}
exports.RawInlineBlock = RawInlineBlock;
//# sourceMappingURL=data:application/json;base64,