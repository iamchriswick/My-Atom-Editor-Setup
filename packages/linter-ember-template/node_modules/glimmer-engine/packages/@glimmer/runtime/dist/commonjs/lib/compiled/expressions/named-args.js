"use strict";
const references_1 = require("../../references");
const utils_1 = require("../../utils");
const reference_1 = require("@glimmer/reference");
const util_1 = require("@glimmer/util");
class CompiledNamedArgs {
    constructor(keys, values) {
        this.keys = keys;
        this.values = values;
        this.length = keys.length;
        util_1.assert(keys.length === values.length, 'Keys and values do not have the same length');
    }
    static empty() {
        return exports.COMPILED_EMPTY_NAMED_ARGS;
    }
    static create(map) {
        let keys = Object.keys(map);
        let length = keys.length;
        if (length > 0) {
            let values = [];
            for (let i = 0; i < length; i++) {
                values[i] = map[keys[i]];
            }
            return new this(keys, values);
        }
        else {
            return exports.COMPILED_EMPTY_NAMED_ARGS;
        }
    }
    evaluate(vm) {
        let { keys, values, length } = this;
        let evaluated = new Array(length);
        for (let i = 0; i < length; i++) {
            evaluated[i] = values[i].evaluate(vm);
        }
        return new EvaluatedNamedArgs(keys, evaluated);
    }
    toJSON() {
        let { keys, values } = this;
        let inner = keys.map((key, i) => `${key}: ${values[i].toJSON()}`).join(", ");
        return `{${inner}}`;
    }
}
exports.CompiledNamedArgs = CompiledNamedArgs;
exports.COMPILED_EMPTY_NAMED_ARGS = new (class extends CompiledNamedArgs {
    constructor() {
        super(utils_1.EMPTY_ARRAY, utils_1.EMPTY_ARRAY);
    }
    evaluate(_vm) {
        return exports.EVALUATED_EMPTY_NAMED_ARGS;
    }
    toJSON() {
        return `<EMPTY>`;
    }
});
class EvaluatedNamedArgs {
    constructor(keys, values, _map = null) {
        this.keys = keys;
        this.values = values;
        this._map = _map;
        this.tag = reference_1.combineTagged(values);
        this.length = keys.length;
        util_1.assert(keys.length === values.length, 'Keys and values do not have the same length');
    }
    static create(map) {
        let keys = Object.keys(map);
        let length = keys.length;
        if (length > 0) {
            let values = new Array(length);
            for (let i = 0; i < length; i++) {
                values[i] = map[keys[i]];
            }
            return new this(keys, values, map);
        }
        else {
            return exports.EVALUATED_EMPTY_NAMED_ARGS;
        }
    }
    static empty() {
        return exports.EVALUATED_EMPTY_NAMED_ARGS;
    }
    get map() {
        let { _map: map } = this;
        if (map) {
            return map;
        }
        map = this._map = util_1.dict();
        let { keys, values, length } = this;
        for (let i = 0; i < length; i++) {
            map[keys[i]] = values[i];
        }
        return map;
    }
    get(key) {
        let { keys, values } = this;
        let index = keys.indexOf(key);
        return (index === -1) ? references_1.UNDEFINED_REFERENCE : values[index];
    }
    has(key) {
        return this.keys.indexOf(key) !== -1;
    }
    value() {
        let { keys, values } = this;
        let out = util_1.dict();
        for (let i = 0; i < keys.length; i++) {
            let key = keys[i];
            let ref = values[i];
            out[key] = ref.value();
        }
        return out;
    }
}
exports.EvaluatedNamedArgs = EvaluatedNamedArgs;
exports.EVALUATED_EMPTY_NAMED_ARGS = new (class extends EvaluatedNamedArgs {
    constructor() {
        super(utils_1.EMPTY_ARRAY, utils_1.EMPTY_ARRAY, utils_1.EMPTY_DICT);
    }
    get() {
        return references_1.UNDEFINED_REFERENCE;
    }
    has(_key) {
        return false;
    }
    value() {
        return utils_1.EMPTY_DICT;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFtZWQtYXJncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYi9jb21waWxlZC9leHByZXNzaW9ucy9uYW1lZC1hcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpREFBdUQ7QUFHdkQsdUNBQXNEO0FBQ3RELGtEQUErRTtBQUMvRSx3Q0FBbUU7QUFFbkU7SUF3QkUsWUFDUyxJQUEyQixFQUMzQixNQUFpRDtRQURqRCxTQUFJLEdBQUosSUFBSSxDQUF1QjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUEyQztRQUV4RCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsYUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSw2Q0FBNkMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUE3QkQsTUFBTSxDQUFDLEtBQUs7UUFDVixNQUFNLENBQUMsaUNBQXlCLENBQUM7SUFDbkMsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBcUM7UUFDakQsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRXpCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxNQUFNLEdBQWlDLEVBQUUsQ0FBQztZQUU5QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNoQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUM7WUFFRCxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FB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