"use strict";
class Cursor {
    constructor(element, nextSibling) {
        this.element = element;
        this.nextSibling = nextSibling;
    }
}
exports.Cursor = Cursor;
class RealDOMBounds {
    constructor(bounds) {
        this.bounds = bounds;
    }
    parentElement() { return this.bounds.parentElement(); }
    firstNode() { return this.bounds.firstNode(); }
    lastNode() { return this.bounds.lastNode(); }
}
exports.RealDOMBounds = RealDOMBounds;
class ConcreteBounds {
    constructor(parentNode, first, last) {
        this.parentNode = parentNode;
        this.first = first;
        this.last = last;
    }
    parentElement() { return this.parentNode; }
    firstNode() { return this.first; }
    lastNode() { return this.last; }
}
exports.ConcreteBounds = ConcreteBounds;
class SingleNodeBounds {
    constructor(parentNode, node) {
        this.parentNode = parentNode;
        this.node = node;
    }
    parentElement() { return this.parentNode; }
    firstNode() { return this.node; }
    lastNode() { return this.node; }
}
exports.SingleNodeBounds = SingleNodeBounds;
function bounds(parent, first, last) {
    return new ConcreteBounds(parent, first, last);
}
exports.bounds = bounds;
function single(parent, node) {
    return new SingleNodeBounds(parent, node);
}
exports.single = single;
function move(bounds, reference) {
    let parent = bounds.parentElement();
    let first = bounds.firstNode();
    let last = bounds.lastNode();
    let node = first;
    while (node) {
        let next = node.nextSibling;
        parent.insertBefore(node, reference);
        if (node === last)
            return next;
        node = next;
    }
    return null;
}
exports.move = move;
function clear(bounds) {
    let parent = bounds.parentElement();
    let first = bounds.firstNode();
    let last = bounds.lastNode();
    let node = first;
    while (node) {
        let next = node.nextSibling;
        parent.removeChild(node);
        if (node === last)
            return next;
        node = next;
    }
    return null;
}
exports.clear = clear;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2JvdW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBVUE7SUFDRSxZQUFtQixPQUF1QixFQUFTLFdBQWdDO1FBQWhFLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO0lBQUcsQ0FBQztDQUN4RjtBQUZELHdCQUVDO0FBTUQ7SUFDRSxZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFdEMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBYSxDQUFDLENBQUMsQ0FBQztJQUNsRSxTQUFTLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELFFBQVEsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQVUsQ0FBQyxDQUFDLENBQUM7Q0FDdEQ7QUFORCxzQ0FNQztBQUVEO0lBQ0UsWUFBbUIsVUFBMEIsRUFBVSxLQUEwQixFQUFVLElBQXlCO1FBQWpHLGVBQVUsR0FBVixVQUFVLENBQWdCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBcUI7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFxQjtJQUFHLENBQUM7SUFFeEgsYUFBYSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMzQyxTQUFTLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLFFBQVEsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDakM7QUFORCx3Q0FNQztBQUVEO0lBSUUsWUFBWSxVQUEwQixFQUFFLElBQWlCO1FBQ3ZELElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBcUIsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsYUFBYSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUMzQyxTQUFTLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLFFBQVEsS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Q0FDakM7QUFaRCw0Q0FZQztBQUVELGdCQUF1QixNQUFzQixFQUFFLEtBQWtCLEVBQUUsSUFBaUI7SUFDbEYsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUZELHdCQUVDO0FBRUQsZ0JBQXVCLE1BQXNCLEVBQUUsSUFBaUI7SUFDOUQsTUFBTSxDQUFDLElBQUksZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVDLENBQUM7QUFGRCx3QkFFQztBQUVELGNBQXFCLE1BQWMsRUFBRSxTQUE4QjtJQUNqRSxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDcEMsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9CLElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUU3QixJQUFJLElBQUksR0FBd0IsS0FBSyxDQUFDO0lBRXRDLE9BQU8sSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksR0FBRyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFmRCxvQkFlQztBQUVELGVBQXNCLE1BQWM7SUFDbEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3BDLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMvQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsSUFBSSxJQUFJLEdBQXdCLEtBQUssQ0FBQztJQUV0QyxPQUFPLElBQUksRUFBRSxDQUFDO1FBQ1osSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksR0FBRyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFmRCxzQkFlQyJ9