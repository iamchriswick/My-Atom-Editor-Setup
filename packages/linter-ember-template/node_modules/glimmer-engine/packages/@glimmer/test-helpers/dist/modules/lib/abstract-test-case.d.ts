import { PathReference, Tagged, Revision, RevisionTag, DirtyableTag } from '@glimmer/reference';
import { Template, Simple } from '@glimmer/runtime';
import { TestEnvironment } from './environment';
import { Opaque } from '@glimmer/util';
export declare function skip(target: Object, name: string, descriptor: PropertyDescriptor): void;
export declare class VersionedObject implements Tagged<Revision> {
    tag: DirtyableTag;
    value: Object;
    constructor(value: Object);
    update(value: Object): void;
    set(key: string, value: Opaque): void;
    dirty(): void;
}
export declare class SimpleRootReference implements PathReference<Opaque> {
    private object;
    tag: RevisionTag;
    constructor(object: VersionedObject);
    get(key: string): PathReference<Opaque>;
    value(): Object;
}
export declare class RenderingTest {
    protected env: TestEnvironment;
    private appendTo;
    template: Template<{}>;
    protected context: VersionedObject;
    private result;
    snapshot: Element[];
    element: Node;
    assert: QUnit['assert'];
    constructor(env: TestEnvironment, template: string, appendTo: Simple.Element);
    teardown(): void;
    render(context: Object): void;
    assertContent(expected: string, message?: string): void;
    takeSnapshot(): any[];
    assertStableRerender(): void;
    rerender(): void;
    assertInvariants(oldSnapshot?: Array<Node>, newSnapshot?: Array<Node>): void;
    assertSameNode(actual: Node, expected: Node): void;
    runTask(callback: () => void): void;
}
export declare function testModule(description?: string): (TestClass: typeof RenderingTest) => void;
export declare function template(t: string): (target: Object, name: string, descriptor: PropertyDescriptor) => void;
