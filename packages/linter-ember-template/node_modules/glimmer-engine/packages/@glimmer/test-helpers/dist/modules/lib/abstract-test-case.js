import { DirtyableTag } from '@glimmer/reference';
import { TestEnvironment, TestDynamicScope } from './environment';
import { assign } from './helpers';
export function skip(target, name, descriptor) {
    descriptor.value['skip'] = true;
}
export class VersionedObject {
    constructor(value) {
        this.tag = new DirtyableTag();
        assign(this, value);
    }
    update(value) {
        assign(this, value);
        this.dirty();
    }
    set(key, value) {
        this[key] = value;
        this.dirty();
    }
    dirty() {
        this.tag.dirty();
    }
}
export class SimpleRootReference {
    constructor(object) {
        this.object = object;
        this.tag = object.tag;
    }
    get(key) {
        return new SimplePathReference(this, key);
    }
    value() {
        return this.object;
    }
}
class SimplePathReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = parent.tag;
    }
    get(key) {
        return new SimplePathReference(this, key);
    }
    value() {
        return this.parent.value()[this.key];
    }
}
function isMarker(node) {
    if (node instanceof Comment && node.textContent === '') {
        return true;
    }
    if (node instanceof Text && node.textContent === '') {
        return true;
    }
    return false;
}
export class RenderingTest {
    constructor(env = new TestEnvironment(), template, appendTo) {
        this.env = env;
        this.appendTo = appendTo;
        this.context = null;
        this.result = null;
        this.template = this.env.compile(template);
        this.assert = QUnit.config.current.assert;
    }
    teardown() { }
    render(context) {
        this.env.begin();
        let dynamicScope = new TestDynamicScope();
        let appendTo = this.appendTo;
        let rootObject = new VersionedObject(context);
        let root = new SimpleRootReference(rootObject);
        this.context = rootObject;
        this.result = this.template.render(root, appendTo, dynamicScope);
        this.env.commit();
        this.element = document.getElementById('qunit-fixture').firstChild;
    }
    assertContent(expected, message) {
        let actual = document.getElementById('qunit-fixture').innerHTML;
        QUnit.equal(actual, expected);
    }
    takeSnapshot() {
        let snapshot = this.snapshot = [];
        let node = this.element.firstChild;
        while (node) {
            if (!isMarker(node)) {
                snapshot.push(node);
            }
            node = node.nextSibling;
        }
        return snapshot;
    }
    assertStableRerender() {
        this.takeSnapshot();
        this.rerender();
        this.assertInvariants();
    }
    rerender() {
        this.result.rerender();
    }
    assertInvariants(oldSnapshot, newSnapshot) {
        oldSnapshot = oldSnapshot || this.snapshot;
        newSnapshot = newSnapshot || this.takeSnapshot();
        this.assert.strictEqual(newSnapshot.length, oldSnapshot.length, 'Same number of nodes');
        for (let i = 0; i < oldSnapshot.length; i++) {
            this.assertSameNode(newSnapshot[i], oldSnapshot[i]);
        }
    }
    assertSameNode(actual, expected) {
        this.assert.strictEqual(actual, expected, 'DOM node stability');
    }
    runTask(callback) {
        callback();
        this.env.begin();
        this.result.rerender();
        this.env.commit();
    }
}
export function testModule(description) {
    return function (TestClass) {
        let context;
        QUnit.module(`[Browser] ${description || TestClass.name}`, {
            afterEach() {
                context.teardown();
            }
        });
        let keys = Object.getOwnPropertyNames(TestClass.prototype);
        keys.forEach(key => {
            if (key === 'constructor')
                return;
            let value = Object.getOwnPropertyDescriptor(TestClass.prototype, key).value;
            let isSkipped = value.skip;
            if (typeof value === 'function' && !isSkipped) {
                QUnit.test(key, (assert) => {
                    let env = new TestEnvironment();
                    context = new TestClass(env, value['template'], document.getElementById('qunit-fixture'));
                    value.call(context, assert);
                });
            }
            else if (isSkipped) {
                QUnit.skip(key, () => { });
            }
        });
    };
}
export function template(t) {
    return function template(target, name, descriptor) {
        if (typeof descriptor.value !== 'function') {
            throw new Error("Can't decorator a non-function with the @template decorator");
        }
        descriptor.value['template'] = t;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtdGVzdC1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Fic3RyYWN0LXRlc3QtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdELFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWhHLE9BQU8sRUFDTCxlQUFlLEVBQ2YsZ0JBQWdCLEVBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbkMsTUFBTSxlQUFlLE1BQWMsRUFBRSxJQUFZLEVBQUUsVUFBOEI7SUFDL0UsVUFBVSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDbEMsQ0FBQztBQUVELE1BQU07SUFJSixZQUFZLEtBQWE7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFhO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBYTtRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUFFRCxNQUFNO0lBR0osWUFBb0IsTUFBdUI7UUFBdkIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDekMsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxHQUFHLENB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