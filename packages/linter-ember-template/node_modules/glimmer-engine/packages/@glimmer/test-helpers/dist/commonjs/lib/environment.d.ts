import { DynamicScope, CompiledProgram, Environment, Helper as GlimmerHelper, ModifierManager, DOMTreeConstruction, IDOMChanges, PartialDefinition, Component, ComponentManager, ComponentDefinition, EvaluatedArgs, EvaluatedNamedArgs, EvaluatedPositionalArgs, BlockMacros, InlineMacros, Bounds, Simple, Template, Layout } from "@glimmer/runtime";
import { Destroyable, Dict, Opaque } from '@glimmer/util';
import GlimmerObject, { GlimmerObjectFactory } from "@glimmer/object";
import { DirtyableTag, RevisionTag, Reference, PathReference, OpaqueIterable } from "@glimmer/reference";
import { TemplateMeta } from "@glimmer/wire-format";
export declare type Attrs = Dict<any>;
export declare type AttrsDiff = {
    oldAttrs: Attrs;
    newAttrs: Attrs;
};
export declare class BasicComponent {
    attrs: Attrs;
    element: Element;
    bounds: Bounds;
    constructor(attrs: Attrs);
}
export declare class EmberishCurlyComponent extends GlimmerObject {
    dirtinessTag: DirtyableTag;
    tagName: string;
    attributeBindings: string[];
    attrs: Attrs;
    element: Element;
    bounds: Bounds;
    parentView: Component;
    args: ProcessedArgs;
    static create(args: {
        attrs: Attrs;
    }): EmberishCurlyComponent;
    recompute(): void;
    didInitAttrs(options: {
        attrs: Attrs;
    }): void;
    didUpdateAttrs(diff: AttrsDiff): void;
    didReceiveAttrs(diff: AttrsDiff): void;
    willInsertElement(): void;
    willUpdate(): void;
    willRender(): void;
    didInsertElement(): void;
    didUpdate(): void;
    didRender(): void;
}
export declare class EmberishGlimmerComponent extends GlimmerObject {
    dirtinessTag: DirtyableTag;
    attrs: Attrs;
    element: Element;
    bounds: Bounds;
    parentView: Component;
    static create(args: {
        attrs: Attrs;
    }): EmberishGlimmerComponent;
    recompute(): void;
    didInitAttrs(options: {
        attrs: Attrs;
    }): void;
    didUpdateAttrs(diff: AttrsDiff): void;
    didReceiveAttrs(diff: AttrsDiff): void;
    willInsertElement(): void;
    willUpdate(): void;
    willRender(): void;
    didInsertElement(): void;
    didUpdate(): void;
    didRender(): void;
}
export declare class ProcessedArgs {
    tag: RevisionTag;
    named: EvaluatedNamedArgs;
    positional: EvaluatedPositionalArgs;
    positionalParamNames: Array<string>;
    constructor(args: EvaluatedArgs, positionalParamsDefinition: string[]);
    value(): {
        attrs: {} & Dict<Opaque>;
        props: {} & Dict<Opaque>;
    };
}
export declare class SimplePathReference<T> implements PathReference<T> {
    private parent;
    private property;
    tag: RevisionTag;
    constructor(parent: Reference<T>, property: string);
    value(): T;
    get(prop: string): PathReference<Opaque>;
}
export declare type UserHelper = (args: ReadonlyArray<Opaque>, named: Dict<Opaque>) => any;
export declare class TestModifier {
    element: Element;
    args: EvaluatedArgs;
    dom: IDOMChanges;
    constructor(element: Element, args: EvaluatedArgs, dom: IDOMChanges);
}
export declare class TestModifierManager implements ModifierManager<TestModifier> {
    installedElements: Element[];
    updatedElements: Element[];
    destroyedModifiers: TestModifier[];
    create(element: Element, args: EvaluatedArgs, dynamicScope: DynamicScope, dom: IDOMChanges): TestModifier;
    install({element, args, dom}: TestModifier): void;
    update({element, args, dom}: TestModifier): void;
    getDestructor(modifier: TestModifier): Destroyable;
}
export interface TestEnvironmentOptions {
    document?: Simple.Document;
    appendOperations?: DOMTreeConstruction;
}
export declare class TestEnvironment extends Environment {
    private helpers;
    private modifiers;
    private partials;
    private components;
    private uselessAnchor;
    compiledLayouts: Dict<CompiledProgram>;
    constructor(options?: TestEnvironmentOptions);
    protocolForURL(url: string): string;
    registerHelper(name: string, helper: UserHelper): void;
    registerInternalHelper(name: string, helper: GlimmerHelper): void;
    registerModifier(name: string, modifier: ModifierManager<Opaque>): void;
    registerPartial(name: string, source: string): void;
    registerComponent(name: string, definition: ComponentDefinition<any>): ComponentDefinition<any>;
    registerBasicComponent<T extends BasicComponent>(name: string, Component: BasicComponentFactory, layout: string): ComponentDefinition<BasicComponentDefinition>;
    registerStaticTaglessComponent(name: string, Component: BasicComponentFactory, layout: string): ComponentDefinition<BasicComponentFactory>;
    registerEmberishCurlyComponent(name: string, Component: EmberishCurlyComponentFactory, layout: string): ComponentDefinition<EmberishCurlyComponentDefinition>;
    registerEmberishGlimmerComponent(name: string, Component: EmberishGlimmerComponentFactory, layout: string): ComponentDefinition<EmberishGlimmerComponentDefinition>;
    toConditionalReference(reference: Reference<any>): Reference<boolean>;
    macros(): {
        blocks: BlockMacros;
        inlines: InlineMacros;
    };
    hasHelper(helperName: string[]): boolean;
    lookupHelper(helperParts: string[]): GlimmerHelper;
    hasPartial(partialName: string): boolean;
    lookupPartial(partialName: string): PartialDefinition<{}>;
    hasComponentDefinition(name: string[]): boolean;
    getComponentDefinition(name: string[], blockMeta?: TemplateMeta): ComponentDefinition<any>;
    hasModifier(modifierName: string[]): boolean;
    lookupModifier(modifierName: string[]): ModifierManager<Opaque>;
    compile(template: string): Template<undefined>;
    compileLayout(template: string): Layout;
    iterableFor(ref: Reference<Opaque>, args: EvaluatedArgs): OpaqueIterable;
}
export declare class TestDynamicScope implements DynamicScope {
    private bucket;
    constructor(bucket?: any);
    get(key: string): PathReference<Opaque>;
    set(key: string, reference: PathReference<Opaque>): PathReference<Opaque>;
    child(): TestDynamicScope;
}
export interface BasicComponentFactory {
    new (attrs: Dict<any>): BasicComponent;
}
export declare abstract class GenericComponentDefinition<T> extends ComponentDefinition<T> {
    layoutString: string;
    constructor(name: string, manager: ComponentManager<T>, ComponentClass: any, layout: string);
}
export declare class BasicComponentDefinition extends GenericComponentDefinition<BasicComponent> {
    ComponentClass: BasicComponentFactory;
}
export interface EmberishCurlyComponentFactory {
    positionalParams?: string[];
    create(options: {
        attrs: Attrs;
        targetObject;
    }): EmberishCurlyComponent;
}
export declare class EmberishCurlyComponentDefinition extends GenericComponentDefinition<EmberishCurlyComponent> {
    ComponentClass: EmberishCurlyComponentFactory;
}
export interface EmberishGlimmerComponentFactory {
    create(options: {
        attrs: Attrs;
    }): EmberishGlimmerComponent;
}
export declare class EmberishGlimmerComponentDefinition extends GenericComponentDefinition<EmberishGlimmerComponent> {
    ComponentClass: EmberishGlimmerComponentFactory;
}
export declare function inspectHooks<T extends Component>(ComponentClass: GlimmerObjectFactory<T>): GlimmerObjectFactory<T>;
export declare function equalsElement(element: Element, tagName: string, attributes: Object, content: string): void;
export declare const MATCHER = "3d4ef194-13be-4ccf-8dc7-862eea02c93e";
export declare function equalsAttr(expected: any): {
    "3d4ef194-13be-4ccf-8dc7-862eea02c93e": boolean;
    match(actual: any): boolean;
    expected(): string;
    fail(actual: any): string;
};
export declare function equals(expected: any): {
    "3d4ef194-13be-4ccf-8dc7-862eea02c93e": boolean;
    match(actual: any): boolean;
    expected(): string;
    fail(actual: any): string;
};
export declare function regex(r: any): {
    "3d4ef194-13be-4ccf-8dc7-862eea02c93e": boolean;
    match(v: any): any;
    expected(): string;
    fail(actual: any): string;
};
export declare function classes(expected: string): {
    "3d4ef194-13be-4ccf-8dc7-862eea02c93e": boolean;
    match(actual: any): boolean;
    expected(): string;
    fail(actual: any): string;
};
