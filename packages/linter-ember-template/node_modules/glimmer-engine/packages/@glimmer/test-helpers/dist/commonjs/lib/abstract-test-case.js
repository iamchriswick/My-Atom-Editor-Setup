"use strict";
const reference_1 = require("@glimmer/reference");
const environment_1 = require("./environment");
const helpers_1 = require("./helpers");
function skip(target, name, descriptor) {
    descriptor.value['skip'] = true;
}
exports.skip = skip;
class VersionedObject {
    constructor(value) {
        this.tag = new reference_1.DirtyableTag();
        helpers_1.assign(this, value);
    }
    update(value) {
        helpers_1.assign(this, value);
        this.dirty();
    }
    set(key, value) {
        this[key] = value;
        this.dirty();
    }
    dirty() {
        this.tag.dirty();
    }
}
exports.VersionedObject = VersionedObject;
class SimpleRootReference {
    constructor(object) {
        this.object = object;
        this.tag = object.tag;
    }
    get(key) {
        return new SimplePathReference(this, key);
    }
    value() {
        return this.object;
    }
}
exports.SimpleRootReference = SimpleRootReference;
class SimplePathReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = parent.tag;
    }
    get(key) {
        return new SimplePathReference(this, key);
    }
    value() {
        return this.parent.value()[this.key];
    }
}
function isMarker(node) {
    if (node instanceof Comment && node.textContent === '') {
        return true;
    }
    if (node instanceof Text && node.textContent === '') {
        return true;
    }
    return false;
}
class RenderingTest {
    constructor(env = new environment_1.TestEnvironment(), template, appendTo) {
        this.env = env;
        this.appendTo = appendTo;
        this.context = null;
        this.result = null;
        this.template = this.env.compile(template);
        this.assert = QUnit.config.current.assert;
    }
    teardown() { }
    render(context) {
        this.env.begin();
        let dynamicScope = new environment_1.TestDynamicScope();
        let appendTo = this.appendTo;
        let rootObject = new VersionedObject(context);
        let root = new SimpleRootReference(rootObject);
        this.context = rootObject;
        this.result = this.template.render(root, appendTo, dynamicScope);
        this.env.commit();
        this.element = document.getElementById('qunit-fixture').firstChild;
    }
    assertContent(expected, message) {
        let actual = document.getElementById('qunit-fixture').innerHTML;
        QUnit.equal(actual, expected);
    }
    takeSnapshot() {
        let snapshot = this.snapshot = [];
        let node = this.element.firstChild;
        while (node) {
            if (!isMarker(node)) {
                snapshot.push(node);
            }
            node = node.nextSibling;
        }
        return snapshot;
    }
    assertStableRerender() {
        this.takeSnapshot();
        this.rerender();
        this.assertInvariants();
    }
    rerender() {
        this.result.rerender();
    }
    assertInvariants(oldSnapshot, newSnapshot) {
        oldSnapshot = oldSnapshot || this.snapshot;
        newSnapshot = newSnapshot || this.takeSnapshot();
        this.assert.strictEqual(newSnapshot.length, oldSnapshot.length, 'Same number of nodes');
        for (let i = 0; i < oldSnapshot.length; i++) {
            this.assertSameNode(newSnapshot[i], oldSnapshot[i]);
        }
    }
    assertSameNode(actual, expected) {
        this.assert.strictEqual(actual, expected, 'DOM node stability');
    }
    runTask(callback) {
        callback();
        this.env.begin();
        this.result.rerender();
        this.env.commit();
    }
}
exports.RenderingTest = RenderingTest;
function testModule(description) {
    return function (TestClass) {
        let context;
        QUnit.module(`[Browser] ${description || TestClass.name}`, {
            afterEach() {
                context.teardown();
            }
        });
        let keys = Object.getOwnPropertyNames(TestClass.prototype);
        keys.forEach(key => {
            if (key === 'constructor')
                return;
            let value = Object.getOwnPropertyDescriptor(TestClass.prototype, key).value;
            let isSkipped = value.skip;
            if (typeof value === 'function' && !isSkipped) {
                QUnit.test(key, (assert) => {
                    let env = new environment_1.TestEnvironment();
                    context = new TestClass(env, value['template'], document.getElementById('qunit-fixture'));
                    value.call(context, assert);
                });
            }
            else if (isSkipped) {
                QUnit.skip(key, () => { });
            }
        });
    };
}
exports.testModule = testModule;
function template(t) {
    return function template(target, name, descriptor) {
        if (typeof descriptor.value !== 'function') {
            throw new Error("Can't decorator a non-function with the @template decorator");
        }
        descriptor.value['template'] = t;
    };
}
exports.template = template;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtdGVzdC1jYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Fic3RyYWN0LXRlc3QtY2FzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsa0RBQWdHO0FBRWhHLCtDQUd1QjtBQUV2Qix1Q0FBbUM7QUFFbkMsY0FBcUIsTUFBYyxFQUFFLElBQVksRUFBRSxVQUE4QjtJQUMvRSxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQztBQUNsQyxDQUFDO0FBRkQsb0JBRUM7QUFFRDtJQUlFLFlBQVksS0FBYTtRQUN2QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksd0JBQVksRUFBRSxDQUFDO1FBQzlCLGdCQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNsQixnQkFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFhO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDbEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQXRCRCwwQ0FzQkM7QUFFRDtJQUdFLFlBQW9CLE1BQXVCO1FBQXZCLFdBQU0sR0FBTixNQUFNLENBQWlCO1FBQ3pDLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUN4QixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELEtBQUs7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