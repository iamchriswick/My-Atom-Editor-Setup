"use strict";
const runtime_1 = require("@glimmer/runtime");
const helpers_1 = require("./helpers");
const util_1 = require("@glimmer/util");
const object_1 = require("@glimmer/object");
const reference_1 = require("@glimmer/reference");
const object_reference_1 = require("@glimmer/object-reference");
class ArrayIterator {
    constructor(array, keyFor) {
        this.position = 0;
        this.array = array;
        this.keyFor = keyFor;
    }
    isEmpty() {
        return this.array.length === 0;
    }
    next() {
        let { position, array, keyFor } = this;
        if (position >= array.length)
            return null;
        let value = array[position];
        let key = keyFor(value, position);
        let memo = position;
        this.position++;
        return { key, value, memo };
    }
}
class ObjectKeysIterator {
    constructor(keys, values, keyFor) {
        this.position = 0;
        this.keys = keys;
        this.values = values;
        this.keyFor = keyFor;
    }
    isEmpty() {
        return this.keys.length === 0;
    }
    next() {
        let { position, keys, values, keyFor } = this;
        if (position >= keys.length)
            return null;
        let value = values[position];
        let memo = keys[position];
        let key = keyFor(value, memo);
        this.position++;
        return { key, value, memo };
    }
}
class EmptyIterator {
    isEmpty() {
        return true;
    }
    next() {
        throw new Error(`Cannot call next() on an empty iterator`);
    }
}
const EMPTY_ITERATOR = new EmptyIterator();
class Iterable {
    constructor(ref, keyFor) {
        this.tag = ref.tag;
        this.ref = ref;
        this.keyFor = keyFor;
    }
    iterate() {
        let { ref, keyFor } = this;
        let iterable = ref.value();
        if (Array.isArray(iterable)) {
            return iterable.length > 0 ? new ArrayIterator(iterable, keyFor) : EMPTY_ITERATOR;
        }
        else if (iterable === undefined || iterable === null) {
            return EMPTY_ITERATOR;
        }
        else if (iterable.forEach !== undefined) {
            let array = [];
            iterable.forEach(function (item) {
                array.push(item);
            });
            return array.length > 0 ? new ArrayIterator(array, keyFor) : EMPTY_ITERATOR;
        }
        else if (typeof iterable === 'object') {
            let keys = Object.keys(iterable);
            return keys.length > 0 ? new ObjectKeysIterator(keys, keys.map(key => iterable[key]), keyFor) : EMPTY_ITERATOR;
        }
        else {
            throw new Error(`Don't know how to {{#each ${iterable}}}`);
        }
    }
    valueReferenceFor(item) {
        return new object_reference_1.UpdatableReference(item.value);
    }
    updateValueReference(reference, item) {
        reference.update(item.value);
    }
    memoReferenceFor(item) {
        return new object_reference_1.UpdatableReference(item.memo);
    }
    updateMemoReference(reference, item) {
        reference.update(item.memo);
    }
}
class BasicComponent {
    constructor(attrs) {
        this.attrs = attrs;
    }
}
exports.BasicComponent = BasicComponent;
class EmberishCurlyComponent extends object_1.default {
    constructor() {
        super(...arguments);
        this.dirtinessTag = new reference_1.DirtyableTag();
        this.tagName = null;
        this.attributeBindings = null;
        this.parentView = null;
    }
    static create(args) {
        return super.create(args);
    }
    recompute() {
        this.dirtinessTag.dirty();
    }
    didInitAttrs(options) { }
    didUpdateAttrs(diff) { }
    didReceiveAttrs(diff) { }
    willInsertElement() { }
    willUpdate() { }
    willRender() { }
    didInsertElement() { }
    didUpdate() { }
    didRender() { }
}
exports.EmberishCurlyComponent = EmberishCurlyComponent;
class EmberishGlimmerComponent extends object_1.default {
    constructor() {
        super(...arguments);
        this.dirtinessTag = new reference_1.DirtyableTag();
        this.parentView = null;
    }
    static create(args) {
        return super.create(args);
    }
    recompute() {
        this.dirtinessTag.dirty();
    }
    didInitAttrs(options) { }
    didUpdateAttrs(diff) { }
    didReceiveAttrs(diff) { }
    willInsertElement() { }
    willUpdate() { }
    willRender() { }
    didInsertElement() { }
    didUpdate() { }
    didRender() { }
}
exports.EmberishGlimmerComponent = EmberishGlimmerComponent;
class BasicComponentManager {
    prepareArgs(definition, args) {
        return args;
    }
    create(environment, definition, args) {
        let klass = definition.ComponentClass || BasicComponent;
        return new klass(args.named.value());
    }
    layoutFor(definition, component, env) {
        let layout = env.compiledLayouts[definition.name];
        if (layout) {
            return layout;
        }
        return env.compiledLayouts[definition.name] = runtime_1.compileLayout(new BasicComponentLayoutCompiler(definition.layoutString), env);
    }
    getSelf(component) {
        return new object_reference_1.UpdatableReference(component);
    }
    didCreateElement(component, element) {
        component.element = element;
    }
    didRenderLayout(component, bounds) {
        component.bounds = bounds;
    }
    didCreate() { }
    getTag() {
        return null;
    }
    update(component, attrs) {
        component.attrs = attrs.named.value();
    }
    didUpdateLayout() { }
    didUpdate() { }
    getDestructor() {
        return null;
    }
}
const BASIC_COMPONENT_MANAGER = new BasicComponentManager();
class StaticTaglessComponentManager extends BasicComponentManager {
    layoutFor(definition, component, env) {
        let layout = env.compiledLayouts[definition.name];
        if (layout) {
            return layout;
        }
        return env.compiledLayouts[definition.name] = runtime_1.compileLayout(new StaticTaglessComponentLayoutCompiler(definition.layoutString), env);
    }
}
const STATIC_TAGLESS_COMPONENT_MANAGER = new StaticTaglessComponentManager();
const BaseEmberishGlimmerComponent = EmberishGlimmerComponent.extend();
class EmberishGlimmerComponentManager {
    prepareArgs(definition, args) {
        return args;
    }
    create(environment, definition, args, dynamicScope, callerSelf, hasDefaultBlock) {
        let klass = definition.ComponentClass || BaseEmberishGlimmerComponent;
        let attrs = args.named.value();
        let component = klass.create({ attrs });
        component.didInitAttrs({ attrs });
        component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
        component.willInsertElement();
        component.willRender();
        return component;
    }
    layoutFor(definition, component, env) {
        if (env.compiledLayouts[definition.name]) {
            return env.compiledLayouts[definition.name];
        }
        return env.compiledLayouts[definition.name] = runtime_1.compileLayout(new EmberishGlimmerComponentLayoutCompiler(definition.layoutString), env);
    }
    getSelf(component) {
        return new object_reference_1.UpdatableReference(component);
    }
    didCreateElement(component, element) {
        component.element = element;
    }
    didRenderLayout(component, bounds) {
        component.bounds = bounds;
    }
    didCreate(component) {
        component.didInsertElement();
        component.didRender();
    }
    getTag(component) {
        return component.dirtinessTag;
    }
    update(component, args) {
        let oldAttrs = component.attrs;
        let newAttrs = args.named.value();
        component.set('attrs', newAttrs);
        component.didUpdateAttrs({ oldAttrs, newAttrs });
        component.didReceiveAttrs({ oldAttrs, newAttrs });
        component.willUpdate();
        component.willRender();
    }
    didUpdateLayout() { }
    didUpdate(component) {
        component.didUpdate();
        component.didRender();
    }
    getDestructor(component) {
        return {
            destroy() {
                component.destroy();
            }
        };
    }
}
class ProcessedArgs {
    constructor(args, positionalParamsDefinition) {
        this.tag = args.tag;
        this.named = args.named;
        this.positional = args.positional;
        this.positionalParamNames = positionalParamsDefinition;
    }
    value() {
        let { named, positional, positionalParamNames } = this;
        let merged = Object.assign({}, named.value());
        if (positionalParamNames && positionalParamNames.length) {
            for (let i = 0; i < positionalParamNames.length; i++) {
                let name = positionalParamNames[i];
                let reference = positional.at(i);
                merged[name] = reference.value();
            }
        }
        return {
            attrs: merged,
            props: merged
        };
    }
}
exports.ProcessedArgs = ProcessedArgs;
function processArgs(args, positionalParamsDefinition) {
    return new ProcessedArgs(args, positionalParamsDefinition);
}
const EMBERISH_GLIMMER_COMPONENT_MANAGER = new EmberishGlimmerComponentManager();
const BaseEmberishCurlyComponent = EmberishCurlyComponent.extend();
class EmberishCurlyComponentManager {
    prepareArgs(definition, args, dynamicScope) {
        let dyn = definition.ComponentClass ? definition.ComponentClass['fromDynamicScope'] : null;
        if (dyn) {
            let map = util_1.assign({}, args.named.map);
            dyn.forEach(name => map[name] = dynamicScope.get(name));
            args = runtime_1.EvaluatedArgs.create(args.positional, runtime_1.EvaluatedNamedArgs.create(map), args.blocks);
        }
        return args;
    }
    create(environment, definition, args, dynamicScope, callerSelf) {
        let klass = definition.ComponentClass || BaseEmberishCurlyComponent;
        let processedArgs = processArgs(args, klass['positionalParams']);
        let { attrs } = processedArgs.value();
        let self = callerSelf.value();
        let merged = util_1.assign({}, attrs, { attrs }, { args: processedArgs }, { targetObject: self });
        let component = klass.create(merged);
        component.didInitAttrs({ attrs });
        component.didReceiveAttrs({ oldAttrs: null, newAttrs: attrs });
        component.willInsertElement();
        component.willRender();
        return component;
    }
    layoutFor(definition, component, env) {
        let layout = env.compiledLayouts[definition.name];
        if (layout) {
            return layout;
        }
        let layoutString = definition.layoutString;
        let lateBound = !layoutString;
        if (!layoutString && layoutString !== '') {
            layoutString = component['layout'];
        }
        layout = runtime_1.compileLayout(new EmberishCurlyComponentLayoutCompiler(layoutString), env);
        return lateBound ? layout : (env.compiledLayouts[definition.name] = layout);
    }
    getSelf(component) {
        return new object_reference_1.UpdatableReference(component);
    }
    didCreateElement(component, element, operations) {
        component.element = element;
        let bindings = component.attributeBindings;
        let rootRef = new object_reference_1.UpdatableReference(component);
        if (bindings) {
            for (let i = 0; i < bindings.length; i++) {
                let attribute = bindings[i];
                let reference = rootRef.get(attribute);
                operations.addDynamicAttribute(element, attribute, reference, false);
            }
        }
    }
    didRenderLayout(component, bounds) {
        component.bounds = bounds;
    }
    didCreate(component) {
        component.didInsertElement();
        component.didRender();
    }
    getTag(component) {
        return component.dirtinessTag;
    }
    update(component, args) {
        let oldAttrs = component.attrs;
        let newAttrs = component.args.value().attrs;
        let merged = util_1.assign({}, newAttrs, { attrs: newAttrs });
        component.setProperties(merged);
        component.didUpdateAttrs({ oldAttrs, newAttrs });
        component.didReceiveAttrs({ oldAttrs, newAttrs });
        component.willUpdate();
        component.willRender();
    }
    didUpdateLayout() { }
    didUpdate(component) {
        component.didUpdate();
        component.didRender();
    }
    getDestructor(component) {
        return {
            destroy() {
                component.destroy();
            }
        };
    }
}
const EMBERISH_CURLY_COMPONENT_MANAGER = new EmberishCurlyComponentManager();
function emberToBool(value) {
    if (Array.isArray(value)) {
        return value.length > 0;
    }
    else {
        return !!value;
    }
}
class EmberishConditionalReference extends runtime_1.ConditionalReference {
    toBool(value) {
        return emberToBool(value);
    }
}
class SimplePathReference {
    constructor(parent, property) {
        this.tag = reference_1.VOLATILE_TAG;
        this.parent = parent;
        this.property = property;
    }
    value() {
        return this.parent.value()[this.property];
    }
    get(prop) {
        return new SimplePathReference(this, prop);
    }
}
exports.SimplePathReference = SimplePathReference;
class HelperReference {
    constructor(helper, args) {
        this.tag = reference_1.VOLATILE_TAG;
        this.helper = helper;
        this.args = args;
    }
    value() {
        let { helper, args: { positional, named } } = this;
        return helper(positional.value(), named.value());
    }
    get(prop) {
        return new SimplePathReference(this, prop);
    }
}
class InertModifierManager {
    create() { }
    install(modifier) { }
    update(modifier) { }
    getDestructor(modifier) {
        return null;
    }
}
class TestModifier {
    constructor(element, args, dom) {
        this.element = element;
        this.args = args;
        this.dom = dom;
    }
}
exports.TestModifier = TestModifier;
class TestModifierManager {
    constructor() {
        this.installedElements = [];
        this.updatedElements = [];
        this.destroyedModifiers = [];
    }
    create(element, args, dynamicScope, dom) {
        return new TestModifier(element, args, dom);
    }
    install({ element, args, dom }) {
        this.installedElements.push(element);
        let param = args.positional.at(0).value();
        dom.setAttribute(element, 'data-modifier', `installed - ${param}`);
        return;
    }
    update({ element, args, dom }) {
        this.updatedElements.push(element);
        let param = args.positional.at(0).value();
        dom.setAttribute(element, 'data-modifier', `updated - ${param}`);
        return;
    }
    getDestructor(modifier) {
        return {
            destroy: () => {
                this.destroyedModifiers.push(modifier);
                let { element, dom } = modifier;
                dom.removeAttribute(element, 'data-modifier');
            }
        };
    }
}
exports.TestModifierManager = TestModifierManager;
class TestEnvironment extends runtime_1.Environment {
    constructor(options = {
            document: document,
            appendOperations: new runtime_1.DOMTreeConstruction(document)
        }) {
        super({ appendOperations: options.appendOperations, updateOperations: new runtime_1.DOMChanges(options.document) });
        this.helpers = util_1.dict();
        this.modifiers = util_1.dict();
        this.partials = util_1.dict();
        this.components = util_1.dict();
        this.compiledLayouts = util_1.dict();
        this.uselessAnchor = options.document.createElement('a');
        this.registerHelper("if", ([cond, yes, no]) => cond ? yes : no);
        this.registerHelper("unless", ([cond, yes, no]) => cond ? no : yes);
        this.registerInternalHelper("-get-dynamic-var", runtime_1.getDynamicVar);
        this.registerModifier("action", new InertModifierManager());
        this.registerInternalHelper("component", (vm, args, symbolTable) => {
            return new DynamicComponentReference(args.positional.at(0), vm.env, symbolTable);
        });
        this.registerInternalHelper("hash", (vm, args) => args.named);
    }
    protocolForURL(url) {
        this.uselessAnchor.href = url;
        return this.uselessAnchor.protocol;
    }
    registerHelper(name, helper) {
        this.helpers[name] = (vm, args) => new HelperReference(helper, args);
    }
    registerInternalHelper(name, helper) {
        this.helpers[name] = helper;
    }
    registerModifier(name, modifier) {
        this.modifiers[name] = modifier;
    }
    registerPartial(name, source) {
        this.partials[name] = new runtime_1.PartialDefinition(name, helpers_1.compile(source, { env: this }));
    }
    registerComponent(name, definition) {
        this.components[name] = definition;
        return definition;
    }
    registerBasicComponent(name, Component, layout) {
        let definition = new BasicComponentDefinition(name, BASIC_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    }
    registerStaticTaglessComponent(name, Component, layout) {
        let definition = new StaticTaglessComponentDefinition(name, STATIC_TAGLESS_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    }
    registerEmberishCurlyComponent(name, Component, layout) {
        let definition = new EmberishCurlyComponentDefinition(name, EMBERISH_CURLY_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    }
    registerEmberishGlimmerComponent(name, Component, layout) {
        let definition = new EmberishGlimmerComponentDefinition(name, EMBERISH_GLIMMER_COMPONENT_MANAGER, Component, layout);
        return this.registerComponent(name, definition);
    }
    toConditionalReference(reference) {
        if (reference_1.isConst(reference)) {
            return runtime_1.PrimitiveReference.create(emberToBool(reference.value()));
        }
        return new EmberishConditionalReference(reference);
    }
    macros() {
        let macros = super.macros();
        populateBlocks(macros.blocks, macros.inlines);
        return macros;
    }
    hasHelper(helperName) {
        return helperName.length === 1 && (helperName[0] in this.helpers);
    }
    lookupHelper(helperParts) {
        let helperName = helperParts[0];
        let helper = this.helpers[helperName];
        if (!helper)
            throw new Error(`Helper for ${helperParts.join('.')} not found.`);
        return helper;
    }
    hasPartial(partialName) {
        return partialName in this.partials;
    }
    lookupPartial(partialName) {
        let partial = this.partials[partialName];
        return partial;
    }
    hasComponentDefinition(name) {
        return !!this.components[name[0]];
    }
    getComponentDefinition(name, blockMeta) {
        return this.components[name[0]];
    }
    hasModifier(modifierName) {
        return modifierName.length === 1 && (modifierName[0] in this.modifiers);
    }
    lookupModifier(modifierName) {
        let [name] = modifierName;
        let modifier = this.modifiers[name];
        if (!modifier)
            throw new Error(`Modifier for ${modifierName.join('.')} not found.`);
        return modifier;
    }
    compile(template) {
        return helpers_1.compile(template, { env: this });
    }
    compileLayout(template) {
        return helpers_1.compileLayout(template, { env: this });
    }
    iterableFor(ref, args) {
        let keyPath = args.named.get("key").value();
        let keyFor;
        if (!keyPath) {
            throw new Error('Must specify a key for #each');
        }
        switch (keyPath) {
            case '@index':
                keyFor = (_, index) => String(index);
                break;
            case '@primitive':
                keyFor = (item) => String(item);
                break;
            default:
                keyFor = (item) => item[keyPath];
                break;
        }
        return new Iterable(ref, keyFor);
    }
}
exports.TestEnvironment = TestEnvironment;
class TestDynamicScope {
    constructor(bucket = null) {
        if (bucket) {
            this.bucket = util_1.assign({}, bucket);
        }
        else {
            this.bucket = {};
        }
    }
    get(key) {
        return this.bucket[key];
    }
    set(key, reference) {
        return this.bucket[key] = reference;
    }
    child() {
        return new TestDynamicScope(this.bucket);
    }
}
exports.TestDynamicScope = TestDynamicScope;
class DynamicComponentReference {
    constructor(nameRef, env, symbolTable) {
        this.nameRef = nameRef;
        this.env = env;
        this.symbolTable = symbolTable;
        this.tag = nameRef.tag;
    }
    value() {
        let { env, nameRef } = this;
        let nameOrDef = nameRef.value();
        if (typeof nameOrDef === 'string') {
            return env.getComponentDefinition([nameOrDef], this.symbolTable);
        }
        else if (runtime_1.isComponentDefinition(nameOrDef)) {
            return nameOrDef;
        }
        return null;
    }
    get() {
        return null;
    }
}
function dynamicComponentFor(vm, symbolTable) {
    let args = vm.getArgs();
    let nameRef = args.positional.at(0);
    let env = vm.env;
    return new DynamicComponentReference(nameRef, env, symbolTable);
}
;
class GenericComponentDefinition extends runtime_1.ComponentDefinition {
    constructor(name, manager, ComponentClass, layout) {
        super(name, manager, ComponentClass);
        this.layoutString = layout;
    }
}
exports.GenericComponentDefinition = GenericComponentDefinition;
class BasicComponentDefinition extends GenericComponentDefinition {
}
exports.BasicComponentDefinition = BasicComponentDefinition;
class StaticTaglessComponentDefinition extends GenericComponentDefinition {
}
class EmberishCurlyComponentDefinition extends GenericComponentDefinition {
}
exports.EmberishCurlyComponentDefinition = EmberishCurlyComponentDefinition;
class EmberishGlimmerComponentDefinition extends GenericComponentDefinition {
}
exports.EmberishGlimmerComponentDefinition = EmberishGlimmerComponentDefinition;
class GenericComponentLayoutCompiler {
    constructor(layoutString) {
        this.layoutString = layoutString;
    }
    compileLayout(env) {
        return helpers_1.compileLayout(this.layoutString, { env });
    }
}
class BasicComponentLayoutCompiler extends GenericComponentLayoutCompiler {
    compile(builder) {
        builder.fromLayout(this.compileLayout(builder.env));
    }
}
class StaticTaglessComponentLayoutCompiler extends GenericComponentLayoutCompiler {
    compile(builder) {
        builder.wrapLayout(this.compileLayout(builder.env));
    }
}
function EmberTagName(vm) {
    let self = vm.getSelf().value();
    let tagName = self['tagName'];
    tagName = tagName === '' ? null : self['tagName'] || 'div';
    return runtime_1.PrimitiveReference.create(tagName);
}
function EmberID(vm) {
    let self = vm.getSelf().value();
    return runtime_1.PrimitiveReference.create(`ember${self._guid}`);
}
class EmberishCurlyComponentLayoutCompiler extends GenericComponentLayoutCompiler {
    compile(builder) {
        builder.wrapLayout(this.compileLayout(builder.env));
        builder.tag.dynamic(EmberTagName);
        builder.attrs.static('class', 'ember-view');
        builder.attrs.dynamic('id', EmberID);
    }
}
class EmberishGlimmerComponentLayoutCompiler extends GenericComponentLayoutCompiler {
    compile(builder) {
        builder.fromLayout(this.compileLayout(builder.env));
        builder.attrs.static('class', 'ember-view');
        builder.attrs.dynamic('id', EmberID);
    }
}
function inspectHooks(ComponentClass) {
    return ComponentClass.extend({
        init() {
            this._super(...arguments);
            this.hooks = {
                didInitAttrs: 0,
                didUpdateAttrs: 0,
                didReceiveAttrs: 0,
                willInsertElement: 0,
                willUpdate: 0,
                willRender: 0,
                didInsertElement: 0,
                didUpdate: 0,
                didRender: 0
            };
        },
        didInitAttrs() {
            this._super(...arguments);
            this.hooks['didInitAttrs']++;
        },
        didUpdateAttrs() {
            this._super(...arguments);
            this.hooks['didUpdateAttrs']++;
        },
        didReceiveAttrs() {
            this._super(...arguments);
            this.hooks['didReceiveAttrs']++;
        },
        willInsertElement() {
            this._super(...arguments);
            this.hooks['willInsertElement']++;
        },
        willUpdate() {
            this._super(...arguments);
            this.hooks['willUpdate']++;
        },
        willRender() {
            this._super(...arguments);
            this.hooks['willRender']++;
        },
        didInsertElement() {
            this._super(...arguments);
            this.hooks['didInsertElement']++;
        },
        didUpdate() {
            this._super(...arguments);
            this.hooks['didUpdate']++;
        },
        didRender() {
            this._super(...arguments);
            this.hooks['didRender']++;
        }
    });
}
exports.inspectHooks = inspectHooks;
const { defaultBlock, inverseBlock, params, hash } = runtime_1.BaselineSyntax.NestedBlock;
function populateBlocks(blocks, inlines) {
    blocks.add('identity', (sexp, builder) => {
        builder.evaluate(sexp[4]);
    });
    blocks.add('render-inverse', (sexp, builder) => {
        builder.evaluate(sexp[5]);
    });
    blocks.add('-with-dynamic-vars', (sexp, builder) => {
        let block = defaultBlock(sexp);
        let args = runtime_1.compileArgs(params(sexp), hash(sexp), builder);
        builder.unit(b => {
            b.putArgs(args);
            b.pushDynamicScope();
            b.bindDynamicScope(args.named.keys);
            b.evaluate(util_1.unwrap(block));
            b.popDynamicScope();
        });
    });
    blocks.add('-in-element', (sexp, builder) => {
        let block = defaultBlock(sexp);
        let args = runtime_1.compileArgs(params(sexp), hash(sexp), builder);
        builder.putArgs(args);
        builder.test('simple');
        builder.labelled(null, b => {
            b.jumpUnless('END');
            b.pushRemoteElement();
            b.evaluate(util_1.unwrap(block));
            b.popRemoteElement();
        });
    });
    blocks.add('component', (sexp, builder) => {
        let [, path, params, hash, _default, inverse] = sexp;
        let definitionArgs = [params.slice(0, 1), null, null, null];
        let args = [params.slice(1), hash, _default, inverse];
        builder.component.dynamic(definitionArgs, dynamicComponentFor, args, builder.symbolTable);
        return true;
    });
    blocks.addMissing((sexp, builder) => {
        let [, path, params, hash, _default, inverse] = sexp;
        let table = builder.symbolTable;
        if (!params) {
            params = [];
        }
        if (path.length > 1) {
            let definitionArgs = [[['get', path]], hash, _default, inverse];
            let args = [params, hash, _default, inverse];
            builder.component.dynamic(definitionArgs, dynamicComponentFor, args, table);
            return true;
        }
        let definition = builder.env.getComponentDefinition(path, builder.symbolTable);
        if (definition) {
            builder.component.static(definition, [params, hash, _default, inverse], table);
            return true;
        }
        return false;
    });
    inlines.add('component', (path, params, hash, builder) => {
        let definitionArgs = [params.slice(0, 1), null, null, null];
        let args = [params.slice(1), hash, null, null];
        builder.component.dynamic(definitionArgs, dynamicComponentFor, args, builder.symbolTable);
        return true;
    });
    inlines.addMissing((path, params, hash, builder) => {
        let table = builder.symbolTable;
        let definition = builder.env.getComponentDefinition(path, builder.symbolTable);
        if (path.length > 1) {
            let definitionArgs = [[['get', path]], hash, null, null];
            let args = [params, hash, null, null];
            builder.component.dynamic(definitionArgs, dynamicComponentFor, args, table);
            return true;
        }
        if (definition) {
            builder.component.static(definition, [params, hash, null, null], table);
            return true;
        }
        return false;
    });
    return { blocks, inlines };
}
function equalsElement(element, tagName, attributes, content) {
    QUnit.push(element.tagName === tagName.toUpperCase(), element.tagName.toLowerCase(), tagName, `expect tagName to be ${tagName}`);
    let expectedAttrs = util_1.dict();
    let expectedCount = 0;
    for (let prop in attributes) {
        expectedCount++;
        let expected = attributes[prop];
        let matcher = typeof expected === 'object' && exports.MATCHER in expected ? expected : equalsAttr(expected);
        expectedAttrs[prop] = matcher;
        QUnit.push(expectedAttrs[prop].match(element.getAttribute(prop)), matcher.fail(element.getAttribute(prop)), matcher.fail(element.getAttribute(prop)), `Expected element's ${prop} attribute ${matcher.expected()}`);
    }
    let actualAttributes = {};
    for (let i = 0, l = element.attributes.length; i < l; i++) {
        actualAttributes[element.attributes[i].name] = element.attributes[i].value;
    }
    if (!(element instanceof HTMLElement)) {
        QUnit.push(element instanceof HTMLElement, null, null, "Element must be an HTML Element, not an SVG Element");
    }
    else {
        QUnit.push(element.attributes.length === expectedCount, element.attributes.length, expectedCount, `Expected ${expectedCount} attributes; got ${element.outerHTML}`);
        if (content !== null) {
            QUnit.push(element.innerHTML === content, element.innerHTML, content, `The element had '${content}' as its content`);
        }
    }
}
exports.equalsElement = equalsElement;
exports.MATCHER = "3d4ef194-13be-4ccf-8dc7-862eea02c93e";
function equalsAttr(expected) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match(actual) {
            return expected === actual;
        },
        expected() {
            return `to equal ${expected}`;
        },
        fail(actual) {
            return `${actual} did not equal ${expected}`;
        }
    };
}
exports.equalsAttr = equalsAttr;
function equals(expected) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match(actual) {
            return expected === actual;
        },
        expected() {
            return `to equal ${expected}`;
        },
        fail(actual) {
            return `${actual} did not equal ${expected}`;
        }
    };
}
exports.equals = equals;
function regex(r) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match(v) {
            return r.test(v);
        },
        expected() {
            return `to match ${r}`;
        },
        fail(actual) {
            return `${actual} did not match ${r}`;
        }
    };
}
exports.regex = regex;
function classes(expected) {
    return {
        "3d4ef194-13be-4ccf-8dc7-862eea02c93e": true,
        match(actual) {
            return actual && (expected.split(' ').sort().join(' ') === actual.split(' ').sort().join(' '));
        },
        expected() {
            return `to include '${expected}'`;
        },
        fail(actual) {
            return `'${actual}'' did not match '${expected}'`;
        }
    };
}
exports.classes = classes;
//# sourceMappingURL=data:application/json;base64,