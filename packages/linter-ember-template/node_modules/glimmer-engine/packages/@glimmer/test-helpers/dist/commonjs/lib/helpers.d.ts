import { Environment, Template, Layout } from "@glimmer/runtime";
import { PrecompileOptions } from "@glimmer/compiler";
export declare const assign: {
    <T, U>(target: T, source: U): T & U;
    <T, U, V>(target: T, source1: U, source2: V): T & U & V;
    <T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;
    (target: any, ...sources: any[]): any;
};
export interface TestCompileOptions<T> extends PrecompileOptions<T> {
    env: Environment;
}
export declare function compile<T>(string: string, options: TestCompileOptions<T>): Template<T>;
export declare function compileLayout<T>(string: string, options: TestCompileOptions<T>): Layout;
export declare function equalInnerHTML(fragment: any, html: any, msg?: any): void;
export declare function equalHTML(node: any, html: any): void;
export declare function equalTokens(fragment: any, html: any, message?: any): void;
export declare function generateSnapshot(element: any): any[];
export declare function equalSnapshots(a: any, b: any): void;
export declare function normalizeInnerHTML(actualHTML: any): any;
declare let isCheckedInputHTML: any;
export { isCheckedInputHTML };
export declare function getTextContent(el: any): any;
export declare function strip(strings: TemplateStringsArray): string;
export declare function stripTight(strings: TemplateStringsArray): string;
export declare function trimLines(strings: TemplateStringsArray): string;
