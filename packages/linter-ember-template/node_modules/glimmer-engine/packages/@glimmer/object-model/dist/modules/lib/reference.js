import Meta, { ClassMeta } from './meta';
import { CURRENT_TAG, CONSTANT_TAG, combine } from '@glimmer/reference';
import { HAS_NATIVE_WEAKMAP } from '@glimmer/util';
export let classMeta;
export let meta;
if (HAS_NATIVE_WEAKMAP) {
    const META = new WeakMap();
    const CLASS_META = new WeakMap();
    classMeta = function _classMetaNative(object) {
        let m = CLASS_META.get(object);
        if (m === undefined) {
            m = new ClassMeta();
            CLASS_META.set(object, m);
        }
        return m;
    };
    meta = function _metaNative(object) {
        let m = META.get(object);
        if (m === undefined) {
            m = new Meta();
            META.set(object, m);
        }
        return m;
    };
}
else {
    const GLIMMER_META = 'META__glimmer__1484170086860394543206811';
    const GLIMMER_CLASS_META = 'CLASS_META__glimmer__14841708559821468834708062';
    classMeta = function _classMetaFaux(object) {
        let m = object[GLIMMER_CLASS_META];
        if (m === undefined) {
            m = new ClassMeta();
            object[GLIMMER_CLASS_META] = m;
        }
        return m;
    };
    meta = function _metaFaux(object) {
        let m = object[GLIMMER_META];
        if (m === undefined) {
            m = new Meta();
            object[GLIMMER_META] = m;
        }
        return m;
    };
}
export function set(object, key, value) {
    object[key] = value;
    meta(object).dirty(key);
}
export function root(object) {
    return new VersionedRootReference(object);
}
export class VersionedRootReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = CONSTANT_TAG;
    }
    value() {
        return this.inner;
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
export class VersionedObjectReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = CURRENT_TAG;
    }
    value() {
        let { parent, key } = this;
        let parentObject = this.parent.value();
        let computed = classMeta(Object.getPrototypeOf(parentObject)).getComputed(key);
        let tags = [meta(parentObject).tag(key)];
        if (computed) {
            tags.push(...computed.dependentKeys.map(key => path(this, key).tag));
        }
        this.tag = combine(tags);
        return parentObject[key];
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
function path(parent, key) {
    return key.split('.').reduce((ref, part) => ref.get(part), parent);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3JlZmVyZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUd6QyxPQUFPLEVBQ0wsV0FBVyxFQUNYLFlBQVksRUFHWixPQUFPLEVBQ1IsTUFBTSxvQkFBb0IsQ0FBQztBQUU1QixPQUFPLEVBQWtCLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5FLE1BQU0sQ0FBQyxJQUFJLFNBQVMsQ0FBQztBQUNyQixNQUFNLENBQUMsSUFBSSxJQUFJLENBQUM7QUFFaEIsRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDM0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUNqQyxTQUFTLEdBQUcsMEJBQTBCLE1BQXVCO1FBQzNELElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7WUFDcEIsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUVELE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDLENBQUM7SUFFRixJQUFJLEdBQUcscUJBQXFCLE1BQXVCO1FBQ2pELElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFekIsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDcEIsQ0FBQyxHQUFHLElBQUksSUFBSSxFQUFFLENB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