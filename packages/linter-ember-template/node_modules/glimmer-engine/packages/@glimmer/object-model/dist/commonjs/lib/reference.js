"use strict";
const meta_1 = require("./meta");
const reference_1 = require("@glimmer/reference");
const util_1 = require("@glimmer/util");
if (util_1.HAS_NATIVE_WEAKMAP) {
    const META = new WeakMap();
    const CLASS_META = new WeakMap();
    exports.classMeta = function _classMetaNative(object) {
        let m = CLASS_META.get(object);
        if (m === undefined) {
            m = new meta_1.ClassMeta();
            CLASS_META.set(object, m);
        }
        return m;
    };
    exports.meta = function _metaNative(object) {
        let m = META.get(object);
        if (m === undefined) {
            m = new meta_1.default();
            META.set(object, m);
        }
        return m;
    };
}
else {
    const GLIMMER_META = 'META__glimmer__1484170086860394543206811';
    const GLIMMER_CLASS_META = 'CLASS_META__glimmer__14841708559821468834708062';
    exports.classMeta = function _classMetaFaux(object) {
        let m = object[GLIMMER_CLASS_META];
        if (m === undefined) {
            m = new meta_1.ClassMeta();
            object[GLIMMER_CLASS_META] = m;
        }
        return m;
    };
    exports.meta = function _metaFaux(object) {
        let m = object[GLIMMER_META];
        if (m === undefined) {
            m = new meta_1.default();
            object[GLIMMER_META] = m;
        }
        return m;
    };
}
function set(object, key, value) {
    object[key] = value;
    exports.meta(object).dirty(key);
}
exports.set = set;
function root(object) {
    return new VersionedRootReference(object);
}
exports.root = root;
class VersionedRootReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = reference_1.CONSTANT_TAG;
    }
    value() {
        return this.inner;
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
exports.VersionedRootReference = VersionedRootReference;
class VersionedObjectReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = reference_1.CURRENT_TAG;
    }
    value() {
        let { parent, key } = this;
        let parentObject = this.parent.value();
        let computed = exports.classMeta(Object.getPrototypeOf(parentObject)).getComputed(key);
        let tags = [exports.meta(parentObject).tag(key)];
        if (computed) {
            tags.push(...computed.dependentKeys.map(key => path(this, key).tag));
        }
        this.tag = reference_1.combine(tags);
        return parentObject[key];
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
exports.VersionedObjectReference = VersionedObjectReference;
function path(parent, key) {
    return key.split('.').reduce((ref, part) => ref.get(part), parent);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3JlZmVyZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsaUNBQXlDO0FBR3pDLGtEQU00QjtBQUU1Qix3Q0FBbUU7QUFLbkUsRUFBRSxDQUFDLENBQUMseUJBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLE1BQU0sSUFBSSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFDM0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUNqQyxpQkFBUyxHQUFHLDBCQUEwQixNQUF1QjtRQUMzRCxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUMsR0FBRyxJQUFJLGdCQUFTLEVBQUUsQ0FBQztZQUNwQixVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBRUQsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQztJQUVGLFlBQUksR0FBRyxxQkFBcUIsTUFBdUI7UUFDakQsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNwQixDQUFDLEdBQUcsSUFBSSxjQUFJLEVBQUUsQ0FBQztZQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7UUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxDQUFDO0FBRUosQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ04sTUFBTSxZQUFZLEdBQUcsMENBQTBDLENBQUM7SUFDaEUsTUFBTSxr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