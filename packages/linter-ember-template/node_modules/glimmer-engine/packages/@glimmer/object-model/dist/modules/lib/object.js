import { GlimmerDescriptor, ValueBlueprint } from './blueprint';
export class GlimmerObjectBase {
}
export default class GlimmerObject {
    static create(properties) {
        return new this(properties);
    }
    static extend(extensions) {
        // This method intentionally uses internal typecasts to convince TypeScript
        // that what we're doing is legitimate. The real action of this method is in
        // its signature (and the signature of GlimmerClass).
        let sub = class extends this {
        };
        if (extensions !== undefined) {
            let blueprints = Object.keys(extensions).map(k => {
                let extension = extensions[k];
                if (extension instanceof GlimmerDescriptor) {
                    return extension.blueprint(k);
                }
                else {
                    return new ValueBlueprint(k, extensions[k]);
                }
            });
            blueprints.forEach(b => b.define(sub.prototype));
        }
        return sub;
    }
    constructor(properties) {
        if (properties !== undefined) {
            Object.assign(this, properties);
        }
    }
}
/**
 * Adapter for TypeScript.
 *
 * A shim library could just declare the variable as the type
 * GlimmerClass<FirstInstance>. The key point is that shimming
 * between the two worlds requires writing a static interface
 * definition, as TypeScript isn't willing to treat the dynamic
 * intersection as a valid constructor return type.
 *
 * This function is a noop and is used like this:
 *
 * ```ts
 * // in one file
 * let Person = GlimmerObject.extend({
 *   named: 'Dan'
 * });
 *
 *
 * // in a TypeScript wrapper file
 * import { Person as OriginalPerson } from 'original-definition';
 *
 * interface PersonInstance {
 *   named: string
 * }
 *
 * export let Person = classof<PersonInstance>(OriginalPerson);
 *
 * // in a subclassing file
 * import { Person } from 'wrapped-definition';
 *
 * class FancyPerson extends Person {
 *   salutation: string;
 *
 *   fullName() {
 *     return `${this.salutation} ${this.named}`;
 *   }
 * }
 *
 * FancyPerson.create({ name: 'Tom Dale', salutation: 'Mr.' }).fullName();
 * // typechecks and returns 'Mr. Tom Dale'
 * ```
*/
export function classof(klass) {
    return klass;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL29iamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBY2hFLE1BQU07Q0FFTDtBQUVELE1BQU0sQ0FBQyxPQUFPO0lBQ1osTUFBTSxDQUFDLE1BQU0sQ0FBd0ksVUFBMEI7UUFDN0ssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBK0MsQ0FBQztJQUM1RSxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBaUcsVUFBdUI7UUFDbkksMkVBQTJFO1FBQzNFLDRFQUE0RTtRQUM1RSxxREFBcUQ7UUFFckQsSUFBSSxHQUFHLEdBQUcsS0FBTSxTQUFTLElBQWlDO1NBQUcsQ0FBQztRQUU5RCxFQUFFLENBQUMsQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM1QyxJQUFJLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsWUFBWSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7b0JBQzNDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlDLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUVILFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVELFlBQVksVUFBbUI7UUFDN0IsRUFBRSxDQUFDLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEMsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQXlDRTtBQUNGLE1BQU0sa0JBQXFCLEtBQVU7SUFDbkMsTUFBTSxDQUFDLEtBQVksQ0FBQztBQUN0QixDQUFDIn0=