import { Opaque } from '@glimmer/util';
import GlimmerObject from './object';
export declare abstract class Blueprint {
    protected key: PropertyKey;
    constructor(key: PropertyKey);
    abstract define(home: Object): any;
}
export declare class ValueBlueprint extends Blueprint {
    private value;
    constructor(key: PropertyKey, value: Opaque);
    define(home: Object): void;
}
export interface Accessor<T> {
    get(): T;
    set(val: T): void;
}
export declare abstract class GlimmerDescriptor {
    abstract blueprint(key: PropertyKey): Blueprint;
    abstract define(home: Object, key: PropertyKey): any;
}
export declare class Computed<T> extends GlimmerDescriptor {
    dependentKeys: string[];
    private accessor;
    constructor(dependentKeys: string[], accessor: Accessor<T>);
    blueprint(key: PropertyKey): ComputedBlueprint;
    reference(root: GlimmerObject, key: PropertyKey): void;
    define(home: Object, key: PropertyKey): void;
}
export declare function computed<T>(dep1: string, accessor: Accessor<T>): T;
export declare function computed<T>(dep1: string, dep2: string, accessor: Accessor<T>): T;
export declare function computed<T>(dep1: string, dep2: string, dep3: string, accessor: Accessor<T>): T;
export declare function computed<T>(dep1: string, dep2: string, dep3: string, dep4: string, accessor: Accessor<T>): T;
export declare class ComputedBlueprint extends Blueprint {
    private computed;
    constructor(key: PropertyKey, computed: Computed<Opaque>);
    define(home: Object): void;
}
export declare class DescriptorBlueprint extends Blueprint {
    private descriptor;
    constructor(key: PropertyKey, descriptor: PropertyDescriptor);
    define(home: Object): void;
}
