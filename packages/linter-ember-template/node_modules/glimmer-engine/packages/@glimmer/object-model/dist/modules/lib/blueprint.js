import { classMeta } from './reference';
export class Blueprint {
    constructor(key) {
        this.key = key;
    }
}
const VALUE_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
};
const ACCESSOR_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    get: undefined,
    set: undefined
};
export class ValueBlueprint extends Blueprint {
    constructor(key, value) {
        super(key);
        this.value = value;
    }
    define(home) {
        VALUE_DESCRIPTOR.value = this.value;
        Object.defineProperty(home, this.key, VALUE_DESCRIPTOR);
    }
}
export class GlimmerDescriptor {
}
export class Computed extends GlimmerDescriptor {
    constructor(dependentKeys, accessor) {
        super();
        this.dependentKeys = dependentKeys;
        this.accessor = accessor;
    }
    blueprint(key) {
        return new ComputedBlueprint(key, this);
    }
    reference(root, key) {
    }
    define(home, key) {
        classMeta(home).defineComputed(key, this);
        ACCESSOR_DESCRIPTOR.get = this.accessor.get;
        ACCESSOR_DESCRIPTOR.set = this.accessor.set;
        Object.defineProperty(home, key, ACCESSOR_DESCRIPTOR);
    }
}
export function computed(...args) {
    let depKeys = args.slice(0, -1);
    let accessor = args[args.length - 1];
    return new Computed(depKeys, accessor);
}
export class ComputedBlueprint extends Blueprint {
    constructor(key, computed) {
        super(key);
        this.computed = computed;
    }
    define(home) {
        this.computed.define(home, this.key);
    }
}
export class DescriptorBlueprint extends Blueprint {
    constructor(key, descriptor) {
        super(key);
        this.descriptor = descriptor;
    }
    define(home) {
        Object.defineProperty(home, this.key, this.descriptor);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXByaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2JsdWVwcmludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLE1BQU07SUFDSixZQUFzQixHQUFnQjtRQUFoQixRQUFHLEdBQUgsR0FBRyxDQUFhO0lBQUcsQ0FBQztDQUUzQztBQUVELE1BQU0sZ0JBQWdCLEdBQXVCO0lBQzNDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFlBQVksRUFBRSxJQUFJO0lBQ2xCLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLFNBQVM7Q0FDakIsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQXVCO0lBQzlDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFlBQVksRUFBRSxJQUFJO0lBQ2xCLEdBQUcsRUFBRSxTQUFTO0lBQ2QsR0FBRyxFQUFFLFNBQVM7Q0FDZixDQUFDO0FBRUYsTUFBTSxxQkFBc0IsU0FBUSxTQUFTO0lBQzNDLFlBQVksR0FBZ0IsRUFBVSxLQUFhO1FBQ2pELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUR5QixVQUFLLEdBQUwsS0FBSyxDQUFRO0lBRW5ELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBWTtRQUNqQixnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQztDQUNGO0FBT0QsTUFBTTtDQUdMO0FBRUQsTUFBTSxlQUFtQixTQUFRLGlCQUFpQjtJQUNoRCxZQUFtQixhQUF1QixFQUFVLFFBQXFCO1FBQ3ZFLEtBQUssRUFBRSxDQUFDO1FBRFMsa0JBQWEsR0FBYixhQUFhLENBQVU7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFhO0lBRXpFLENBQUM7SUFFRCxTQUFTLENBQUMsR0FBZ0I7UUFDeEIsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBbUIsRUFBRSxHQUFnQjtJQUUvQyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVksRUFBRSxHQUFnQjtRQUNuQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUUxQyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDNUMsbUJBQW1CLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3hELENBQUM7Q0FDRjtBQU9ELE1BQU0sbUJBQW1CLEdBQUcsSUFBVztJQUNyQyxJQUFJLE9BQU8sR0FBYSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLElBQUksUUFBUSxHQUFxQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV2RCxNQUFNLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFRCxNQUFNLHdCQUF5QixTQUFRLFNBQVM7SUFDOUMsWUFBWSxHQUFnQixFQUFVLFFBQTBCO1FBQzlELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUR5QixhQUFRLEdBQVIsUUFBUSxDQUFrQjtJQUVoRSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVk7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDO0NBQ0Y7QUFFRCxNQUFNLDBCQUEyQixTQUFRLFNBQVM7SUFDaEQsWUFBWSxHQUFnQixFQUFVLFVBQThCO1FBQ2xFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUR5QixlQUFVLEdBQVYsVUFBVSxDQUFvQjtJQUVwRSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVk7UUFDakIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsQ0FBQztDQUNGIn0=