"use strict";
const reference_1 = require("./reference");
class Blueprint {
    constructor(key) {
        this.key = key;
    }
}
exports.Blueprint = Blueprint;
const VALUE_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    writable: true,
    value: undefined
};
const ACCESSOR_DESCRIPTOR = {
    enumerable: true,
    configurable: true,
    get: undefined,
    set: undefined
};
class ValueBlueprint extends Blueprint {
    constructor(key, value) {
        super(key);
        this.value = value;
    }
    define(home) {
        VALUE_DESCRIPTOR.value = this.value;
        Object.defineProperty(home, this.key, VALUE_DESCRIPTOR);
    }
}
exports.ValueBlueprint = ValueBlueprint;
class GlimmerDescriptor {
}
exports.GlimmerDescriptor = GlimmerDescriptor;
class Computed extends GlimmerDescriptor {
    constructor(dependentKeys, accessor) {
        super();
        this.dependentKeys = dependentKeys;
        this.accessor = accessor;
    }
    blueprint(key) {
        return new ComputedBlueprint(key, this);
    }
    reference(root, key) {
    }
    define(home, key) {
        reference_1.classMeta(home).defineComputed(key, this);
        ACCESSOR_DESCRIPTOR.get = this.accessor.get;
        ACCESSOR_DESCRIPTOR.set = this.accessor.set;
        Object.defineProperty(home, key, ACCESSOR_DESCRIPTOR);
    }
}
exports.Computed = Computed;
function computed(...args) {
    let depKeys = args.slice(0, -1);
    let accessor = args[args.length - 1];
    return new Computed(depKeys, accessor);
}
exports.computed = computed;
class ComputedBlueprint extends Blueprint {
    constructor(key, computed) {
        super(key);
        this.computed = computed;
    }
    define(home) {
        this.computed.define(home, this.key);
    }
}
exports.ComputedBlueprint = ComputedBlueprint;
class DescriptorBlueprint extends Blueprint {
    constructor(key, descriptor) {
        super(key);
        this.descriptor = descriptor;
    }
    define(home) {
        Object.defineProperty(home, this.key, this.descriptor);
    }
}
exports.DescriptorBlueprint = DescriptorBlueprint;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ZXByaW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2JsdWVwcmludC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsMkNBQXdDO0FBR3hDO0lBQ0UsWUFBc0IsR0FBZ0I7UUFBaEIsUUFBRyxHQUFILEdBQUcsQ0FBYTtJQUFHLENBQUM7Q0FFM0M7QUFIRCw4QkFHQztBQUVELE1BQU0sZ0JBQWdCLEdBQXVCO0lBQzNDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFlBQVksRUFBRSxJQUFJO0lBQ2xCLFFBQVEsRUFBRSxJQUFJO0lBQ2QsS0FBSyxFQUFFLFNBQVM7Q0FDakIsQ0FBQztBQUVGLE1BQU0sbUJBQW1CLEdBQXVCO0lBQzlDLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLFlBQVksRUFBRSxJQUFJO0lBQ2xCLEdBQUcsRUFBRSxTQUFTO0lBQ2QsR0FBRyxFQUFFLFNBQVM7Q0FDZixDQUFDO0FBRUYsb0JBQTRCLFNBQVEsU0FBUztJQUMzQyxZQUFZLEdBQWdCLEVBQVUsS0FBYTtRQUNqRCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEeUIsVUFBSyxHQUFMLEtBQUssQ0FBUTtJQUVuRCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQVk7UUFDakIsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFELENBQUM7Q0FDRjtBQVRELHdDQVNDO0FBT0Q7Q0FHQztBQUhELDhDQUdDO0FBRUQsY0FBeUIsU0FBUSxpQkFBaUI7SUFDaEQsWUFBbUIsYUFBdUIsRUFBVSxRQUFxQjtRQUN2RSxLQUFLLEVBQUUsQ0FBQztRQURTLGtCQUFhLEdBQWIsYUFBYSxDQUFVO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBYTtJQUV6RSxDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQWdCO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQW1CLEVBQUUsR0FBZ0I7SUFFL0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZLEVBQUUsR0FBZ0I7UUFDbkMscUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTFDLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUM1QyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7UUFDNUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBcEJELDRCQW9CQztBQU9ELGtCQUF5QixHQUFHLElBQVc7SUFDckMsSUFBSSxPQUFPLEdBQWEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFJLFFBQVEsR0FBcUIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFdkQsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6QyxDQUFDO0FBTEQsNEJBS0M7QUFFRCx1QkFBK0IsU0FBUSxTQUFTO0lBQzlDLFlBQVksR0FBZ0IsRUFBVSxRQUEwQjtRQUM5RCxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEeUIsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7SUFFaEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBUkQsOENBUUM7QUFFRCx5QkFBaUMsU0FBUSxTQUFTO0lBQ2hELFlBQVksR0FBZ0IsRUFBVSxVQUE4QjtRQUNsRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFEeUIsZUFBVSxHQUFWLFVBQVUsQ0FBb0I7SUFFcEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFZO1FBQ2pCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Q0FDRjtBQVJELGtEQVFDIn0=