"use strict";
const meta_1 = require("./meta");
const glimmer_reference_1 = require("glimmer-reference");
const META = new WeakMap();
const CLASS_META = new WeakMap();
function classMeta(object) {
    let m = CLASS_META.get(object);
    if (m === undefined) {
        m = new meta_1.ClassMeta();
        CLASS_META.set(object, m);
    }
    return m;
}
exports.classMeta = classMeta;
function meta(object) {
    let m = META.get(object);
    if (m === undefined) {
        m = new meta_1.default();
        META.set(object, m);
    }
    return m;
}
exports.meta = meta;
function set(object, key, value) {
    object[key] = value;
    meta(object).dirty(key);
}
exports.set = set;
function root(object) {
    return new VersionedRootReference(object);
}
exports.root = root;
class VersionedRootReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = glimmer_reference_1.CONSTANT_TAG;
    }
    value() {
        return this.inner;
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
exports.VersionedRootReference = VersionedRootReference;
class VersionedObjectReference {
    constructor(parent, key) {
        this.parent = parent;
        this.key = key;
        this.tag = glimmer_reference_1.CURRENT_TAG;
    }
    value() {
        let { parent, key } = this;
        let parentObject = this.parent.value();
        let computed = classMeta(Object.getPrototypeOf(parentObject)).getComputed(key);
        let tags = [meta(parentObject).tag(key)];
        if (computed) {
            tags.push(...computed.dependentKeys.map(key => path(this, key).tag));
        }
        this.tag = glimmer_reference_1.combine(tags);
        return parentObject[key];
    }
    get(key) {
        return new VersionedObjectReference(this, key);
    }
}
exports.VersionedObjectReference = VersionedObjectReference;
function path(parent, key) {
    return key.split('.').reduce((ref, part) => ref.get(part), parent);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3JlZmVyZW5jZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsaUNBQXlDO0FBR3pDLHlEQU0yQjtBQUkzQixNQUFNLElBQUksR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0FBQzNCLE1BQU0sVUFBVSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFFakMsbUJBQTBCLE1BQXVCO0lBQy9DLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFL0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxHQUFHLElBQUksZ0JBQVMsRUFBRSxDQUFDO1FBQ3BCLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQVRELDhCQVNDO0FBRUQsY0FBcUIsTUFBdUI7SUFDMUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV6QixFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztRQUNwQixDQUFDLEdBQUcsSUFBSSxjQUFJLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQVRELG9CQVNDO0FBRUQsYUFBdUIsTUFBdUIsRUFBRSxHQUFnQixFQUFFLEtBQVE7SUFDeEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFIRCxrQkFHQztBQUVELGNBQWdELE1BQVM7SUFDdkQsTUFBTSxDQUFDLElBQUksc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUZELG9CQUVDO0FBRUQ7SUFHRSxZQUFvQixLQUFRO1FBQVIsVUFBSyxHQUFMLEtBQUssQ0FBRztRQUMxQixJQUFJLENBQUMsR0FBRyxHQUFHLGdDQUFZLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUs7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsR0FBRyxDQUFtQixHQUFnQjtRQUNwQyxNQUFNLENBQUMsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDakQsQ0FBQztDQUNGO0FBZEQsd0RBY0M7QUFFRDtJQUdFLFlBQW9CLE1BQXNDLEVBQVUsR0FBZ0I7UUFBaEUsV0FBTSxHQUFOLE1BQU0sQ0FBZ0M7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFhO1FBRjdFLFFBQUcsR0FBZ0IsK0JBQVcsQ0FBQztJQUVpRCxDQUFDO0lBRXhGLEtBQUs7UUFDSCxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBcUIsQ0FBQztRQUUxRCxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvRSxJQUFJLElBQUksR0FBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFeEQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLENBQUM7UUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLDJCQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQWdCO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLHdCQUF3QixDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDO0NBQ0Y7QUF2QkQsNERBdUJDO0FBRUQsY0FBYyxNQUFzQyxFQUFFLEdBQVc7SUFDL0QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JFLENBQUMifQ==