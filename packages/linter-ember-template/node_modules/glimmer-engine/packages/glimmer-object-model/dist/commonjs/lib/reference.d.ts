import GlimmerInstance from './object';
import Meta, { ClassMeta } from './meta';
import { VersionedPathReference, RevisionTag } from 'glimmer-reference';
import { Opaque } from 'glimmer-util';
export declare function classMeta(object: GlimmerInstance): ClassMeta;
export declare function meta(object: GlimmerInstance): Meta;
export declare function set<T>(object: GlimmerInstance, key: PropertyKey, value: T): void;
export declare function root<T extends GlimmerInstance>(object: T): VersionedRootReference<T>;
export declare class VersionedRootReference<T> implements VersionedPathReference<Opaque> {
    private inner;
    tag: RevisionTag;
    constructor(inner: T);
    value(): T;
    get<T extends Opaque>(key: PropertyKey): VersionedPathReference<T>;
}
export declare class VersionedObjectReference implements VersionedPathReference<Opaque> {
    private parent;
    private key;
    tag: RevisionTag;
    constructor(parent: VersionedPathReference<Opaque>, key: PropertyKey);
    value(): any;
    get(key: PropertyKey): VersionedPathReference<Opaque>;
}
