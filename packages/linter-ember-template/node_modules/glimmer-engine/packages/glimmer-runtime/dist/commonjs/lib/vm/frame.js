"use strict";
const glimmer_util_1 = require("glimmer-util");
class CapturedFrame {
    constructor(operand, args, condition) {
        this.operand = operand;
        this.args = args;
        this.condition = condition;
    }
}
exports.CapturedFrame = CapturedFrame;
class Frame {
    constructor(ops, component = null, manager = null, shadow = null) {
        this.ops = ops;
        this.component = component;
        this.manager = manager;
        this.shadow = shadow;
        this.operand = null;
        this.immediate = null;
        this.args = null;
        this.callerScope = null;
        this.blocks = null;
        this.condition = null;
        this.iterator = null;
        this.key = null;
        this.ip = ops.start;
    }
    capture() {
        return new CapturedFrame(this.operand, this.args, this.condition);
    }
    restore(frame) {
        this.operand = frame['operand'];
        this.args = frame['args'];
        this.condition = frame['condition'];
    }
}
class FrameStack {
    constructor() {
        this.frames = [];
        this.frame = null;
    }
    get currentFrame() {
        return this.frames[glimmer_util_1.unwrap(this.frame)];
    }
    push(ops, component = null, manager = null, shadow = null) {
        let frame = (this.frame === null) ? (this.frame = 0) : ++this.frame;
        if (this.frames.length <= frame) {
            this.frames.push(null);
        }
        this.frames[frame] = new Frame(ops, component, manager, shadow);
    }
    pop() {
        let { frames, frame } = this;
        frames[glimmer_util_1.expect(frame, 'only pop after pushing')] = null;
        this.frame = frame === 0 ? null : frame - 1;
    }
    capture() {
        return this.currentFrame.capture();
    }
    restore(frame) {
        this.currentFrame.restore(frame);
    }
    getOps() {
        return this.currentFrame.ops;
    }
    getCurrent() {
        return this.currentFrame.ip;
    }
    setCurrent(ip) {
        return this.currentFrame.ip = ip;
    }
    getOperand() {
        return glimmer_util_1.unwrap(this.currentFrame.operand);
    }
    setOperand(operand) {
        return this.currentFrame.operand = operand;
    }
    getImmediate() {
        return this.currentFrame.immediate;
    }
    setImmediate(value) {
        return this.currentFrame.immediate = value;
    }
    // FIXME: These options are required in practice by the existing code, but
    // figure out why.
    getArgs() {
        return this.currentFrame.args;
    }
    setArgs(args) {
        return this.currentFrame.args = args;
    }
    getCondition() {
        return glimmer_util_1.unwrap(this.currentFrame.condition);
    }
    setCondition(condition) {
        return this.currentFrame.condition = condition;
    }
    getIterator() {
        return glimmer_util_1.unwrap(this.currentFrame.iterator);
    }
    setIterator(iterator) {
        return this.currentFrame.iterator = iterator;
    }
    getKey() {
        return this.currentFrame.key;
    }
    setKey(key) {
        return this.currentFrame.key = key;
    }
    getBlocks() {
        return glimmer_util_1.unwrap(this.currentFrame.blocks);
    }
    setBlocks(blocks) {
        return this.currentFrame.blocks = blocks;
    }
    getCallerScope() {
        return glimmer_util_1.unwrap(this.currentFrame.callerScope);
    }
    setCallerScope(callerScope) {
        return this.currentFrame.callerScope = callerScope;
    }
    getComponent() {
        return glimmer_util_1.unwrap(this.currentFrame.component);
    }
    getManager() {
        return glimmer_util_1.unwrap(this.currentFrame.manager);
    }
    getShadow() {
        return this.currentFrame.shadow;
    }
    goto(ip) {
        this.setCurrent(ip);
    }
    hasOpcodes() {
        return this.frame !== null;
    }
    nextStatement() {
        let ip = this.frames[glimmer_util_1.unwrap(this.frame)].ip;
        let ops = this.getOps();
        if (ip <= ops.end) {
            this.setCurrent(ip + 1);
            return ops.ops[ip];
        }
        else {
            this.pop();
            return null;
        }
    }
}
exports.FrameStack = FrameStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvdm0vZnJhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLCtDQUE2RDtBQU03RDtJQUNFLFlBQ1MsT0FBbUMsRUFDbkMsSUFBMkIsRUFDM0IsU0FBcUM7UUFGckMsWUFBTyxHQUFQLE9BQU8sQ0FBNEI7UUFDbkMsU0FBSSxHQUFKLElBQUksQ0FBdUI7UUFDM0IsY0FBUyxHQUFULFNBQVMsQ0FBNEI7SUFDM0MsQ0FBQztDQUNMO0FBTkQsc0NBTUM7QUFFRDtJQVdFLFlBQ1MsR0FBVSxFQUNWLFlBQXVCLElBQUksRUFDM0IsVUFBK0MsSUFBSSxFQUNuRCxTQUE4QixJQUFJO1FBSGxDLFFBQUcsR0FBSCxHQUFHLENBQU87UUFDVixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixZQUFPLEdBQVAsT0FBTyxDQUE0QztRQUNuRCxXQUFNLEdBQU4sTUFBTSxDQUE0QjtRQWIzQyxZQUFPLEdBQStCLElBQUksQ0FBQztRQUMzQyxjQUFTLEdBQVEsSUFBSSxDQUFDO1FBQ3RCLFNBQUksR0FBMEIsSUFBSSxDQUFDO1FBQ25DLGdCQUFXLEdBQWtCLElBQUksQ0FBQztRQUNsQyxXQUFNLEdBQW1CLElBQUksQ0FBQztRQUM5QixjQUFTLEdBQStCLElBQUksQ0FBQztRQUM3QyxhQUFRLEdBQThCLElBQUksQ0FBQztRQUMzQyxRQUFHLEdBQW1CLElBQUksQ0FBQztRQVF6QixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELE9BQU87UUFDTCxNQUFNLENBQUMsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQW9CO1FBQzFCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFD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