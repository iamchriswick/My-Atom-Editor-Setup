"use strict";
const blocks_1 = require("./compiled/blocks");
const scanner_1 = require("./scanner");
const functions_1 = require("./syntax/functions");
const builder_1 = require("./compiled/opcodes/builder");
function compileLayout(compilable, env) {
    let builder = new ComponentLayoutBuilder(env);
    compilable.compile(builder);
    return builder.compile();
}
exports.compileLayout = compileLayout;
class ComponentLayoutBuilder {
    constructor(env) {
        this.env = env;
    }
    empty() {
        this.inner = new EmptyBuilder(this.env);
    }
    wrapLayout(layout) {
        this.inner = new WrappedBuilder(this.env, layout);
    }
    fromLayout(layout) {
        this.inner = new UnwrappedBuilder(this.env, layout);
    }
    compile() {
        return this.inner.compile();
    }
    get tag() {
        return this.inner.tag;
    }
    get attrs() {
        return this.inner.attrs;
    }
}
class EmptyBuilder {
    constructor(env) {
        this.env = env;
    }
    get tag() {
        throw new Error('Nope');
    }
    get attrs() {
        throw new Error('Nope');
    }
    compile() {
        return new blocks_1.CompiledProgram([], 1);
    }
}
class WrappedBuilder {
    constructor(env, layout) {
        this.env = env;
        this.layout = layout;
        this.tag = new ComponentTagBuilder();
        this.attrs = new ComponentAttrsBuilder();
    }
    compile() {
        //========DYNAMIC
        //        PutValue(TagExpr)
        //        Test
        //        JumpUnless(BODY)
        //        OpenDynamicPrimitiveElement
        //        DidCreateElement
        //        ...attr statements...
        //        FlushElement
        // BODY:  Noop
        //        ...body statements...
        //        PutValue(TagExpr)
        //        Test
        //        JumpUnless(END)
        //        CloseElement
        // END:   Noop
        //        DidRenderLayout
        //        Exit
        //
        //========STATIC
        //        OpenPrimitiveElementOpcode
        //        DidCreateElement
        //        ...attr statements...
        //        FlushElement
        //        ...body statements...
        //        CloseElement
        //        DidRenderLayout
        //        Exit
        let { env, layout } = this;
        let symbolTable = layout.symbolTable;
        let b = builder(env, layout.symbolTable);
        b.startLabels();
        let dynamicTag = this.tag.getDynamic();
        let staticTag;
        if (dynamicTag) {
            b.putValue(dynamicTag);
            b.test('simple');
            b.jumpUnless('BODY');
            b.openDynamicPrimitiveElement();
            b.didCreateElement();
            this.attrs['buffer'].forEach(statement => scanner_1.compileStatement(statement, b));
            b.flushElement();
            b.label('BODY');
        }
        else if (staticTag = this.tag.getStatic()) {
            b.openPrimitiveElement(staticTag);
            b.didCreateElement();
            this.attrs['buffer'].forEach(statement => scanner_1.compileStatement(statement, b));
            b.flushElement();
        }
        b.preludeForLayout(layout);
        layout.statements.forEach(statement => scanner_1.compileStatement(statement, b));
        if (dynamicTag) {
            b.putValue(dynamicTag);
            b.test('simple');
            b.jumpUnless('END');
            b.closeElement();
            b.label('END');
        }
        else if (staticTag) {
            b.closeElement();
        }
        b.didRenderLayout();
        b.stopLabels();
        return new blocks_1.CompiledProgram(b.toOpSeq(), symbolTable.size);
    }
}
function isOpenElement(value) {
    let type = value[0];
    return type === 'open-element' || type === 'open-primitive-element';
}
class UnwrappedBuilder {
    constructor(env, layout) {
        this.env = env;
        this.layout = layout;
        this.attrs = new ComponentAttrsBuilder();
    }
    get tag() {
        throw new Error('BUG: Cannot call `tag` on an UnwrappedBuilder');
    }
    compile() {
        let { env, layout } = this;
        let b = builder(env, layout.symbolTable);
        b.startLabels();
        b.preludeForLayout(layout);
        let attrs = this.attrs['buffer'];
        let attrsInserted = false;
        for (let statement of layout.statements) {
            if (!attrsInserted && isOpenElement(statement)) {
                b.openComponentElement(statement[1]);
                b.didCreateElement();
                b.shadowAttributes();
                attrs.forEach(statement => scanner_1.compileStatement(statement, b));
                attrsInserted = true;
            }
            else {
                scanner_1.compileStatement(statement, b);
            }
        }
        b.didRenderLayout();
        b.stopLabels();
        return new blocks_1.CompiledProgram(b.toOpSeq(), layout.symbolTable.size);
    }
}
class ComponentTagBuilder {
    constructor() {
        this.isDynamic = null;
        this.isStatic = null;
        this.staticTagName = null;
        this.dynamicTagName = null;
    }
    getDynamic() {
        if (this.isDynamic) {
            return this.dynamicTagName;
        }
    }
    getStatic() {
        if (this.isStatic) {
            return this.staticTagName;
        }
    }
    static(tagName) {
        this.isStatic = true;
        this.staticTagName = tagName;
    }
    dynamic(tagName) {
        this.isDynamic = true;
        this.dynamicTagName = ['function', tagName];
    }
}
class ComponentAttrsBuilder {
    constructor() {
        this.buffer = [];
    }
    static(name, value) {
        this.buffer.push(['static-attr', name, value, null]);
    }
    dynamic(name, value) {
        this.buffer.push(['dynamic-attr', name, ['function', value], null]);
    }
}
class ComponentBuilder {
    constructor(builder) {
        this.builder = builder;
        this.env = builder.env;
    }
    static(definition, args, _symbolTable, shadow) {
        this.builder.unit(b => {
            b.putComponentDefinition(definition);
            b.openComponent(functions_1.compileBaselineArgs(args, b), shadow);
            b.closeComponent();
        });
    }
    dynamic(definitionArgs, definition, args, _symbolTable, shadow) {
        this.builder.unit(b => {
            b.putArgs(functions_1.compileArgs(definitionArgs[0], definitionArgs[1], b));
            b.putValue(['function', definition]);
            b.test('simple');
            b.enter('BEGIN', 'END');
            b.label('BEGIN');
            b.jumpUnless('END');
            b.putDynamicComponentDefinition();
            b.openComponent(functions_1.compileBaselineArgs(args, b), shadow);
            b.closeComponent();
            b.label('END');
            b.exit();
        });
    }
}
exports.ComponentBuilder = ComponentBuilder;
function builder(env, symbolTable) {
    return new builder_1.default(symbolTable, env);
}
exports.builder = builder;
//# sourceMappingURL=data:application/json;base64,