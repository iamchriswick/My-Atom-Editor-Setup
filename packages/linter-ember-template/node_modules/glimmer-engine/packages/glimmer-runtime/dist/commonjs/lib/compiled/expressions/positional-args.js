"use strict";
const references_1 = require("../../references");
const utils_1 = require("../../utils");
const glimmer_reference_1 = require("glimmer-reference");
class CompiledPositionalArgs {
    constructor(values) {
        this.values = values;
        this.length = values.length;
    }
    static create(values) {
        if (values.length) {
            return new this(values);
        }
        else {
            return exports.COMPILED_EMPTY_POSITIONAL_ARGS;
        }
    }
    static empty() {
        return exports.COMPILED_EMPTY_POSITIONAL_ARGS;
    }
    evaluate(vm) {
        let { values, length } = this;
        let references = new Array(length);
        for (let i = 0; i < length; i++) {
            references[i] = values[i].evaluate(vm);
        }
        return EvaluatedPositionalArgs.create(references);
    }
    toJSON() {
        return `[${this.values.map(value => value.toJSON()).join(", ")}]`;
    }
}
exports.CompiledPositionalArgs = CompiledPositionalArgs;
exports.COMPILED_EMPTY_POSITIONAL_ARGS = new (class extends CompiledPositionalArgs {
    constructor() {
        super(utils_1.EMPTY_ARRAY);
    }
    evaluate(_vm) {
        return exports.EVALUATED_EMPTY_POSITIONAL_ARGS;
    }
    toJSON() {
        return `<EMPTY>`;
    }
});
class EvaluatedPositionalArgs {
    constructor(values) {
        this.values = values;
        this.tag = glimmer_reference_1.combineTagged(values);
        this.length = values.length;
    }
    static create(values) {
        return new this(values);
    }
    static empty() {
        return exports.EVALUATED_EMPTY_POSITIONAL_ARGS;
    }
    at(index) {
        let { values, length } = this;
        return (index < length) ? values[index] : references_1.UNDEFINED_REFERENCE;
    }
    value() {
        let { values, length } = this;
        let ret = new Array(length);
        for (let i = 0; i < length; i++) {
            ret[i] = values[i].value();
        }
        return ret;
    }
}
exports.EvaluatedPositionalArgs = EvaluatedPositionalArgs;
exports.EVALUATED_EMPTY_POSITIONAL_ARGS = new (class extends EvaluatedPositionalArgs {
    constructor() {
        super(utils_1.EMPTY_ARRAY);
    }
    at() {
        return references_1.UNDEFINED_REFERENCE;
    }
    value() {
        return this.values;
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb25hbC1hcmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL3Bvc2l0aW9uYWwtYXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaURBQXVEO0FBR3ZELHVDQUEwQztBQUMxQyx5REFBOEU7QUFHOUU7SUFlRSxZQUFtQixNQUFpRDtRQUFqRCxXQUFNLEdBQU4sTUFBTSxDQUEyQztRQUNsRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDOUIsQ0FBQztJQWhCRCxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQW9DO1FBQ2hELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xCLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsc0NBQThCLENBQUM7UUFDeEMsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSztRQUNWLE1BQU0sQ0FBQyxzQ0FBOEIsQ0FBQztJQUN4QyxDQUFDO0lBUUQsUUFBUSxDQUFDLEVBQU07UUFDYixJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLFVBQVUsR0FBNEIsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFNUQsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNoQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBRUQsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwRSxDQUFDO0NBQ0Y7QUFqQ0Qsd0RBaUNDO0FBRVksUUFBQSw4QkFBOEIsR0FBMkIsSUFBSSxDQUFDLEtBQU0sU0FBUSxzQkFBc0I7SUFDN0c7UUFDRSxLQUFLLENBQUMsbUJBQVcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRLENBQUMsR0FBTztRQUNkLE1BQU0sQ0FBQyx1Q0FBK0IsQ0FBQztJQUN6QyxDQUFDO0lBRUQsTUFBTTtRQUNKLE1BQU0sQ0FBQyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGLENBQUMsQ0FBQztBQUVIO0lBWUUsWUFBbUIsTUFBNEM7UUFBNUMsV0FBTSxHQUFOLE1BQU0sQ0FBc0M7UUFDN0QsSUFBSSxDQUFDLEdBQUcsR0FBRyxpQ0FBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBZEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUE0QztRQUN4RCxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsTUFBTSxDQUFDLHVDQUErQixDQUFDO0lBQ3pDLENBQUM7SUFVRCxFQUFFLENBQUMsS0FBYTtRQUNkLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsZ0NBQW1CLENBQUM7SUFDaEUsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLEdBQUcsR0FBYSxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV0QyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsQ0FBQztRQUVELE1BQU0sQ0FBQyxHQUFHLENBQUM7SUFDYixDQUFDO0NBQ0Y7QUFoQ0QsMERBZ0NDO0FBRVksUUFBQSwrQkFBK0IsR0FBNEIsSUFBSSxDQUFDLEtBQU0sU0FBUSx1QkFBdUI7SUFDaEg7UUFDRSxLQUFLLENBQUMsbUJBQVcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxFQUFFO1FBQ0EsTUFBTSxDQUFDLGdDQUFtQixDQUFDO0lBQzdCLENBQUM7SUFFRCxLQUFLO1FBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUMsQ0FBQyJ9