"use strict";
const value_1 = require("../compiled/expressions/value");
const has_block_1 = require("../compiled/expressions/has-block");
const glimmer_util_1 = require("glimmer-util");
const lookups_1 = require("../compiled/expressions/lookups");
const helper_1 = require("../compiled/expressions/helper");
const concat_1 = require("../compiled/expressions/concat");
const args_1 = require("../compiled/expressions/args");
const has_block_2 = require("../compiled/expressions/has-block");
const function_1 = require("../compiled/expressions/function");
class Compilers {
    constructor() {
        this.names = glimmer_util_1.dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    compile(sexp, builder) {
        let name = sexp[0];
        let index = this.names[name];
        let func = this.funcs[index];
        glimmer_util_1.assert(!!func, `expected an implementation for ${sexp[0]}`);
        return func(sexp, builder);
    }
}
exports.Compilers = Compilers;
exports.STATEMENTS = new Compilers();
exports.STATEMENTS.add('text', (sexp, builder) => {
    builder.text(sexp[1]);
});
exports.STATEMENTS.add('comment', (sexp, builder) => {
    builder.comment(sexp[1]);
});
exports.STATEMENTS.add('close-element', (_sexp, builder) => {
    glimmer_util_1.LOGGER.trace('close-element statement');
    builder.closeElement();
});
exports.STATEMENTS.add('flush-element', (_sexp, builder) => {
    builder.flushElement();
});
exports.STATEMENTS.add('modifier', (sexp, builder) => {
    let [, path, params, hash] = sexp;
    let args = compileArgs(params, hash, builder);
    if (builder.env.hasModifier(path, builder.symbolTable)) {
        builder.modifier(path[0], args);
    }
    else {
        throw new Error(`Compile Error: ${path.join('.')} is not a modifier`);
    }
});
exports.STATEMENTS.add('static-attr', (sexp, builder) => {
    let [, name, value, namespace] = sexp;
    builder.staticAttr(name, namespace, value);
});
exports.STATEMENTS.add('any-dynamic-attr', (sexp, builder) => {
    let [, name, value, namespace, trusting] = sexp;
    builder.putValue(value);
    if (namespace) {
        builder.dynamicAttrNS(name, namespace, trusting);
    }
    else {
        builder.dynamicAttr(name, trusting);
    }
});
exports.STATEMENTS.add('open-element', (sexp, builder) => {
    glimmer_util_1.LOGGER.trace('open-element statement');
    builder.openPrimitiveElement(sexp[1]);
});
exports.STATEMENTS.add('optimized-append', (sexp, builder) => {
    let [, value, trustingMorph] = sexp;
    let { inlines } = builder.env.macros();
    let returned = inlines.compile(sexp, builder) || value;
    if (returned === true)
        return;
    builder.putValue(returned[1]);
    if (trustingMorph) {
        builder.trustingAppend();
    }
    else {
        builder.cautiousAppend();
    }
});
exports.STATEMENTS.add('unoptimized-append', (sexp, builder) => {
    let [, value, trustingMorph] = sexp;
    let { inlines } = builder.env.macros();
    let returned = inlines.compile(sexp, builder) || value;
    if (returned === true)
        return;
    if (trustingMorph) {
        builder.guardedTrustingAppend(returned[1]);
    }
    else {
        builder.guardedCautiousAppend(returned[1]);
    }
});
exports.STATEMENTS.add('nested-block', (sexp, builder) => {
    let { blocks } = builder.env.macros();
    blocks.compile(sexp, builder);
});
exports.STATEMENTS.add('scanned-block', (sexp, builder) => {
    let [, path, params, hash, template, inverse] = sexp;
    let templateBlock = template && template.scan();
    let inverseBlock = inverse && inverse.scan();
    let { blocks } = builder.env.macros();
    blocks.compile(['nested-block', path, params, hash, templateBlock, inverseBlock], builder);
});
exports.STATEMENTS.add('scanned-component', (sexp, builder) => {
    let [, tag, attrs, rawArgs, rawBlock] = sexp;
    let block = rawBlock && rawBlock.scan();
    let args = compileBlockArgs(null, rawArgs, { default: block, inverse: null }, builder);
    let definition = builder.env.getComponentDefinition([tag], builder.symbolTable);
    builder.putComponentDefinition(definition);
    builder.openComponent(args, attrs.scan());
    builder.closeComponent();
});
exports.STATEMENTS.add('static-partial', (sexp, builder) => {
    let [, name] = sexp;
    if (!builder.env.hasPartial(name, builder.symbolTable)) {
        throw new Error(`Compile Error: Could not find a partial named "${name}"`);
    }
    let definition = builder.env.lookupPartial(name, builder.symbolTable);
    builder.putPartialDefinition(definition);
    builder.evaluatePartial();
});
exports.STATEMENTS.add('dynamic-partial', (sexp, builder) => {
    let [, name] = sexp;
    builder.startLabels();
    builder.putValue(name);
    builder.test('simple');
    builder.enter('BEGIN', 'END');
    builder.label('BEGIN');
    builder.jumpUnless('END');
    builder.putDynamicPartialDefinition();
    builder.evaluatePartial();
    builder.label('END');
    builder.exit();
    builder.stopLabels();
});
exports.STATEMENTS.add('yield', function (sexp, builder) {
    let [, to, params] = sexp;
    let args = compileArgs(params, null, builder);
    builder.yield(args, to);
});
let EXPRESSIONS = new Compilers();
function expr(expression, builder) {
    if (Array.isArray(expression)) {
        return EXPRESSIONS.compile(expression, builder);
    }
    else {
        return new value_1.default(expression);
    }
}
exports.expr = expr;
EXPRESSIONS.add('unknown', (sexp, builder) => {
    let path = sexp[1];
    if (builder.env.hasHelper(path, builder.symbolTable)) {
        return new helper_1.default(path, builder.env.lookupHelper(path, builder.symbolTable), args_1.CompiledArgs.empty(), builder.symbolTable);
    }
    else {
        return compileRef(path, builder);
    }
});
EXPRESSIONS.add('concat', ((sexp, builder) => {
    let params = sexp[1].map(p => expr(p, builder));
    return new concat_1.default(params);
}));
EXPRESSIONS.add('function', (sexp, builder) => {
    return new function_1.CompiledFunctionExpression(sexp[1], builder.symbolTable);
});
EXPRESSIONS.add('helper', (sexp, builder) => {
    let { env, symbolTable } = builder;
    let [, path, params, hash] = sexp;
    if (env.hasHelper(path, symbolTable)) {
        let args = compileArgs(params, hash, builder);
        return new helper_1.default(path, env.lookupHelper(path, symbolTable), args, symbolTable);
    }
    else {
        throw new Error(`Compile Error: ${path.join('.')} is not a helper`);
    }
});
EXPRESSIONS.add('get', (sexp, builder) => {
    return compileRef(sexp[1], builder);
});
EXPRESSIONS.add('undefined', (_sexp, _builder) => {
    return new value_1.default(undefined);
});
EXPRESSIONS.add('arg', (sexp, builder) => {
    let [, parts] = sexp;
    let head = parts[0];
    let named, partial;
    if (named = builder.symbolTable.getSymbol('named', head)) {
        let path = parts.slice(1);
        let inner = new lookups_1.CompiledSymbol(named, head);
        return lookups_1.default.create(inner, path);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        let path = parts.slice(1);
        let inner = new lookups_1.CompiledInPartialName(partial, head);
        return lookups_1.default.create(inner, path);
    }
    else {
        throw new Error(`[BUG] @${parts.join('.')} is not a valid lookup path.`);
    }
});
EXPRESSIONS.add('has-block', (sexp, builder) => {
    let blockName = sexp[1];
    let yields, partial;
    if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
        let inner = new has_block_2.CompiledGetBlockBySymbol(yields, blockName);
        return new has_block_1.default(inner);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        let inner = new has_block_2.CompiledInPartialGetBlock(partial, blockName);
        return new has_block_1.default(inner);
    }
    else {
        throw new Error('[BUG] ${blockName} is not a valid block name.');
    }
});
EXPRESSIONS.add('has-block-params', (sexp, builder) => {
    let blockName = sexp[1];
    let yields, partial;
    if (yields = builder.symbolTable.getSymbol('yields', blockName)) {
        let inner = new has_block_2.CompiledGetBlockBySymbol(yields, blockName);
        return new has_block_1.CompiledHasBlockParams(inner);
    }
    else if (partial = builder.symbolTable.getPartialArgs()) {
        let inner = new has_block_2.CompiledInPartialGetBlock(partial, blockName);
        return new has_block_1.CompiledHasBlockParams(inner);
    }
    else {
        throw new Error('[BUG] ${blockName} is not a valid block name.');
    }
});
function compileArgs(params, hash, builder) {
    let compiledParams = compileParams(params, builder);
    let compiledHash = compileHash(hash, builder);
    return args_1.CompiledArgs.create(compiledParams, compiledHash, args_1.EMPTY_BLOCKS);
}
exports.compileArgs = compileArgs;
function compileBlockArgs(params, hash, blocks, builder) {
    let compiledParams = compileParams(params, builder);
    let compiledHash = compileHash(hash, builder);
    return args_1.CompiledArgs.create(compiledParams, compiledHash, blocks);
}
exports.compileBlockArgs = compileBlockArgs;
function compileBaselineArgs(args, builder) {
    let [params, hash, _default, inverse] = args;
    return args_1.CompiledArgs.create(compileParams(params, builder), compileHash(hash, builder), { default: _default, inverse });
}
exports.compileBaselineArgs = compileBaselineArgs;
function compileParams(params, builder) {
    if (!params || params.length === 0)
        return args_1.COMPILED_EMPTY_POSITIONAL_ARGS;
    let compiled = params.map(p => expr(p, builder));
    return args_1.CompiledPositionalArgs.create(compiled);
}
function compileHash(hash, builder) {
    if (!hash)
        return args_1.COMPILED_EMPTY_NAMED_ARGS;
    let [keys, values] = hash;
    if (keys.length === 0)
        return args_1.COMPILED_EMPTY_NAMED_ARGS;
    let compiled = values.map(p => expr(p, builder));
    return new args_1.CompiledNamedArgs(keys, compiled);
}
function compileRef(parts, builder) {
    let head = parts[0];
    let local;
    if (head === null) {
        let inner = new lookups_1.CompiledSelf();
        let path = parts.slice(1);
        return lookups_1.default.create(inner, path);
    }
    else if (local = builder.symbolTable.getSymbol('local', head)) {
        let path = parts.slice(1);
        let inner = new lookups_1.CompiledSymbol(local, head);
        return lookups_1.default.create(inner, path);
    }
    else {
        let inner = new lookups_1.CompiledSelf();
        return lookups_1.default.create(inner, parts);
    }
}
class Blocks {
    constructor() {
        this.names = glimmer_util_1.dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    addMissing(func) {
        this.missing = func;
    }
    compile(sexp, builder) {
        glimmer_util_1.assert(sexp[1].length === 1, 'paths in blocks are not supported');
        let name = sexp[1][0];
        let index = this.names[name];
        if (index === undefined) {
            glimmer_util_1.assert(!!this.missing, `${name} not found, and no catch-all block handler was registered`);
            let func = this.missing;
            let handled = func(sexp, builder);
            glimmer_util_1.assert(!!handled, `${name} not found, and the catch-all block handler didn't handle it`);
        }
        else {
            let func = this.funcs[index];
            func(sexp, builder);
        }
    }
}
exports.Blocks = Blocks;
exports.BLOCKS = new Blocks();
class Inlines {
    constructor() {
        this.names = glimmer_util_1.dict();
        this.funcs = [];
    }
    add(name, func) {
        this.funcs.push(func);
        this.names[name] = this.funcs.length - 1;
    }
    addMissing(func) {
        this.missing = func;
    }
    compile(sexp, builder) {
        let value = sexp[1];
        // TODO: Fix this so that expression macros can return
        // things like components, so that {{component foo}}
        // is the same as {{(component foo)}}
        if (!Array.isArray(value))
            return ['expr', value];
        let path;
        let params;
        let hash;
        if (value[0] === 'helper') {
            path = value[1];
            params = value[2];
            hash = value[3];
        }
        else if (value[0] === 'unknown') {
            path = value[1];
            params = hash = null;
        }
        else {
            return ['expr', value];
        }
        if (path.length > 1)
            return ['expr', value];
        let name = path[0];
        let index = this.names[name];
        if (index === undefined && this.missing) {
            let func = this.missing;
            let returned = func(path, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        }
        else if (index !== undefined) {
            let func = this.funcs[index];
            let returned = func(path, params, hash, builder);
            return returned === false ? ['expr', value] : returned;
        }
        else {
            return ['expr', value];
        }
    }
}
exports.Inlines = Inlines;
exports.INLINES = new Inlines();
populateBuiltins(exports.BLOCKS, exports.INLINES);
function populateBuiltins(blocks = new Blocks(), inlines = new Inlines()) {
    blocks.add('if', (sexp, builder) => {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, b => {
            if (_default && inverse) {
                b.jumpUnless('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpUnless('END');
                b.evaluate(_default);
            }
            else {
                throw glimmer_util_1.unreachable();
            }
        });
    });
    blocks.add('unless', (sexp, builder) => {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, b => {
            if (_default && inverse) {
                b.jumpIf('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpIf('END');
                b.evaluate(_default);
            }
            else {
                throw glimmer_util_1.unreachable();
            }
        });
    });
    blocks.add('with', (sexp, builder) => {
        //        PutArgs
        //        Test(Environment)
        //        Enter(BEGIN, END)
        // BEGIN: Noop
        //        JumpUnless(ELSE)
        //        Evaluate(default)
        //        Jump(END)
        // ELSE:  Noop
        //        Evalulate(inverse)
        // END:   Noop
        //        Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.putArgs(args);
        builder.test('environment');
        builder.labelled(null, b => {
            if (_default && inverse) {
                b.jumpUnless('ELSE');
                b.evaluate(_default);
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
            else if (_default) {
                b.jumpUnless('END');
                b.evaluate(_default);
            }
            else {
                throw glimmer_util_1.unreachable();
            }
        });
    });
    blocks.add('each', (sexp, builder) => {
        //         Enter(BEGIN, END)
        // BEGIN:  Noop
        //         PutArgs
        //         PutIterable
        //         JumpUnless(ELSE)
        //         EnterList(BEGIN2, END2)
        // ITER:   Noop
        //         NextIter(BREAK)
        //         EnterWithKey(BEGIN2, END2)
        // BEGIN2: Noop
        //         PushChildScope
        //         Evaluate(default)
        //         PopScope
        // END2:   Noop
        //         Exit
        //         Jump(ITER)
        // BREAK:  Noop
        //         ExitList
        //         Jump(END)
        // ELSE:   Noop
        //         Evalulate(inverse)
        // END:    Noop
        //         Exit
        let [, , params, hash, _default, inverse] = sexp;
        let args = compileArgs(params, hash, builder);
        builder.labelled(args, b => {
            b.putIterator();
            if (inverse) {
                b.jumpUnless('ELSE');
            }
            else {
                b.jumpUnless('END');
            }
            b.iter(b => {
                b.evaluate(glimmer_util_1.unwrap(_default));
            });
            if (inverse) {
                b.jump('END');
                b.label('ELSE');
                b.evaluate(inverse);
            }
        });
    });
    return { blocks, inlines };
}
exports.populateBuiltins = populateBuiltins;
//# sourceMappingURL=data:application/json;base64,