import { CompiledProgram, CompiledBlock } from './compiled/blocks';
import { builder } from './compiler';
import * as WireFormat from 'glimmer-wire-format';
import { entryPoint as entryPointTable, layout as layoutTable, block as blockTable } from './symbol-table';
import { STATEMENTS } from './syntax/functions';
import { SPECIALIZE } from './syntax/specialize';
export function compileStatement(statement, builder) {
    let refined = SPECIALIZE.specialize(statement, builder.symbolTable);
    STATEMENTS.compile(refined, builder);
}
export class Template {
    constructor(statements, symbolTable) {
        this.statements = statements;
        this.symbolTable = symbolTable;
    }
}
export class EntryPoint extends Template {
    compile(env) {
        let table = this.symbolTable;
        let b = builder(env, table);
        for (let statement of this.statements) {
            let refined = SPECIALIZE.specialize(statement, table);
            STATEMENTS.compile(refined, b);
        }
        return new CompiledProgram(b.toOpSeq(), this.symbolTable.size);
    }
}
export class InlineBlock extends Template {
    splat(builder) {
        let table = builder.symbolTable;
        let locals = table.getSymbols().locals;
        if (locals) {
            builder.pushChildScope();
            builder.bindPositionalArgsForLocals(locals);
        }
        for (let statement of this.statements) {
            let refined = SPECIALIZE.specialize(statement, table);
            STATEMENTS.compile(refined, builder);
        }
        if (locals) {
            builder.popScope();
        }
    }
    compile(env) {
        let table = this.symbolTable;
        let b = builder(env, table);
        this.splat(b);
        return new CompiledBlock(b.toOpSeq());
    }
}
export class Layout extends Template {
    compile(_env) {
        return new CompiledProgram([], 1);
    }
}
export class PartialBlock extends Layout {
    compile(env) {
        let table = this.symbolTable;
        let b = builder(env, table);
        for (let statement of this.statements) {
            let refined = SPECIALIZE.specialize(statement, table);
            STATEMENTS.compile(refined, b);
        }
        return new CompiledProgram(b.toOpSeq(), table.size);
    }
}
export default class Scanner {
    constructor(block, meta, env) {
        this.block = block;
        this.meta = meta;
        this.env = env;
    }
    scanEntryPoint() {
        let { block, meta } = this;
        let symbolTable = entryPointTable(meta);
        let child = scanBlock(block, symbolTable, this.env);
        return new EntryPoint(child.statements, symbolTable);
    }
    scanLayout() {
        let { block, meta } = this;
        let { named, yields, hasPartials } = block;
        let symbolTable = layoutTable(meta, named, yields, hasPartials);
        let child = scanBlock(block, symbolTable, this.env);
        return new Layout(child.statements, symbolTable);
    }
    scanPartial(symbolTable) {
        let { block } = this;
        let child = scanBlock(block, symbolTable, this.env);
        return new PartialBlock(child.statements, symbolTable);
    }
}
export function scanBlock({ statements }, symbolTable, env) {
    return new RawInlineBlock(env, symbolTable, statements).scan();
}
export var BaselineSyntax;
(function (BaselineSyntax) {
    BaselineSyntax.isScannedComponent = WireFormat.is('scanned-component');
    BaselineSyntax.isPrimitiveElement = WireFormat.is('open-primitive-element');
    BaselineSyntax.isOptimizedAppend = WireFormat.is('optimized-append');
    BaselineSyntax.isUnoptimizedAppend = WireFormat.is('unoptimized-append');
    BaselineSyntax.isAnyAttr = WireFormat.is('any-dynamic-attr');
    BaselineSyntax.isStaticPartial = WireFormat.is('static-partial');
    BaselineSyntax.isDynamicPartial = WireFormat.is('dynamic-partial');
    BaselineSyntax.isFunctionExpression = WireFormat.is('function');
    BaselineSyntax.isNestedBlock = WireFormat.is('nested-block');
    BaselineSyntax.isScannedBlock = WireFormat.is('scanned-block');
    var NestedBlock;
    (function (NestedBlock) {
        function defaultBlock(sexp) {
            return sexp[4];
        }
        NestedBlock.defaultBlock = defaultBlock;
        function inverseBlock(sexp) {
            return sexp[5];
        }
        NestedBlock.inverseBlock = inverseBlock;
        function params(sexp) {
            return sexp[2];
        }
        NestedBlock.params = params;
        function hash(sexp) {
            return sexp[3];
        }
        NestedBlock.hash = hash;
    })(NestedBlock = BaselineSyntax.NestedBlock || (BaselineSyntax.NestedBlock = {}));
})(BaselineSyntax || (BaselineSyntax = {}));
export class RawInlineBlock {
    constructor(env, table, statements) {
        this.env = env;
        this.table = table;
        this.statements = statements;
    }
    scan() {
        let buffer = [];
        let statements = this.statements;
        for (let statement of statements) {
            if (WireFormat.Statements.isBlock(statement)) {
                buffer.push(this.specializeBlock(statement));
            }
            else if (WireFormat.Statements.isComponent(statement)) {
                buffer.push(...this.specializeComponent(statement));
            }
            else {
                buffer.push(statement);
            }
        }
        return new InlineBlock(buffer, this.table);
    }
    specializeBlock(block) {
        let [, path, params, hash, template, inverse] = block;
        return ['scanned-block', path, params, hash, this.child(template), this.child(inverse)];
    }
    specializeComponent(sexp) {
        let [, tag, component] = sexp;
        if (this.env.hasComponentDefinition([tag], this.table)) {
            let child = this.child(component);
            let attrs = new RawInlineBlock(this.env, this.table, component.attrs);
            return [['scanned-component', tag, attrs, component.args, child]];
        }
        else {
            let buf = [];
            buf.push(['open-element', tag, []]);
            buf.push(...component.attrs);
            buf.push(['flush-element']);
            buf.push(...component.statements);
            buf.push(['close-element']);
            return buf;
        }
    }
    child(block) {
        if (!block)
            return null;
        let table = blockTable(this.table, block.locals);
        return new RawInlineBlock(this.env, table, block.statements);
    }
}
//# sourceMappingURL=data:application/json;base64,