import * as content from './content';
import * as vm from './vm';
import { CompiledGetBlockBySymbol, CompiledInPartialGetBlock } from '../../compiled/expressions/has-block';
import { Stack, dict, assert, expect } from 'glimmer-util';
import { expr } from '../../syntax/functions';
import { CompiledExpression } from '../expressions';
import { ComponentBuilder } from '../../compiler';
import { APPEND_OPCODES } from '../../opcodes';
function opcode(name, op1, op2, op3) {
    return APPEND_OPCODES.construct(name, null, op1, op2, op3);
}
export class Slice {
    constructor(ops, start, end) {
        this.ops = ops;
        this.start = start;
        this.end = end;
    }
}
class Labels {
    constructor() {
        this.labels = dict();
        this.jumps = [];
        this.ranges = [];
    }
    label(name, index) {
        this.labels[name] = index;
    }
    jump(at, Target, target) {
        this.jumps.push({ at, target, Target });
    }
    range(at, Range, start, end) {
        this.ranges.push({ at, start, end, Range });
    }
    patch(constants, opcodes) {
        for (let { at, target, Target } of this.jumps) {
            opcodes[at] = APPEND_OPCODES.construct(Target, null, this.labels[target]);
        }
        for (let { at, start, end, Range } of this.ranges) {
            let _slice = new Slice(opcodes, this.labels[start], this.labels[end] - 1);
            let slice = constants.slice(_slice);
            opcodes[at] = APPEND_OPCODES.construct(Range, null, slice);
        }
    }
}
export class BasicOpcodeBuilder {
    constructor(symbolTable, env) {
        this.symbolTable = symbolTable;
        this.env = env;
        this.labelsStack = new Stack();
        this.ops = [];
        this.constants = env.constants;
    }
    get pos() {
        return this.ops.length - 1;
    }
    get nextPos() {
        return this.ops.length;
    }
    push(op) {
        // console.log(`pushing ${op && op.type}`);
        this.ops.push(op);
    }
    toOpSeq() {
        assert(this.ops.every(op => op !== null), 'bug: holes left in the opseq');
        return this.ops;
    }
    // helpers
    get labels() {
        return expect(this.labelsStack.current, 'bug: not in a label stack');
    }
    startLabels() {
        this.labelsStack.push(new Labels());
    }
    stopLabels() {
        let label = expect(this.labelsStack.pop(), 'unbalanced push and pop labels');
        label.patch(this.constants, this.ops);
    }
    // partials
    putPartialDefinition(_definition) {
        let definition = this.constants.other(_definition);
        this.push(opcode('PutPartial', definition));
    }
    putDynamicPartialDefinition() {
        this.push(opcode('PutDynamicPartial', this.constants.other(this.symbolTable)));
    }
    evaluatePartial() {
        this.push(opcode('EvaluatePartial', this.constants.other(this.symbolTable), this.constants.other(dict())));
    }
    // components
    putComponentDefinition(definition) {
        this.push(opcode('PutComponent', this.other(definition)));
    }
    putDynamicComponentDefinition() {
        this.push(opcode('PutDynamicComponent'));
    }
    openComponent(args, shadow) {
        this.push(opcode('OpenComponent', this.args(args), shadow ? this.block(shadow) : 0));
    }
    didCreateElement() {
        this.push(opcode('DidCreateElement'));
    }
    shadowAttributes() {
        this.push(opcode('ShadowAttributes'));
        this.push(opcode('CloseBlock'));
    }
    didRenderLayout() {
        this.push(opcode('DidRenderLayout'));
    }
    closeComponent() {
        this.push(opcode('CloseComponent'));
    }
    // content
    dynamicContent(Opcode) {
        this.push(opcode('DynamicContent', this.other(Opcode)));
    }
    cautiousAppend() {
        this.dynamicContent(new content.OptimizedCautiousAppendOpcode());
    }
    trustingAppend() {
        this.dynamicContent(new content.OptimizedTrustingAppendOpcode());
    }
    guardedCautiousAppend(expression) {
        this.dynamicContent(new content.GuardedCautiousAppendOpcode(this.compileExpression(expression), this.symbolTable));
    }
    guardedTrustingAppend(expression) {
        this.dynamicContent(new content.GuardedTrustingAppendOpcode(this.compileExpression(expression), this.symbolTable));
    }
    // dom
    text(text) {
        this.push(opcode('Text', this.constants.string(text)));
    }
    openPrimitiveElement(tag) {
        this.push(opcode('OpenElement', this.constants.string(tag)));
    }
    openComponentElement(tag) {
        this.push(opcode('OpenComponentElement', this.constants.string(tag)));
    }
    openDynamicPrimitiveElement() {
        this.push(opcode('OpenDynamicElement'));
    }
    flushElement() {
        this.push(opcode('FlushElement'));
    }
    closeElement() {
        this.push(opcode('CloseElement'));
    }
    staticAttr(_name, _namespace, _value) {
        let name = this.constants.string(_name);
        let namespace = _namespace ? this.constants.string(_namespace) : 0;
        let value = this.constants.string(_value);
        this.push(opcode('StaticAttr', name, value, namespace));
    }
    dynamicAttrNS(_name, _namespace, trusting) {
        let name = this.constants.string(_name);
        let namespace = this.constants.string(_namespace);
        this.push(opcode('DynamicAttrNS', name, namespace, trusting | 0));
    }
    dynamicAttr(_name, trusting) {
        let name = this.constants.string(_name);
        this.push(opcode('DynamicAttr', name, trusting | 0));
    }
    comment(_comment) {
        let comment = this.constants.string(_comment);
        this.push(opcode('Comment', comment));
    }
    modifier(_name, _args) {
        let args = this.constants.expression(this.compile(_args));
        let _modifierManager = this.env.lookupModifier([_name], this.symbolTable);
        let modifierManager = this.constants.other(_modifierManager);
        let name = this.constants.string(_name);
        this.push(opcode('Modifier', name, modifierManager, args));
    }
    // lists
    putIterator() {
        this.push(opcode('PutIterator'));
    }
    enterList(start, end) {
        this.push(null);
        this.labels.range(this.pos, 'EnterList', start, end);
    }
    exitList() {
        this.push(opcode('ExitList'));
    }
    enterWithKey(start, end) {
        this.push(null);
        this.labels.range(this.pos, 'EnterWithKey', start, end);
    }
    nextIter(end) {
        this.push(null);
        this.labels.jump(this.pos, 'NextIter', end);
    }
    // vm
    openBlock(_args, _inner) {
        let args = this.constants.expression(this.compile(_args));
        let inner = this.constants.other(_inner);
        this.push(opcode('OpenBlock', inner, args));
    }
    closeBlock() {
        this.push(opcode('CloseBlock'));
    }
    pushRemoteElement() {
        this.push(opcode('PushRemoteElement'));
    }
    popRemoteElement() {
        this.push(opcode('PopRemoteElement'));
    }
    popElement() {
        this.push(opcode('PopElement'));
    }
    label(name) {
        this.labels.label(name, this.nextPos);
    }
    pushChildScope() {
        this.push(opcode('PushChildScope'));
    }
    popScope() {
        this.push(opcode('PopScope'));
    }
    pushDynamicScope() {
        this.push(opcode('PushDynamicScope'));
    }
    popDynamicScope() {
        this.push(opcode('PopDynamicScope'));
    }
    putNull() {
        this.push(opcode('Put', this.constants.NULL_REFERENCE));
    }
    putValue(_expression) {
        let expr = this.constants.expression(this.compileExpression(_expression));
        this.push(opcode('EvaluatePut', expr));
    }
    putArgs(_args) {
        let args = this.constants.expression(this.compile(_args));
        this.push(opcode('PutArgs', args));
    }
    bindDynamicScope(_names) {
        this.push(opcode('BindDynamicScope', this.names(_names)));
    }
    bindPositionalArgs(_names, _symbols) {
        this.push(opcode('BindPositionalArgs', this.names(_names), this.symbols(_symbols)));
    }
    bindNamedArgs(_names, _symbols) {
        this.push(opcode('BindNamedArgs', this.names(_names), this.symbols(_symbols)));
    }
    bindBlocks(_names, _symbols) {
        this.push(opcode('BindBlocks', this.names(_names), this.symbols(_symbols)));
    }
    enter(enter, exit) {
        this.push(null);
        this.labels.range(this.pos, 'Enter', enter, exit);
    }
    exit() {
        this.push(opcode('Exit'));
    }
    evaluate(_block) {
        let block = this.constants.block(_block);
        this.push(opcode('Evaluate', block));
    }
    test(testFunc) {
        let _func;
        if (testFunc === 'const') {
            _func = vm.ConstTest;
        }
        else if (testFunc === 'simple') {
            _func = vm.SimpleTest;
        }
        else if (testFunc === 'environment') {
            _func = vm.EnvironmentTest;
        }
        else if (typeof testFunc === 'function') {
            _func = testFunc;
        }
        else {
            throw new Error('unreachable');
        }
        let func = this.constants.function(_func);
        this.push(opcode('Test', func));
    }
    jump(target) {
        this.push(null);
        this.labels.jump(this.pos, 'Jump', target);
    }
    jumpIf(target) {
        this.push(null);
        this.labels.jump(this.pos, 'JumpIf', target);
    }
    jumpUnless(target) {
        this.push(null);
        this.labels.jump(this.pos, 'JumpUnless', target);
    }
    names(_names) {
        let names = _names.map(n => this.constants.string(n));
        return this.constants.array(names);
    }
    symbols(symbols) {
        return this.constants.array(symbols);
    }
    other(value) {
        return this.constants.other(value);
    }
    args(args) {
        return this.constants.expression(this.compile(args));
    }
    block(block) {
        return this.constants.block(block);
    }
}
function isCompilableExpression(expr) {
    return expr && typeof expr['compile'] === 'function';
}
export default class OpcodeBuilder extends BasicOpcodeBuilder {
    constructor(symbolTable, env) {
        super(symbolTable, env);
        this.component = new ComponentBuilder(this);
    }
    compile(expr) {
        if (isCompilableExpression(expr)) {
            return expr.compile(this);
        }
        else {
            return expr;
        }
    }
    compileExpression(expression) {
        if (expression instanceof CompiledExpression) {
            return expression;
        }
        else {
            return expr(expression, this);
        }
    }
    bindPositionalArgsForLocals(locals) {
        let symbols = Object.keys(locals).map(name => locals[name]);
        this.push(opcode('BindPositionalArgs', this.symbols(symbols)));
    }
    preludeForLayout(layout) {
        let symbols = layout.symbolTable.getSymbols();
        if (symbols.named) {
            let named = symbols.named;
            let namedNames = Object.keys(named);
            let namedSymbols = namedNames.map(n => named[n]);
            this.push(opcode('BindNamedArgs', this.names(namedNames), this.symbols(namedSymbols)));
        }
        this.push(opcode('BindCallerScope'));
        if (symbols.yields) {
            let yields = symbols.yields;
            let yieldNames = Object.keys(yields);
            let yieldSymbols = yieldNames.map(n => yields[n]);
            this.push(opcode('BindBlocks', this.names(yieldNames), this.symbols(yieldSymbols)));
        }
        if (symbols.partialArgs) {
            this.push(opcode('BindPartialArgs', symbols.partialArgs));
        }
    }
    yield(args, to) {
        let yields, partial;
        let inner;
        if (yields = this.symbolTable.getSymbol('yields', to)) {
            inner = new CompiledGetBlockBySymbol(yields, to);
        }
        else if (partial = this.symbolTable.getPartialArgs()) {
            inner = new CompiledInPartialGetBlock(partial, to);
        }
        else {
            throw new Error('[BUG] ${to} is not a valid block name.');
        }
        this.openBlock(args, inner);
        this.closeBlock();
    }
    // TODO
    // come back to this
    labelled(args, callback) {
        if (args)
            this.putArgs(args);
        this.startLabels();
        this.enter('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.stopLabels();
    }
    // TODO
    // come back to this
    iter(callback) {
        this.startLabels();
        this.enterList('BEGIN', 'END');
        this.label('ITER');
        this.nextIter('BREAK');
        this.enterWithKey('BEGIN', 'END');
        this.label('BEGIN');
        callback(this, 'BEGIN', 'END');
        this.label('END');
        this.exit();
        this.jump('ITER');
        this.label('BREAK');
        this.exitList();
        this.stopLabels();
    }
    // TODO
    // come back to this
    unit(callback) {
        this.startLabels();
        callback(this);
        this.stopLabels();
    }
}
//# sourceMappingURL=data:application/json;base64,