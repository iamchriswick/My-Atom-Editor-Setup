import { UpdatingOpcode } from '../../opcodes';
import { ConstReference } from 'glimmer-reference';
import { initializeGuid } from 'glimmer-util';
import { CONSTANT_TAG, ReferenceCache, isConst, isModified } from 'glimmer-reference';
import { APPEND_OPCODES } from '../../opcodes';
APPEND_OPCODES.add("PushChildScope", vm => vm.pushChildScope());
APPEND_OPCODES.add("PopScope", vm => vm.popScope());
APPEND_OPCODES.add("PushDynamicScope", vm => vm.pushDynamicScope());
APPEND_OPCODES.add("PopDynamicScope", vm => vm.popDynamicScope());
APPEND_OPCODES.add("Put", (vm, reference) => {
    vm.frame.setOperand(vm.constants.getReference(reference));
});
APPEND_OPCODES.add("EvaluatePut", (vm, expression) => {
    let expr = vm.constants.getExpression(expression);
    vm.evaluateOperand(expr);
});
APPEND_OPCODES.add("PutArgs", (vm, args) => {
    vm.evaluateArgs(vm.constants.getExpression(args));
});
APPEND_OPCODES.add('BindPositionalArgs', (vm, _symbols) => {
    let symbols = vm.constants.getArray(_symbols);
    vm.bindPositionalArgs(symbols);
});
APPEND_OPCODES.add('BindNamedArgs', (vm, _names, _symbols) => {
    let names = vm.constants.getArray(_names);
    let symbols = vm.constants.getArray(_symbols);
    vm.bindNamedArgs(names, symbols);
});
APPEND_OPCODES.add('BindBlocks', (vm, _names, _symbols) => {
    let names = vm.constants.getArray(_names);
    let symbols = vm.constants.getArray(_symbols);
    console.log(`[VM] OPCODE: BindBlocks ${names.join(',')} ${symbols.join(',')}`);
    vm.bindBlocks(names, symbols);
});
APPEND_OPCODES.add('BindPartialArgs', (vm, symbol) => {
    vm.bindPartialArgs(symbol);
});
APPEND_OPCODES.add('BindCallerScope', vm => vm.bindCallerScope());
APPEND_OPCODES.add('BindDynamicScope', (vm, _names) => {
    let names = vm.constants.getArray(_names);
    vm.bindDynamicScope(names);
});
APPEND_OPCODES.add('Enter', (vm, slice) => vm.enter(slice));
APPEND_OPCODES.add('Exit', (vm) => vm.exit());
APPEND_OPCODES.add('Evaluate', (vm, _block) => {
    let block = vm.constants.getBlock(_block);
    let args = vm.frame.getArgs();
    vm.invokeBlock(block, args);
});
APPEND_OPCODES.add('Jump', (vm, target) => vm.goto(target));
APPEND_OPCODES.add('JumpIf', (vm, target) => {
    let reference = vm.frame.getCondition();
    if (isConst(reference)) {
        if (reference.value()) {
            vm.goto(target);
        }
    }
    else {
        let cache = new ReferenceCache(reference);
        if (cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
APPEND_OPCODES.add('JumpUnless', (vm, target) => {
    let reference = vm.frame.getCondition();
    if (isConst(reference)) {
        if (!reference.value()) {
            vm.goto(target);
        }
    }
    else {
        let cache = new ReferenceCache(reference);
        if (!cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
export const ConstTest = function (ref, _env) {
    return new ConstReference(!!ref.value());
};
export const SimpleTest = function (ref, _env) {
    return ref;
};
export const EnvironmentTest = function (ref, env) {
    return env.toConditionalReference(ref);
};
APPEND_OPCODES.add('Test', (vm, _func) => {
    let operand = vm.frame.getOperand();
    let func = vm.constants.getFunction(_func);
    vm.frame.setCondition(func(operand, vm.env));
});
export class Assert extends UpdatingOpcode {
    constructor(cache) {
        super();
        this.type = "assert";
        this.tag = cache.tag;
        this.cache = cache;
    }
    evaluate(vm) {
        let { cache } = this;
        if (isModified(cache.revalidate())) {
            vm.throw();
        }
    }
    toJSON() {
        let { type, _guid, cache } = this;
        let expected;
        try {
            expected = JSON.stringify(cache.peek());
        }
        catch (e) {
            expected = String(cache.peek());
        }
        return {
            guid: _guid,
            type,
            args: [],
            details: { expected }
        };
    }
}
export class JumpIfNotModifiedOpcode extends UpdatingOpcode {
    constructor(tag, target) {
        super();
        this.target = target;
        this.type = "jump-if-not-modified";
        this.tag = tag;
        this.lastRevision = tag.value();
    }
    evaluate(vm) {
        let { tag, target, lastRevision } = this;
        if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {
            vm.goto(target);
        }
    }
    didModify() {
        this.lastRevision = this.tag.value();
    }
    toJSON() {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.target.inspect())]
        };
    }
}
export class DidModifyOpcode extends UpdatingOpcode {
    constructor(target) {
        super();
        this.target = target;
        this.type = "did-modify";
        this.tag = CONSTANT_TAG;
    }
    evaluate() {
        this.target.didModify();
    }
}
export class LabelOpcode {
    constructor(label) {
        this.tag = CONSTANT_TAG;
        this.type = "label";
        this.label = null;
        this.prev = null;
        this.next = null;
        initializeGuid(this);
        if (label)
            this.label = label;
    }
    evaluate() { }
    inspect() {
        return `${this.label} [${this._guid}]`;
    }
    toJSON() {
        return {
            guid: this._guid,
            type: this.type,
            args: [JSON.stringify(this.inspect())]
        };
    }
}
//# sourceMappingURL=data:application/json;base64,