"use strict";
const handlebars_1 = require("handlebars");
const builders_1 = require("./builders");
const print_1 = require("./generation/print");
const traverse_1 = require("./traversal/traverse");
const walker_1 = require("./traversal/walker");
const simple_html_tokenizer_1 = require("simple-html-tokenizer");
const handlebars_node_visitors_1 = require("./parser/handlebars-node-visitors");
const tokenizer_event_handlers_1 = require("./parser/tokenizer-event-handlers");
exports.syntax = {
    parse: preprocess,
    builders: builders_1.default,
    print: print_1.default,
    traverse: traverse_1.default,
    Walker: walker_1.default
};
function preprocess(html, options) {
    let ast = (typeof html === 'object') ? html : handlebars_1.parse(html);
    let combined = new Parser(html, options).acceptNode(ast);
    if (options && options.plugins && options.plugins.ast) {
        for (let i = 0, l = options.plugins.ast.length; i < l; i++) {
            let plugin = new options.plugins.ast[i](options);
            plugin.syntax = exports.syntax;
            combined = plugin.transform(combined);
        }
    }
    return combined;
}
exports.preprocess = preprocess;
const entityParser = new simple_html_tokenizer_1.EntityParser(simple_html_tokenizer_1.HTML5NamedCharRefs);
function Parser(source, options) {
    this.options = options || {};
    this.elementStack = [];
    this.tokenizer = new simple_html_tokenizer_1.EventedTokenizer(this, entityParser);
    this.currentNode = null;
    this.currentAttribute = null;
    if (typeof source === 'string') {
        this.source = source.split(/(?:\r\n?|\n)/g);
    }
}
exports.Parser = Parser;
for (let key in handlebars_node_visitors_1.default) {
    Parser.prototype[key] = handlebars_node_visitors_1.default[key];
}
for (let key in tokenizer_event_handlers_1.default) {
    Parser.prototype[key] = tokenizer_event_handlers_1.default[key];
}
Parser.prototype.acceptNode = function (node) {
    return this[node.type](node);
};
Parser.prototype.currentElement = function () {
    return this.elementStack[this.elementStack.length - 1];
};
Parser.prototype.sourceForMustache = function (mustache) {
    let firstLine = mustache.loc.start.line - 1;
    let lastLine = mustache.loc.end.line - 1;
    let currentLine = firstLine - 1;
    let firstColumn = mustache.loc.start.column + 2;
    let lastColumn = mustache.loc.end.column - 2;
    let string = [];
    let line;
    if (!this.source) {
        return '{{' + mustache.path.id.original + '}}';
    }
    while (currentLine < lastLine) {
        currentLine++;
        line = this.source[currentLine];
        if (currentLine === firstLine) {
            if (firstLine === lastLine) {
                string.push(line.slice(firstColumn, lastColumn));
            }
            else {
                string.push(line.slice(firstColumn));
            }
        }
        else if (currentLine === lastLine) {
            string.push(line.slice(0, lastColumn));
        }
        else {
            string.push(line);
        }
    }
    return string.join('\n');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMkNBQW1DO0FBQ25DLHlDQUFrQztBQUNsQyw4Q0FBdUM7QUFDdkMsbURBQTRDO0FBQzVDLCtDQUF3QztBQUN4QyxpRUFJK0I7QUFDL0IsZ0ZBQXVFO0FBQ3ZFLGdGQUF1RTtBQUUxRCxRQUFBLE1BQU0sR0FBRztJQUNwQixLQUFLLEVBQUUsVUFBVTtJQUNqQixRQUFRLEVBQVIsa0JBQVE7SUFDUixLQUFLLEVBQUwsZUFBSztJQUNMLFFBQVEsRUFBUixrQkFBUTtJQUNSLE1BQU0sRUFBTixnQkFBTTtDQUNQLENBQUM7QUFFRixvQkFBMkIsSUFBSSxFQUFFLE9BQVE7SUFDdkMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsR0FBRyxJQUFJLEdBQUcsa0JBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxRCxJQUFJLFFBQVEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXpELEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDM0QsSUFBSSxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUVqRCxNQUFNLENBQUMsTUFBTSxHQUFHLGNBQU0sQ0FB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QVcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDbkQsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLENBQUM7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUM7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDIn0=