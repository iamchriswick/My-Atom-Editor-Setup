// Statements
"use strict";
function buildMustache(path, params, hash, raw, loc) {
    return {
        type: "MustacheStatement",
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        escaped: !raw,
        loc: buildLoc(loc)
    };
}
function buildBlock(path, params, hash, program, inverse, loc) {
    return {
        type: "BlockStatement",
        path: buildPath(path),
        params: params ? params.map(buildPath) : [],
        hash: hash || buildHash([]),
        program: program || null,
        inverse: inverse || null,
        loc: buildLoc(loc)
    };
}
function buildElementModifier(path, params, hash, loc) {
    return {
        type: "ElementModifierStatement",
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc)
    };
}
function buildPartial(name, params, hash, indent) {
    return {
        type: "PartialStatement",
        name: name,
        params: params || [],
        hash: hash || buildHash([]),
        indent: indent
    };
}
function buildComment(value, loc) {
    return {
        type: "CommentStatement",
        value: value,
        loc: buildLoc(loc)
    };
}
function buildMustacheComment(value, loc) {
    return {
        type: "MustacheCommentStatement",
        value: value,
        loc: buildLoc(loc)
    };
}
function buildConcat(parts) {
    return {
        type: "ConcatStatement",
        parts: parts || []
    };
}
// Nodes
function buildElement(tag, attributes, modifiers, children, comments, loc) {
    // this is used for backwards compat prior to `comments` being added to the AST
    if (!Array.isArray(comments)) {
        loc = comments;
        comments = [];
    }
    return {
        type: "ElementNode",
        tag: tag || "",
        attributes: attributes || [],
        blockParams: [],
        modifiers: modifiers || [],
        comments: comments || [],
        children: children || [],
        loc: buildLoc(loc)
    };
}
function buildAttr(name, value, loc) {
    return {
        type: "AttrNode",
        name: name,
        value: value,
        loc: buildLoc(loc)
    };
}
function buildText(chars, loc) {
    return {
        type: "TextNode",
        chars: chars || "",
        loc: buildLoc(loc)
    };
}
// Expressions
function buildSexpr(path, params, hash, loc) {
    return {
        type: "SubExpression",
        path: buildPath(path),
        params: params || [],
        hash: hash || buildHash([]),
        loc: buildLoc(loc)
    };
}
function buildPath(original, loc) {
    if (typeof original !== 'string')
        return original;
    let parts = original.split('.');
    if (parts[0] === 'this') {
        parts[0] = null;
    }
    return {
        type: "PathExpression",
        original,
        parts,
        data: false,
        loc: buildLoc(loc)
    };
}
function buildString(value) {
    return {
        type: "StringLiteral",
        value: value,
        original: value
    };
}
function buildBoolean(value) {
    return {
        type: "BooleanLiteral",
        value: value,
        original: value
    };
}
function buildNumber(value) {
    return {
        type: "NumberLiteral",
        value: value,
        original: value
    };
}
function buildNull() {
    return {
        type: "NullLiteral",
        value: null,
        original: null
    };
}
function buildUndefined() {
    return {
        type: "UndefinedLiteral",
        value: undefined,
        original: undefined
    };
}
// Miscellaneous
function buildHash(pairs) {
    return {
        type: "Hash",
        pairs: pairs || []
    };
}
function buildPair(key, value) {
    return {
        type: "HashPair",
        key: key,
        value: value
    };
}
function buildProgram(body, blockParams, loc) {
    return {
        type: "Program",
        body: body || [],
        blockParams: blockParams || [],
        loc: buildLoc(loc)
    };
}
function buildSource(source) {
    return source || null;
}
function buildPosition(line, column) {
    return {
        line: (typeof line === 'number') ? line : null,
        column: (typeof column === 'number') ? column : null
    };
}
function buildLoc(...args) {
    if (args.length === 1) {
        let loc = args[0];
        if (typeof loc === 'object') {
            return {
                source: buildSource(loc.source),
                start: buildPosition(loc.start.line, loc.start.column),
                end: buildPosition(loc.end.line, loc.end.column)
            };
        }
        else {
            return null;
        }
    }
    else {
        let [startLine, startColumn, endLine, endColumn, source] = args;
        return {
            source: buildSource(source),
            start: buildPosition(startLine, startColumn),
            end: buildPosition(endLine, endColumn)
        };
    }
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    mustache: buildMustache,
    block: buildBlock,
    partial: buildPartial,
    comment: buildComment,
    mustacheComment: buildMustacheComment,
    element: buildElement,
    elementModifier: buildElementModifier,
    attr: buildAttr,
    text: buildText,
    sexpr: buildSexpr,
    path: buildPath,
    string: buildString,
    boolean: buildBoolean,
    number: buildNumber,
    undefined: buildUndefined,
    null: buildNull,
    concat: buildConcat,
    hash: buildHash,
    pair: buildPair,
    program: buildProgram,
    loc: buildLoc,
    pos: buildPosition
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYnVpbGRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYTs7QUFFYix1QkFBdUIsSUFBSSxFQUFFLE1BQU8sRUFBRSxJQUFLLEVBQUUsR0FBSSxFQUFFLEdBQUk7SUFDckQsTUFBTSxDQUFDO1FBQ0wsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNyQixNQUFNLEVBQUUsTUFBTSxJQUFJLEVBQUU7UUFDcEIsSUFBSSxFQUFFLElBQUksSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQzNCLE9BQU8sRUFBRSxDQUFDLEdBQUc7UUFDYixHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQztLQUNuQixDQUFDO0FBQ0osQ0FBQztBQUVELG9CQUFvQixJQUFJLEVBQUUsTUFBTyxFQUFFLElBQUssRUFBRSxPQUFRLEVBQUUsT0FBUSxFQUFFLEdBQUk7SUFDaEUsTUFBTSxDQUFDO1FBQ0wsSUFBSSxFQUFFLGdCQUFnQjtRQUN0QixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNyQixNQUFNLEVBQUUsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUMzQyxJQUFJLEVBQUUsSUFBSSxJQUFJLFNBQVMsQ0FBQyxFQUFFLENBQUM7UUFDM0IsT0FBTyxFQUFFLE9BQU8sSUFBSSxJQUFJO1FBQ3hCLE9BQU8sRUFBRSxPQUFPLElBQUksSUFBSTtRQUN4QixHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQztLQUNuQixDQUFDO0FBQ0osQ0FBQztBQUVELDhCQUE4QixJQUFJLEVBQUUsTUFBTyxFQUFFLElBQUssRUFBRSxHQUFJO0lBQ3RELE1BQU0sQ0FBQztRQUNMLElBQUksRUFBRSwwQkFBMEI7UUFDaEMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJ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